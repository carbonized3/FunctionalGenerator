
FUNCTIONAL_GENERATOR_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a6a0  0800a6a0  0001a6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf4  0800abf4  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf4  0800abf4  0001abf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abfc  0800abfc  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abfc  0800abfc  0001abfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac00  0800ac00  0001ac00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0800ac04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ac0  20000314  0800af18  00020314  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007dd4  0800af18  00027dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cfc  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e5  00000000  00000000  00035040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00038428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00039750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0da  00000000  00000000  0003a918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b43  00000000  00000000  000549f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098575  00000000  00000000  0006a535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006100  00000000  00000000  00102afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000314 	.word	0x20000314
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a684 	.word	0x0800a684

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000318 	.word	0x20000318
 80001dc:	0800a684 	.word	0x0800a684

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <DAC_stop>:

static float one_dac_tick;
static uint16_t tim3_counter_period;

void DAC_stop()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <DAC_stop+0x1c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->ODR = 0;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <DAC_stop+0x20>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Stop_IT(&htim3);
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <DAC_stop+0x24>)
 8000fae:	f003 fcc5 	bl	800493c <HAL_TIM_Base_Stop_IT>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	200005e8 	.word	0x200005e8

08000fc4 <DAC_init>:
void DAC_init(signal_t signal, float freq)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	ed87 0a00 	vstr	s0, [r7]
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if( signal == SAW || signal == REVERSE_SAW ) // Для обычной и обратной пилы настройки одинаковые
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d002      	beq.n	8000fde <DAC_init+0x1a>
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d10d      	bne.n	8000ffa <DAC_init+0x36>
	{
		one_dac_tick = (1000 / freq) / (51);
 8000fde:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800108c <DAC_init+0xc8>
 8000fe2:	edd7 7a00 	vldr	s15, [r7]
 8000fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fea:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001090 <DAC_init+0xcc>
 8000fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <DAC_init+0xd0>)
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
 8000ff8:	e020      	b.n	800103c <DAC_init+0x78>
	}
	else if(signal == TRIANGLE)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10d      	bne.n	800101c <DAC_init+0x58>
	{
		/*	Частота таймера базовая будет 64 Мгц. Предделитель допустим всегда 1. Шаг ЦАПа 5
			51*2 = 102 ступенек если выбрать шаг 5. Вычислили тик ЦАПа в мкс чтобы настроить на него таймер. 	*/
		one_dac_tick = (1000 / freq) / (102);
 8001000:	eddf 6a22 	vldr	s13, [pc, #136]	; 800108c <DAC_init+0xc8>
 8001004:	edd7 7a00 	vldr	s15, [r7]
 8001008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800100c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001098 <DAC_init+0xd4>
 8001010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <DAC_init+0xd0>)
 8001016:	edc3 7a00 	vstr	s15, [r3]
 800101a:	e00f      	b.n	800103c <DAC_init+0x78>
	}
	else if( signal == SIN )
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d10c      	bne.n	800103c <DAC_init+0x78>
	{
		one_dac_tick = (1000 / freq) / (256);
 8001022:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800108c <DAC_init+0xc8>
 8001026:	edd7 7a00 	vldr	s15, [r7]
 800102a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800102e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800109c <DAC_init+0xd8>
 8001032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <DAC_init+0xd0>)
 8001038:	edc3 7a00 	vstr	s15, [r3]
	}
	tim3_counter_period = one_dac_tick / 0.015625;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <DAC_init+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa89 	bl	8000558 <__aeabi_f2d>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <DAC_init+0xdc>)
 800104c:	f7ff fc06 	bl	800085c <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fdae 	bl	8000bb8 <__aeabi_d2uiz>
 800105c:	4603      	mov	r3, r0
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <DAC_init+0xe0>)
 8001062:	801a      	strh	r2, [r3, #0]
	TIM3->ARR = tim3_counter_period;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <DAC_init+0xe0>)
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <DAC_init+0xe4>)
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0;
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <DAC_init+0xe4>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);		// Запустили таймер
 8001072:	480e      	ldr	r0, [pc, #56]	; (80010ac <DAC_init+0xe8>)
 8001074:	f003 fc00 	bl	8004878 <HAL_TIM_Base_Start_IT>
	TIM3->SR &= ~(TIM_SR_UIF);			// Сбросим флаг
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <DAC_init+0xe4>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <DAC_init+0xe4>)
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	6113      	str	r3, [r2, #16]
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	447a0000 	.word	0x447a0000
 8001090:	424c0000 	.word	0x424c0000
 8001094:	20000330 	.word	0x20000330
 8001098:	42cc0000 	.word	0x42cc0000
 800109c:	43800000 	.word	0x43800000
 80010a0:	3f900000 	.word	0x3f900000
 80010a4:	20000334 	.word	0x20000334
 80010a8:	40000400 	.word	0x40000400
 80010ac:	200005e8 	.word	0x200005e8

080010b0 <DAC_writeSin>:

void DAC_writeSin()
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
	int j = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
	while( j < sizeof(sin_tab)/sizeof(uint8_t) )
 80010ba:	e014      	b.n	80010e6 <DAC_writeSin+0x36>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <DAC_writeSin+0x4c>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00e      	beq.n	80010e6 <DAC_writeSin+0x36>
		{
			TIM3->SR &= ~(TIM_SR_UIF);
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <DAC_writeSin+0x4c>)
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <DAC_writeSin+0x4c>)
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	6113      	str	r3, [r2, #16]
			GPIOA->ODR = sin_tab[j];
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <DAC_writeSin+0x50>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <DAC_writeSin+0x54>)
 80010de:	615a      	str	r2, [r3, #20]
			j++;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
	while( j < sizeof(sin_tab)/sizeof(uint8_t) )
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2bff      	cmp	r3, #255	; 0xff
 80010ea:	d9e7      	bls.n	80010bc <DAC_writeSin+0xc>
		}
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40000400 	.word	0x40000400
 8001100:	20000000 	.word	0x20000000
 8001104:	40020000 	.word	0x40020000

08001108 <DAC_writeTriangle>:

void DAC_writeTriangle()	// freq in kHz
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int j = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
	while (j < 255)
 8001112:	e011      	b.n	8001138 <DAC_writeTriangle+0x30>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <DAC_writeTriangle+0x70>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00b      	beq.n	8001138 <DAC_writeTriangle+0x30>
		{
			TIM3->SR &= ~(TIM_SR_UIF);
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <DAC_writeTriangle+0x70>)
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <DAC_writeTriangle+0x70>)
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	6113      	str	r3, [r2, #16]
			GPIOA->ODR = j;
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <DAC_writeTriangle+0x74>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6153      	str	r3, [r2, #20]
			j += 5;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3305      	adds	r3, #5
 8001136:	607b      	str	r3, [r7, #4]
	while (j < 255)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2bfe      	cmp	r3, #254	; 0xfe
 800113c:	ddea      	ble.n	8001114 <DAC_writeTriangle+0xc>
		}
	}
	while(j > 0)
 800113e:	e011      	b.n	8001164 <DAC_writeTriangle+0x5c>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <DAC_writeTriangle+0x70>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <DAC_writeTriangle+0x5c>
		{
			TIM3->SR &= ~(TIM_SR_UIF);
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <DAC_writeTriangle+0x70>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	4a09      	ldr	r2, [pc, #36]	; (8001178 <DAC_writeTriangle+0x70>)
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	6113      	str	r3, [r2, #16]
			GPIOA->ODR = j;
 8001158:	4a08      	ldr	r2, [pc, #32]	; (800117c <DAC_writeTriangle+0x74>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6153      	str	r3, [r2, #20]
			j -= 5;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3b05      	subs	r3, #5
 8001162:	607b      	str	r3, [r7, #4]
	while(j > 0)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	dcea      	bgt.n	8001140 <DAC_writeTriangle+0x38>
		}
	}
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40000400 	.word	0x40000400
 800117c:	40020000 	.word	0x40020000

08001180 <DAC_writeSaw>:
void DAC_writeSaw()		// in kHz
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
	/*	Частота таймера базовая будет 64 Мгц. Предделитель допустим всегда 1. Шаг ЦАПа 5. 	*/
	int j = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
	while (j <= 255)
 800118a:	e011      	b.n	80011b0 <DAC_writeSaw+0x30>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <DAC_writeSaw+0x44>)
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <DAC_writeSaw+0x30>
		{
			GPIOA->ODR = j;
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <DAC_writeSaw+0x48>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6153      	str	r3, [r2, #20]
			TIM3->SR &= ~(TIM_SR_UIF);
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <DAC_writeSaw+0x44>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <DAC_writeSaw+0x44>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	6113      	str	r3, [r2, #16]
			j += 5;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3305      	adds	r3, #5
 80011ae:	607b      	str	r3, [r7, #4]
	while (j <= 255)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2bff      	cmp	r3, #255	; 0xff
 80011b4:	ddea      	ble.n	800118c <DAC_writeSaw+0xc>
		}
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40000400 	.word	0x40000400
 80011c8:	40020000 	.word	0x40020000

080011cc <DAC_writeReverseSaw>:
void DAC_writeReverseSaw()		// in kHz
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
	/*	Частота таймера базовая будет 64 Мгц. Предделитель допустим всегда 1. Шаг ЦАПа 5. 	*/
	int j = 255;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	607b      	str	r3, [r7, #4]
	while (j > 0)
 80011d6:	e011      	b.n	80011fc <DAC_writeReverseSaw+0x30>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <DAC_writeReverseSaw+0x44>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00b      	beq.n	80011fc <DAC_writeReverseSaw+0x30>
		{
			GPIOA->ODR = j;
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <DAC_writeReverseSaw+0x48>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6153      	str	r3, [r2, #20]
			TIM3->SR &= ~(TIM_SR_UIF);
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <DAC_writeReverseSaw+0x44>)
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <DAC_writeReverseSaw+0x44>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6113      	str	r3, [r2, #16]
			j -= 5;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3b05      	subs	r3, #5
 80011fa:	607b      	str	r3, [r7, #4]
	while (j > 0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dcea      	bgt.n	80011d8 <DAC_writeReverseSaw+0xc>
		}
	}
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40000400 	.word	0x40000400
 8001214:	40020000 	.word	0x40020000

08001218 <MAX7219_write>:
#include "MAX7219.h"

static max7219_init_t *MAX7219_Handler;	// Через неё мы все делаем

static HAL_StatusTypeDef MAX7219_write(uint8_t reg, uint8_t data)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	460a      	mov	r2, r1
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef result;
	uint8_t value[2];
	value[0] = reg;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	733b      	strb	r3, [r7, #12]
	value[1] = data;
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	737b      	strb	r3, [r7, #13]

//	HAL_GPIO_WritePin(MAX7219_Handler->CS_PORT, MAX7219_Handler-> CS_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <MAX7219_write+0x4c>)
 8001236:	f002 fb7d 	bl	8003934 <HAL_GPIO_WritePin>
//	CS_reset(MAX7219_Handler->CS_PORT, MAX7219_Handler-> CS_PIN);		// Строб --\__
	result = HAL_SPI_Transmit(&hspi1, value, 2, 1000);	// Передали сначала регистр, потом инфу в него
 800123a:	f107 010c 	add.w	r1, r7, #12
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	2202      	movs	r2, #2
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <MAX7219_write+0x50>)
 8001246:	f003 f8c0 	bl	80043ca <HAL_SPI_Transmit>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]
//	CS_set(MAX7219_Handler->CS_PORT, MAX7219_Handler-> CS_PIN);		// Строб __/--
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2140      	movs	r1, #64	; 0x40
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <MAX7219_write+0x4c>)
 8001254:	f002 fb6e 	bl	8003934 <HAL_GPIO_WritePin>
	return result;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400
 8001268:	20000590 	.word	0x20000590

0800126c <MAX7219_setDecode>:
//---------------------------------------------------------
static HAL_StatusTypeDef MAX7219_setDecode(uint8_t mode)	// Функция задающая режим декодирования для сегментов
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	if(MAX7219_Handler->decode_mode != mode)	// Если мы завдали новый режим, то нужно все поменять
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MAX7219_setDecode+0x38>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7b1b      	ldrb	r3, [r3, #12]
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	429a      	cmp	r2, r3
 8001280:	d00a      	beq.n	8001298 <MAX7219_setDecode+0x2c>
	{
		MAX7219_Handler->decode_mode = mode;	// Присовим новый режим, чтобы его потом отслеживать
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MAX7219_setDecode+0x38>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	731a      	strb	r2, [r3, #12]
		return ( MAX7219_write(MAX7219_DECODE_MODE_REG, mode) );	// Записали этот режим в регистр
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4619      	mov	r1, r3
 800128e:	2009      	movs	r0, #9
 8001290:	f7ff ffc2 	bl	8001218 <MAX7219_write>
 8001294:	4603      	mov	r3, r0
 8001296:	e000      	b.n	800129a <MAX7219_setDecode+0x2e>
	}
	return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000338 	.word	0x20000338

080012a8 <MAX7219_convertSymbol>:
{
//	MAX7219_setDecode(MAX7219_DECODE_FOR_ALL_DIGITS);
	MAX7219_write(seg, digit);			// И записали то что хотели
}
//---------------------------------------------------------
static char MAX7219_convertSymbol(char symbol) {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	switch(symbol) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b5a      	cmp	r3, #90	; 0x5a
 80012b6:	f200 8117 	bhi.w	80014e8 <MAX7219_convertSymbol+0x240>
 80012ba:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <MAX7219_convertSymbol+0x18>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	0800142d 	.word	0x0800142d
 80012c4:	08001431 	.word	0x08001431
 80012c8:	08001435 	.word	0x08001435
 80012cc:	08001439 	.word	0x08001439
 80012d0:	0800143d 	.word	0x0800143d
 80012d4:	08001441 	.word	0x08001441
 80012d8:	08001445 	.word	0x08001445
 80012dc:	08001449 	.word	0x08001449
 80012e0:	0800144d 	.word	0x0800144d
 80012e4:	08001451 	.word	0x08001451
 80012e8:	080014e9 	.word	0x080014e9
 80012ec:	080014e9 	.word	0x080014e9
 80012f0:	080014e9 	.word	0x080014e9
 80012f4:	080014e9 	.word	0x080014e9
 80012f8:	080014e9 	.word	0x080014e9
 80012fc:	080014e9 	.word	0x080014e9
 8001300:	080014e9 	.word	0x080014e9
 8001304:	080014e9 	.word	0x080014e9
 8001308:	080014e9 	.word	0x080014e9
 800130c:	080014e9 	.word	0x080014e9
 8001310:	080014e9 	.word	0x080014e9
 8001314:	080014e9 	.word	0x080014e9
 8001318:	080014e9 	.word	0x080014e9
 800131c:	080014e9 	.word	0x080014e9
 8001320:	080014e9 	.word	0x080014e9
 8001324:	080014e9 	.word	0x080014e9
 8001328:	080014e9 	.word	0x080014e9
 800132c:	080014e9 	.word	0x080014e9
 8001330:	080014e9 	.word	0x080014e9
 8001334:	080014e9 	.word	0x080014e9
 8001338:	080014e9 	.word	0x080014e9
 800133c:	080014e9 	.word	0x080014e9
 8001340:	080014e9 	.word	0x080014e9
 8001344:	080014e9 	.word	0x080014e9
 8001348:	080014e9 	.word	0x080014e9
 800134c:	080014e9 	.word	0x080014e9
 8001350:	080014e9 	.word	0x080014e9
 8001354:	080014e9 	.word	0x080014e9
 8001358:	080014e9 	.word	0x080014e9
 800135c:	080014e9 	.word	0x080014e9
 8001360:	080014e9 	.word	0x080014e9
 8001364:	080014e9 	.word	0x080014e9
 8001368:	080014e9 	.word	0x080014e9
 800136c:	080014e9 	.word	0x080014e9
 8001370:	080014e9 	.word	0x080014e9
 8001374:	080014e5 	.word	0x080014e5
 8001378:	080014e9 	.word	0x080014e9
 800137c:	080014e9 	.word	0x080014e9
 8001380:	08001455 	.word	0x08001455
 8001384:	08001459 	.word	0x08001459
 8001388:	0800145d 	.word	0x0800145d
 800138c:	08001461 	.word	0x08001461
 8001390:	08001465 	.word	0x08001465
 8001394:	08001469 	.word	0x08001469
 8001398:	0800146d 	.word	0x0800146d
 800139c:	08001471 	.word	0x08001471
 80013a0:	08001475 	.word	0x08001475
 80013a4:	08001479 	.word	0x08001479
 80013a8:	080014e9 	.word	0x080014e9
 80013ac:	080014e9 	.word	0x080014e9
 80013b0:	080014e9 	.word	0x080014e9
 80013b4:	080014e9 	.word	0x080014e9
 80013b8:	080014e9 	.word	0x080014e9
 80013bc:	080014e9 	.word	0x080014e9
 80013c0:	080014e9 	.word	0x080014e9
 80013c4:	0800147d 	.word	0x0800147d
 80013c8:	08001481 	.word	0x08001481
 80013cc:	08001485 	.word	0x08001485
 80013d0:	08001489 	.word	0x08001489
 80013d4:	0800148d 	.word	0x0800148d
 80013d8:	08001491 	.word	0x08001491
 80013dc:	08001495 	.word	0x08001495
 80013e0:	08001499 	.word	0x08001499
 80013e4:	0800149d 	.word	0x0800149d
 80013e8:	080014a1 	.word	0x080014a1
 80013ec:	080014a5 	.word	0x080014a5
 80013f0:	080014a9 	.word	0x080014a9
 80013f4:	080014ad 	.word	0x080014ad
 80013f8:	080014b1 	.word	0x080014b1
 80013fc:	080014b5 	.word	0x080014b5
 8001400:	080014b9 	.word	0x080014b9
 8001404:	080014bd 	.word	0x080014bd
 8001408:	080014c1 	.word	0x080014c1
 800140c:	080014c5 	.word	0x080014c5
 8001410:	080014c9 	.word	0x080014c9
 8001414:	080014cd 	.word	0x080014cd
 8001418:	080014d1 	.word	0x080014d1
 800141c:	080014d5 	.word	0x080014d5
 8001420:	080014d9 	.word	0x080014d9
 8001424:	080014dd 	.word	0x080014dd
 8001428:	080014e1 	.word	0x080014e1
		case 0: return _0;
 800142c:	237e      	movs	r3, #126	; 0x7e
 800142e:	e05c      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 1: return _1;
 8001430:	2330      	movs	r3, #48	; 0x30
 8001432:	e05a      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 2: return _2;
 8001434:	236d      	movs	r3, #109	; 0x6d
 8001436:	e058      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 3: return _3;
 8001438:	2379      	movs	r3, #121	; 0x79
 800143a:	e056      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 4: return _4;
 800143c:	2333      	movs	r3, #51	; 0x33
 800143e:	e054      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 5: return _5;
 8001440:	235b      	movs	r3, #91	; 0x5b
 8001442:	e052      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 6: return _6;
 8001444:	235f      	movs	r3, #95	; 0x5f
 8001446:	e050      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 7: return _7;
 8001448:	2370      	movs	r3, #112	; 0x70
 800144a:	e04e      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 8: return _8;
 800144c:	237f      	movs	r3, #127	; 0x7f
 800144e:	e04c      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 9: return _9;
 8001450:	237b      	movs	r3, #123	; 0x7b
 8001452:	e04a      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '0': return _0;
 8001454:	237e      	movs	r3, #126	; 0x7e
 8001456:	e048      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '1': return _1;
 8001458:	2330      	movs	r3, #48	; 0x30
 800145a:	e046      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '2': return _2;
 800145c:	236d      	movs	r3, #109	; 0x6d
 800145e:	e044      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '3': return _3;
 8001460:	2379      	movs	r3, #121	; 0x79
 8001462:	e042      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '4': return _4;
 8001464:	2333      	movs	r3, #51	; 0x33
 8001466:	e040      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '5': return _5;
 8001468:	235b      	movs	r3, #91	; 0x5b
 800146a:	e03e      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '6': return _6;
 800146c:	235f      	movs	r3, #95	; 0x5f
 800146e:	e03c      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '7': return _7;
 8001470:	2370      	movs	r3, #112	; 0x70
 8001472:	e03a      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '8': return _8;
 8001474:	237f      	movs	r3, #127	; 0x7f
 8001476:	e038      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '9': return _9;
 8001478:	237b      	movs	r3, #123	; 0x7b
 800147a:	e036      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'A': return _A;
 800147c:	2377      	movs	r3, #119	; 0x77
 800147e:	e034      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'B': return _B;
 8001480:	231f      	movs	r3, #31
 8001482:	e032      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'C': return _C;
 8001484:	234e      	movs	r3, #78	; 0x4e
 8001486:	e030      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'D': return _D;
 8001488:	233d      	movs	r3, #61	; 0x3d
 800148a:	e02e      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'E': return _E;
 800148c:	234f      	movs	r3, #79	; 0x4f
 800148e:	e02c      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'F': return _F;
 8001490:	2347      	movs	r3, #71	; 0x47
 8001492:	e02a      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'G': return _G;
 8001494:	235e      	movs	r3, #94	; 0x5e
 8001496:	e028      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'H': return _H;
 8001498:	2337      	movs	r3, #55	; 0x37
 800149a:	e026      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'I': return _I;
 800149c:	2330      	movs	r3, #48	; 0x30
 800149e:	e024      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'J': return _J;
 80014a0:	233c      	movs	r3, #60	; 0x3c
 80014a2:	e022      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'K': return _K;
 80014a4:	232f      	movs	r3, #47	; 0x2f
 80014a6:	e020      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'L': return _L;
 80014a8:	230e      	movs	r3, #14
 80014aa:	e01e      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'M': return _M;
 80014ac:	2355      	movs	r3, #85	; 0x55
 80014ae:	e01c      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'N': return _N;
 80014b0:	2315      	movs	r3, #21
 80014b2:	e01a      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'O': return _O;
 80014b4:	231d      	movs	r3, #29
 80014b6:	e018      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'P': return _P;
 80014b8:	2367      	movs	r3, #103	; 0x67
 80014ba:	e016      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'Q': return _Q;
 80014bc:	2373      	movs	r3, #115	; 0x73
 80014be:	e014      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'R': return _R;
 80014c0:	2305      	movs	r3, #5
 80014c2:	e012      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'S': return _S;
 80014c4:	235b      	movs	r3, #91	; 0x5b
 80014c6:	e010      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'T': return _T;
 80014c8:	230f      	movs	r3, #15
 80014ca:	e00e      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'U': return _U;
 80014cc:	233e      	movs	r3, #62	; 0x3e
 80014ce:	e00c      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'V': return _V;
 80014d0:	231c      	movs	r3, #28
 80014d2:	e00a      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'W': return _W;
 80014d4:	235c      	movs	r3, #92	; 0x5c
 80014d6:	e008      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'X': return _X;
 80014d8:	2349      	movs	r3, #73	; 0x49
 80014da:	e006      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'Y': return _Y;
 80014dc:	233b      	movs	r3, #59	; 0x3b
 80014de:	e004      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case 'Z': return _Z;
 80014e0:	236d      	movs	r3, #109	; 0x6d
 80014e2:	e002      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		case '-': return _MINUS;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <MAX7219_convertSymbol+0x242>
		break;
		default: return 0;
 80014e8:	2300      	movs	r3, #0
	}
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <MAX7219_sendOneChar>:
//---------------------------------------------------------
void MAX7219_sendOneChar(uint8_t seg, char c)			// Функция преобразует к виду семисегментника и передаёт дальше
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
	MAX7219_write(seg, MAX7219_convertSymbol( c ));			// И записали то что хотели
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fecc 	bl	80012a8 <MAX7219_convertSymbol>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fe7d 	bl	8001218 <MAX7219_write>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <MAX7219_sendOffsetString>:
//---------------------------------------------------------
void MAX7219_sendOffsetString(uint8_t offset, char *str)	// Функция записи строки со смещением
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	6039      	str	r1, [r7, #0]
 8001530:	71fb      	strb	r3, [r7, #7]
	int seg_iter = MAX7219_SEGMENTS_AMOUNT;		// Итератор сегментов
 8001532:	2308      	movs	r3, #8
 8001534:	60fb      	str	r3, [r7, #12]

	if (strlen(str) > 8) return;				// Проверка на валидность строки
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	f7fe fe52 	bl	80001e0 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	2b08      	cmp	r3, #8
 8001540:	d822      	bhi.n	8001588 <MAX7219_sendOffsetString+0x62>
	MAX7219_setDecode(MAX7219_NO_DECODE);		// Убрали декодирование
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fe92 	bl	800126c <MAX7219_setDecode>
	for(uint8_t i = 0; str[i] != '\0'; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	72fb      	strb	r3, [r7, #11]
 800154c:	e015      	b.n	800157a <MAX7219_sendOffsetString+0x54>
	{
		if((seg_iter - offset) == 0) break;		// Чтобы случайно не записать в другой регистр
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	429a      	cmp	r2, r3
 8001554:	d01a      	beq.n	800158c <MAX7219_sendOffsetString+0x66>
		MAX7219_sendOneChar( (seg_iter - offset), str[i] );
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b2d8      	uxtb	r0, r3
 8001560:	7afb      	ldrb	r3, [r7, #11]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff ffc5 	bl	80014f8 <MAX7219_sendOneChar>
		seg_iter--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3b01      	subs	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; str[i] != '\0'; i++)
 8001574:	7afb      	ldrb	r3, [r7, #11]
 8001576:	3301      	adds	r3, #1
 8001578:	72fb      	strb	r3, [r7, #11]
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1e3      	bne.n	800154e <MAX7219_sendOffsetString+0x28>
 8001586:	e002      	b.n	800158e <MAX7219_sendOffsetString+0x68>
	if (strlen(str) > 8) return;				// Проверка на валидность строки
 8001588:	bf00      	nop
 800158a:	e000      	b.n	800158e <MAX7219_sendOffsetString+0x68>
		if((seg_iter - offset) == 0) break;		// Чтобы случайно не записать в другой регистр
 800158c:	bf00      	nop
		/*	Передали функции записи в регистр, адрес сегмента и преобразованный char в семисегментный символ	*/
	}
}
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <MAX7219_sendString>:
//---------------------------------------------------------
void MAX7219_sendString(char *str)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	int seg_iter = 8;							// Итератор сегментов
 800159c:	2308      	movs	r3, #8
 800159e:	60fb      	str	r3, [r7, #12]
	if (strlen(str) > 8) return;				// Проверка на валидность строки
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7fe fe1d 	bl	80001e0 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d81b      	bhi.n	80015e4 <MAX7219_sendString+0x50>
	MAX7219_setDecode(MAX7219_NO_DECODE);		// Убрали декодирование
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fe5d 	bl	800126c <MAX7219_setDecode>
	for(uint8_t i = 0; str[i] != '\0'; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	72fb      	strb	r3, [r7, #11]
 80015b6:	e00e      	b.n	80015d6 <MAX7219_sendString+0x42>
	{
		MAX7219_sendOneChar( seg_iter, str[i]);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	b2d8      	uxtb	r0, r3
 80015bc:	7afb      	ldrb	r3, [r7, #11]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff ff97 	bl	80014f8 <MAX7219_sendOneChar>
		seg_iter--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; str[i] != '\0'; i++)
 80015d0:	7afb      	ldrb	r3, [r7, #11]
 80015d2:	3301      	adds	r3, #1
 80015d4:	72fb      	strb	r3, [r7, #11]
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ea      	bne.n	80015b8 <MAX7219_sendString+0x24>
 80015e2:	e000      	b.n	80015e6 <MAX7219_sendString+0x52>
	if (strlen(str) > 8) return;				// Проверка на валидность строки
 80015e4:	bf00      	nop
		/*	Передали функции записи в регистр, адрес сегмента и преобразованный char в семисегментный символ	*/
	}
}
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <MAX7219_sendFloatNumber>:
{
	MAX7219_sendString("Error");
}
//---------------------------------------------------------
uint8_t MAX7219_sendFloatNumber(float number)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	ed87 0a01 	vstr	s0, [r7, #4]
	int seg_iter = MAX7219_SEGMENTS_AMOUNT;
 80015f6:	2308      	movs	r3, #8
 80015f8:	617b      	str	r3, [r7, #20]
	char str[9];
	sprintf(str, "%.1f", number);	// Завернули в строку
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7fe ffac 	bl	8000558 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	f107 0008 	add.w	r0, r7, #8
 8001608:	4926      	ldr	r1, [pc, #152]	; (80016a4 <MAX7219_sendFloatNumber+0xb8>)
 800160a:	f006 fdd1 	bl	80081b0 <siprintf>

	for(uint8_t i = 0; str[i] != '\0'; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	74fb      	strb	r3, [r7, #19]
 8001612:	e034      	b.n	800167e <MAX7219_sendFloatNumber+0x92>
	{
		if( str[i+1] == '.') {
 8001614:	7cfb      	ldrb	r3, [r7, #19]
 8001616:	3301      	adds	r3, #1
 8001618:	3318      	adds	r3, #24
 800161a:	443b      	add	r3, r7
 800161c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001620:	2b2e      	cmp	r3, #46	; 0x2e
 8001622:	d112      	bne.n	800164a <MAX7219_sendFloatNumber+0x5e>
			MAX7219_write( seg_iter, MAX7219_convertSymbol( str[i] ) | POINT );	// Добавим 0х80 чтобы вывести в тот же сегмент точку
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	b2dc      	uxtb	r4, r3
 8001628:	7cfb      	ldrb	r3, [r7, #19]
 800162a:	3318      	adds	r3, #24
 800162c:	443b      	add	r3, r7
 800162e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fe38 	bl	80012a8 <MAX7219_convertSymbol>
 8001638:	4603      	mov	r3, r0
 800163a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff fde8 	bl	8001218 <MAX7219_write>
 8001648:	e011      	b.n	800166e <MAX7219_sendFloatNumber+0x82>
		}
		else if(str[i] == '.') {
 800164a:	7cfb      	ldrb	r3, [r7, #19]
 800164c:	3318      	adds	r3, #24
 800164e:	443b      	add	r3, r7
 8001650:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001654:	2b2e      	cmp	r3, #46	; 0x2e
 8001656:	d00e      	beq.n	8001676 <MAX7219_sendFloatNumber+0x8a>
			continue;
		}
		else {
			MAX7219_sendOneChar( seg_iter, str[i] );
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	7cfb      	ldrb	r3, [r7, #19]
 800165e:	3318      	adds	r3, #24
 8001660:	443b      	add	r3, r7
 8001662:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f7ff ff45 	bl	80014f8 <MAX7219_sendOneChar>
		}
		seg_iter--;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3b01      	subs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e000      	b.n	8001678 <MAX7219_sendFloatNumber+0x8c>
			continue;
 8001676:	bf00      	nop
	for(uint8_t i = 0; str[i] != '\0'; i++)
 8001678:	7cfb      	ldrb	r3, [r7, #19]
 800167a:	3301      	adds	r3, #1
 800167c:	74fb      	strb	r3, [r7, #19]
 800167e:	7cfb      	ldrb	r3, [r7, #19]
 8001680:	3318      	adds	r3, #24
 8001682:	443b      	add	r3, r7
 8001684:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1c3      	bne.n	8001614 <MAX7219_sendFloatNumber+0x28>
		/*	Передали функции записи в регистр, адрес сегмента и преобразованный char в семисегментный символ	*/
	}

	return (strlen(str));
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fda5 	bl	80001e0 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b2db      	uxtb	r3, r3
	/* Это нужно для того, чтобы знать смещение и приписать размерность числу (205.5 Hz к примеру).
	  	  Используется для функции MAX7219_sendOffsetString() */
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0800a6a8 	.word	0x0800a6a8

080016a8 <MAX7219_sendDuty>:
		}
	}
}
//---------------------------------------------------------
uint8_t MAX7219_sendDuty(float duty)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t offset;
	offset = MAX7219_sendFloatNumber(duty);
 80016b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80016b6:	f7ff ff99 	bl	80015ec <MAX7219_sendFloatNumber>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
	return offset;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MAX7219_sendFreq>:
//---------------------------------------------------------
uint8_t MAX7219_sendFreq(float freq)	// Функция для отображения частоты на дисплее
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t offset;
	offset = MAX7219_sendFloatNumber(freq);
 80016d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80016d6:	f7ff ff89 	bl	80015ec <MAX7219_sendFloatNumber>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
	MAX7219_sendOffsetString(offset, "KHZ");
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	4904      	ldr	r1, [pc, #16]	; (80016f4 <MAX7219_sendFreq+0x2c>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff1f 	bl	8001526 <MAX7219_sendOffsetString>
	return offset;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	0800a6b0 	.word	0x0800a6b0

080016f8 <MAX7219_clearOneSegment>:
//---------------------------------------------------------
void MAX7219_clearOneSegment(uint8_t seg)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	MAX7219_sendOffsetString(seg, " ");
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	4903      	ldr	r1, [pc, #12]	; (8001714 <MAX7219_clearOneSegment+0x1c>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff0d 	bl	8001526 <MAX7219_sendOffsetString>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	0800a6b4 	.word	0x0800a6b4

08001718 <MAX7219_clearAll>:
void MAX7219_blinkOneSegment(uint8_t seg)
{

}
void MAX7219_clearAll()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
	for (uint8_t i = MAX7219_SEGMENT_0; i <= MAX7219_SEGMENT_7; i++)
 800171e:	2301      	movs	r3, #1
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	e007      	b.n	8001734 <MAX7219_clearAll+0x1c>
	{
 		MAX7219_write(i, 0);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fd75 	bl	8001218 <MAX7219_write>
	for (uint8_t i = MAX7219_SEGMENT_0; i <= MAX7219_SEGMENT_7; i++)
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	3301      	adds	r3, #1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d9f4      	bls.n	8001724 <MAX7219_clearAll+0xc>
	}
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MAX7219_init>:
//---------------------------------------------------------
HAL_StatusTypeDef MAX7219_init(max7219_init_t *cfg)		// Инициализация через структуру
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	MAX7219_Handler = cfg;
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <MAX7219_init+0x54>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
	/* Присвоили указатель на структуру с заполненными полями пользователем в ту, которая используется только здесь	*/
	MAX7219_write(MAX7219_DECODE_MODE_REG, MAX7219_Handler->decode_mode);		// Декодирование для всех
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MAX7219_init+0x54>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	7b1b      	ldrb	r3, [r3, #12]
 8001758:	4619      	mov	r1, r3
 800175a:	2009      	movs	r0, #9
 800175c:	f7ff fd5c 	bl	8001218 <MAX7219_write>
	MAX7219_write(MAX7219_INTENSITY_REG, MAX7219_Handler->indicator_intensity);
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MAX7219_init+0x54>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	7b5b      	ldrb	r3, [r3, #13]
 8001766:	4619      	mov	r1, r3
 8001768:	200a      	movs	r0, #10
 800176a:	f7ff fd55 	bl	8001218 <MAX7219_write>
	MAX7219_write(MAX7219_SCAN_LIMIT_REG, MAX7219_Handler->digits_quantity);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <MAX7219_init+0x54>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	7b9b      	ldrb	r3, [r3, #14]
 8001774:	4619      	mov	r1, r3
 8001776:	200b      	movs	r0, #11
 8001778:	f7ff fd4e 	bl	8001218 <MAX7219_write>
	result = MAX7219_write(MAX7219_MODE_REG, MAX7219_NORMAL_MODE);
 800177c:	2101      	movs	r1, #1
 800177e:	200c      	movs	r0, #12
 8001780:	f7ff fd4a 	bl	8001218 <MAX7219_write>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]

	MAX7219_clearAll();		// Чистим дисплей на всякий
 8001788:	f7ff ffc6 	bl	8001718 <MAX7219_clearAll>
	return result;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000338 	.word	0x20000338

0800179c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80017ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <vApplicationGetIdleTaskMemory+0x30>)
 80017b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	2000033c 	.word	0x2000033c
 80017cc:	20000390 	.word	0x20000390

080017d0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)		// Колбек прерывания кнопки return
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
	button_exti = GPIO_Pin;				// Присвоим глобальной переменной номер ножки, на к-ой было прерывания
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_GPIO_EXTI_Callback+0x30>)
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	8013      	strh	r3, [r2, #0]
//	BaseType_t high_task_awoken = 0;
	HAL_TIM_Base_Start_IT(&htim9);		// Запустили таймер, там он уже отслекдит по глобальной переменной что ему делать
 80017e0:	4808      	ldr	r0, [pc, #32]	; (8001804 <HAL_GPIO_EXTI_Callback+0x34>)
 80017e2:	f003 f849 	bl	8004878 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80017e6:	2007      	movs	r0, #7
 80017e8:	f001 fefa 	bl	80035e0 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80017ec:	2008      	movs	r0, #8
 80017ee:	f001 fef7 	bl	80035e0 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80017f2:	2028      	movs	r0, #40	; 0x28
 80017f4:	f001 fef4 	bl	80035e0 <HAL_NVIC_DisableIRQ>

//	pending = HAL_NVIC_GetPendingIRQ(EXTI15_10_IRQn);
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200006de 	.word	0x200006de
 8001804:	20000678 	.word	0x20000678

08001808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b0ac      	sub	sp, #176	; 0xb0
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180e:	f001 fd9f 	bl	8003350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001812:	f000 f8cd 	bl	80019b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001816:	f000 fa69 	bl	8001cec <MX_GPIO_Init>
  MX_SPI1_Init();
 800181a:	f000 f933 	bl	8001a84 <MX_SPI1_Init>
  MX_TIM3_Init();
 800181e:	f000 f967 	bl	8001af0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001822:	f000 f9b3 	bl	8001b8c <MX_TIM4_Init>
  MX_TIM9_Init();
 8001826:	f000 fa27 	bl	8001c78 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  max7219_init_t cfg = {		// инициализируем структуру
 800182a:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <main+0x160>)
 800182c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		  .indicator_intensity = MAX7219_INTENSITY_25_OF_32,
  		  .digits_quantity = MAX7219_DISPLAY_0_TO_7,
		  .CS_PORT = SPI_CS_GPIO_Port,					// На каком порту сконфигурировали CS
  		  .CS_PIN = SPI_CS_Pin							// Какой конкретно пин CS
    };
  MAX7219_init(&cfg);		// Вызвали функцию инициадизации
 8001836:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff82 	bl	8001744 <MAX7219_init>

  MAX7219_clearAll();
 8001840:	f7ff ff6a 	bl	8001718 <MAX7219_clearAll>
  MAX7219_sendString("SET MODE");	// Если выведется то все хорошо
 8001844:	4849      	ldr	r0, [pc, #292]	; (800196c <main+0x164>)
 8001846:	f7ff fea5 	bl	8001594 <MAX7219_sendString>
  char buff[9];

  sprintf(buff, "%s", (mode == PWM_MODE)? "DAC_MODE" : "PWM_MODE");
*/

  xButtonQueue = xQueueCreate(10, sizeof(uint16_t));
 800184a:	2200      	movs	r2, #0
 800184c:	2102      	movs	r1, #2
 800184e:	200a      	movs	r0, #10
 8001850:	f004 f91a 	bl	8005a88 <xQueueGenericCreate>
 8001854:	4603      	mov	r3, r0
 8001856:	4a46      	ldr	r2, [pc, #280]	; (8001970 <main+0x168>)
 8001858:	6013      	str	r3, [r2, #0]
  xDisplayStringQueue = xQueueCreate(10, sizeof(char[9]));
 800185a:	2200      	movs	r2, #0
 800185c:	2109      	movs	r1, #9
 800185e:	200a      	movs	r0, #10
 8001860:	f004 f912 	bl	8005a88 <xQueueGenericCreate>
 8001864:	4603      	mov	r3, r0
 8001866:	4a43      	ldr	r2, [pc, #268]	; (8001974 <main+0x16c>)
 8001868:	6013      	str	r3, [r2, #0]
  xDisplayFreqQueue = xQueueCreate(10, sizeof(float));
 800186a:	2200      	movs	r2, #0
 800186c:	2104      	movs	r1, #4
 800186e:	200a      	movs	r0, #10
 8001870:	f004 f90a 	bl	8005a88 <xQueueGenericCreate>
 8001874:	4603      	mov	r3, r0
 8001876:	4a40      	ldr	r2, [pc, #256]	; (8001978 <main+0x170>)
 8001878:	6013      	str	r3, [r2, #0]
  xDisplayDutyQueue = xQueueCreate(10, sizeof(float));
 800187a:	2200      	movs	r2, #0
 800187c:	2104      	movs	r1, #4
 800187e:	200a      	movs	r0, #10
 8001880:	f004 f902 	bl	8005a88 <xQueueGenericCreate>
 8001884:	4603      	mov	r3, r0
 8001886:	4a3d      	ldr	r2, [pc, #244]	; (800197c <main+0x174>)
 8001888:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 10, 20);
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <main+0x178>)
 800188c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001896:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f003 ff36 	bl	800570e <osMessageCreate>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a37      	ldr	r2, [pc, #220]	; (8001984 <main+0x17c>)
 80018a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80018a8:	4b37      	ldr	r3, [pc, #220]	; (8001988 <main+0x180>)
 80018aa:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80018ae:	461d      	mov	r5, r3
 80018b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fec3 	bl	800564e <osThreadCreate>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a30      	ldr	r2, [pc, #192]	; (800198c <main+0x184>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, readButtonTask, osPriorityNormal, 0, 1024);
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <main+0x188>)
 80018d0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80018d4:	461d      	mov	r5, r3
 80018d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80018e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 feb0 	bl	800564e <osThreadCreate>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a28      	ldr	r2, [pc, #160]	; (8001994 <main+0x18c>)
 80018f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, displayTask, osPriorityBelowNormal, 0, 1024);
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <main+0x190>)
 80018f6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80018fa:	461d      	mov	r5, r3
 80018fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001900:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001908:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fe9d 	bl	800564e <osThreadCreate>
 8001914:	4603      	mov	r3, r0
 8001916:	4a21      	ldr	r2, [pc, #132]	; (800199c <main+0x194>)
 8001918:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, dacTask, osPriorityAboveNormal, 0, 1024);
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <main+0x198>)
 800191c:	f107 0420 	add.w	r4, r7, #32
 8001920:	461d      	mov	r5, r3
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800192a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800192e:	f107 0320 	add.w	r3, r7, #32
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f003 fe8a 	bl	800564e <osThreadCreate>
 800193a:	4603      	mov	r3, r0
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <main+0x19c>)
 800193e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, pwmTask, osPriorityAboveNormal, 0, 1024);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <main+0x1a0>)
 8001942:	1d3c      	adds	r4, r7, #4
 8001944:	461d      	mov	r5, r3
 8001946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800194e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fe79 	bl	800564e <osThreadCreate>
 800195c:	4603      	mov	r3, r0
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <main+0x1a4>)
 8001960:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001962:	f003 fe6d 	bl	8005640 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001966:	e7fe      	b.n	8001966 <main+0x15e>
 8001968:	0800a700 	.word	0x0800a700
 800196c:	0800a6f4 	.word	0x0800a6f4
 8001970:	200006e0 	.word	0x200006e0
 8001974:	200006e4 	.word	0x200006e4
 8001978:	200006e8 	.word	0x200006e8
 800197c:	200006ec 	.word	0x200006ec
 8001980:	0800a710 	.word	0x0800a710
 8001984:	200006d4 	.word	0x200006d4
 8001988:	0800a720 	.word	0x0800a720
 800198c:	200006c0 	.word	0x200006c0
 8001990:	0800a73c 	.word	0x0800a73c
 8001994:	200006c4 	.word	0x200006c4
 8001998:	0800a758 	.word	0x0800a758
 800199c:	200006c8 	.word	0x200006c8
 80019a0:	0800a774 	.word	0x0800a774
 80019a4:	200006cc 	.word	0x200006cc
 80019a8:	0800a790 	.word	0x0800a790
 80019ac:	200006d0 	.word	0x200006d0

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b094      	sub	sp, #80	; 0x50
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	2230      	movs	r2, #48	; 0x30
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f005 ff84 	bl	80078cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <SystemClock_Config+0xcc>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <SystemClock_Config+0xcc>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <SystemClock_Config+0xcc>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <SystemClock_Config+0xd0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019fc:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <SystemClock_Config+0xd0>)
 80019fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <SystemClock_Config+0xd0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a24:	2319      	movs	r3, #25
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a30:	2304      	movs	r3, #4
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f001 ffc7 	bl	80039cc <HAL_RCC_OscConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a44:	f001 f9ac 	bl	8002da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a48:	230f      	movs	r3, #15
 8001a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	2102      	movs	r1, #2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fa29 	bl	8003ebc <HAL_RCC_ClockConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a70:	f001 f996 	bl	8002da0 <Error_Handler>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3750      	adds	r7, #80	; 0x50
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000

08001a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <MX_SPI1_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001ab8:	2208      	movs	r2, #8
 8001aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_SPI1_Init+0x64>)
 8001ad6:	f002 fbef 	bl	80042b8 <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f001 f95e 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000590 	.word	0x20000590
 8001aec:	40013000 	.word	0x40013000

08001af0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b22:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001b26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b36:	f002 fe4f 	bl	80047d8 <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b40:	f001 f92e 	bl	8002da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b52:	f003 f945 	bl	8004de0 <HAL_TIM_ConfigClockSource>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b5c:	f001 f920 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_TIM3_Init+0x94>)
 8001b6e:	f003 fccd 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b78:	f001 f912 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200005e8 	.word	0x200005e8
 8001b88:	40000400 	.word	0x40000400

08001b8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	; 0x38
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <MX_TIM4_Init+0xe8>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be2:	4823      	ldr	r0, [pc, #140]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001be4:	f002 fdf8 	bl	80047d8 <HAL_TIM_Base_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001bee:	f001 f8d7 	bl	8002da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481c      	ldr	r0, [pc, #112]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001c00:	f003 f8ee 	bl	8004de0 <HAL_TIM_ConfigClockSource>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c0a:	f001 f8c9 	bl	8002da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c0e:	4818      	ldr	r0, [pc, #96]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001c10:	f002 fec3 	bl	800499a <HAL_TIM_PWM_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c1a:	f001 f8c1 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4810      	ldr	r0, [pc, #64]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001c2e:	f003 fc6d 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c38:	f001 f8b2 	bl	8002da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3c:	2360      	movs	r3, #96	; 0x60
 8001c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001c54:	f003 f802 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c5e:	f001 f89f 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c62:	4803      	ldr	r0, [pc, #12]	; (8001c70 <MX_TIM4_Init+0xe4>)
 8001c64:	f001 f96a 	bl	8002f3c <HAL_TIM_MspPostInit>

}
 8001c68:	bf00      	nop
 8001c6a:	3738      	adds	r7, #56	; 0x38
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000630 	.word	0x20000630
 8001c74:	40000800 	.word	0x40000800

08001c78 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_TIM9_Init+0x6c>)
 8001c8c:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <MX_TIM9_Init+0x70>)
 8001c8e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 639;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_TIM9_Init+0x6c>)
 8001c92:	f240 227f 	movw	r2, #639	; 0x27f
 8001c96:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_TIM9_Init+0x6c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_TIM9_Init+0x6c>)
 8001ca0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ca4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_TIM9_Init+0x6c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <MX_TIM9_Init+0x6c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001cb2:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <MX_TIM9_Init+0x6c>)
 8001cb4:	f002 fd90 	bl	80047d8 <HAL_TIM_Base_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001cbe:	f001 f86f 	bl	8002da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_TIM9_Init+0x6c>)
 8001cce:	f003 f887 	bl	8004de0 <HAL_TIM_ConfigClockSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001cd8:	f001 f862 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000678 	.word	0x20000678
 8001ce8:	40014000 	.word	0x40014000

08001cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a41      	ldr	r2, [pc, #260]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a3a      	ldr	r2, [pc, #232]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <MX_GPIO_Init+0x140>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d78:	482d      	ldr	r0, [pc, #180]	; (8001e30 <MX_GPIO_Init+0x144>)
 8001d7a:	f001 fddb 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001d7e:	2200      	movs	r2, #0
 8001d80:	21ff      	movs	r1, #255	; 0xff
 8001d82:	482c      	ldr	r0, [pc, #176]	; (8001e34 <MX_GPIO_Init+0x148>)
 8001d84:	f001 fdd6 	bl	8003934 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	482a      	ldr	r0, [pc, #168]	; (8001e38 <MX_GPIO_Init+0x14c>)
 8001d8e:	f001 fdd1 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 8001d92:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4821      	ldr	r0, [pc, #132]	; (8001e30 <MX_GPIO_Init+0x144>)
 8001dac:	f001 fc26 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001db0:	23ff      	movs	r3, #255	; 0xff
 8001db2:	617b      	str	r3, [r7, #20]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481b      	ldr	r0, [pc, #108]	; (8001e34 <MX_GPIO_Init+0x148>)
 8001dc8:	f001 fc18 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_UP_Pin BUTTON_DOWN_Pin BUTTON_OK_Pin
                           BUTTON_RETURN_Pin BUTTON_RIGHT_Pin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_UP_Pin|BUTTON_DOWN_Pin|BUTTON_OK_Pin
 8001dcc:	f24f 4302 	movw	r3, #62466	; 0xf402
 8001dd0:	617b      	str	r3, [r7, #20]
                          |BUTTON_RETURN_Pin|BUTTON_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4815      	ldr	r0, [pc, #84]	; (8001e38 <MX_GPIO_Init+0x14c>)
 8001de4:	f001 fc0a 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480e      	ldr	r0, [pc, #56]	; (8001e38 <MX_GPIO_Init+0x14c>)
 8001e00:	f001 fbfc 	bl	80035fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2105      	movs	r1, #5
 8001e08:	2007      	movs	r0, #7
 8001e0a:	f001 fbbf 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e0e:	2007      	movs	r0, #7
 8001e10:	f001 fbd8 	bl	80035c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2105      	movs	r1, #5
 8001e18:	2028      	movs	r0, #40	; 0x28
 8001e1a:	f001 fbb7 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e1e:	2028      	movs	r0, #40	; 0x28
 8001e20:	f001 fbd0 	bl	80035c4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400

08001e3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f003 fc4e 	bl	80056e6 <osDelay>
 8001e4a:	e7fb      	b.n	8001e44 <StartDefaultTask+0x8>
 8001e4c:	0000      	movs	r0, r0
	...

08001e50 <readButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonTask */
void readButtonTask(void const * argument)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readButtonTask */
  /* Infinite loop */
	uint16_t button_num;	// Это принимаем из прерываний после обработки от дребезга
	uint8_t digit = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	77bb      	strb	r3, [r7, #30]
	float freq_buff = 1.0f;		// Переменная буфер, там может быть либо частота ШИМа либо ЦАПа
 8001e5c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e60:	61bb      	str	r3, [r7, #24]
	float duty = 50.0f;
 8001e62:	4b92      	ldr	r3, [pc, #584]	; (80020ac <readButtonTask+0x25c>)
 8001e64:	617b      	str	r3, [r7, #20]
	char str_buff[9] = {};
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	711a      	strb	r2, [r3, #4]
	uint8_t mode = PWM_MODE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	77fb      	strb	r3, [r7, #31]
	for(;;)
	{
		button_num = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	83bb      	strh	r3, [r7, #28]
		xQueueReceive(xButtonQueue, &button_num, 100 / portTICK_RATE_MS);
 8001e7c:	4b8c      	ldr	r3, [pc, #560]	; (80020b0 <readButtonTask+0x260>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f107 011c 	add.w	r1, r7, #28
 8001e84:	2264      	movs	r2, #100	; 0x64
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fff2 	bl	8005e70 <xQueueReceive>
		/* Проверяем на наличие прерывания каждые 100 мс в блокированном состоянии	*/

		/*	Обязатльно обнуляем номер кнопки иначе программа работает как будто кнопка всегда нажата	*/
		switch(button_num)
 8001e8c:	8bbb      	ldrh	r3, [r7, #28]
 8001e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e92:	f000 80ac 	beq.w	8001fee <readButtonTask+0x19e>
 8001e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9a:	f300 85c9 	bgt.w	8002a30 <readButtonTask+0xbe0>
 8001e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ea2:	f000 859d 	beq.w	80029e0 <readButtonTask+0xb90>
 8001ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eaa:	f300 85c1 	bgt.w	8002a30 <readButtonTask+0xbe0>
 8001eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb2:	f000 8472 	beq.w	800279a <readButtonTask+0x94a>
 8001eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eba:	f300 85b9 	bgt.w	8002a30 <readButtonTask+0xbe0>
 8001ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec2:	f000 82f8 	beq.w	80024b6 <readButtonTask+0x666>
 8001ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eca:	f300 85b1 	bgt.w	8002a30 <readButtonTask+0xbe0>
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d005      	beq.n	8001ede <readButtonTask+0x8e>
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	f000 8135 	beq.w	8002144 <readButtonTask+0x2f4>
 8001eda:	f000 bda9 	b.w	8002a30 <readButtonTask+0xbe0>
		{
			case BUTTON_LEFT_Pin:
				if( set_mode_stage )	// Если мы на выборе режима то мы должны его выбрать
 8001ede:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <readButtonTask+0x264>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01a      	beq.n	8001f1c <readButtonTask+0xcc>
				{
					sprintf(str_buff, "%s", (mode == PWM_MODE)? "DAC MODE" : "PWM MODE");
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <readButtonTask+0xa0>
 8001eec:	4a72      	ldr	r2, [pc, #456]	; (80020b8 <readButtonTask+0x268>)
 8001eee:	e000      	b.n	8001ef2 <readButtonTask+0xa2>
 8001ef0:	4a72      	ldr	r2, [pc, #456]	; (80020bc <readButtonTask+0x26c>)
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4972      	ldr	r1, [pc, #456]	; (80020c0 <readButtonTask+0x270>)
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f006 f959 	bl	80081b0 <siprintf>
					mode = (mode == PWM_MODE)? DAC_MODE : PWM_MODE;
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	77fb      	strb	r3, [r7, #31]
					/*	Заворчиваем строку в зависимости от режима тернанрным оператором, если стоял Ш�?М то
					  	  ставим ЦАП и наоборот. Затем таким же образом присваиваем режим	*/
					xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <readButtonTask+0x274>)
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	f107 0108 	add.w	r1, r7, #8
 8001f14:	2300      	movs	r3, #0
 8001f16:	220a      	movs	r2, #10
 8001f18:	f003 fe10 	bl	8005b3c <xQueueGenericSend>
				}
				if( set_signal_stage )
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <readButtonTask+0x278>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d022      	beq.n	8001f6a <readButtonTask+0x11a>
				{
					sig++;		// Следующий режим
 8001f24:	4b69      	ldr	r3, [pc, #420]	; (80020cc <readButtonTask+0x27c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b67      	ldr	r3, [pc, #412]	; (80020cc <readButtonTask+0x27c>)
 8001f2e:	701a      	strb	r2, [r3, #0]
					if( sig > REVERSE_SAW )  sig = TRIANGLE;
 8001f30:	4b66      	ldr	r3, [pc, #408]	; (80020cc <readButtonTask+0x27c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d902      	bls.n	8001f3e <readButtonTask+0xee>
 8001f38:	4b64      	ldr	r3, [pc, #400]	; (80020cc <readButtonTask+0x27c>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "%s", signal_msg[sig - 1]);
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <readButtonTask+0x27c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	1e5a      	subs	r2, r3, #1
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a61      	ldr	r2, [pc, #388]	; (80020d0 <readButtonTask+0x280>)
 8001f4c:	441a      	add	r2, r3
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	495b      	ldr	r1, [pc, #364]	; (80020c0 <readButtonTask+0x270>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f006 f92b 	bl	80081b0 <siprintf>
					/*	Т.к sig начинается у нас с 1	*/
					xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <readButtonTask+0x274>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	f107 0108 	add.w	r1, r7, #8
 8001f62:	2300      	movs	r3, #0
 8001f64:	220a      	movs	r2, #10
 8001f66:	f003 fde9 	bl	8005b3c <xQueueGenericSend>
				}
				if( set_freq_stage )
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	; (80020d4 <readButtonTask+0x284>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01f      	beq.n	8001fb2 <readButtonTask+0x162>
				{
					digit_position++;		// Двигаемся влево в сторону увеличения
 8001f72:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <readButtonTask+0x288>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <readButtonTask+0x288>)
 8001f7c:	701a      	strb	r2, [r3, #0]
					if( digit_position > digits_amount ) digit_position = POINT_TENS;
 8001f7e:	4b56      	ldr	r3, [pc, #344]	; (80020d8 <readButtonTask+0x288>)
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	4b56      	ldr	r3, [pc, #344]	; (80020dc <readButtonTask+0x28c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d902      	bls.n	8001f90 <readButtonTask+0x140>
 8001f8a:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <readButtonTask+0x288>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
					/*	Если достигли старшего разряда то возвращаемся к младшему	*/
					freq_buff = (mode == PWM_MODE)? freq_pwm : freq_dac;
 8001f90:	7ffb      	ldrb	r3, [r7, #31]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <readButtonTask+0x14c>
 8001f96:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <readButtonTask+0x290>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	e001      	b.n	8001fa0 <readButtonTask+0x150>
 8001f9c:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <readButtonTask+0x294>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
					xQueueSendToBack(xDisplayFreqQueue, &freq_buff, 10 / portTICK_RATE_MS);
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <readButtonTask+0x298>)
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	f107 0118 	add.w	r1, r7, #24
 8001faa:	2300      	movs	r3, #0
 8001fac:	220a      	movs	r2, #10
 8001fae:	f003 fdc5 	bl	8005b3c <xQueueGenericSend>
					/*	В зависимости от того какой режим присваиваем нашему буфферу нужную частоту а дальше её
					 * отправляем в очередь	*/
				}
				if( set_duty_stage )
 8001fb2:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <readButtonTask+0x29c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8531 	beq.w	8002a1e <readButtonTask+0xbce>
				{
					digit_position++;		// Двигаемся влево в сторону увеличения
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <readButtonTask+0x288>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <readButtonTask+0x288>)
 8001fc6:	701a      	strb	r2, [r3, #0]
					if( digit_position > digits_amount ) digit_position = POINT_TENS;
 8001fc8:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <readButtonTask+0x288>)
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b43      	ldr	r3, [pc, #268]	; (80020dc <readButtonTask+0x28c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d902      	bls.n	8001fda <readButtonTask+0x18a>
 8001fd4:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <readButtonTask+0x288>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
					/*	Если достигли старшего разряда то возвращаемся к младшему	*/
					xQueueSendToBack(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS);
 8001fda:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <readButtonTask+0x2a0>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f107 0114 	add.w	r1, r7, #20
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	220a      	movs	r2, #10
 8001fe6:	f003 fda9 	bl	8005b3c <xQueueGenericSend>
				}
				break;
 8001fea:	f000 bd18 	b.w	8002a1e <readButtonTask+0xbce>

			case BUTTON_RIGHT_Pin:
				if( set_mode_stage )	// Если мы на выборе режима то мы должны его выбрать
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <readButtonTask+0x264>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01a      	beq.n	800202c <readButtonTask+0x1dc>
				{
					sprintf(str_buff, "%s", (mode == PWM_MODE)? "DAC MODE" : "PWM MODE");
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <readButtonTask+0x1b0>
 8001ffc:	4a2e      	ldr	r2, [pc, #184]	; (80020b8 <readButtonTask+0x268>)
 8001ffe:	e000      	b.n	8002002 <readButtonTask+0x1b2>
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <readButtonTask+0x26c>)
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	492e      	ldr	r1, [pc, #184]	; (80020c0 <readButtonTask+0x270>)
 8002008:	4618      	mov	r0, r3
 800200a:	f006 f8d1 	bl	80081b0 <siprintf>
					mode = (mode == PWM_MODE)? DAC_MODE : PWM_MODE;
 800200e:	7ffb      	ldrb	r3, [r7, #31]
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	77fb      	strb	r3, [r7, #31]
					/*	Заворчиваем строку в зависимости от режима тернанрным оператором, если стоял Ш�?М то
					  	  ставим ЦАП и наоборот. Затем таким же образом присваиваем режим	*/
					xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <readButtonTask+0x274>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	f107 0108 	add.w	r1, r7, #8
 8002024:	2300      	movs	r3, #0
 8002026:	220a      	movs	r2, #10
 8002028:	f003 fd88 	bl	8005b3c <xQueueGenericSend>
				}
				if( set_signal_stage )
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <readButtonTask+0x278>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d022      	beq.n	800207a <readButtonTask+0x22a>
				{
					sig--;		// Следующий режим
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <readButtonTask+0x27c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <readButtonTask+0x27c>)
 800203e:	701a      	strb	r2, [r3, #0]
					if( sig < TRIANGLE )  sig = REVERSE_SAW;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <readButtonTask+0x27c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <readButtonTask+0x1fe>
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <readButtonTask+0x27c>)
 800204a:	2204      	movs	r2, #4
 800204c:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "%s", signal_msg[sig - 1]);
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <readButtonTask+0x27c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <readButtonTask+0x280>)
 800205c:	441a      	add	r2, r3
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4917      	ldr	r1, [pc, #92]	; (80020c0 <readButtonTask+0x270>)
 8002064:	4618      	mov	r0, r3
 8002066:	f006 f8a3 	bl	80081b0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <readButtonTask+0x274>)
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	f107 0108 	add.w	r1, r7, #8
 8002072:	2300      	movs	r3, #0
 8002074:	220a      	movs	r2, #10
 8002076:	f003 fd61 	bl	8005b3c <xQueueGenericSend>
				}
				if( set_freq_stage )
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <readButtonTask+0x284>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d043      	beq.n	800210a <readButtonTask+0x2ba>
				{
					digit_position--;	// Двигаемся вправо в сторону уменьшения
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <readButtonTask+0x288>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <readButtonTask+0x288>)
 800208c:	701a      	strb	r2, [r3, #0]
					if( digit_position < POINT_TENS)	digit_position = digits_amount;
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <readButtonTask+0x288>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <readButtonTask+0x24e>
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <readButtonTask+0x28c>)
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <readButtonTask+0x288>)
 800209c:	701a      	strb	r2, [r3, #0]
					/*	Если мы с самого краю справа, то нужно переместиться на самый старший разряд слева */
					freq_buff = (mode == PWM_MODE)? freq_pwm : freq_dac;
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d127      	bne.n	80020f4 <readButtonTask+0x2a4>
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <readButtonTask+0x290>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	e026      	b.n	80020f8 <readButtonTask+0x2a8>
 80020aa:	bf00      	nop
 80020ac:	42480000 	.word	0x42480000
 80020b0:	200006e0 	.word	0x200006e0
 80020b4:	200006d8 	.word	0x200006d8
 80020b8:	0800a7ac 	.word	0x0800a7ac
 80020bc:	0800a7b8 	.word	0x0800a7b8
 80020c0:	0800a7c4 	.word	0x0800a7c4
 80020c4:	200006e4 	.word	0x200006e4
 80020c8:	200006d9 	.word	0x200006d9
 80020cc:	2000010c 	.word	0x2000010c
 80020d0:	20000110 	.word	0x20000110
 80020d4:	200006da 	.word	0x200006da
 80020d8:	20000101 	.word	0x20000101
 80020dc:	20000102 	.word	0x20000102
 80020e0:	20000108 	.word	0x20000108
 80020e4:	20000104 	.word	0x20000104
 80020e8:	200006e8 	.word	0x200006e8
 80020ec:	200006db 	.word	0x200006db
 80020f0:	200006ec 	.word	0x200006ec
 80020f4:	4b86      	ldr	r3, [pc, #536]	; (8002310 <readButtonTask+0x4c0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
					xQueueSendToBack(xDisplayFreqQueue, &freq_buff, 50 / portTICK_RATE_MS);
 80020fa:	4b86      	ldr	r3, [pc, #536]	; (8002314 <readButtonTask+0x4c4>)
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	f107 0118 	add.w	r1, r7, #24
 8002102:	2300      	movs	r3, #0
 8002104:	2232      	movs	r2, #50	; 0x32
 8002106:	f003 fd19 	bl	8005b3c <xQueueGenericSend>
				}
				if( set_duty_stage )
 800210a:	4b83      	ldr	r3, [pc, #524]	; (8002318 <readButtonTask+0x4c8>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8487 	beq.w	8002a22 <readButtonTask+0xbd2>
				{
					digit_position--;	// Двигаемся вправо в сторону уменьшения
 8002114:	4b81      	ldr	r3, [pc, #516]	; (800231c <readButtonTask+0x4cc>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b7f      	ldr	r3, [pc, #508]	; (800231c <readButtonTask+0x4cc>)
 800211e:	701a      	strb	r2, [r3, #0]
					if( digit_position < POINT_TENS)	digit_position = digits_amount;
 8002120:	4b7e      	ldr	r3, [pc, #504]	; (800231c <readButtonTask+0x4cc>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d103      	bne.n	8002130 <readButtonTask+0x2e0>
 8002128:	4b7d      	ldr	r3, [pc, #500]	; (8002320 <readButtonTask+0x4d0>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b7b      	ldr	r3, [pc, #492]	; (800231c <readButtonTask+0x4cc>)
 800212e:	701a      	strb	r2, [r3, #0]
					/*	Если мы с самого краю справа, то нужно переместиться на самый старший разряд слева */
					xQueueSendToBack(xDisplayDutyQueue, &duty, 50 / portTICK_RATE_MS);
 8002130:	4b7c      	ldr	r3, [pc, #496]	; (8002324 <readButtonTask+0x4d4>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	f107 0114 	add.w	r1, r7, #20
 8002138:	2300      	movs	r3, #0
 800213a:	2232      	movs	r2, #50	; 0x32
 800213c:	f003 fcfe 	bl	8005b3c <xQueueGenericSend>
				}
				break;
 8002140:	f000 bc6f 	b.w	8002a22 <readButtonTask+0xbd2>

			case BUTTON_UP_Pin:
				if( set_freq_stage )	// Стадия задания частоты ЦАПа и ШИМа отличаются
 8002144:	4b78      	ldr	r3, [pc, #480]	; (8002328 <readButtonTask+0x4d8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 814f 	beq.w	80023ec <readButtonTask+0x59c>
				{
					if( mode == PWM_MODE)
 800214e:	7ffb      	ldrb	r3, [r7, #31]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 8092 	bne.w	800227a <readButtonTask+0x42a>
					{
						freq_pwm += (digit_position == POINT_TENS) ? 0.1 : 0;	// Прибавляем 0.01 иначе 0, т.е ничего
 8002156:	4b75      	ldr	r3, [pc, #468]	; (800232c <readButtonTask+0x4dc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f9fc 	bl	8000558 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	496d      	ldr	r1, [pc, #436]	; (800231c <readButtonTask+0x4cc>)
 8002166:	7809      	ldrb	r1, [r1, #0]
 8002168:	2901      	cmp	r1, #1
 800216a:	d103      	bne.n	8002174 <readButtonTask+0x324>
 800216c:	a160      	add	r1, pc, #384	; (adr r1, 80022f0 <readButtonTask+0x4a0>)
 800216e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002172:	e003      	b.n	800217c <readButtonTask+0x32c>
 8002174:	f04f 0000 	mov.w	r0, #0
 8002178:	f04f 0100 	mov.w	r1, #0
 800217c:	f7fe f88e 	bl	800029c <__adddf3>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fd36 	bl	8000bf8 <__aeabi_d2f>
 800218c:	4603      	mov	r3, r0
 800218e:	4a67      	ldr	r2, [pc, #412]	; (800232c <readButtonTask+0x4dc>)
 8002190:	6013      	str	r3, [r2, #0]
						freq_pwm += (digit_position == UNITS) ? 1 : 0;
 8002192:	4b62      	ldr	r3, [pc, #392]	; (800231c <readButtonTask+0x4cc>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d102      	bne.n	80021a0 <readButtonTask+0x350>
 800219a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800219e:	e001      	b.n	80021a4 <readButtonTask+0x354>
 80021a0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002338 <readButtonTask+0x4e8>
 80021a4:	4b61      	ldr	r3, [pc, #388]	; (800232c <readButtonTask+0x4dc>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <readButtonTask+0x4dc>)
 80021b0:	edc3 7a00 	vstr	s15, [r3]
						freq_pwm += (digit_position == TENS) ? 10 : 0;
 80021b4:	4b59      	ldr	r3, [pc, #356]	; (800231c <readButtonTask+0x4cc>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d102      	bne.n	80021c2 <readButtonTask+0x372>
 80021bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021c0:	e001      	b.n	80021c6 <readButtonTask+0x376>
 80021c2:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002338 <readButtonTask+0x4e8>
 80021c6:	4b59      	ldr	r3, [pc, #356]	; (800232c <readButtonTask+0x4dc>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d0:	4b56      	ldr	r3, [pc, #344]	; (800232c <readButtonTask+0x4dc>)
 80021d2:	edc3 7a00 	vstr	s15, [r3]
						freq_pwm += (digit_position == HUNDREDS) ? 100 : 0;
 80021d6:	4b51      	ldr	r3, [pc, #324]	; (800231c <readButtonTask+0x4cc>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d102      	bne.n	80021e4 <readButtonTask+0x394>
 80021de:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002330 <readButtonTask+0x4e0>
 80021e2:	e001      	b.n	80021e8 <readButtonTask+0x398>
 80021e4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002338 <readButtonTask+0x4e8>
 80021e8:	4b50      	ldr	r3, [pc, #320]	; (800232c <readButtonTask+0x4dc>)
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <readButtonTask+0x4dc>)
 80021f4:	edc3 7a00 	vstr	s15, [r3]
						/*	В зависимости от того, на каком разряде мы остановились, будем прибавлять величину на
						 	 1 нужного нам разряда, будь то десятые, еидинцы или десятки */
						if( freq_pwm > 9.9 && freq_pwm < 100 )	digits_amount = TENS;
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <readButtonTask+0x4dc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f9ab 	bl	8000558 <__aeabi_f2d>
 8002202:	a33d      	add	r3, pc, #244	; (adr r3, 80022f8 <readButtonTask+0x4a8>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe fc8e 	bl	8000b28 <__aeabi_dcmpgt>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <readButtonTask+0x3dc>
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <readButtonTask+0x4dc>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002330 <readButtonTask+0x4e0>
 800221c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002224:	d502      	bpl.n	800222c <readButtonTask+0x3dc>
 8002226:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <readButtonTask+0x4d0>)
 8002228:	2203      	movs	r2, #3
 800222a:	701a      	strb	r2, [r3, #0]
						if( freq_pwm > 99.9 )					digits_amount = HUNDREDS;
 800222c:	4b3f      	ldr	r3, [pc, #252]	; (800232c <readButtonTask+0x4dc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f991 	bl	8000558 <__aeabi_f2d>
 8002236:	a332      	add	r3, pc, #200	; (adr r3, 8002300 <readButtonTask+0x4b0>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f7fe fc74 	bl	8000b28 <__aeabi_dcmpgt>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <readButtonTask+0x3fc>
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <readButtonTask+0x4d0>)
 8002248:	2204      	movs	r2, #4
 800224a:	701a      	strb	r2, [r3, #0]
						if( freq_pwm > 999.9 )					freq_pwm = 999.9;
 800224c:	4b37      	ldr	r3, [pc, #220]	; (800232c <readButtonTask+0x4dc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f981 	bl	8000558 <__aeabi_f2d>
 8002256:	a32c      	add	r3, pc, #176	; (adr r3, 8002308 <readButtonTask+0x4b8>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe fc64 	bl	8000b28 <__aeabi_dcmpgt>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <readButtonTask+0x41c>
 8002266:	4b31      	ldr	r3, [pc, #196]	; (800232c <readButtonTask+0x4dc>)
 8002268:	4a32      	ldr	r2, [pc, #200]	; (8002334 <readButtonTask+0x4e4>)
 800226a:	601a      	str	r2, [r3, #0]
						/* Увеличиваем кол-во цифр на дисплее, чтобы среди них выбирать нужный разряд, а также
						 * ограничиваем частоту до 999.9 кГц */
						xQueueSendToBack(xDisplayFreqQueue, &freq_pwm, 10 / portTICK_RATE_MS);
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <readButtonTask+0x4c4>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	220a      	movs	r2, #10
 8002274:	492d      	ldr	r1, [pc, #180]	; (800232c <readButtonTask+0x4dc>)
 8002276:	f003 fc61 	bl	8005b3c <xQueueGenericSend>
					}
					if( mode == DAC_MODE )
 800227a:	7ffb      	ldrb	r3, [r7, #31]
 800227c:	2b01      	cmp	r3, #1
 800227e:	f040 80b5 	bne.w	80023ec <readButtonTask+0x59c>
					{
						freq_dac += (digit_position == POINT_TENS) ? 0.1 : 0;	// Прибавляем 0.01 иначе 0, т.е ничего
 8002282:	4b23      	ldr	r3, [pc, #140]	; (8002310 <readButtonTask+0x4c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f966 	bl	8000558 <__aeabi_f2d>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4922      	ldr	r1, [pc, #136]	; (800231c <readButtonTask+0x4cc>)
 8002292:	7809      	ldrb	r1, [r1, #0]
 8002294:	2901      	cmp	r1, #1
 8002296:	d103      	bne.n	80022a0 <readButtonTask+0x450>
 8002298:	a115      	add	r1, pc, #84	; (adr r1, 80022f0 <readButtonTask+0x4a0>)
 800229a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800229e:	e003      	b.n	80022a8 <readButtonTask+0x458>
 80022a0:	f04f 0000 	mov.w	r0, #0
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	f7fd fff8 	bl	800029c <__adddf3>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f7fe fca0 	bl	8000bf8 <__aeabi_d2f>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a15      	ldr	r2, [pc, #84]	; (8002310 <readButtonTask+0x4c0>)
 80022bc:	6013      	str	r3, [r2, #0]
						freq_dac += (digit_position == UNITS) ? 1 : 0;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <readButtonTask+0x4cc>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d102      	bne.n	80022cc <readButtonTask+0x47c>
 80022c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022ca:	e001      	b.n	80022d0 <readButtonTask+0x480>
 80022cc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002338 <readButtonTask+0x4e8>
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <readButtonTask+0x4c0>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <readButtonTask+0x4c0>)
 80022dc:	edc3 7a00 	vstr	s15, [r3]
						freq_dac +=(digit_position == TENS) ? 10 : 0;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <readButtonTask+0x4cc>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d129      	bne.n	800233c <readButtonTask+0x4ec>
 80022e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022ec:	e028      	b.n	8002340 <readButtonTask+0x4f0>
 80022ee:	bf00      	nop
 80022f0:	9999999a 	.word	0x9999999a
 80022f4:	3fb99999 	.word	0x3fb99999
 80022f8:	cccccccd 	.word	0xcccccccd
 80022fc:	4023cccc 	.word	0x4023cccc
 8002300:	9999999a 	.word	0x9999999a
 8002304:	4058f999 	.word	0x4058f999
 8002308:	33333333 	.word	0x33333333
 800230c:	408f3f33 	.word	0x408f3f33
 8002310:	20000104 	.word	0x20000104
 8002314:	200006e8 	.word	0x200006e8
 8002318:	200006db 	.word	0x200006db
 800231c:	20000101 	.word	0x20000101
 8002320:	20000102 	.word	0x20000102
 8002324:	200006ec 	.word	0x200006ec
 8002328:	200006da 	.word	0x200006da
 800232c:	20000108 	.word	0x20000108
 8002330:	42c80000 	.word	0x42c80000
 8002334:	4479f99a 	.word	0x4479f99a
 8002338:	00000000 	.word	0x00000000
 800233c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002338 <readButtonTask+0x4e8>
 8002340:	4bab      	ldr	r3, [pc, #684]	; (80025f0 <readButtonTask+0x7a0>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234a:	4ba9      	ldr	r3, [pc, #676]	; (80025f0 <readButtonTask+0x7a0>)
 800234c:	edc3 7a00 	vstr	s15, [r3]
						/*	В зависимости от того, на каком разряде мы остановились, будем прибавлять величину на
						 	 1 нужного нам разряда, будь то десятые, еидинцы или десятки */
						if(freq_dac > 9.9)	digits_amount = TENS;
 8002350:	4ba7      	ldr	r3, [pc, #668]	; (80025f0 <readButtonTask+0x7a0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8ff 	bl	8000558 <__aeabi_f2d>
 800235a:	a39d      	add	r3, pc, #628	; (adr r3, 80025d0 <readButtonTask+0x780>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe fbe2 	bl	8000b28 <__aeabi_dcmpgt>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <readButtonTask+0x520>
 800236a:	4ba2      	ldr	r3, [pc, #648]	; (80025f4 <readButtonTask+0x7a4>)
 800236c:	2203      	movs	r2, #3
 800236e:	701a      	strb	r2, [r3, #0]

						if( freq_dac > 5 && sig == SIN )							freq_dac = 5.0;
 8002370:	4b9f      	ldr	r3, [pc, #636]	; (80025f0 <readButtonTask+0x7a0>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800237a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	dd06      	ble.n	8002392 <readButtonTask+0x542>
 8002384:	4b9c      	ldr	r3, [pc, #624]	; (80025f8 <readButtonTask+0x7a8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d102      	bne.n	8002392 <readButtonTask+0x542>
 800238c:	4b98      	ldr	r3, [pc, #608]	; (80025f0 <readButtonTask+0x7a0>)
 800238e:	4a9b      	ldr	r2, [pc, #620]	; (80025fc <readButtonTask+0x7ac>)
 8002390:	601a      	str	r2, [r3, #0]
						if( freq_dac > 30 && (sig == SAW || sig == REVERSE_SAW) )	freq_dac = 30.0;
 8002392:	4b97      	ldr	r3, [pc, #604]	; (80025f0 <readButtonTask+0x7a0>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800239c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	dd0a      	ble.n	80023bc <readButtonTask+0x56c>
 80023a6:	4b94      	ldr	r3, [pc, #592]	; (80025f8 <readButtonTask+0x7a8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d003      	beq.n	80023b6 <readButtonTask+0x566>
 80023ae:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <readButtonTask+0x7a8>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d102      	bne.n	80023bc <readButtonTask+0x56c>
 80023b6:	4b8e      	ldr	r3, [pc, #568]	; (80025f0 <readButtonTask+0x7a0>)
 80023b8:	4a91      	ldr	r2, [pc, #580]	; (8002600 <readButtonTask+0x7b0>)
 80023ba:	601a      	str	r2, [r3, #0]
						if( freq_dac > 15 && sig == TRIANGLE )						freq_dac = 15.0;
 80023bc:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <readButtonTask+0x7a0>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80023c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	dd06      	ble.n	80023de <readButtonTask+0x58e>
 80023d0:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <readButtonTask+0x7a8>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <readButtonTask+0x58e>
 80023d8:	4b85      	ldr	r3, [pc, #532]	; (80025f0 <readButtonTask+0x7a0>)
 80023da:	4a8a      	ldr	r2, [pc, #552]	; (8002604 <readButtonTask+0x7b4>)
 80023dc:	601a      	str	r2, [r3, #0]

						xQueueSendToBack(xDisplayFreqQueue, &freq_dac, 10 / portTICK_RATE_MS);
 80023de:	4b8a      	ldr	r3, [pc, #552]	; (8002608 <readButtonTask+0x7b8>)
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	220a      	movs	r2, #10
 80023e6:	4982      	ldr	r1, [pc, #520]	; (80025f0 <readButtonTask+0x7a0>)
 80023e8:	f003 fba8 	bl	8005b3c <xQueueGenericSend>
						 *	разрешением в 256 бит на период больше 5 кГц с точностью 1-2% уже не тянет.
						 *	А пилы - что обычная, что реверсная могут и до 30 кГц.
						 */
					}
				}
				if( set_duty_stage )		// Если мы на стадии выбора скважность
 80023ec:	4b87      	ldr	r3, [pc, #540]	; (800260c <readButtonTask+0x7bc>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8318 	beq.w	8002a26 <readButtonTask+0xbd6>
				{
					duty += (digit_position == POINT_TENS) ? 0.1 : 0;	// Прибавляем 0.01 иначе 0, т.е ничего
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f8ad 	bl	8000558 <__aeabi_f2d>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4983      	ldr	r1, [pc, #524]	; (8002610 <readButtonTask+0x7c0>)
 8002404:	7809      	ldrb	r1, [r1, #0]
 8002406:	2901      	cmp	r1, #1
 8002408:	d103      	bne.n	8002412 <readButtonTask+0x5c2>
 800240a:	a173      	add	r1, pc, #460	; (adr r1, 80025d8 <readButtonTask+0x788>)
 800240c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002410:	e003      	b.n	800241a <readButtonTask+0x5ca>
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	f7fd ff3f 	bl	800029c <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fbe7 	bl	8000bf8 <__aeabi_d2f>
 800242a:	4603      	mov	r3, r0
 800242c:	617b      	str	r3, [r7, #20]
					duty += (digit_position == UNITS) ? 1 : 0;
 800242e:	4b78      	ldr	r3, [pc, #480]	; (8002610 <readButtonTask+0x7c0>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d102      	bne.n	800243c <readButtonTask+0x5ec>
 8002436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800243a:	e001      	b.n	8002440 <readButtonTask+0x5f0>
 800243c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002614 <readButtonTask+0x7c4>
 8002440:	edd7 7a05 	vldr	s15, [r7, #20]
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	edc7 7a05 	vstr	s15, [r7, #20]
					duty += (digit_position == TENS) ? 10 : 0;
 800244c:	4b70      	ldr	r3, [pc, #448]	; (8002610 <readButtonTask+0x7c0>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d102      	bne.n	800245a <readButtonTask+0x60a>
 8002454:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002458:	e001      	b.n	800245e <readButtonTask+0x60e>
 800245a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002614 <readButtonTask+0x7c4>
 800245e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002466:	edc7 7a05 	vstr	s15, [r7, #20]

					if(duty > 9.9)	digits_amount = TENS;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f873 	bl	8000558 <__aeabi_f2d>
 8002472:	a357      	add	r3, pc, #348	; (adr r3, 80025d0 <readButtonTask+0x780>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe fb56 	bl	8000b28 <__aeabi_dcmpgt>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <readButtonTask+0x638>
 8002482:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <readButtonTask+0x7a4>)
 8002484:	2203      	movs	r2, #3
 8002486:	701a      	strb	r2, [r3, #0]
					if(duty > 99.9)	duty = 99.9;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe f864 	bl	8000558 <__aeabi_f2d>
 8002490:	a353      	add	r3, pc, #332	; (adr r3, 80025e0 <readButtonTask+0x790>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe fb47 	bl	8000b28 <__aeabi_dcmpgt>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <readButtonTask+0x654>
 80024a0:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <readButtonTask+0x7c8>)
 80024a2:	617b      	str	r3, [r7, #20]

					xQueueSendToBack(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS);
 80024a4:	4b5d      	ldr	r3, [pc, #372]	; (800261c <readButtonTask+0x7cc>)
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	f107 0114 	add.w	r1, r7, #20
 80024ac:	2300      	movs	r3, #0
 80024ae:	220a      	movs	r2, #10
 80024b0:	f003 fb44 	bl	8005b3c <xQueueGenericSend>
				}
				break;
 80024b4:	e2b7      	b.n	8002a26 <readButtonTask+0xbd6>

			case BUTTON_DOWN_Pin:
				if( set_freq_stage )
 80024b6:	4b5a      	ldr	r3, [pc, #360]	; (8002620 <readButtonTask+0x7d0>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 810d 	beq.w	80026da <readButtonTask+0x88a>
				{
					if( mode == PWM_MODE)
 80024c0:	7ffb      	ldrb	r3, [r7, #31]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d172      	bne.n	80025ac <readButtonTask+0x75c>
					{
						freq_pwm -= (digit_position == POINT_TENS) ? 0.1 : 0;	// Прибавляем 0.01 иначе 0, т.е ничего
 80024c6:	4b57      	ldr	r3, [pc, #348]	; (8002624 <readButtonTask+0x7d4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f844 	bl	8000558 <__aeabi_f2d>
 80024d0:	4b4f      	ldr	r3, [pc, #316]	; (8002610 <readButtonTask+0x7c0>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d103      	bne.n	80024e0 <readButtonTask+0x690>
 80024d8:	a33f      	add	r3, pc, #252	; (adr r3, 80025d8 <readButtonTask+0x788>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	e003      	b.n	80024e8 <readButtonTask+0x698>
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	f7fd fed6 	bl	8000298 <__aeabi_dsub>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fb80 	bl	8000bf8 <__aeabi_d2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a4a      	ldr	r2, [pc, #296]	; (8002624 <readButtonTask+0x7d4>)
 80024fc:	6013      	str	r3, [r2, #0]
						freq_pwm -= (digit_position == UNITS) ? 1 : 0;
 80024fe:	4b49      	ldr	r3, [pc, #292]	; (8002624 <readButtonTask+0x7d4>)
 8002500:	ed93 7a00 	vldr	s14, [r3]
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <readButtonTask+0x7c0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d102      	bne.n	8002512 <readButtonTask+0x6c2>
 800250c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002510:	e001      	b.n	8002516 <readButtonTask+0x6c6>
 8002512:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002614 <readButtonTask+0x7c4>
 8002516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800251a:	4b42      	ldr	r3, [pc, #264]	; (8002624 <readButtonTask+0x7d4>)
 800251c:	edc3 7a00 	vstr	s15, [r3]
						freq_pwm -= (digit_position == TENS) ? 10 : 0;
 8002520:	4b40      	ldr	r3, [pc, #256]	; (8002624 <readButtonTask+0x7d4>)
 8002522:	ed93 7a00 	vldr	s14, [r3]
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <readButtonTask+0x7c0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d102      	bne.n	8002534 <readButtonTask+0x6e4>
 800252e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002532:	e001      	b.n	8002538 <readButtonTask+0x6e8>
 8002534:	eddf 7a37 	vldr	s15, [pc, #220]	; 8002614 <readButtonTask+0x7c4>
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	4b39      	ldr	r3, [pc, #228]	; (8002624 <readButtonTask+0x7d4>)
 800253e:	edc3 7a00 	vstr	s15, [r3]
						freq_pwm -= (digit_position == HUNDREDS) ? 100 : 0;
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <readButtonTask+0x7d4>)
 8002544:	ed93 7a00 	vldr	s14, [r3]
 8002548:	4b31      	ldr	r3, [pc, #196]	; (8002610 <readButtonTask+0x7c0>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d102      	bne.n	8002556 <readButtonTask+0x706>
 8002550:	eddf 7a35 	vldr	s15, [pc, #212]	; 8002628 <readButtonTask+0x7d8>
 8002554:	e001      	b.n	800255a <readButtonTask+0x70a>
 8002556:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8002614 <readButtonTask+0x7c4>
 800255a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <readButtonTask+0x7d4>)
 8002560:	edc3 7a00 	vstr	s15, [r3]
						/*	В зависимости от того, на каком разряде мы остановились, будем прибавлять величину на
						 	 1 нужного нам разряда, будь то десятые, еидинцы или десятки */
						if( freq_pwm < 10 )	digits_amount = UNITS;
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <readButtonTask+0x7d4>)
 8002566:	edd3 7a00 	vldr	s15, [r3]
 800256a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800256e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	d502      	bpl.n	800257e <readButtonTask+0x72e>
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <readButtonTask+0x7a4>)
 800257a:	2202      	movs	r2, #2
 800257c:	701a      	strb	r2, [r3, #0]
						if( freq_pwm <= 0.01 )	freq_pwm = 0.1;
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <readButtonTask+0x7d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ffe8 	bl	8000558 <__aeabi_f2d>
 8002588:	a317      	add	r3, pc, #92	; (adr r3, 80025e8 <readButtonTask+0x798>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe fab7 	bl	8000b00 <__aeabi_dcmple>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <readButtonTask+0x74e>
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <readButtonTask+0x7d4>)
 800259a:	4a24      	ldr	r2, [pc, #144]	; (800262c <readButtonTask+0x7dc>)
 800259c:	601a      	str	r2, [r3, #0]
						/* Увеличиваем кол-во цифр на дисплее, чтобы среди них выбирать нужный разряд, а также
						 * ограничиваем частоту до 999.9 кГц */
						xQueueSendToBack(xDisplayFreqQueue, &freq_pwm, 10 / portTICK_RATE_MS);
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <readButtonTask+0x7b8>)
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	2300      	movs	r3, #0
 80025a4:	220a      	movs	r2, #10
 80025a6:	491f      	ldr	r1, [pc, #124]	; (8002624 <readButtonTask+0x7d4>)
 80025a8:	f003 fac8 	bl	8005b3c <xQueueGenericSend>
					}
					if( mode == DAC_MODE )
 80025ac:	7ffb      	ldrb	r3, [r7, #31]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	f040 8093 	bne.w	80026da <readButtonTask+0x88a>
					{
						freq_dac -= (digit_position == POINT_TENS) ? 0.1 : 0;	// Прибавляем 0.01 иначе 0, т.е ничего
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <readButtonTask+0x7a0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffcd 	bl	8000558 <__aeabi_f2d>
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <readButtonTask+0x7c0>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d134      	bne.n	8002630 <readButtonTask+0x7e0>
 80025c6:	a304      	add	r3, pc, #16	; (adr r3, 80025d8 <readButtonTask+0x788>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	e034      	b.n	8002638 <readButtonTask+0x7e8>
 80025ce:	bf00      	nop
 80025d0:	cccccccd 	.word	0xcccccccd
 80025d4:	4023cccc 	.word	0x4023cccc
 80025d8:	9999999a 	.word	0x9999999a
 80025dc:	3fb99999 	.word	0x3fb99999
 80025e0:	9999999a 	.word	0x9999999a
 80025e4:	4058f999 	.word	0x4058f999
 80025e8:	47ae147b 	.word	0x47ae147b
 80025ec:	3f847ae1 	.word	0x3f847ae1
 80025f0:	20000104 	.word	0x20000104
 80025f4:	20000102 	.word	0x20000102
 80025f8:	2000010c 	.word	0x2000010c
 80025fc:	40a00000 	.word	0x40a00000
 8002600:	41f00000 	.word	0x41f00000
 8002604:	41700000 	.word	0x41700000
 8002608:	200006e8 	.word	0x200006e8
 800260c:	200006db 	.word	0x200006db
 8002610:	20000101 	.word	0x20000101
 8002614:	00000000 	.word	0x00000000
 8002618:	42c7cccd 	.word	0x42c7cccd
 800261c:	200006ec 	.word	0x200006ec
 8002620:	200006da 	.word	0x200006da
 8002624:	20000108 	.word	0x20000108
 8002628:	42c80000 	.word	0x42c80000
 800262c:	3dcccccd 	.word	0x3dcccccd
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	f7fd fe2e 	bl	8000298 <__aeabi_dsub>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe fad8 	bl	8000bf8 <__aeabi_d2f>
 8002648:	4603      	mov	r3, r0
 800264a:	4aa3      	ldr	r2, [pc, #652]	; (80028d8 <readButtonTask+0xa88>)
 800264c:	6013      	str	r3, [r2, #0]
						freq_dac -= (digit_position == UNITS) ? 1 : 0;
 800264e:	4ba2      	ldr	r3, [pc, #648]	; (80028d8 <readButtonTask+0xa88>)
 8002650:	ed93 7a00 	vldr	s14, [r3]
 8002654:	4ba1      	ldr	r3, [pc, #644]	; (80028dc <readButtonTask+0xa8c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d102      	bne.n	8002662 <readButtonTask+0x812>
 800265c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002660:	e001      	b.n	8002666 <readButtonTask+0x816>
 8002662:	eddf 7a9f 	vldr	s15, [pc, #636]	; 80028e0 <readButtonTask+0xa90>
 8002666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266a:	4b9b      	ldr	r3, [pc, #620]	; (80028d8 <readButtonTask+0xa88>)
 800266c:	edc3 7a00 	vstr	s15, [r3]
						freq_dac -= (digit_position == TENS) ? 10 : 0;
 8002670:	4b99      	ldr	r3, [pc, #612]	; (80028d8 <readButtonTask+0xa88>)
 8002672:	ed93 7a00 	vldr	s14, [r3]
 8002676:	4b99      	ldr	r3, [pc, #612]	; (80028dc <readButtonTask+0xa8c>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d102      	bne.n	8002684 <readButtonTask+0x834>
 800267e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002682:	e001      	b.n	8002688 <readButtonTask+0x838>
 8002684:	eddf 7a96 	vldr	s15, [pc, #600]	; 80028e0 <readButtonTask+0xa90>
 8002688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268c:	4b92      	ldr	r3, [pc, #584]	; (80028d8 <readButtonTask+0xa88>)
 800268e:	edc3 7a00 	vstr	s15, [r3]
						/*	В зависимости от того, на каком разряде мы остановились, будем прибавлять величину на
						 	 1 нужного нам разряда, будь то десятые, еидинцы или десятки */
						if( freq_dac < 10 )	digits_amount = UNITS;
 8002692:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <readButtonTask+0xa88>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800269c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	d502      	bpl.n	80026ac <readButtonTask+0x85c>
 80026a6:	4b8f      	ldr	r3, [pc, #572]	; (80028e4 <readButtonTask+0xa94>)
 80026a8:	2202      	movs	r2, #2
 80026aa:	701a      	strb	r2, [r3, #0]
						if( freq_dac <= 0.01 )	freq_dac = 0.1;
 80026ac:	4b8a      	ldr	r3, [pc, #552]	; (80028d8 <readButtonTask+0xa88>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff51 	bl	8000558 <__aeabi_f2d>
 80026b6:	a384      	add	r3, pc, #528	; (adr r3, 80028c8 <readButtonTask+0xa78>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fe fa20 	bl	8000b00 <__aeabi_dcmple>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <readButtonTask+0x87c>
 80026c6:	4b84      	ldr	r3, [pc, #528]	; (80028d8 <readButtonTask+0xa88>)
 80026c8:	4a87      	ldr	r2, [pc, #540]	; (80028e8 <readButtonTask+0xa98>)
 80026ca:	601a      	str	r2, [r3, #0]
						/* Уменьшаем кол-во цифр на дисплее, чтобы среди них выбирать нужный разряд, а также
						 * ограничиваем частоту снизу до 0.1 кГц.
						 * Костыль в виде 0.01 нужен потому что float преобразует так, что при вычитании там не 0,
						 * а 0.000000004 сколько-то там, что больше 0, но выводится 0, т.к у нас sprintf с точностью
						 * до одного знака. Зная это, делаем 0.01*/
						xQueueSendToBack(xDisplayFreqQueue, &freq_dac, 10 / portTICK_RATE_MS);
 80026cc:	4b87      	ldr	r3, [pc, #540]	; (80028ec <readButtonTask+0xa9c>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	220a      	movs	r2, #10
 80026d4:	4980      	ldr	r1, [pc, #512]	; (80028d8 <readButtonTask+0xa88>)
 80026d6:	f003 fa31 	bl	8005b3c <xQueueGenericSend>
						 *	разрешением в 256 бит на период больше 5 кГц с точностью 1-2% уже не тянет.
						 *	А пилы - что обычная, что реверсная могут и до 30 кГц.
						 */
					}
				}
				if( set_duty_stage )		// Если мы на стадии выбора скважность
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <readButtonTask+0xaa0>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 81a3 	beq.w	8002a2a <readButtonTask+0xbda>
				{
					duty -= (digit_position == POINT_TENS) ? 0.1 : 0;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd ff36 	bl	8000558 <__aeabi_f2d>
 80026ec:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <readButtonTask+0xa8c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d103      	bne.n	80026fc <readButtonTask+0x8ac>
 80026f4:	a376      	add	r3, pc, #472	; (adr r3, 80028d0 <readButtonTask+0xa80>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	e003      	b.n	8002704 <readButtonTask+0x8b4>
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f7fd fdc8 	bl	8000298 <__aeabi_dsub>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe fa72 	bl	8000bf8 <__aeabi_d2f>
 8002714:	4603      	mov	r3, r0
 8002716:	617b      	str	r3, [r7, #20]
					duty -= (digit_position == UNITS) ? 1 : 0;
 8002718:	ed97 7a05 	vldr	s14, [r7, #20]
 800271c:	4b6f      	ldr	r3, [pc, #444]	; (80028dc <readButtonTask+0xa8c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d102      	bne.n	800272a <readButtonTask+0x8da>
 8002724:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002728:	e001      	b.n	800272e <readButtonTask+0x8de>
 800272a:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80028e0 <readButtonTask+0xa90>
 800272e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002732:	edc7 7a05 	vstr	s15, [r7, #20]
					duty -= (digit_position == TENS) ? 10 : 0;
 8002736:	ed97 7a05 	vldr	s14, [r7, #20]
 800273a:	4b68      	ldr	r3, [pc, #416]	; (80028dc <readButtonTask+0xa8c>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d102      	bne.n	8002748 <readButtonTask+0x8f8>
 8002742:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002746:	e001      	b.n	800274c <readButtonTask+0x8fc>
 8002748:	eddf 7a65 	vldr	s15, [pc, #404]	; 80028e0 <readButtonTask+0xa90>
 800274c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002750:	edc7 7a05 	vstr	s15, [r7, #20]

					if(duty < 10)	digits_amount = UNITS;
 8002754:	edd7 7a05 	vldr	s15, [r7, #20]
 8002758:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800275c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	d502      	bpl.n	800276c <readButtonTask+0x91c>
 8002766:	4b5f      	ldr	r3, [pc, #380]	; (80028e4 <readButtonTask+0xa94>)
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]
					if(duty <= 0.01 )	duty = 0.1;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fef2 	bl	8000558 <__aeabi_f2d>
 8002774:	a354      	add	r3, pc, #336	; (adr r3, 80028c8 <readButtonTask+0xa78>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f7fe f9c1 	bl	8000b00 <__aeabi_dcmple>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <readButtonTask+0x938>
 8002784:	4b58      	ldr	r3, [pc, #352]	; (80028e8 <readButtonTask+0xa98>)
 8002786:	617b      	str	r3, [r7, #20]

					xQueueSendToBack(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS);
 8002788:	4b5a      	ldr	r3, [pc, #360]	; (80028f4 <readButtonTask+0xaa4>)
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	f107 0114 	add.w	r1, r7, #20
 8002790:	2300      	movs	r3, #0
 8002792:	220a      	movs	r2, #10
 8002794:	f003 f9d2 	bl	8005b3c <xQueueGenericSend>
				}
				break;
 8002798:	e147      	b.n	8002a2a <readButtonTask+0xbda>

			case BUTTON_OK_Pin:
				if( start_stage )	// Если мы в самом начале, то должны перейти дальше на выбор режима
 800279a:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <readButtonTask+0xaa8>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <readButtonTask+0x97c>
				{
					start_stage = false;
 80027a2:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <readButtonTask+0xaa8>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
					set_mode_stage = true;
 80027a8:	4b54      	ldr	r3, [pc, #336]	; (80028fc <readButtonTask+0xaac>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "PWM MODE");		// Начальное сообщение
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	4953      	ldr	r1, [pc, #332]	; (8002900 <readButtonTask+0xab0>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f005 fcfb 	bl	80081b0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);	// Ждём 10 мс
 80027ba:	4b52      	ldr	r3, [pc, #328]	; (8002904 <readButtonTask+0xab4>)
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	f107 0108 	add.w	r1, r7, #8
 80027c2:	2300      	movs	r3, #0
 80027c4:	220a      	movs	r2, #10
 80027c6:	f003 f9b9 	bl	8005b3c <xQueueGenericSend>
					continue;
 80027ca:	e136      	b.n	8002a3a <readButtonTask+0xbea>
				}
				if( set_mode_stage )		// Здесь подтвердили режим и выдали на дисплей частоту по умолчанию
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <readButtonTask+0xaac>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d054      	beq.n	800287e <readButtonTask+0xa2e>
				{
					set_mode_stage = false;		// Чтобы сюда уже потом не зайти
 80027d4:	4b49      	ldr	r3, [pc, #292]	; (80028fc <readButtonTask+0xaac>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
					if( mode == PWM_MODE)
 80027da:	7ffb      	ldrb	r3, [r7, #31]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11f      	bne.n	8002820 <readButtonTask+0x9d0>
					{
						digits_amount = UNITS;
 80027e0:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <readButtonTask+0xa94>)
 80027e2:	2202      	movs	r2, #2
 80027e4:	701a      	strb	r2, [r3, #0]
						set_freq_stage = true;		// Чтобы зайти в условия выбора частоты
 80027e6:	4b48      	ldr	r3, [pc, #288]	; (8002908 <readButtonTask+0xab8>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
						sprintf(str_buff, "SET FREQ");
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	4946      	ldr	r1, [pc, #280]	; (800290c <readButtonTask+0xabc>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f005 fcdc 	bl	80081b0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);	// На 1,5 сек отобразим надпись
 80027f8:	4b42      	ldr	r3, [pc, #264]	; (8002904 <readButtonTask+0xab4>)
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	f107 0108 	add.w	r1, r7, #8
 8002800:	2300      	movs	r3, #0
 8002802:	220a      	movs	r2, #10
 8002804:	f003 f99a 	bl	8005b3c <xQueueGenericSend>
						vTaskDelay(2000 / portTICK_RATE_MS);
 8002808:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800280c:	f003 feb4 	bl	8006578 <vTaskDelay>
						xQueueSendToBack(xDisplayFreqQueue, &freq_pwm, 10 / portTICK_RATE_MS);	// Отдали частоту в свою очередь
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <readButtonTask+0xa9c>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	220a      	movs	r2, #10
 8002818:	493d      	ldr	r1, [pc, #244]	; (8002910 <readButtonTask+0xac0>)
 800281a:	f003 f98f 	bl	8005b3c <xQueueGenericSend>
						continue;
 800281e:	e10c      	b.n	8002a3a <readButtonTask+0xbea>
					}
					else if( mode == DAC_MODE)
 8002820:	7ffb      	ldrb	r3, [r7, #31]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d12b      	bne.n	800287e <readButtonTask+0xa2e>
					{
						set_signal_stage = true;		// Чтобы зайти в выбор сигналов а уже оттуда в выбор частоты
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <readButtonTask+0xac4>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
						sprintf(str_buff, "SET SIGN");
 800282c:	f107 0308 	add.w	r3, r7, #8
 8002830:	4939      	ldr	r1, [pc, #228]	; (8002918 <readButtonTask+0xac8>)
 8002832:	4618      	mov	r0, r3
 8002834:	f005 fcbc 	bl	80081b0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 8002838:	4b32      	ldr	r3, [pc, #200]	; (8002904 <readButtonTask+0xab4>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	f107 0108 	add.w	r1, r7, #8
 8002840:	2300      	movs	r3, #0
 8002842:	220a      	movs	r2, #10
 8002844:	f003 f97a 	bl	8005b3c <xQueueGenericSend>
						vTaskDelay(2000 / portTICK_RATE_MS);
 8002848:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800284c:	f003 fe94 	bl	8006578 <vTaskDelay>
						sprintf(str_buff, signal_msg[sig - 1]);
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <readButtonTask+0xacc>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	4a30      	ldr	r2, [pc, #192]	; (8002920 <readButtonTask+0xad0>)
 800285e:	441a      	add	r2, r3
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f005 fca2 	bl	80081b0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 800286c:	4b25      	ldr	r3, [pc, #148]	; (8002904 <readButtonTask+0xab4>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	f107 0108 	add.w	r1, r7, #8
 8002874:	2300      	movs	r3, #0
 8002876:	220a      	movs	r2, #10
 8002878:	f003 f960 	bl	8005b3c <xQueueGenericSend>
						continue;
 800287c:	e0dd      	b.n	8002a3a <readButtonTask+0xbea>
					}
				}
				if( set_signal_stage )			// Здесь только когда выбрали ЦАП
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <readButtonTask+0xac4>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d04e      	beq.n	8002924 <readButtonTask+0xad4>
				{
					set_signal_stage = false;
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <readButtonTask+0xac4>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
					set_freq_stage = true;
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <readButtonTask+0xab8>)
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "SET FREQ");
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	491d      	ldr	r1, [pc, #116]	; (800290c <readButtonTask+0xabc>)
 8002898:	4618      	mov	r0, r3
 800289a:	f005 fc89 	bl	80081b0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);	// На 1,5 сек отобразим надпись
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <readButtonTask+0xab4>)
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	f107 0108 	add.w	r1, r7, #8
 80028a6:	2300      	movs	r3, #0
 80028a8:	220a      	movs	r2, #10
 80028aa:	f003 f947 	bl	8005b3c <xQueueGenericSend>
					vTaskDelay(2000 / portTICK_RATE_MS);
 80028ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028b2:	f003 fe61 	bl	8006578 <vTaskDelay>
					xQueueSendToBack(xDisplayFreqQueue, &freq_dac, 10 / portTICK_RATE_MS);	// Отдали частоту в свою очередь
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <readButtonTask+0xa9c>)
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	2300      	movs	r3, #0
 80028bc:	220a      	movs	r2, #10
 80028be:	4906      	ldr	r1, [pc, #24]	; (80028d8 <readButtonTask+0xa88>)
 80028c0:	f003 f93c 	bl	8005b3c <xQueueGenericSend>
					continue;
 80028c4:	e0b9      	b.n	8002a3a <readButtonTask+0xbea>
 80028c6:	bf00      	nop
 80028c8:	47ae147b 	.word	0x47ae147b
 80028cc:	3f847ae1 	.word	0x3f847ae1
 80028d0:	9999999a 	.word	0x9999999a
 80028d4:	3fb99999 	.word	0x3fb99999
 80028d8:	20000104 	.word	0x20000104
 80028dc:	20000101 	.word	0x20000101
 80028e0:	00000000 	.word	0x00000000
 80028e4:	20000102 	.word	0x20000102
 80028e8:	3dcccccd 	.word	0x3dcccccd
 80028ec:	200006e8 	.word	0x200006e8
 80028f0:	200006db 	.word	0x200006db
 80028f4:	200006ec 	.word	0x200006ec
 80028f8:	20000100 	.word	0x20000100
 80028fc:	200006d8 	.word	0x200006d8
 8002900:	0800a7b8 	.word	0x0800a7b8
 8002904:	200006e4 	.word	0x200006e4
 8002908:	200006da 	.word	0x200006da
 800290c:	0800a7c8 	.word	0x0800a7c8
 8002910:	20000108 	.word	0x20000108
 8002914:	200006d9 	.word	0x200006d9
 8002918:	0800a7d4 	.word	0x0800a7d4
 800291c:	2000010c 	.word	0x2000010c
 8002920:	20000110 	.word	0x20000110
				}
				if( set_freq_stage )		// Здесь подтвердили частоту
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <readButtonTask+0xbf0>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d03f      	beq.n	80029ac <readButtonTask+0xb5c>
				{
					if( mode == PWM_MODE )	// Если нам нужно задать ещё и скважность
 800292c:	7ffb      	ldrb	r3, [r7, #31]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d124      	bne.n	800297c <readButtonTask+0xb2c>
					{
						digits_amount = TENS;
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <readButtonTask+0xbf4>)
 8002934:	2203      	movs	r2, #3
 8002936:	701a      	strb	r2, [r3, #0]
						sprintf(str_buff, "%s", "SET DUTY");
 8002938:	f107 0308 	add.w	r3, r7, #8
 800293c:	4a42      	ldr	r2, [pc, #264]	; (8002a48 <readButtonTask+0xbf8>)
 800293e:	4943      	ldr	r1, [pc, #268]	; (8002a4c <readButtonTask+0xbfc>)
 8002940:	4618      	mov	r0, r3
 8002942:	f005 fc35 	bl	80081b0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 35 / portTICK_RATE_MS);
 8002946:	4b42      	ldr	r3, [pc, #264]	; (8002a50 <readButtonTask+0xc00>)
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	f107 0108 	add.w	r1, r7, #8
 800294e:	2300      	movs	r3, #0
 8002950:	2223      	movs	r2, #35	; 0x23
 8002952:	f003 f8f3 	bl	8005b3c <xQueueGenericSend>
						vTaskDelay(2000 / portTICK_RATE_MS);
 8002956:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800295a:	f003 fe0d 	bl	8006578 <vTaskDelay>
						xQueueSendToBack(xDisplayDutyQueue, &duty, 35 / portTICK_RATE_MS);
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <readButtonTask+0xc04>)
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	f107 0114 	add.w	r1, r7, #20
 8002966:	2300      	movs	r3, #0
 8002968:	2223      	movs	r2, #35	; 0x23
 800296a:	f003 f8e7 	bl	8005b3c <xQueueGenericSend>
						set_duty_stage = true;			// Для режима ШИМ нужно задать ещё и скважность
 800296e:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <readButtonTask+0xc08>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
						set_freq_stage = false;
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <readButtonTask+0xbf0>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
						continue;
 800297a:	e05e      	b.n	8002a3a <readButtonTask+0xbea>
					}
					else 		// Если мы в режиме ЦАПа, то уже ничего больше задавать не нужно
					{
						set_duty_stage = false;
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <readButtonTask+0xc08>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
						sprintf(str_buff, "%s", "DAC RUN");
 8002982:	f107 0308 	add.w	r3, r7, #8
 8002986:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <readButtonTask+0xc0c>)
 8002988:	4930      	ldr	r1, [pc, #192]	; (8002a4c <readButtonTask+0xbfc>)
 800298a:	4618      	mov	r0, r3
 800298c:	f005 fc10 	bl	80081b0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 8002990:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <readButtonTask+0xc00>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	f107 0108 	add.w	r1, r7, #8
 8002998:	2300      	movs	r3, #0
 800299a:	220a      	movs	r2, #10
 800299c:	f003 f8ce 	bl	8005b3c <xQueueGenericSend>
						dac_is_running = true;
 80029a0:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <readButtonTask+0xc10>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
						/*	Завернем строку в buff о том, какой у нас режим работает, в зависимости от значения
						 	 переменной mode и сразу отправим её в очередь.	А также поднимем флаг для ЦАПа*/
					}
					set_freq_stage = false;
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <readButtonTask+0xbf0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
				}
				if( set_duty_stage )				// Здесь только когда выбрали PWM
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <readButtonTask+0xc08>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d03c      	beq.n	8002a2e <readButtonTask+0xbde>
				{
					set_duty_stage = false;
 80029b4:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <readButtonTask+0xc08>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "%s", "PWM RUN");
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <readButtonTask+0xc14>)
 80029c0:	4922      	ldr	r1, [pc, #136]	; (8002a4c <readButtonTask+0xbfc>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	f005 fbf4 	bl	80081b0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <readButtonTask+0xc00>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f107 0108 	add.w	r1, r7, #8
 80029d0:	2300      	movs	r3, #0
 80029d2:	220a      	movs	r2, #10
 80029d4:	f003 f8b2 	bl	8005b3c <xQueueGenericSend>
					pwm_is_running = true;
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <readButtonTask+0xc18>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
				}
				break;
 80029de:	e026      	b.n	8002a2e <readButtonTask+0xbde>

			case BUTTON_RETURN_Pin:
				set_mode_stage = false;
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <readButtonTask+0xc1c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
				set_signal_stage = false;
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <readButtonTask+0xc20>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
				set_duty_stage = false;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <readButtonTask+0xc08>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
				set_freq_stage = false;
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <readButtonTask+0xbf0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
				start_stage = true;
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <readButtonTask+0xc24>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
				sprintf(str_buff, "%s", "SET MODE");
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <readButtonTask+0xc28>)
 8002a04:	4911      	ldr	r1, [pc, #68]	; (8002a4c <readButtonTask+0xbfc>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f005 fbd2 	bl	80081b0 <siprintf>
				xQueueSendToBack(xDisplayStringQueue,str_buff, 10 / portTICK_RATE_MS);
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <readButtonTask+0xc00>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	f107 0108 	add.w	r1, r7, #8
 8002a14:	2300      	movs	r3, #0
 8002a16:	220a      	movs	r2, #10
 8002a18:	f003 f890 	bl	8005b3c <xQueueGenericSend>
				break;
 8002a1c:	e008      	b.n	8002a30 <readButtonTask+0xbe0>
				break;
 8002a1e:	bf00      	nop
 8002a20:	e006      	b.n	8002a30 <readButtonTask+0xbe0>
				break;
 8002a22:	bf00      	nop
 8002a24:	e004      	b.n	8002a30 <readButtonTask+0xbe0>
				break;
 8002a26:	bf00      	nop
 8002a28:	e002      	b.n	8002a30 <readButtonTask+0xbe0>
				break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <readButtonTask+0xbe0>
				break;
 8002a2e:	bf00      	nop
		}

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a34:	4811      	ldr	r0, [pc, #68]	; (8002a7c <readButtonTask+0xc2c>)
 8002a36:	f000 ff96 	bl	8003966 <HAL_GPIO_TogglePin>
		button_num = 0;
 8002a3a:	f7ff ba1d 	b.w	8001e78 <readButtonTask+0x28>
 8002a3e:	bf00      	nop
 8002a40:	200006da 	.word	0x200006da
 8002a44:	20000102 	.word	0x20000102
 8002a48:	0800a7e0 	.word	0x0800a7e0
 8002a4c:	0800a7c4 	.word	0x0800a7c4
 8002a50:	200006e4 	.word	0x200006e4
 8002a54:	200006ec 	.word	0x200006ec
 8002a58:	200006db 	.word	0x200006db
 8002a5c:	0800a7ec 	.word	0x0800a7ec
 8002a60:	200006dc 	.word	0x200006dc
 8002a64:	0800a7f4 	.word	0x0800a7f4
 8002a68:	200006dd 	.word	0x200006dd
 8002a6c:	200006d8 	.word	0x200006d8
 8002a70:	200006d9 	.word	0x200006d9
 8002a74:	20000100 	.word	0x20000100
 8002a78:	0800a6f4 	.word	0x0800a6f4
 8002a7c:	40020800 	.word	0x40020800

08002a80 <displayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTask */
void displayTask(void const * argument)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayTask */
  /* Infinite loop */
	char str[9] = {};
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	f107 0318 	add.w	r3, r7, #24
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	711a      	strb	r2, [r3, #4]
	uint8_t segment;
	uint8_t offset;
	float freq = 0.0f;
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
	float duty = 0.0f;
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if( xQueueReceive(xDisplayStringQueue, str, 10 / portTICK_RATE_MS) == pdPASS )
 8002aa2:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <displayTask+0x110>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f107 0114 	add.w	r1, r7, #20
 8002aaa:	220a      	movs	r2, #10
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 f9df 	bl	8005e70 <xQueueReceive>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <displayTask+0x46>
		{
			MAX7219_clearAll();
 8002ab8:	f7fe fe2e 	bl	8001718 <MAX7219_clearAll>
			MAX7219_sendString(str);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fd67 	bl	8001594 <MAX7219_sendString>
		}
		if( set_duty_stage )
 8002ac6:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <displayTask+0x114>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d02b      	beq.n	8002b26 <displayTask+0xa6>
		{
			if( xQueueReceive(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS) != pdPASS ) continue;
 8002ace:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <displayTask+0x118>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f107 010c 	add.w	r1, r7, #12
 8002ad6:	220a      	movs	r2, #10
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 f9c9 	bl	8005e70 <xQueueReceive>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d150      	bne.n	8002b86 <displayTask+0x106>
			MAX7219_clearAll();
 8002ae4:	f7fe fe18 	bl	8001718 <MAX7219_clearAll>
			offset = MAX7219_sendDuty(duty);		// Возвращается смещение
 8002ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aec:	eeb0 0a67 	vmov.f32	s0, s15
 8002af0:	f7fe fdda 	bl	80016a8 <MAX7219_sendDuty>
 8002af4:	4603      	mov	r3, r0
 8002af6:	77fb      	strb	r3, [r7, #31]
			MAX7219_clearOneSegment( offset - (1 + digit_position) );
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <displayTask+0x11c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	7ffa      	ldrb	r2, [r7, #31]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fdf6 	bl	80016f8 <MAX7219_clearOneSegment>

			vTaskDelay(300 / portTICK_RATE_MS);	// Потушим на 500 мс
 8002b0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b10:	f003 fd32 	bl	8006578 <vTaskDelay>
			MAX7219_clearAll();
 8002b14:	f7fe fe00 	bl	8001718 <MAX7219_clearAll>
			MAX7219_sendDuty(duty);
 8002b18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b20:	f7fe fdc2 	bl	80016a8 <MAX7219_sendDuty>
 8002b24:	e7bd      	b.n	8002aa2 <displayTask+0x22>
		}
		else if( set_freq_stage )	// Здесь же ждём число, ибо строк уже тут не будет
 8002b26:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <displayTask+0x120>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0b9      	beq.n	8002aa2 <displayTask+0x22>
		{
			if( xQueueReceive(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS) != pdPASS) continue;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <displayTask+0x124>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f107 0110 	add.w	r1, r7, #16
 8002b36:	220a      	movs	r2, #10
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 f999 	bl	8005e70 <xQueueReceive>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d122      	bne.n	8002b8a <displayTask+0x10a>
			MAX7219_clearAll();
 8002b44:	f7fe fde8 	bl	8001718 <MAX7219_clearAll>
			offset = MAX7219_sendFreq(freq);		// Возвращается смещение
 8002b48:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	f7fe fdba 	bl	80016c8 <MAX7219_sendFreq>
 8002b54:	4603      	mov	r3, r0
 8002b56:	77fb      	strb	r3, [r7, #31]
			MAX7219_clearOneSegment( offset - (1 + digit_position) );
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <displayTask+0x11c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	7ffa      	ldrb	r2, [r7, #31]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fdc6 	bl	80016f8 <MAX7219_clearOneSegment>
			 * и нужен	*/
			/*if( (offset - (2 + digit_position)) == 0 )
			{
				digit_position = POINT_HUNDREDS;
			}*/
			vTaskDelay(300 / portTICK_RATE_MS);	// Потушим на 500 мс
 8002b6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b70:	f003 fd02 	bl	8006578 <vTaskDelay>
			MAX7219_clearAll();
 8002b74:	f7fe fdd0 	bl	8001718 <MAX7219_clearAll>
			MAX7219_sendFreq(freq);
 8002b78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b80:	f7fe fda2 	bl	80016c8 <MAX7219_sendFreq>
 8002b84:	e78d      	b.n	8002aa2 <displayTask+0x22>
			if( xQueueReceive(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS) != pdPASS ) continue;
 8002b86:	bf00      	nop
 8002b88:	e78b      	b.n	8002aa2 <displayTask+0x22>
			if( xQueueReceive(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS) != pdPASS) continue;
 8002b8a:	bf00      	nop
		if( xQueueReceive(xDisplayStringQueue, str, 10 / portTICK_RATE_MS) == pdPASS )
 8002b8c:	e789      	b.n	8002aa2 <displayTask+0x22>
 8002b8e:	bf00      	nop
 8002b90:	200006e4 	.word	0x200006e4
 8002b94:	200006db 	.word	0x200006db
 8002b98:	200006ec 	.word	0x200006ec
 8002b9c:	20000101 	.word	0x20000101
 8002ba0:	200006da 	.word	0x200006da
 8002ba4:	200006e8 	.word	0x200006e8

08002ba8 <dacTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dacTask */
void dacTask(void const * argument)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dacTask */
  /* Infinite loop */
	for(;;)
	{
		if( dac_is_running )
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <dacTask+0x7c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d026      	beq.n	8002c08 <dacTask+0x60>
		{
			DAC_init(sig, freq_dac);
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <dacTask+0x80>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <dacTask+0x84>)
 8002bc0:	edd2 7a00 	vldr	s15, [r2]
 8002bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f9fb 	bl	8000fc4 <DAC_init>
		}
		while( dac_is_running )
 8002bce:	e01b      	b.n	8002c08 <dacTask+0x60>
		{
			switch(sig) {
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <dacTask+0x80>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d817      	bhi.n	8002c0a <dacTask+0x62>
 8002bda:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <dacTask+0x38>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002bf7 	.word	0x08002bf7
 8002be8:	08002bfd 	.word	0x08002bfd
 8002bec:	08002c03 	.word	0x08002c03
				case TRIANGLE:
					DAC_writeTriangle();
 8002bf0:	f7fe fa8a 	bl	8001108 <DAC_writeTriangle>
					break;
 8002bf4:	e009      	b.n	8002c0a <dacTask+0x62>
				case SIN:
					DAC_writeSin();
 8002bf6:	f7fe fa5b 	bl	80010b0 <DAC_writeSin>
					break;
 8002bfa:	e006      	b.n	8002c0a <dacTask+0x62>
				case SAW:
					DAC_writeSaw();
 8002bfc:	f7fe fac0 	bl	8001180 <DAC_writeSaw>
					break;
 8002c00:	e003      	b.n	8002c0a <dacTask+0x62>
				case REVERSE_SAW:
					DAC_writeReverseSaw();
 8002c02:	f7fe fae3 	bl	80011cc <DAC_writeReverseSaw>
					break;
 8002c06:	e000      	b.n	8002c0a <dacTask+0x62>
		while( dac_is_running )
 8002c08:	bf00      	nop
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <dacTask+0x7c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1dd      	bne.n	8002bd0 <dacTask+0x28>
			}
		}
		DAC_stop();
 8002c14:	f7fe f9c2 	bl	8000f9c <DAC_stop>
		vTaskDelay(500 / portTICK_RATE_MS);
 8002c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c1c:	f003 fcac 	bl	8006578 <vTaskDelay>
		if( dac_is_running )
 8002c20:	e7c6      	b.n	8002bb0 <dacTask+0x8>
 8002c22:	bf00      	nop
 8002c24:	200006dc 	.word	0x200006dc
 8002c28:	2000010c 	.word	0x2000010c
 8002c2c:	20000104 	.word	0x20000104

08002c30 <pwmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwmTask */
void pwmTask(void const * argument)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pwmTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f002 fd54 	bl	80056e6 <osDelay>
 8002c3e:	e7fb      	b.n	8002c38 <pwmTask+0x8>

08002c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c52:	f000 fb9f 	bl	8003394 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM9)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a48      	ldr	r2, [pc, #288]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	f040 8088 	bne.w	8002d72 <HAL_TIM_PeriodElapsedCallback+0x132>
	{
		HAL_TIM_Base_Stop_IT(&htim9);
 8002c62:	4847      	ldr	r0, [pc, #284]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002c64:	f001 fe6a 	bl	800493c <HAL_TIM_Base_Stop_IT>
		BaseType_t high_task_awoken = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
		if( HAL_GPIO_ReadPin(GPIOB, button_exti) == GPIO_PIN_RESET )	// Если спустя 50 мс сигнал устойчивый
 8002c6c:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	4619      	mov	r1, r3
 8002c74:	4844      	ldr	r0, [pc, #272]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002c76:	f000 fe45 	bl	8003904 <HAL_GPIO_ReadPin>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d14a      	bne.n	8002d16 <HAL_TIM_PeriodElapsedCallback+0xd6>
		{
			uint16_t button_num = button_exti;
 8002c80:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	817b      	strh	r3, [r7, #10]
			switch(button_exti)
 8002c88:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c92:	d01d      	beq.n	8002cd0 <HAL_TIM_PeriodElapsedCallback+0x90>
 8002c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c98:	dc34      	bgt.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8002c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c9e:	d027      	beq.n	8002cf0 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8002ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca4:	dc2e      	bgt.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d01d      	beq.n	8002ce8 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8002cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb0:	dc28      	bgt.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	d013      	beq.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	dc22      	bgt.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d003      	beq.n	8002cca <HAL_TIM_PeriodElapsedCallback+0x8a>
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d007      	beq.n	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x98>
 8002cc8:	e01c      	b.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
			{
				case BUTTON_LEFT_Pin:
					button_num = BUTTON_LEFT_Pin;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	817b      	strh	r3, [r7, #10]
					break;
 8002cce:	e019      	b.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_RIGHT_Pin:
					button_num = BUTTON_RIGHT_Pin;
 8002cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd4:	817b      	strh	r3, [r7, #10]
					break;
 8002cd6:	e015      	b.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_UP_Pin:
					button_num = BUTTON_UP_Pin;
 8002cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cdc:	817b      	strh	r3, [r7, #10]
					break;
 8002cde:	e011      	b.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_DOWN_Pin:
					button_num = BUTTON_DOWN_Pin;
 8002ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce4:	817b      	strh	r3, [r7, #10]
					break;
 8002ce6:	e00d      	b.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_OK_Pin:
					button_num = BUTTON_OK_Pin;
 8002ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cec:	817b      	strh	r3, [r7, #10]
					break;
 8002cee:	e009      	b.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_RETURN_Pin:
					button_num = BUTTON_RETURN_Pin;
 8002cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cf4:	817b      	strh	r3, [r7, #10]
					dac_is_running = false;				// Чтобы остановить бесконечную работу ЦАПа или Ш�?Ма
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
					pwm_is_running = false;
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
					break;
 8002d02:	bf00      	nop
			}
			xQueueSendToBackFromISR(xButtonQueue, &button_num, &high_task_awoken);	// Отправим номер порта в очередь
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	f107 020c 	add.w	r2, r7, #12
 8002d0c:	f107 010a 	add.w	r1, r7, #10
 8002d10:	2300      	movs	r3, #0
 8002d12:	f003 f811 	bl	8005d38 <xQueueGenericSendFromISR>
		}
		EXTI->PR = (1<<1);
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002d18:	2202      	movs	r2, #2
 8002d1a:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<10);
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d22:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<12);
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d2a:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<13);
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d32:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<14);
 8002d34:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d3a:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<15);
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002d3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d42:	615a      	str	r2, [r3, #20]
		/*	Чистим флаги прерываний которые могли произойти во время задрежки таймером, чтобы не попасть в колбек
		 * ещё лишний раз	*/
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d44:	2007      	movs	r0, #7
 8002d46:	f000 fc3d 	bl	80035c4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002d4a:	2008      	movs	r0, #8
 8002d4c:	f000 fc3a 	bl	80035c4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d50:	2028      	movs	r0, #40	; 0x28
 8002d52:	f000 fc37 	bl	80035c4 <HAL_NVIC_EnableIRQ>
		if( high_task_awoken == pdTRUE )
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10a      	bne.n	8002d72 <HAL_TIM_PeriodElapsedCallback+0x132>
		{
			portYIELD_FROM_ISR(high_task_awoken);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_TIM_PeriodElapsedCallback+0x132>
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	f3bf 8f6f 	isb	sy
		}
		/* Обратно включили все прерывания и остановили таймер в любом случае, был это дребезг
		 * или нет. Сразу переключим контекст, если надо.	*/
	}
  /* USER CODE END Callback 1 */
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	20000678 	.word	0x20000678
 8002d84:	200006de 	.word	0x200006de
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	200006dc 	.word	0x200006dc
 8002d90:	200006dd 	.word	0x200006dd
 8002d94:	200006e0 	.word	0x200006e0
 8002d98:	40013c00 	.word	0x40013c00
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <Error_Handler+0x8>
	...

08002dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_MspInit+0x54>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <HAL_MspInit+0x54>)
 8002dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_MspInit+0x54>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_MspInit+0x54>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <HAL_MspInit+0x54>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_MspInit+0x54>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	210f      	movs	r1, #15
 8002dee:	f06f 0001 	mvn.w	r0, #1
 8002df2:	f000 fbcb 	bl	800358c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800

08002e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_SPI_MspInit+0x84>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d12b      	bne.n	8002e7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e34:	6453      	str	r3, [r2, #68]	; 0x44
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e5e:	2338      	movs	r3, #56	; 0x38
 8002e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e6e:	2305      	movs	r3, #5
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	4619      	mov	r1, r3
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <HAL_SPI_MspInit+0x8c>)
 8002e7a:	f000 fbbf 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e7e:	bf00      	nop
 8002e80:	3728      	adds	r7, #40	; 0x28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40013000 	.word	0x40013000
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40020400 	.word	0x40020400

08002e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_TIM_Base_MspInit+0x98>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002ec2:	e02e      	b.n	8002f22 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <HAL_TIM_Base_MspInit+0xa0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10e      	bne.n	8002eec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
}
 8002eea:	e01a      	b.n	8002f22 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM9)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_TIM_Base_MspInit+0xa4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d115      	bne.n	8002f22 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a0c      	ldr	r2, [pc, #48]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_TIM_Base_MspInit+0x9c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2105      	movs	r1, #5
 8002f16:	2018      	movs	r0, #24
 8002f18:	f000 fb38 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002f1c:	2018      	movs	r0, #24
 8002f1e:	f000 fb51 	bl	80035c4 <HAL_NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40000800 	.word	0x40000800
 8002f38:	40014000 	.word	0x40014000

08002f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <HAL_TIM_MspPostInit+0x68>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d11d      	bne.n	8002f9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_TIM_MspPostInit+0x6c>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_TIM_MspPostInit+0x6c>)
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_TIM_MspPostInit+0x6c>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8e:	f107 030c 	add.w	r3, r7, #12
 8002f92:	4619      	mov	r1, r3
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <HAL_TIM_MspPostInit+0x70>)
 8002f96:	f000 fb31 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020400 	.word	0x40020400

08002fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	; 0x38
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_InitTick+0xe8>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	4a33      	ldr	r2, [pc, #204]	; (8003098 <HAL_InitTick+0xe8>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_InitTick+0xe8>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fdc:	f107 0210 	add.w	r2, r7, #16
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 f934 	bl	8004254 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ff6:	f001 f919 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8002ffa:	6378      	str	r0, [r7, #52]	; 0x34
 8002ffc:	e004      	b.n	8003008 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ffe:	f001 f915 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8003002:	4603      	mov	r3, r0
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	4a24      	ldr	r2, [pc, #144]	; (800309c <HAL_InitTick+0xec>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	0c9b      	lsrs	r3, r3, #18
 8003012:	3b01      	subs	r3, #1
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003016:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <HAL_InitTick+0xf0>)
 8003018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800301c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_InitTick+0xf0>)
 8003020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003024:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <HAL_InitTick+0xf0>)
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800302c:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_InitTick+0xf0>)
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_InitTick+0xf0>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_InitTick+0xf0>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800303e:	4818      	ldr	r0, [pc, #96]	; (80030a0 <HAL_InitTick+0xf0>)
 8003040:	f001 fbca 	bl	80047d8 <HAL_TIM_Base_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800304a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11b      	bne.n	800308a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003052:	4813      	ldr	r0, [pc, #76]	; (80030a0 <HAL_InitTick+0xf0>)
 8003054:	f001 fc10 	bl	8004878 <HAL_TIM_Base_Start_IT>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800305e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003062:	2b00      	cmp	r3, #0
 8003064:	d111      	bne.n	800308a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003066:	201c      	movs	r0, #28
 8003068:	f000 faac 	bl	80035c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b0f      	cmp	r3, #15
 8003070:	d808      	bhi.n	8003084 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003072:	2200      	movs	r2, #0
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	201c      	movs	r0, #28
 8003078:	f000 fa88 	bl	800358c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800307c:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_InitTick+0xf4>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e002      	b.n	800308a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800308a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800308e:	4618      	mov	r0, r3
 8003090:	3738      	adds	r7, #56	; 0x38
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	431bde83 	.word	0x431bde83
 80030a0:	200006f0 	.word	0x200006f0
 80030a4:	20000138 	.word	0x20000138

080030a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <NMI_Handler+0x4>

080030ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
	    uint32_t pc;
	    uint32_t psr;
	  }*stack_ptr; //Указатель на текущее значение стека(SP)


	  asm(
 80030b4:	f01e 0f04 	tst.w	lr, #4
 80030b8:	bf0c      	ite	eq
 80030ba:	f3ef 8308 	mrseq	r3, MSP
 80030be:	f3ef 8309 	mrsne	r3, PSP
 80030c2:	607b      	str	r3, [r7, #4]
	      );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  continue;
 80030c4:	e7fe      	b.n	80030c4 <HardFault_Handler+0x16>

080030c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ca:	e7fe      	b.n	80030ca <MemManage_Handler+0x4>

080030cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <BusFault_Handler+0x4>

080030d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <UsageFault_Handler+0x4>

080030d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_LEFT_Pin);
 80030ea:	2002      	movs	r0, #2
 80030ec:	f000 fc56 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80030fa:	f001 fca7 	bl	8004a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000678 	.word	0x20000678

08003108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <TIM2_IRQHandler+0x10>)
 800310e:	f001 fc9d 	bl	8004a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200006f0 	.word	0x200006f0

0800311c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8003120:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003124:	f000 fc3a 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8003128:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800312c:	f000 fc36 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OK_Pin);
 8003130:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003134:	f000 fc32 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RETURN_Pin);
 8003138:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800313c:	f000 fc2e 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RIGHT_Pin);
 8003140:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003144:	f000 fc2a 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}

0800314c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return 1;
 8003150:	2301      	movs	r3, #1
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_kill>:

int _kill(int pid, int sig)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003166:	f004 fb79 	bl	800785c <__errno>
 800316a:	4603      	mov	r3, r0
 800316c:	2216      	movs	r2, #22
 800316e:	601a      	str	r2, [r3, #0]
  return -1;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_exit>:

void _exit (int status)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ffe7 	bl	800315c <_kill>
  while (1) {}    /* Make sure we hang here */
 800318e:	e7fe      	b.n	800318e <_exit+0x12>

08003190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e00a      	b.n	80031b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031a2:	f3af 8000 	nop.w
 80031a6:	4601      	mov	r1, r0
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	60ba      	str	r2, [r7, #8]
 80031ae:	b2ca      	uxtb	r2, r1
 80031b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3301      	adds	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	dbf0      	blt.n	80031a2 <_read+0x12>
  }

  return len;
 80031c0:	687b      	ldr	r3, [r7, #4]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e009      	b.n	80031f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	60ba      	str	r2, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	3301      	adds	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	dbf1      	blt.n	80031dc <_write+0x12>
  }
  return len;
 80031f8:	687b      	ldr	r3, [r7, #4]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_close>:

int _close(int file)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800322a:	605a      	str	r2, [r3, #4]
  return 0;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <_isatty>:

int _isatty(int file)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003242:	2301      	movs	r3, #1
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <_sbrk+0x5c>)
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <_sbrk+0x60>)
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <_sbrk+0x64>)
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <_sbrk+0x68>)
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <_sbrk+0x64>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d207      	bcs.n	80032ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800329c:	f004 fade 	bl	800785c <__errno>
 80032a0:	4603      	mov	r3, r0
 80032a2:	220c      	movs	r2, #12
 80032a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	e009      	b.n	80032c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <_sbrk+0x64>)
 80032bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20010000 	.word	0x20010000
 80032cc:	00000400 	.word	0x00000400
 80032d0:	20000738 	.word	0x20000738
 80032d4:	20007dd8 	.word	0x20007dd8

080032d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <SystemInit+0x20>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <SystemInit+0x20>)
 80032e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003334 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003300:	480d      	ldr	r0, [pc, #52]	; (8003338 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003302:	490e      	ldr	r1, [pc, #56]	; (800333c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003304:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003308:	e002      	b.n	8003310 <LoopCopyDataInit>

0800330a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800330a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800330c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330e:	3304      	adds	r3, #4

08003310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003314:	d3f9      	bcc.n	800330a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003316:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003318:	4c0b      	ldr	r4, [pc, #44]	; (8003348 <LoopFillZerobss+0x26>)
  movs r3, #0
 800331a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800331c:	e001      	b.n	8003322 <LoopFillZerobss>

0800331e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003320:	3204      	adds	r2, #4

08003322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003324:	d3fb      	bcc.n	800331e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003326:	f7ff ffd7 	bl	80032d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800332a:	f004 fa9d 	bl	8007868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800332e:	f7fe fa6b 	bl	8001808 <main>
  bx  lr    
 8003332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003334:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800333c:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8003340:	0800ac04 	.word	0x0800ac04
  ldr r2, =_sbss
 8003344:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8003348:	20007dd4 	.word	0x20007dd4

0800334c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800334c:	e7fe      	b.n	800334c <ADC_IRQHandler>
	...

08003350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_Init+0x40>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <HAL_Init+0x40>)
 800335a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800335e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_Init+0x40>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_Init+0x40>)
 8003366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_Init+0x40>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a07      	ldr	r2, [pc, #28]	; (8003390 <HAL_Init+0x40>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003378:	2003      	movs	r0, #3
 800337a:	f000 f8fc 	bl	8003576 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800337e:	200f      	movs	r0, #15
 8003380:	f7ff fe16 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003384:	f7ff fd12 	bl	8002dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023c00 	.word	0x40023c00

08003394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x20>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x24>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_IncTick+0x24>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000013c 	.word	0x2000013c
 80033b8:	2000073c 	.word	0x2000073c

080033bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return uwTick;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_GetTick+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	2000073c 	.word	0x2000073c

080033d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f0:	4013      	ands	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003406:	4a04      	ldr	r2, [pc, #16]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	60d3      	str	r3, [r2, #12]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <__NVIC_GetPriorityGrouping+0x18>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	f003 0307 	and.w	r3, r3, #7
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db0b      	blt.n	8003462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <__NVIC_EnableIRQ+0x38>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2001      	movs	r0, #1
 800345a:	fa00 f202 	lsl.w	r2, r0, r2
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e100 	.word	0xe000e100

08003474 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db12      	blt.n	80034ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	490a      	ldr	r1, [pc, #40]	; (80034b8 <__NVIC_DisableIRQ+0x44>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	3320      	adds	r3, #32
 800349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034a0:	f3bf 8f4f 	dsb	sy
}
 80034a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034a6:	f3bf 8f6f 	isb	sy
}
 80034aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	; (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	; (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	; 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ff28 	bl	80033d4 <__NVIC_SetPriorityGrouping>
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800359e:	f7ff ff3d 	bl	800341c <__NVIC_GetPriorityGrouping>
 80035a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	6978      	ldr	r0, [r7, #20]
 80035aa:	f7ff ffb1 	bl	8003510 <NVIC_EncodePriority>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff80 	bl	80034bc <__NVIC_SetPriority>
}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff30 	bl	8003438 <__NVIC_EnableIRQ>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff40 	bl	8003474 <__NVIC_DisableIRQ>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e159      	b.n	80038cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003618:	2201      	movs	r2, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	f040 8148 	bne.w	80038c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d005      	beq.n	800364e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364a:	2b02      	cmp	r3, #2
 800364c:	d130      	bne.n	80036b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003684:	2201      	movs	r2, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 0201 	and.w	r2, r3, #1
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d017      	beq.n	80036ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d123      	bne.n	8003740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	08da      	lsrs	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3208      	adds	r2, #8
 8003700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	220f      	movs	r2, #15
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	08da      	lsrs	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3208      	adds	r2, #8
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0203 	and.w	r2, r3, #3
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a2 	beq.w	80038c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_GPIO_Init+0x2e8>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	4a56      	ldr	r2, [pc, #344]	; (80038e4 <HAL_GPIO_Init+0x2e8>)
 800378c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003790:	6453      	str	r3, [r2, #68]	; 0x44
 8003792:	4b54      	ldr	r3, [pc, #336]	; (80038e4 <HAL_GPIO_Init+0x2e8>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800379e:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <HAL_GPIO_Init+0x2ec>)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a49      	ldr	r2, [pc, #292]	; (80038ec <HAL_GPIO_Init+0x2f0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_GPIO_Init+0x202>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a48      	ldr	r2, [pc, #288]	; (80038f0 <HAL_GPIO_Init+0x2f4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x1fe>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a47      	ldr	r2, [pc, #284]	; (80038f4 <HAL_GPIO_Init+0x2f8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a46      	ldr	r2, [pc, #280]	; (80038f8 <HAL_GPIO_Init+0x2fc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_GPIO_Init+0x1f6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a45      	ldr	r2, [pc, #276]	; (80038fc <HAL_GPIO_Init+0x300>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_GPIO_Init+0x1f2>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e008      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037ee:	2307      	movs	r3, #7
 80037f0:	e006      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037f2:	2303      	movs	r3, #3
 80037f4:	e004      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e002      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037fe:	2300      	movs	r3, #0
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	f002 0203 	and.w	r2, r2, #3
 8003806:	0092      	lsls	r2, r2, #2
 8003808:	4093      	lsls	r3, r2
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003810:	4935      	ldr	r1, [pc, #212]	; (80038e8 <HAL_GPIO_Init+0x2ec>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	3302      	adds	r3, #2
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <HAL_GPIO_Init+0x304>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003842:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <HAL_GPIO_Init+0x304>)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_GPIO_Init+0x304>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800386c:	4a24      	ldr	r2, [pc, #144]	; (8003900 <HAL_GPIO_Init+0x304>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_GPIO_Init+0x304>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003896:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <HAL_GPIO_Init+0x304>)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_GPIO_Init+0x304>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038c0:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_GPIO_Init+0x304>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	f67f aea2 	bls.w	8003618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3724      	adds	r7, #36	; 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40020000 	.word	0x40020000
 80038f0:	40020400 	.word	0x40020400
 80038f4:	40020800 	.word	0x40020800
 80038f8:	40020c00 	.word	0x40020c00
 80038fc:	40021000 	.word	0x40021000
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e001      	b.n	8003926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	041a      	lsls	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003978:	887a      	ldrh	r2, [r7, #2]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	041a      	lsls	r2, r3, #16
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	43d9      	mvns	r1, r3
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	400b      	ands	r3, r1
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	619a      	str	r2, [r3, #24]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d006      	beq.n	80039c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039b2:	4a05      	ldr	r2, [pc, #20]	; (80039c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd ff08 	bl	80017d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40013c00 	.word	0x40013c00

080039cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e267      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d075      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d00c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b85      	ldr	r3, [pc, #532]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d112      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4b7e      	ldr	r3, [pc, #504]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d05b      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x108>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d157      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e242      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCC_OscConfig+0x74>
 8003a32:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e01d      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x98>
 8003a4a:	4b70      	ldr	r3, [pc, #448]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6f      	ldr	r2, [pc, #444]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6c      	ldr	r2, [pc, #432]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a64:	4b69      	ldr	r3, [pc, #420]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7ff fc9a 	bl	80033bc <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7ff fc96 	bl	80033bc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e207      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xc0>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7ff fc86 	bl	80033bc <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7ff fc82 	bl	80033bc <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1f3      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xe8>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1c7      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4937      	ldr	r1, [pc, #220]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e03a      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7ff fc3b 	bl	80033bc <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7ff fc37 	bl	80033bc <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1a8      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4925      	ldr	r1, [pc, #148]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7ff fc1a 	bl	80033bc <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8c:	f7ff fc16 	bl	80033bc <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e187      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d036      	beq.n	8003c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7ff fbfa 	bl	80033bc <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7ff fbf6 	bl	80033bc <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e167      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x200>
 8003bea:	e01b      	b.n	8003c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7ff fbe3 	bl	80033bc <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	e00e      	b.n	8003c18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7ff fbdf 	bl	80033bc <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d907      	bls.n	8003c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e150      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	42470000 	.word	0x42470000
 8003c14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ea      	bne.n	8003bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8097 	beq.w	8003d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c36:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	4b7d      	ldr	r3, [pc, #500]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b7a      	ldr	r3, [pc, #488]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	4b77      	ldr	r3, [pc, #476]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6e:	4b74      	ldr	r3, [pc, #464]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a73      	ldr	r2, [pc, #460]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7ff fb9f 	bl	80033bc <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7ff fb9b 	bl	80033bc <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e10c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x2ea>
 8003ca8:	4b64      	ldr	r3, [pc, #400]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a63      	ldr	r2, [pc, #396]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x30c>
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a5e      	ldr	r2, [pc, #376]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	4b5c      	ldr	r3, [pc, #368]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a57      	ldr	r2, [pc, #348]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce4:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a54      	ldr	r2, [pc, #336]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7ff fb60 	bl	80033bc <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7ff fb5c 	bl	80033bc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0cb      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <HAL_RCC_OscConfig+0x334>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d24:	f7ff fb4a 	bl	80033bc <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7ff fb46 	bl	80033bc <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0b5      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ee      	bne.n	8003d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a1 	beq.w	8003eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d6a:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d05c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d141      	bne.n	8003e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7ff fb1a 	bl	80033bc <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7ff fb16 	bl	80033bc <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e087      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	491b      	ldr	r1, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7ff faef 	bl	80033bc <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de2:	f7ff faeb 	bl	80033bc <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e05c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x416>
 8003e00:	e054      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7ff fad8 	bl	80033bc <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7ff fad4 	bl	80033bc <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e045      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x444>
 8003e2e:	e03d      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e038      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <HAL_RCC_OscConfig+0x4ec>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d028      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d121      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d11a      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cc      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d90c      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d044      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d119      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e067      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7ff fa06 	bl	80033bc <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7ff fa02 	bl	80033bc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e04f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d20c      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe ffa4 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	0800a804 	.word	0x0800a804
 8004080:	20000134 	.word	0x20000134
 8004084:	20000138 	.word	0x20000138

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800408c:	b090      	sub	sp, #64	; 0x40
 800408e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004098:	2300      	movs	r3, #0
 800409a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a0:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x40>
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	f200 80a1 	bhi.w	80041f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ba:	e09b      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b53      	ldr	r3, [pc, #332]	; (800420c <HAL_RCC_GetSysClockFreq+0x184>)
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040c0:	e09b      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040c6:	e098      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d2:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d028      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	627a      	str	r2, [r7, #36]	; 0x24
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040f0:	2100      	movs	r1, #0
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 80040f4:	fb03 f201 	mul.w	r2, r3, r1
 80040f8:	2300      	movs	r3, #0
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	4413      	add	r3, r2
 8004100:	4a43      	ldr	r2, [pc, #268]	; (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 8004102:	fba0 1202 	umull	r1, r2, r0, r2
 8004106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004108:	460a      	mov	r2, r1
 800410a:	62ba      	str	r2, [r7, #40]	; 0x28
 800410c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410e:	4413      	add	r3, r2
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	2200      	movs	r2, #0
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	61fa      	str	r2, [r7, #28]
 800411a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800411e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004122:	f7fc fdb9 	bl	8000c98 <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4613      	mov	r3, r2
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800412e:	e053      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004130:	4b35      	ldr	r3, [pc, #212]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	2200      	movs	r2, #0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	617a      	str	r2, [r7, #20]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004142:	f04f 0b00 	mov.w	fp, #0
 8004146:	4652      	mov	r2, sl
 8004148:	465b      	mov	r3, fp
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	0159      	lsls	r1, r3, #5
 8004154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004158:	0150      	lsls	r0, r2, #5
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	ebb2 080a 	subs.w	r8, r2, sl
 8004162:	eb63 090b 	sbc.w	r9, r3, fp
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004172:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004176:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800417a:	ebb2 0408 	subs.w	r4, r2, r8
 800417e:	eb63 0509 	sbc.w	r5, r3, r9
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	00eb      	lsls	r3, r5, #3
 800418c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004190:	00e2      	lsls	r2, r4, #3
 8004192:	4614      	mov	r4, r2
 8004194:	461d      	mov	r5, r3
 8004196:	eb14 030a 	adds.w	r3, r4, sl
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	eb45 030b 	adc.w	r3, r5, fp
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ae:	4629      	mov	r1, r5
 80041b0:	028b      	lsls	r3, r1, #10
 80041b2:	4621      	mov	r1, r4
 80041b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b8:	4621      	mov	r1, r4
 80041ba:	028a      	lsls	r2, r1, #10
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c2:	2200      	movs	r2, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	60fa      	str	r2, [r7, #12]
 80041c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041cc:	f7fc fd64 	bl	8000c98 <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4613      	mov	r3, r2
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041f2:	e002      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetSysClockFreq+0x184>)
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3740      	adds	r7, #64	; 0x40
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	00f42400 	.word	0x00f42400
 8004210:	017d7840 	.word	0x017d7840

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000134 	.word	0x20000134

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	0800a814 	.word	0x0800a814

08004254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	220f      	movs	r2, #15
 8004262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_RCC_GetClockConfig+0x60>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40023c00 	.word	0x40023c00

080042b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e07b      	b.n	80043c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d108      	bne.n	80042e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042da:	d009      	beq.n	80042f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
 80042e2:	e005      	b.n	80042f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe fd7a 	bl	8002e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	ea42 0103 	orr.w	r1, r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0104 	and.w	r1, r3, #4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0210 	and.w	r2, r3, #16
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b088      	sub	sp, #32
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	603b      	str	r3, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_SPI_Transmit+0x22>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e126      	b.n	800463a <HAL_SPI_Transmit+0x270>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f4:	f7fe ffe2 	bl	80033bc <HAL_GetTick>
 80043f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800440a:	2302      	movs	r3, #2
 800440c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800440e:	e10b      	b.n	8004628 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_SPI_Transmit+0x52>
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004420:	e102      	b.n	8004628 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004468:	d10f      	bne.n	800448a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004478:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004488:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d007      	beq.n	80044a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	d14b      	bne.n	800454a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_SPI_Transmit+0xf6>
 80044ba:	8afb      	ldrh	r3, [r7, #22]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d13e      	bne.n	800453e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	1c9a      	adds	r2, r3, #2
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044e4:	e02b      	b.n	800453e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d112      	bne.n	800451a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	86da      	strh	r2, [r3, #54]	; 0x36
 8004518:	e011      	b.n	800453e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451a:	f7fe ff4f 	bl	80033bc <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d803      	bhi.n	8004532 <HAL_SPI_Transmit+0x168>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d102      	bne.n	8004538 <HAL_SPI_Transmit+0x16e>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800453c:	e074      	b.n	8004628 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ce      	bne.n	80044e6 <HAL_SPI_Transmit+0x11c>
 8004548:	e04c      	b.n	80045e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_SPI_Transmit+0x18e>
 8004552:	8afb      	ldrh	r3, [r7, #22]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d140      	bne.n	80045da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	7812      	ldrb	r2, [r2, #0]
 8004564:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800457e:	e02c      	b.n	80045da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d113      	bne.n	80045b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80045b4:	e011      	b.n	80045da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045b6:	f7fe ff01 	bl	80033bc <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d803      	bhi.n	80045ce <HAL_SPI_Transmit+0x204>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d102      	bne.n	80045d4 <HAL_SPI_Transmit+0x20a>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045d8:	e026      	b.n	8004628 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1cd      	bne.n	8004580 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	6839      	ldr	r1, [r7, #0]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f8b3 	bl	8004754 <SPI_EndRxTxTransaction>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e000      	b.n	8004628 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004626:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004638:	7ffb      	ldrb	r3, [r7, #31]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004654:	f7fe feb2 	bl	80033bc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	4413      	add	r3, r2
 8004662:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004664:	f7fe feaa 	bl	80033bc <HAL_GetTick>
 8004668:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800466a:	4b39      	ldr	r3, [pc, #228]	; (8004750 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	015b      	lsls	r3, r3, #5
 8004670:	0d1b      	lsrs	r3, r3, #20
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800467a:	e054      	b.n	8004726 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d050      	beq.n	8004726 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004684:	f7fe fe9a 	bl	80033bc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	429a      	cmp	r2, r3
 8004692:	d902      	bls.n	800469a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d13d      	bne.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b2:	d111      	bne.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046bc:	d004      	beq.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d107      	bne.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e0:	d10f      	bne.n	8004702 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e017      	b.n	8004746 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3b01      	subs	r3, #1
 8004724:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	429a      	cmp	r2, r3
 8004742:	d19b      	bne.n	800467c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000134 	.word	0x20000134

08004754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <SPI_EndRxTxTransaction+0x7c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <SPI_EndRxTxTransaction+0x80>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	0d5b      	lsrs	r3, r3, #21
 800476c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004770:	fb02 f303 	mul.w	r3, r2, r3
 8004774:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477e:	d112      	bne.n	80047a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2200      	movs	r2, #0
 8004788:	2180      	movs	r1, #128	; 0x80
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff ff5a 	bl	8004644 <SPI_WaitFlagStateUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	f043 0220 	orr.w	r2, r3, #32
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e00f      	b.n	80047c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047bc:	2b80      	cmp	r3, #128	; 0x80
 80047be:	d0f2      	beq.n	80047a6 <SPI_EndRxTxTransaction+0x52>
 80047c0:	e000      	b.n	80047c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80047c2:	bf00      	nop
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000134 	.word	0x20000134
 80047d4:	165e9f81 	.word	0x165e9f81

080047d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e041      	b.n	800486e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fe fb48 	bl	8002e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f000 fbd2 	bl	8004fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d001      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e044      	b.n	800491a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1e      	ldr	r2, [pc, #120]	; (8004928 <HAL_TIM_Base_Start_IT+0xb0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d013      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1a      	ldr	r2, [pc, #104]	; (800492c <HAL_TIM_Base_Start_IT+0xb4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_TIM_Base_Start_IT+0xb8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_TIM_Base_Start_IT+0xbc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a16      	ldr	r2, [pc, #88]	; (8004938 <HAL_TIM_Base_Start_IT+0xc0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d010      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e007      	b.n	8004918 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800
 8004934:	40000c00 	.word	0x40000c00
 8004938:	40014000 	.word	0x40014000

0800493c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	f241 1311 	movw	r3, #4369	; 0x1111
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10f      	bne.n	8004984 <HAL_TIM_Base_Stop_IT+0x48>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	f240 4344 	movw	r3, #1092	; 0x444
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d107      	bne.n	8004984 <HAL_TIM_Base_Stop_IT+0x48>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e041      	b.n	8004a30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f839 	bl	8004a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f000 faf1 	bl	8004fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d122      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d11b      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0202 	mvn.w	r2, #2
 8004a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa77 	bl	8004f82 <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fa69 	bl	8004f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fa7a 	bl	8004f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d122      	bne.n	8004afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d11b      	bne.n	8004afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0204 	mvn.w	r2, #4
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa4d 	bl	8004f82 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fa3f 	bl	8004f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa50 	bl	8004f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0208 	mvn.w	r2, #8
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa23 	bl	8004f82 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa15 	bl	8004f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa26 	bl	8004f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0210 	mvn.w	r2, #16
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9f9 	bl	8004f82 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9eb 	bl	8004f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f9fc 	bl	8004f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0201 	mvn.w	r2, #1
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fe f838 	bl	8002c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fd00 	bl	80055fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9c1 	bl	8004faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d10e      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d107      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0220 	mvn.w	r2, #32
 8004c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fcca 	bl	80055e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0ae      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	f200 809f 	bhi.w	8004dc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004dc9 	.word	0x08004dc9
 8004c98:	08004dc9 	.word	0x08004dc9
 8004c9c:	08004dc9 	.word	0x08004dc9
 8004ca0:	08004d05 	.word	0x08004d05
 8004ca4:	08004dc9 	.word	0x08004dc9
 8004ca8:	08004dc9 	.word	0x08004dc9
 8004cac:	08004dc9 	.word	0x08004dc9
 8004cb0:	08004d47 	.word	0x08004d47
 8004cb4:	08004dc9 	.word	0x08004dc9
 8004cb8:	08004dc9 	.word	0x08004dc9
 8004cbc:	08004dc9 	.word	0x08004dc9
 8004cc0:	08004d87 	.word	0x08004d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f9f8 	bl	80050c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0208 	orr.w	r2, r2, #8
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0204 	bic.w	r2, r2, #4
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	619a      	str	r2, [r3, #24]
      break;
 8004d02:	e064      	b.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fa3e 	bl	800518c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	021a      	lsls	r2, r3, #8
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	619a      	str	r2, [r3, #24]
      break;
 8004d44:	e043      	b.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fa89 	bl	8005264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0208 	orr.w	r2, r2, #8
 8004d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0204 	bic.w	r2, r2, #4
 8004d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	61da      	str	r2, [r3, #28]
      break;
 8004d84:	e023      	b.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fad3 	bl	8005338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69d9      	ldr	r1, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	021a      	lsls	r2, r3, #8
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	61da      	str	r2, [r3, #28]
      break;
 8004dc6:	e002      	b.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
      break;
 8004dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIM_ConfigClockSource+0x1c>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e0b4      	b.n	8004f66 <HAL_TIM_ConfigClockSource+0x186>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e34:	d03e      	beq.n	8004eb4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3a:	f200 8087 	bhi.w	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	f000 8086 	beq.w	8004f52 <HAL_TIM_ConfigClockSource+0x172>
 8004e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4a:	d87f      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b70      	cmp	r3, #112	; 0x70
 8004e4e:	d01a      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0xa6>
 8004e50:	2b70      	cmp	r3, #112	; 0x70
 8004e52:	d87b      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b60      	cmp	r3, #96	; 0x60
 8004e56:	d050      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x11a>
 8004e58:	2b60      	cmp	r3, #96	; 0x60
 8004e5a:	d877      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b50      	cmp	r3, #80	; 0x50
 8004e5e:	d03c      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0xfa>
 8004e60:	2b50      	cmp	r3, #80	; 0x50
 8004e62:	d873      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d058      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x13a>
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	d86f      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	d064      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x15a>
 8004e70:	2b30      	cmp	r3, #48	; 0x30
 8004e72:	d86b      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d060      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x15a>
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d867      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05c      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x15a>
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d05a      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x15a>
 8004e84:	e062      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6899      	ldr	r1, [r3, #8]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f000 fb19 	bl	80054cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ea8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	609a      	str	r2, [r3, #8]
      break;
 8004eb2:	e04f      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	6899      	ldr	r1, [r3, #8]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f000 fb02 	bl	80054cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed6:	609a      	str	r2, [r3, #8]
      break;
 8004ed8:	e03c      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6859      	ldr	r1, [r3, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f000 fa76 	bl	80053d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2150      	movs	r1, #80	; 0x50
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 facf 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8004ef8:	e02c      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f000 fa95 	bl	8005436 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2160      	movs	r1, #96	; 0x60
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fabf 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8004f18:	e01c      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f000 fa56 	bl	80053d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2140      	movs	r1, #64	; 0x40
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 faaf 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8004f38:	e00c      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f000 faa6 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8004f4a:	e003      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f50:	e000      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a34      	ldr	r2, [pc, #208]	; (80050a4 <TIM_Base_SetConfig+0xe4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a31      	ldr	r2, [pc, #196]	; (80050a8 <TIM_Base_SetConfig+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a30      	ldr	r2, [pc, #192]	; (80050ac <TIM_Base_SetConfig+0xec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a2f      	ldr	r2, [pc, #188]	; (80050b0 <TIM_Base_SetConfig+0xf0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a25      	ldr	r2, [pc, #148]	; (80050a4 <TIM_Base_SetConfig+0xe4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01b      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	d017      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <TIM_Base_SetConfig+0xe8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a21      	ldr	r2, [pc, #132]	; (80050ac <TIM_Base_SetConfig+0xec>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00f      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <TIM_Base_SetConfig+0xf0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00b      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <TIM_Base_SetConfig+0xf4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <TIM_Base_SetConfig+0xf8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <TIM_Base_SetConfig+0xfc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d108      	bne.n	800505c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <TIM_Base_SetConfig+0xe4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	615a      	str	r2, [r3, #20]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0201 	bic.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 0302 	bic.w	r3, r3, #2
 8005108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <TIM_OC1_SetConfig+0xc8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d10c      	bne.n	8005136 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0308 	bic.w	r3, r3, #8
 8005122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f023 0304 	bic.w	r3, r3, #4
 8005134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a13      	ldr	r2, [pc, #76]	; (8005188 <TIM_OC1_SetConfig+0xc8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d111      	bne.n	8005162 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800514c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	621a      	str	r2, [r3, #32]
}
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40010000 	.word	0x40010000

0800518c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0210 	bic.w	r2, r3, #16
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0320 	bic.w	r3, r3, #32
 80051d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <TIM_OC2_SetConfig+0xd4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10d      	bne.n	8005208 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a15      	ldr	r2, [pc, #84]	; (8005260 <TIM_OC2_SetConfig+0xd4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d113      	bne.n	8005238 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800521e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40010000 	.word	0x40010000

08005264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <TIM_OC3_SetConfig+0xd0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10d      	bne.n	80052de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a14      	ldr	r2, [pc, #80]	; (8005334 <TIM_OC3_SetConfig+0xd0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d113      	bne.n	800530e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	621a      	str	r2, [r3, #32]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40010000 	.word	0x40010000

08005338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <TIM_OC4_SetConfig+0x9c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d109      	bne.n	80053ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800539e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	019b      	lsls	r3, r3, #6
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000

080053d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0201 	bic.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 030a 	bic.w	r3, r3, #10
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f023 0210 	bic.w	r2, r3, #16
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f043 0307 	orr.w	r3, r3, #7
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	609a      	str	r2, [r3, #8]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e050      	b.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d013      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a16      	ldr	r2, [pc, #88]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10c      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40014000 	.word	0x40014000

080055e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800561e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005622:	2b84      	cmp	r3, #132	; 0x84
 8005624:	d005      	beq.n	8005632 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005626:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	3303      	adds	r3, #3
 8005630:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005632:	68fb      	ldr	r3, [r7, #12]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005644:	f000 ffcc 	bl	80065e0 <vTaskStartScheduler>
  
  return osOK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	bd80      	pop	{r7, pc}

0800564e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800564e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005650:	b089      	sub	sp, #36	; 0x24
 8005652:	af04      	add	r7, sp, #16
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d020      	beq.n	80056a2 <osThreadCreate+0x54>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685c      	ldr	r4, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681d      	ldr	r5, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691e      	ldr	r6, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff ffc8 	bl	8005610 <makeFreeRtosPriority>
 8005680:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800568a:	9202      	str	r2, [sp, #8]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	9100      	str	r1, [sp, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	4632      	mov	r2, r6
 8005694:	4629      	mov	r1, r5
 8005696:	4620      	mov	r0, r4
 8005698:	f000 fdda 	bl	8006250 <xTaskCreateStatic>
 800569c:	4603      	mov	r3, r0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e01c      	b.n	80056dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685c      	ldr	r4, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056ae:	b29e      	uxth	r6, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff ffaa 	bl	8005610 <makeFreeRtosPriority>
 80056bc:	4602      	mov	r2, r0
 80056be:	f107 030c 	add.w	r3, r7, #12
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	9200      	str	r2, [sp, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	4632      	mov	r2, r6
 80056ca:	4629      	mov	r1, r5
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 fe1c 	bl	800630a <xTaskCreate>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d001      	beq.n	80056dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056dc:	68fb      	ldr	r3, [r7, #12]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <osDelay+0x16>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	e000      	b.n	80056fe <osDelay+0x18>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 ff3a 	bl	8006578 <vTaskDelay>
  
  return osOK;
 8005704:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800570e:	b590      	push	{r4, r7, lr}
 8005710:	b085      	sub	sp, #20
 8005712:	af02      	add	r7, sp, #8
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d011      	beq.n	8005744 <osMessageCreate+0x36>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00d      	beq.n	8005744 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2400      	movs	r4, #0
 800573a:	9400      	str	r4, [sp, #0]
 800573c:	f000 f92c 	bl	8005998 <xQueueGenericCreateStatic>
 8005740:	4603      	mov	r3, r0
 8005742:	e008      	b.n	8005756 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	4619      	mov	r1, r3
 8005750:	f000 f99a 	bl	8005a88 <xQueueGenericCreate>
 8005754:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}

0800575e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f103 0208 	add.w	r2, r3, #8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f04f 32ff 	mov.w	r2, #4294967295
 8005776:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f103 0208 	add.w	r2, r3, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f103 0208 	add.w	r2, r3, #8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d103      	bne.n	8005820 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e00c      	b.n	800583a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3308      	adds	r3, #8
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	e002      	b.n	800582e <vListInsert+0x2e>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	d2f6      	bcs.n	8005828 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6892      	ldr	r2, [r2, #8]
 8005888:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6852      	ldr	r2, [r2, #4]
 8005892:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d103      	bne.n	80058a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	1e5a      	subs	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058f2:	f001 fca7 	bl	8007244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	441a      	add	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	3b01      	subs	r3, #1
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	441a      	add	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	22ff      	movs	r2, #255	; 0xff
 800593e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d114      	bne.n	8005972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01a      	beq.n	8005986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3310      	adds	r3, #16
 8005954:	4618      	mov	r0, r3
 8005956:	f001 f885 	bl	8006a64 <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d012      	beq.n	8005986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <xQueueGenericReset+0xcc>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	e009      	b.n	8005986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3310      	adds	r3, #16
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fef1 	bl	800575e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3324      	adds	r3, #36	; 0x24
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff feec 	bl	800575e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005986:	f001 fc8d 	bl	80072a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800598a:	2301      	movs	r3, #1
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08e      	sub	sp, #56	; 0x38
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <xQueueGenericCreateStatic+0x52>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <xQueueGenericCreateStatic+0x56>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <xQueueGenericCreateStatic+0x58>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	623b      	str	r3, [r7, #32]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <xQueueGenericCreateStatic+0x7e>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <xQueueGenericCreateStatic+0x82>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <xQueueGenericCreateStatic+0x84>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	61fb      	str	r3, [r7, #28]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a36:	2348      	movs	r3, #72	; 0x48
 8005a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b48      	cmp	r3, #72	; 0x48
 8005a3e:	d00a      	beq.n	8005a56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	61bb      	str	r3, [r7, #24]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00d      	beq.n	8005a7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f83f 	bl	8005afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3730      	adds	r7, #48	; 0x30
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	4613      	mov	r3, r2
 8005a94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	613b      	str	r3, [r7, #16]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
 8005aba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3348      	adds	r3, #72	; 0x48
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fce1 	bl	8007488 <pvPortMalloc>
 8005ac6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d011      	beq.n	8005af2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	3348      	adds	r3, #72	; 0x48
 8005ad6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ae0:	79fa      	ldrb	r2, [r7, #7]
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f805 	bl	8005afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005af2:	69bb      	ldr	r3, [r7, #24]
	}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d103      	bne.n	8005b18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e002      	b.n	8005b1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	69b8      	ldr	r0, [r7, #24]
 8005b2e:	f7ff fecb 	bl	80058c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08e      	sub	sp, #56	; 0x38
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericSend+0x32>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <xQueueGenericSend+0x40>
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <xQueueGenericSend+0x44>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <xQueueGenericSend+0x46>
 8005b80:	2300      	movs	r3, #0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <xQueueGenericSend+0x60>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d103      	bne.n	8005baa <xQueueGenericSend+0x6e>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <xQueueGenericSend+0x72>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <xQueueGenericSend+0x74>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xQueueGenericSend+0x8e>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	623b      	str	r3, [r7, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bca:	f001 f907 	bl	8006ddc <xTaskGetSchedulerState>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <xQueueGenericSend+0x9e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <xQueueGenericSend+0xa2>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <xQueueGenericSend+0xa4>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xQueueGenericSend+0xbe>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	61fb      	str	r3, [r7, #28]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bfa:	f001 fb23 	bl	8007244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <xQueueGenericSend+0xd4>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d129      	bne.n	8005c64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c16:	f000 fa0b 	bl	8006030 <prvCopyDataToQueue>
 8005c1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	3324      	adds	r3, #36	; 0x24
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 ff1b 	bl	8006a64 <xTaskRemoveFromEventList>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c34:	4b3f      	ldr	r3, [pc, #252]	; (8005d34 <xQueueGenericSend+0x1f8>)
 8005c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	e00a      	b.n	8005c5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c4c:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <xQueueGenericSend+0x1f8>)
 8005c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c5c:	f001 fb22 	bl	80072a4 <vPortExitCritical>
				return pdPASS;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e063      	b.n	8005d2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c6a:	f001 fb1b 	bl	80072a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e05c      	b.n	8005d2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 ff53 	bl	8006b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c86:	f001 fb0d 	bl	80072a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c8a:	f000 fd09 	bl	80066a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c8e:	f001 fad9 	bl	8007244 <vPortEnterCritical>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c98:	b25b      	sxtb	r3, r3
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d103      	bne.n	8005ca8 <xQueueGenericSend+0x16c>
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d103      	bne.n	8005cbe <xQueueGenericSend+0x182>
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cbe:	f001 faf1 	bl	80072a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cc2:	1d3a      	adds	r2, r7, #4
 8005cc4:	f107 0314 	add.w	r3, r7, #20
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 ff42 	bl	8006b54 <xTaskCheckForTimeOut>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d124      	bne.n	8005d20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd8:	f000 faa2 	bl	8006220 <prvIsQueueFull>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d018      	beq.n	8005d14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	3310      	adds	r3, #16
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fe96 	bl	8006a1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cf2:	f000 fa2d 	bl	8006150 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cf6:	f000 fce1 	bl	80066bc <xTaskResumeAll>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f47f af7c 	bne.w	8005bfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d02:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <xQueueGenericSend+0x1f8>)
 8005d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	e772      	b.n	8005bfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d16:	f000 fa1b 	bl	8006150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d1a:	f000 fccf 	bl	80066bc <xTaskResumeAll>
 8005d1e:	e76c      	b.n	8005bfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d22:	f000 fa15 	bl	8006150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d26:	f000 fcc9 	bl	80066bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3738      	adds	r7, #56	; 0x38
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b090      	sub	sp, #64	; 0x40
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d103      	bne.n	8005d74 <xQueueGenericSendFromISR+0x3c>
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <xQueueGenericSendFromISR+0x40>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <xQueueGenericSendFromISR+0x42>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d103      	bne.n	8005da2 <xQueueGenericSendFromISR+0x6a>
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <xQueueGenericSendFromISR+0x6e>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <xQueueGenericSendFromISR+0x70>
 8005da6:	2300      	movs	r3, #0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	623b      	str	r3, [r7, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dc2:	f001 fb21 	bl	8007408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dc6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	61fa      	str	r2, [r7, #28]
 8005ddc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dde:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <xQueueGenericSendFromISR+0xbc>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d12f      	bne.n	8005e54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e0a:	f000 f911 	bl	8006030 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d112      	bne.n	8005e3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d016      	beq.n	8005e4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	3324      	adds	r3, #36	; 0x24
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fe1d 	bl	8006a64 <xTaskRemoveFromEventList>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00e      	beq.n	8005e4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e007      	b.n	8005e4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e42:	3301      	adds	r3, #1
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	b25a      	sxtb	r2, r3
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e52:	e001      	b.n	8005e58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3740      	adds	r7, #64	; 0x40
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08c      	sub	sp, #48	; 0x30
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <xQueueReceive+0x30>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	623b      	str	r3, [r7, #32]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <xQueueReceive+0x3e>
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <xQueueReceive+0x42>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <xQueueReceive+0x44>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <xQueueReceive+0x5e>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	61fb      	str	r3, [r7, #28]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ece:	f000 ff85 	bl	8006ddc <xTaskGetSchedulerState>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <xQueueReceive+0x6e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <xQueueReceive+0x72>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <xQueueReceive+0x74>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xQueueReceive+0x8e>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	61bb      	str	r3, [r7, #24]
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005efe:	f001 f9a1 	bl	8007244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01f      	beq.n	8005f4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f12:	f000 f8f7 	bl	8006104 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00f      	beq.n	8005f46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	3310      	adds	r3, #16
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fd9a 	bl	8006a64 <xTaskRemoveFromEventList>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f36:	4b3d      	ldr	r3, [pc, #244]	; (800602c <xQueueReceive+0x1bc>)
 8005f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f46:	f001 f9ad 	bl	80072a4 <vPortExitCritical>
				return pdPASS;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e069      	b.n	8006022 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f54:	f001 f9a6 	bl	80072a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e062      	b.n	8006022 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f62:	f107 0310 	add.w	r3, r7, #16
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fdde 	bl	8006b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f70:	f001 f998 	bl	80072a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f74:	f000 fb94 	bl	80066a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f78:	f001 f964 	bl	8007244 <vPortEnterCritical>
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f82:	b25b      	sxtb	r3, r3
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d103      	bne.n	8005f92 <xQueueReceive+0x122>
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f98:	b25b      	sxtb	r3, r3
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d103      	bne.n	8005fa8 <xQueueReceive+0x138>
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa8:	f001 f97c 	bl	80072a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fac:	1d3a      	adds	r2, r7, #4
 8005fae:	f107 0310 	add.w	r3, r7, #16
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fdcd 	bl	8006b54 <xTaskCheckForTimeOut>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d123      	bne.n	8006008 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc2:	f000 f917 	bl	80061f4 <prvIsQueueEmpty>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d017      	beq.n	8005ffc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	3324      	adds	r3, #36	; 0x24
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fd21 	bl	8006a1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fdc:	f000 f8b8 	bl	8006150 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fe0:	f000 fb6c 	bl	80066bc <xTaskResumeAll>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d189      	bne.n	8005efe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fea:	4b10      	ldr	r3, [pc, #64]	; (800602c <xQueueReceive+0x1bc>)
 8005fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	e780      	b.n	8005efe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffe:	f000 f8a7 	bl	8006150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006002:	f000 fb5b 	bl	80066bc <xTaskResumeAll>
 8006006:	e77a      	b.n	8005efe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600a:	f000 f8a1 	bl	8006150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800600e:	f000 fb55 	bl	80066bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006014:	f000 f8ee 	bl	80061f4 <prvIsQueueEmpty>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	f43f af6f 	beq.w	8005efe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006020:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006022:	4618      	mov	r0, r3
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10d      	bne.n	800606a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d14d      	bne.n	80060f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fedc 	bl	8006e18 <xTaskPriorityDisinherit>
 8006060:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	e043      	b.n	80060f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d119      	bne.n	80060a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6858      	ldr	r0, [r3, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	461a      	mov	r2, r3
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	f001 fc18 	bl	80078b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d32b      	bcc.n	80060f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	e026      	b.n	80060f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68d8      	ldr	r0, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	461a      	mov	r2, r3
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	f001 fbfe 	bl	80078b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	425b      	negs	r3, r3
 80060be:	441a      	add	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d207      	bcs.n	80060e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	425b      	negs	r3, r3
 80060da:	441a      	add	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d105      	bne.n	80060f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060fa:	697b      	ldr	r3, [r7, #20]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d018      	beq.n	8006148 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	441a      	add	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	d303      	bcc.n	8006138 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68d9      	ldr	r1, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	461a      	mov	r2, r3
 8006142:	6838      	ldr	r0, [r7, #0]
 8006144:	f001 fbb4 	bl	80078b0 <memcpy>
	}
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006158:	f001 f874 	bl	8007244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006162:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006164:	e011      	b.n	800618a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d012      	beq.n	8006194 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3324      	adds	r3, #36	; 0x24
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fc76 	bl	8006a64 <xTaskRemoveFromEventList>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800617e:	f000 fd4b 	bl	8006c18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	3b01      	subs	r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800618a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	dce9      	bgt.n	8006166 <prvUnlockQueue+0x16>
 8006192:	e000      	b.n	8006196 <prvUnlockQueue+0x46>
					break;
 8006194:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	22ff      	movs	r2, #255	; 0xff
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800619e:	f001 f881 	bl	80072a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061a2:	f001 f84f 	bl	8007244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061ae:	e011      	b.n	80061d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3310      	adds	r3, #16
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fc51 	bl	8006a64 <xTaskRemoveFromEventList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061c8:	f000 fd26 	bl	8006c18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dce9      	bgt.n	80061b0 <prvUnlockQueue+0x60>
 80061dc:	e000      	b.n	80061e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	22ff      	movs	r2, #255	; 0xff
 80061e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061e8:	f001 f85c 	bl	80072a4 <vPortExitCritical>
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061fc:	f001 f822 	bl	8007244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006208:	2301      	movs	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e001      	b.n	8006212 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006212:	f001 f847 	bl	80072a4 <vPortExitCritical>

	return xReturn;
 8006216:	68fb      	ldr	r3, [r7, #12]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006228:	f001 f80c 	bl	8007244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	429a      	cmp	r2, r3
 8006236:	d102      	bne.n	800623e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e001      	b.n	8006242 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006242:	f001 f82f 	bl	80072a4 <vPortExitCritical>

	return xReturn;
 8006246:	68fb      	ldr	r3, [r7, #12]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	; 0x38
 8006254:	af04      	add	r7, sp, #16
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	623b      	str	r3, [r7, #32]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <xTaskCreateStatic+0x46>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	61fb      	str	r3, [r7, #28]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006296:	2354      	movs	r3, #84	; 0x54
 8006298:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b54      	cmp	r3, #84	; 0x54
 800629e:	d00a      	beq.n	80062b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	61bb      	str	r3, [r7, #24]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01e      	beq.n	80062fc <xTaskCreateStatic+0xac>
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01b      	beq.n	80062fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062d6:	2300      	movs	r3, #0
 80062d8:	9303      	str	r3, [sp, #12]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	9302      	str	r3, [sp, #8]
 80062de:	f107 0314 	add.w	r3, r7, #20
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f850 	bl	8006394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062f6:	f000 f8d5 	bl	80064a4 <prvAddNewTaskToReadyList>
 80062fa:	e001      	b.n	8006300 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006300:	697b      	ldr	r3, [r7, #20]
	}
 8006302:	4618      	mov	r0, r3
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800630a:	b580      	push	{r7, lr}
 800630c:	b08c      	sub	sp, #48	; 0x30
 800630e:	af04      	add	r7, sp, #16
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f8b2 	bl	8007488 <pvPortMalloc>
 8006324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800632c:	2054      	movs	r0, #84	; 0x54
 800632e:	f001 f8ab 	bl	8007488 <pvPortMalloc>
 8006332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
 8006340:	e005      	b.n	800634e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006342:	6978      	ldr	r0, [r7, #20]
 8006344:	f001 f96c 	bl	8007620 <vPortFree>
 8006348:	e001      	b.n	800634e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	2300      	movs	r3, #0
 8006360:	9303      	str	r3, [sp, #12]
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	9302      	str	r3, [sp, #8]
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f80e 	bl	8006394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006378:	69f8      	ldr	r0, [r7, #28]
 800637a:	f000 f893 	bl	80064a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800637e:	2301      	movs	r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e002      	b.n	800638a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006384:	f04f 33ff 	mov.w	r3, #4294967295
 8006388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800638a:	69bb      	ldr	r3, [r7, #24]
	}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063ac:	3b01      	subs	r3, #1
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f023 0307 	bic.w	r3, r3, #7
 80063ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	617b      	str	r3, [r7, #20]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01f      	beq.n	8006422 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	e012      	b.n	800640e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	7819      	ldrb	r1, [r3, #0]
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	3334      	adds	r3, #52	; 0x34
 80063f8:	460a      	mov	r2, r1
 80063fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d006      	beq.n	8006416 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b0f      	cmp	r3, #15
 8006412:	d9e9      	bls.n	80063e8 <prvInitialiseNewTask+0x54>
 8006414:	e000      	b.n	8006418 <prvInitialiseNewTask+0x84>
			{
				break;
 8006416:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006420:	e003      	b.n	800642a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	2b06      	cmp	r3, #6
 800642e:	d901      	bls.n	8006434 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006430:	2306      	movs	r3, #6
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	2200      	movs	r2, #0
 8006444:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	3304      	adds	r3, #4
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff f9a7 	bl	800579e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	3318      	adds	r3, #24
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff f9a2 	bl	800579e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	f1c3 0207 	rsb	r2, r3, #7
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	2200      	movs	r2, #0
 8006474:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68f9      	ldr	r1, [r7, #12]
 8006482:	69b8      	ldr	r0, [r7, #24]
 8006484:	f000 fdb4 	bl	8006ff0 <pxPortInitialiseStack>
 8006488:	4602      	mov	r2, r0
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800649a:	bf00      	nop
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064ac:	f000 feca 	bl	8007244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064b0:	4b2a      	ldr	r3, [pc, #168]	; (800655c <prvAddNewTaskToReadyList+0xb8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4a29      	ldr	r2, [pc, #164]	; (800655c <prvAddNewTaskToReadyList+0xb8>)
 80064b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064ba:	4b29      	ldr	r3, [pc, #164]	; (8006560 <prvAddNewTaskToReadyList+0xbc>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064c2:	4a27      	ldr	r2, [pc, #156]	; (8006560 <prvAddNewTaskToReadyList+0xbc>)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c8:	4b24      	ldr	r3, [pc, #144]	; (800655c <prvAddNewTaskToReadyList+0xb8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d110      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064d0:	f000 fbc6 	bl	8006c60 <prvInitialiseTaskLists>
 80064d4:	e00d      	b.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064d6:	4b23      	ldr	r3, [pc, #140]	; (8006564 <prvAddNewTaskToReadyList+0xc0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064de:	4b20      	ldr	r3, [pc, #128]	; (8006560 <prvAddNewTaskToReadyList+0xbc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d802      	bhi.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064ec:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <prvAddNewTaskToReadyList+0xbc>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064f2:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <prvAddNewTaskToReadyList+0xc4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <prvAddNewTaskToReadyList+0xc4>)
 80064fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	2201      	movs	r2, #1
 8006502:	409a      	lsls	r2, r3
 8006504:	4b19      	ldr	r3, [pc, #100]	; (800656c <prvAddNewTaskToReadyList+0xc8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4313      	orrs	r3, r2
 800650a:	4a18      	ldr	r2, [pc, #96]	; (800656c <prvAddNewTaskToReadyList+0xc8>)
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4a15      	ldr	r2, [pc, #84]	; (8006570 <prvAddNewTaskToReadyList+0xcc>)
 800651c:	441a      	add	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3304      	adds	r3, #4
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7ff f947 	bl	80057b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800652a:	f000 febb 	bl	80072a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800652e:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <prvAddNewTaskToReadyList+0xc0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00e      	beq.n	8006554 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006536:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <prvAddNewTaskToReadyList+0xbc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	429a      	cmp	r2, r3
 8006542:	d207      	bcs.n	8006554 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <prvAddNewTaskToReadyList+0xd0>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000840 	.word	0x20000840
 8006560:	20000740 	.word	0x20000740
 8006564:	2000084c 	.word	0x2000084c
 8006568:	2000085c 	.word	0x2000085c
 800656c:	20000848 	.word	0x20000848
 8006570:	20000744 	.word	0x20000744
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d017      	beq.n	80065ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800658a:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <vTaskDelay+0x60>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <vTaskDelay+0x30>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	60bb      	str	r3, [r7, #8]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065a8:	f000 f87a 	bl	80066a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065ac:	2100      	movs	r1, #0
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fcb8 	bl	8006f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065b4:	f000 f882 	bl	80066bc <xTaskResumeAll>
 80065b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d107      	bne.n	80065d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <vTaskDelay+0x64>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000868 	.word	0x20000868
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065ee:	463a      	mov	r2, r7
 80065f0:	1d39      	adds	r1, r7, #4
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fb f8d0 	bl	800179c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	9202      	str	r2, [sp, #8]
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	2300      	movs	r3, #0
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	460a      	mov	r2, r1
 800660e:	491e      	ldr	r1, [pc, #120]	; (8006688 <vTaskStartScheduler+0xa8>)
 8006610:	481e      	ldr	r0, [pc, #120]	; (800668c <vTaskStartScheduler+0xac>)
 8006612:	f7ff fe1d 	bl	8006250 <xTaskCreateStatic>
 8006616:	4603      	mov	r3, r0
 8006618:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <vTaskStartScheduler+0xb0>)
 800661a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800661c:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <vTaskStartScheduler+0xb0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006624:	2301      	movs	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e001      	b.n	800662e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d116      	bne.n	8006662 <vTaskStartScheduler+0x82>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	613b      	str	r3, [r7, #16]
}
 8006646:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006648:	4b12      	ldr	r3, [pc, #72]	; (8006694 <vTaskStartScheduler+0xb4>)
 800664a:	f04f 32ff 	mov.w	r2, #4294967295
 800664e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006650:	4b11      	ldr	r3, [pc, #68]	; (8006698 <vTaskStartScheduler+0xb8>)
 8006652:	2201      	movs	r2, #1
 8006654:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <vTaskStartScheduler+0xbc>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800665c:	f000 fd50 	bl	8007100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006660:	e00e      	b.n	8006680 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d10a      	bne.n	8006680 <vTaskStartScheduler+0xa0>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	60fb      	str	r3, [r7, #12]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <vTaskStartScheduler+0x9e>
}
 8006680:	bf00      	nop
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	0800a7fc 	.word	0x0800a7fc
 800668c:	08006c31 	.word	0x08006c31
 8006690:	20000864 	.word	0x20000864
 8006694:	20000860 	.word	0x20000860
 8006698:	2000084c 	.word	0x2000084c
 800669c:	20000844 	.word	0x20000844

080066a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <vTaskSuspendAll+0x18>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	4a03      	ldr	r2, [pc, #12]	; (80066b8 <vTaskSuspendAll+0x18>)
 80066ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066ae:	bf00      	nop
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	20000868 	.word	0x20000868

080066bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066ca:	4b41      	ldr	r3, [pc, #260]	; (80067d0 <xTaskResumeAll+0x114>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	603b      	str	r3, [r7, #0]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066e8:	f000 fdac 	bl	8007244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066ec:	4b38      	ldr	r3, [pc, #224]	; (80067d0 <xTaskResumeAll+0x114>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	4a37      	ldr	r2, [pc, #220]	; (80067d0 <xTaskResumeAll+0x114>)
 80066f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f6:	4b36      	ldr	r3, [pc, #216]	; (80067d0 <xTaskResumeAll+0x114>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d161      	bne.n	80067c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066fe:	4b35      	ldr	r3, [pc, #212]	; (80067d4 <xTaskResumeAll+0x118>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d05d      	beq.n	80067c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006706:	e02e      	b.n	8006766 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006708:	4b33      	ldr	r3, [pc, #204]	; (80067d8 <xTaskResumeAll+0x11c>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3318      	adds	r3, #24
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff f8ac 	bl	8005872 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3304      	adds	r3, #4
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff f8a7 	bl	8005872 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	2201      	movs	r2, #1
 800672a:	409a      	lsls	r2, r3
 800672c:	4b2b      	ldr	r3, [pc, #172]	; (80067dc <xTaskResumeAll+0x120>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4313      	orrs	r3, r2
 8006732:	4a2a      	ldr	r2, [pc, #168]	; (80067dc <xTaskResumeAll+0x120>)
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4a27      	ldr	r2, [pc, #156]	; (80067e0 <xTaskResumeAll+0x124>)
 8006744:	441a      	add	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f7ff f833 	bl	80057b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	4b23      	ldr	r3, [pc, #140]	; (80067e4 <xTaskResumeAll+0x128>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	429a      	cmp	r2, r3
 800675e:	d302      	bcc.n	8006766 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006760:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <xTaskResumeAll+0x12c>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006766:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <xTaskResumeAll+0x11c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1cc      	bne.n	8006708 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006774:	f000 fb12 	bl	8006d9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006778:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <xTaskResumeAll+0x130>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006784:	f000 f836 	bl	80067f4 <xTaskIncrementTick>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800678e:	4b16      	ldr	r3, [pc, #88]	; (80067e8 <xTaskResumeAll+0x12c>)
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3b01      	subs	r3, #1
 8006798:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1f1      	bne.n	8006784 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80067a0:	4b12      	ldr	r3, [pc, #72]	; (80067ec <xTaskResumeAll+0x130>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <xTaskResumeAll+0x12c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067ae:	2301      	movs	r3, #1
 80067b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067b2:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <xTaskResumeAll+0x134>)
 80067b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067c2:	f000 fd6f 	bl	80072a4 <vPortExitCritical>

	return xAlreadyYielded;
 80067c6:	68bb      	ldr	r3, [r7, #8]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20000868 	.word	0x20000868
 80067d4:	20000840 	.word	0x20000840
 80067d8:	20000800 	.word	0x20000800
 80067dc:	20000848 	.word	0x20000848
 80067e0:	20000744 	.word	0x20000744
 80067e4:	20000740 	.word	0x20000740
 80067e8:	20000854 	.word	0x20000854
 80067ec:	20000850 	.word	0x20000850
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fe:	4b4e      	ldr	r3, [pc, #312]	; (8006938 <xTaskIncrementTick+0x144>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 808e 	bne.w	8006924 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006808:	4b4c      	ldr	r3, [pc, #304]	; (800693c <xTaskIncrementTick+0x148>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006810:	4a4a      	ldr	r2, [pc, #296]	; (800693c <xTaskIncrementTick+0x148>)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d120      	bne.n	800685e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800681c:	4b48      	ldr	r3, [pc, #288]	; (8006940 <xTaskIncrementTick+0x14c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <xTaskIncrementTick+0x48>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	603b      	str	r3, [r7, #0]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <xTaskIncrementTick+0x46>
 800683c:	4b40      	ldr	r3, [pc, #256]	; (8006940 <xTaskIncrementTick+0x14c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	4b40      	ldr	r3, [pc, #256]	; (8006944 <xTaskIncrementTick+0x150>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3e      	ldr	r2, [pc, #248]	; (8006940 <xTaskIncrementTick+0x14c>)
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	4a3e      	ldr	r2, [pc, #248]	; (8006944 <xTaskIncrementTick+0x150>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4b3d      	ldr	r3, [pc, #244]	; (8006948 <xTaskIncrementTick+0x154>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	4a3c      	ldr	r2, [pc, #240]	; (8006948 <xTaskIncrementTick+0x154>)
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	f000 fa9f 	bl	8006d9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800685e:	4b3b      	ldr	r3, [pc, #236]	; (800694c <xTaskIncrementTick+0x158>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	429a      	cmp	r2, r3
 8006866:	d348      	bcc.n	80068fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006868:	4b35      	ldr	r3, [pc, #212]	; (8006940 <xTaskIncrementTick+0x14c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006872:	4b36      	ldr	r3, [pc, #216]	; (800694c <xTaskIncrementTick+0x158>)
 8006874:	f04f 32ff 	mov.w	r2, #4294967295
 8006878:	601a      	str	r2, [r3, #0]
					break;
 800687a:	e03e      	b.n	80068fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687c:	4b30      	ldr	r3, [pc, #192]	; (8006940 <xTaskIncrementTick+0x14c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d203      	bcs.n	800689c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006894:	4a2d      	ldr	r2, [pc, #180]	; (800694c <xTaskIncrementTick+0x158>)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800689a:	e02e      	b.n	80068fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	3304      	adds	r3, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe ffe6 	bl	8005872 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	3318      	adds	r3, #24
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe ffdd 	bl	8005872 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	2201      	movs	r2, #1
 80068be:	409a      	lsls	r2, r3
 80068c0:	4b23      	ldr	r3, [pc, #140]	; (8006950 <xTaskIncrementTick+0x15c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	4a22      	ldr	r2, [pc, #136]	; (8006950 <xTaskIncrementTick+0x15c>)
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <xTaskIncrementTick+0x160>)
 80068d8:	441a      	add	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fe ff69 	bl	80057b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ea:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <xTaskIncrementTick+0x164>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d3b9      	bcc.n	8006868 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068f4:	2301      	movs	r3, #1
 80068f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068f8:	e7b6      	b.n	8006868 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068fa:	4b17      	ldr	r3, [pc, #92]	; (8006958 <xTaskIncrementTick+0x164>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006900:	4914      	ldr	r1, [pc, #80]	; (8006954 <xTaskIncrementTick+0x160>)
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d901      	bls.n	8006916 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006912:	2301      	movs	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006916:	4b11      	ldr	r3, [pc, #68]	; (800695c <xTaskIncrementTick+0x168>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	e004      	b.n	800692e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <xTaskIncrementTick+0x16c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	4a0d      	ldr	r2, [pc, #52]	; (8006960 <xTaskIncrementTick+0x16c>)
 800692c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800692e:	697b      	ldr	r3, [r7, #20]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000868 	.word	0x20000868
 800693c:	20000844 	.word	0x20000844
 8006940:	200007f8 	.word	0x200007f8
 8006944:	200007fc 	.word	0x200007fc
 8006948:	20000858 	.word	0x20000858
 800694c:	20000860 	.word	0x20000860
 8006950:	20000848 	.word	0x20000848
 8006954:	20000744 	.word	0x20000744
 8006958:	20000740 	.word	0x20000740
 800695c:	20000854 	.word	0x20000854
 8006960:	20000850 	.word	0x20000850

08006964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800696a:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <vTaskSwitchContext+0xa4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006972:	4b26      	ldr	r3, [pc, #152]	; (8006a0c <vTaskSwitchContext+0xa8>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006978:	e03f      	b.n	80069fa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <vTaskSwitchContext+0xa8>)
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006980:	4b23      	ldr	r3, [pc, #140]	; (8006a10 <vTaskSwitchContext+0xac>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	fab3 f383 	clz	r3, r3
 800698c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	f1c3 031f 	rsb	r3, r3, #31
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	491f      	ldr	r1, [pc, #124]	; (8006a14 <vTaskSwitchContext+0xb0>)
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	440b      	add	r3, r1
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	607b      	str	r3, [r7, #4]
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <vTaskSwitchContext+0x5a>
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4a12      	ldr	r2, [pc, #72]	; (8006a14 <vTaskSwitchContext+0xb0>)
 80069cc:	4413      	add	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	605a      	str	r2, [r3, #4]
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	3308      	adds	r3, #8
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d104      	bne.n	80069f0 <vTaskSwitchContext+0x8c>
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	605a      	str	r2, [r3, #4]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	4a08      	ldr	r2, [pc, #32]	; (8006a18 <vTaskSwitchContext+0xb4>)
 80069f8:	6013      	str	r3, [r2, #0]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000868 	.word	0x20000868
 8006a0c:	20000854 	.word	0x20000854
 8006a10:	20000848 	.word	0x20000848
 8006a14:	20000744 	.word	0x20000744
 8006a18:	20000740 	.word	0x20000740

08006a1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	60fb      	str	r3, [r7, #12]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <vTaskPlaceOnEventList+0x44>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3318      	adds	r3, #24
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fe fed8 	bl	8005800 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a50:	2101      	movs	r1, #1
 8006a52:	6838      	ldr	r0, [r7, #0]
 8006a54:	f000 fa66 	bl	8006f24 <prvAddCurrentTaskToDelayedList>
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000740 	.word	0x20000740

08006a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	60fb      	str	r3, [r7, #12]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	3318      	adds	r3, #24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe feec 	bl	8005872 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <xTaskRemoveFromEventList+0xac>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d11c      	bne.n	8006adc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fee3 	bl	8005872 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	4b17      	ldr	r3, [pc, #92]	; (8006b14 <xTaskRemoveFromEventList+0xb0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <xTaskRemoveFromEventList+0xb0>)
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4a13      	ldr	r2, [pc, #76]	; (8006b18 <xTaskRemoveFromEventList+0xb4>)
 8006acc:	441a      	add	r2, r3
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f7fe fe6f 	bl	80057b8 <vListInsertEnd>
 8006ada:	e005      	b.n	8006ae8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	3318      	adds	r3, #24
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	480e      	ldr	r0, [pc, #56]	; (8006b1c <xTaskRemoveFromEventList+0xb8>)
 8006ae4:	f7fe fe68 	bl	80057b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <xTaskRemoveFromEventList+0xbc>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d905      	bls.n	8006b02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006af6:	2301      	movs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <xTaskRemoveFromEventList+0xc0>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e001      	b.n	8006b06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b06:	697b      	ldr	r3, [r7, #20]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20000868 	.word	0x20000868
 8006b14:	20000848 	.word	0x20000848
 8006b18:	20000744 	.word	0x20000744
 8006b1c:	20000800 	.word	0x20000800
 8006b20:	20000740 	.word	0x20000740
 8006b24:	20000854 	.word	0x20000854

08006b28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b30:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <vTaskInternalSetTimeOutState+0x24>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <vTaskInternalSetTimeOutState+0x28>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	605a      	str	r2, [r3, #4]
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	20000858 	.word	0x20000858
 8006b50:	20000844 	.word	0x20000844

08006b54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	613b      	str	r3, [r7, #16]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	60fb      	str	r3, [r7, #12]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b96:	f000 fb55 	bl	8007244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <xTaskCheckForTimeOut+0xbc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d102      	bne.n	8006bba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e023      	b.n	8006c02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <xTaskCheckForTimeOut+0xc0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d007      	beq.n	8006bd6 <xTaskCheckForTimeOut+0x82>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e015      	b.n	8006c02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d20b      	bcs.n	8006bf8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff ff9b 	bl	8006b28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	e004      	b.n	8006c02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c02:	f000 fb4f 	bl	80072a4 <vPortExitCritical>

	return xReturn;
 8006c06:	69fb      	ldr	r3, [r7, #28]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000844 	.word	0x20000844
 8006c14:	20000858 	.word	0x20000858

08006c18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c1c:	4b03      	ldr	r3, [pc, #12]	; (8006c2c <vTaskMissedYield+0x14>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
}
 8006c22:	bf00      	nop
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	20000854 	.word	0x20000854

08006c30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c38:	f000 f852 	bl	8006ce0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <prvIdleTask+0x28>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d9f9      	bls.n	8006c38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c44:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <prvIdleTask+0x2c>)
 8006c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c54:	e7f0      	b.n	8006c38 <prvIdleTask+0x8>
 8006c56:	bf00      	nop
 8006c58:	20000744 	.word	0x20000744
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
 8006c6a:	e00c      	b.n	8006c86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a12      	ldr	r2, [pc, #72]	; (8006cc0 <prvInitialiseTaskLists+0x60>)
 8006c78:	4413      	add	r3, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fd6f 	bl	800575e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3301      	adds	r3, #1
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	d9ef      	bls.n	8006c6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c8c:	480d      	ldr	r0, [pc, #52]	; (8006cc4 <prvInitialiseTaskLists+0x64>)
 8006c8e:	f7fe fd66 	bl	800575e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c92:	480d      	ldr	r0, [pc, #52]	; (8006cc8 <prvInitialiseTaskLists+0x68>)
 8006c94:	f7fe fd63 	bl	800575e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c98:	480c      	ldr	r0, [pc, #48]	; (8006ccc <prvInitialiseTaskLists+0x6c>)
 8006c9a:	f7fe fd60 	bl	800575e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c9e:	480c      	ldr	r0, [pc, #48]	; (8006cd0 <prvInitialiseTaskLists+0x70>)
 8006ca0:	f7fe fd5d 	bl	800575e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ca4:	480b      	ldr	r0, [pc, #44]	; (8006cd4 <prvInitialiseTaskLists+0x74>)
 8006ca6:	f7fe fd5a 	bl	800575e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006caa:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <prvInitialiseTaskLists+0x78>)
 8006cac:	4a05      	ldr	r2, [pc, #20]	; (8006cc4 <prvInitialiseTaskLists+0x64>)
 8006cae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <prvInitialiseTaskLists+0x7c>)
 8006cb2:	4a05      	ldr	r2, [pc, #20]	; (8006cc8 <prvInitialiseTaskLists+0x68>)
 8006cb4:	601a      	str	r2, [r3, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000744 	.word	0x20000744
 8006cc4:	200007d0 	.word	0x200007d0
 8006cc8:	200007e4 	.word	0x200007e4
 8006ccc:	20000800 	.word	0x20000800
 8006cd0:	20000814 	.word	0x20000814
 8006cd4:	2000082c 	.word	0x2000082c
 8006cd8:	200007f8 	.word	0x200007f8
 8006cdc:	200007fc 	.word	0x200007fc

08006ce0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ce6:	e019      	b.n	8006d1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ce8:	f000 faac 	bl	8007244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <prvCheckTasksWaitingTermination+0x50>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe fdba 	bl	8005872 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <prvCheckTasksWaitingTermination+0x54>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	4a0b      	ldr	r2, [pc, #44]	; (8006d34 <prvCheckTasksWaitingTermination+0x54>)
 8006d06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <prvCheckTasksWaitingTermination+0x58>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	4a0a      	ldr	r2, [pc, #40]	; (8006d38 <prvCheckTasksWaitingTermination+0x58>)
 8006d10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d12:	f000 fac7 	bl	80072a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f810 	bl	8006d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <prvCheckTasksWaitingTermination+0x58>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e1      	bne.n	8006ce8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000814 	.word	0x20000814
 8006d34:	20000840 	.word	0x20000840
 8006d38:	20000828 	.word	0x20000828

08006d3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d108      	bne.n	8006d60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fc64 	bl	8007620 <vPortFree>
				vPortFree( pxTCB );
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fc61 	bl	8007620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d5e:	e018      	b.n	8006d92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d103      	bne.n	8006d72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fc58 	bl	8007620 <vPortFree>
	}
 8006d70:	e00f      	b.n	8006d92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d00a      	beq.n	8006d92 <prvDeleteTCB+0x56>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60fb      	str	r3, [r7, #12]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <prvDeleteTCB+0x54>
	}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <prvResetNextTaskUnblockTime+0x38>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006db4:	e008      	b.n	8006dc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db6:	4b07      	ldr	r3, [pc, #28]	; (8006dd4 <prvResetNextTaskUnblockTime+0x38>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8006dc6:	6013      	str	r3, [r2, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	200007f8 	.word	0x200007f8
 8006dd8:	20000860 	.word	0x20000860

08006ddc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006de2:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <xTaskGetSchedulerState+0x34>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d102      	bne.n	8006df0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dea:	2301      	movs	r3, #1
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	e008      	b.n	8006e02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df0:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <xTaskGetSchedulerState+0x38>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	e001      	b.n	8006e02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e02:	687b      	ldr	r3, [r7, #4]
	}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	2000084c 	.word	0x2000084c
 8006e14:	20000868 	.word	0x20000868

08006e18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d06e      	beq.n	8006f0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e2e:	4b3a      	ldr	r3, [pc, #232]	; (8006f18 <xTaskPriorityDisinherit+0x100>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d00a      	beq.n	8006e4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	60fb      	str	r3, [r7, #12]
}
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60bb      	str	r3, [r7, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e70:	1e5a      	subs	r2, r3, #1
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d044      	beq.n	8006f0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d140      	bne.n	8006f0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fcef 	bl	8005872 <uxListRemove>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d115      	bne.n	8006ec6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	491f      	ldr	r1, [pc, #124]	; (8006f1c <xTaskPriorityDisinherit+0x104>)
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <xTaskPriorityDisinherit+0xae>
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	43da      	mvns	r2, r3
 8006ebc:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <xTaskPriorityDisinherit+0x108>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <xTaskPriorityDisinherit+0x108>)
 8006ec4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	f1c3 0207 	rsb	r2, r3, #7
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	2201      	movs	r2, #1
 8006ee0:	409a      	lsls	r2, r3
 8006ee2:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <xTaskPriorityDisinherit+0x108>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <xTaskPriorityDisinherit+0x108>)
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <xTaskPriorityDisinherit+0x104>)
 8006efa:	441a      	add	r2, r3
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fe fc58 	bl	80057b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f0c:	697b      	ldr	r3, [r7, #20]
	}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000740 	.word	0x20000740
 8006f1c:	20000744 	.word	0x20000744
 8006f20:	20000848 	.word	0x20000848

08006f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f34:	4b28      	ldr	r3, [pc, #160]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fc99 	bl	8005872 <uxListRemove>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f46:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43da      	mvns	r2, r3
 8006f54:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	4a20      	ldr	r2, [pc, #128]	; (8006fdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d10a      	bne.n	8006f7c <prvAddCurrentTaskToDelayedList+0x58>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4619      	mov	r1, r3
 8006f74:	481a      	ldr	r0, [pc, #104]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f76:	f7fe fc1f 	bl	80057b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f7a:	e026      	b.n	8006fca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f84:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d209      	bcs.n	8006fa8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f94:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe fc2d 	bl	8005800 <vListInsert>
}
 8006fa6:	e010      	b.n	8006fca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7fe fc23 	bl	8005800 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d202      	bcs.n	8006fca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006fc4:	4a09      	ldr	r2, [pc, #36]	; (8006fec <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6013      	str	r3, [r2, #0]
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000844 	.word	0x20000844
 8006fd8:	20000740 	.word	0x20000740
 8006fdc:	20000848 	.word	0x20000848
 8006fe0:	2000082c 	.word	0x2000082c
 8006fe4:	200007fc 	.word	0x200007fc
 8006fe8:	200007f8 	.word	0x200007f8
 8006fec:	20000860 	.word	0x20000860

08006ff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3b04      	subs	r3, #4
 8007000:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3b04      	subs	r3, #4
 800700e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f023 0201 	bic.w	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3b04      	subs	r3, #4
 800701e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007020:	4a0c      	ldr	r2, [pc, #48]	; (8007054 <pxPortInitialiseStack+0x64>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3b14      	subs	r3, #20
 800702a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3b04      	subs	r3, #4
 8007036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f06f 0202 	mvn.w	r2, #2
 800703e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3b20      	subs	r3, #32
 8007044:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007046:	68fb      	ldr	r3, [r7, #12]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	08007059 	.word	0x08007059

08007058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007062:	4b12      	ldr	r3, [pc, #72]	; (80070ac <prvTaskExitError+0x54>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	d00a      	beq.n	8007082 <prvTaskExitError+0x2a>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	60fb      	str	r3, [r7, #12]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <prvTaskExitError+0x28>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	60bb      	str	r3, [r7, #8]
}
 8007094:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007096:	bf00      	nop
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0fc      	beq.n	8007098 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000140 	.word	0x20000140

080070b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <pxCurrentTCBConst2>)
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	6808      	ldr	r0, [r1, #0]
 80070b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	f380 8809 	msr	PSP, r0
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8811 	msr	BASEPRI, r0
 80070ca:	4770      	bx	lr
 80070cc:	f3af 8000 	nop.w

080070d0 <pxCurrentTCBConst2>:
 80070d0:	20000740 	.word	0x20000740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop

080070d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070d8:	4808      	ldr	r0, [pc, #32]	; (80070fc <prvPortStartFirstTask+0x24>)
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	6800      	ldr	r0, [r0, #0]
 80070de:	f380 8808 	msr	MSP, r0
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8814 	msr	CONTROL, r0
 80070ea:	b662      	cpsie	i
 80070ec:	b661      	cpsie	f
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	df00      	svc	0
 80070f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070fa:	bf00      	nop
 80070fc:	e000ed08 	.word	0xe000ed08

08007100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007106:	4b46      	ldr	r3, [pc, #280]	; (8007220 <xPortStartScheduler+0x120>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a46      	ldr	r2, [pc, #280]	; (8007224 <xPortStartScheduler+0x124>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10a      	bne.n	8007126 <xPortStartScheduler+0x26>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	613b      	str	r3, [r7, #16]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007126:	4b3e      	ldr	r3, [pc, #248]	; (8007220 <xPortStartScheduler+0x120>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a3f      	ldr	r2, [pc, #252]	; (8007228 <xPortStartScheduler+0x128>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d10a      	bne.n	8007146 <xPortStartScheduler+0x46>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	60fb      	str	r3, [r7, #12]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007146:	4b39      	ldr	r3, [pc, #228]	; (800722c <xPortStartScheduler+0x12c>)
 8007148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	22ff      	movs	r2, #255	; 0xff
 8007156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007168:	b2da      	uxtb	r2, r3
 800716a:	4b31      	ldr	r3, [pc, #196]	; (8007230 <xPortStartScheduler+0x130>)
 800716c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800716e:	4b31      	ldr	r3, [pc, #196]	; (8007234 <xPortStartScheduler+0x134>)
 8007170:	2207      	movs	r2, #7
 8007172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007174:	e009      	b.n	800718a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007176:	4b2f      	ldr	r3, [pc, #188]	; (8007234 <xPortStartScheduler+0x134>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3b01      	subs	r3, #1
 800717c:	4a2d      	ldr	r2, [pc, #180]	; (8007234 <xPortStartScheduler+0x134>)
 800717e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007192:	2b80      	cmp	r3, #128	; 0x80
 8007194:	d0ef      	beq.n	8007176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007196:	4b27      	ldr	r3, [pc, #156]	; (8007234 <xPortStartScheduler+0x134>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f1c3 0307 	rsb	r3, r3, #7
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d00a      	beq.n	80071b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	60bb      	str	r3, [r7, #8]
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071b8:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <xPortStartScheduler+0x134>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <xPortStartScheduler+0x134>)
 80071c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <xPortStartScheduler+0x134>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ca:	4a1a      	ldr	r2, [pc, #104]	; (8007234 <xPortStartScheduler+0x134>)
 80071cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071d6:	4b18      	ldr	r3, [pc, #96]	; (8007238 <xPortStartScheduler+0x138>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a17      	ldr	r2, [pc, #92]	; (8007238 <xPortStartScheduler+0x138>)
 80071dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071e2:	4b15      	ldr	r3, [pc, #84]	; (8007238 <xPortStartScheduler+0x138>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a14      	ldr	r2, [pc, #80]	; (8007238 <xPortStartScheduler+0x138>)
 80071e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071ee:	f000 f8dd 	bl	80073ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071f2:	4b12      	ldr	r3, [pc, #72]	; (800723c <xPortStartScheduler+0x13c>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071f8:	f000 f8fc 	bl	80073f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071fc:	4b10      	ldr	r3, [pc, #64]	; (8007240 <xPortStartScheduler+0x140>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a0f      	ldr	r2, [pc, #60]	; (8007240 <xPortStartScheduler+0x140>)
 8007202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007208:	f7ff ff66 	bl	80070d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800720c:	f7ff fbaa 	bl	8006964 <vTaskSwitchContext>
	prvTaskExitError();
 8007210:	f7ff ff22 	bl	8007058 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	e000ed00 	.word	0xe000ed00
 8007224:	410fc271 	.word	0x410fc271
 8007228:	410fc270 	.word	0x410fc270
 800722c:	e000e400 	.word	0xe000e400
 8007230:	2000086c 	.word	0x2000086c
 8007234:	20000870 	.word	0x20000870
 8007238:	e000ed20 	.word	0xe000ed20
 800723c:	20000140 	.word	0x20000140
 8007240:	e000ef34 	.word	0xe000ef34

08007244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	607b      	str	r3, [r7, #4]
}
 800725c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <vPortEnterCritical+0x58>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	4a0d      	ldr	r2, [pc, #52]	; (800729c <vPortEnterCritical+0x58>)
 8007266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007268:	4b0c      	ldr	r3, [pc, #48]	; (800729c <vPortEnterCritical+0x58>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d10f      	bne.n	8007290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <vPortEnterCritical+0x5c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <vPortEnterCritical+0x4c>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	603b      	str	r3, [r7, #0]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <vPortEnterCritical+0x4a>
	}
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	20000140 	.word	0x20000140
 80072a0:	e000ed04 	.word	0xe000ed04

080072a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072aa:	4b12      	ldr	r3, [pc, #72]	; (80072f4 <vPortExitCritical+0x50>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <vPortExitCritical+0x24>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	607b      	str	r3, [r7, #4]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <vPortExitCritical+0x50>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <vPortExitCritical+0x50>)
 80072d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <vPortExitCritical+0x50>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d105      	bne.n	80072e6 <vPortExitCritical+0x42>
 80072da:	2300      	movs	r3, #0
 80072dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	f383 8811 	msr	BASEPRI, r3
}
 80072e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000140 	.word	0x20000140
	...

08007300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007300:	f3ef 8009 	mrs	r0, PSP
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4b15      	ldr	r3, [pc, #84]	; (8007360 <pxCurrentTCBConst>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	f01e 0f10 	tst.w	lr, #16
 8007310:	bf08      	it	eq
 8007312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	6010      	str	r0, [r2, #0]
 800731c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007324:	f380 8811 	msr	BASEPRI, r0
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f7ff fb18 	bl	8006964 <vTaskSwitchContext>
 8007334:	f04f 0000 	mov.w	r0, #0
 8007338:	f380 8811 	msr	BASEPRI, r0
 800733c:	bc09      	pop	{r0, r3}
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	6808      	ldr	r0, [r1, #0]
 8007342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007346:	f01e 0f10 	tst.w	lr, #16
 800734a:	bf08      	it	eq
 800734c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007350:	f380 8809 	msr	PSP, r0
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w

08007360 <pxCurrentTCBConst>:
 8007360:	20000740 	.word	0x20000740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop

08007368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	607b      	str	r3, [r7, #4]
}
 8007380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007382:	f7ff fa37 	bl	80067f4 <xTaskIncrementTick>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <SysTick_Handler+0x40>)
 800738e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f383 8811 	msr	BASEPRI, r3
}
 800739e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <vPortSetupTimerInterrupt+0x34>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073b6:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <vPortSetupTimerInterrupt+0x38>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <vPortSetupTimerInterrupt+0x3c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <vPortSetupTimerInterrupt+0x40>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	099b      	lsrs	r3, r3, #6
 80073c8:	4a09      	ldr	r2, [pc, #36]	; (80073f0 <vPortSetupTimerInterrupt+0x44>)
 80073ca:	3b01      	subs	r3, #1
 80073cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ce:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <vPortSetupTimerInterrupt+0x34>)
 80073d0:	2207      	movs	r2, #7
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	e000e010 	.word	0xe000e010
 80073e4:	e000e018 	.word	0xe000e018
 80073e8:	20000134 	.word	0x20000134
 80073ec:	10624dd3 	.word	0x10624dd3
 80073f0:	e000e014 	.word	0xe000e014

080073f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007404 <vPortEnableVFP+0x10>
 80073f8:	6801      	ldr	r1, [r0, #0]
 80073fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073fe:	6001      	str	r1, [r0, #0]
 8007400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007402:	bf00      	nop
 8007404:	e000ed88 	.word	0xe000ed88

08007408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800740e:	f3ef 8305 	mrs	r3, IPSR
 8007412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b0f      	cmp	r3, #15
 8007418:	d914      	bls.n	8007444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800741a:	4a17      	ldr	r2, [pc, #92]	; (8007478 <vPortValidateInterruptPriority+0x70>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007424:	4b15      	ldr	r3, [pc, #84]	; (800747c <vPortValidateInterruptPriority+0x74>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	7afa      	ldrb	r2, [r7, #11]
 800742a:	429a      	cmp	r2, r3
 800742c:	d20a      	bcs.n	8007444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	607b      	str	r3, [r7, #4]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007444:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <vPortValidateInterruptPriority+0x78>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800744c:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <vPortValidateInterruptPriority+0x7c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	429a      	cmp	r2, r3
 8007452:	d90a      	bls.n	800746a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	603b      	str	r3, [r7, #0]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <vPortValidateInterruptPriority+0x60>
	}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	e000e3f0 	.word	0xe000e3f0
 800747c:	2000086c 	.word	0x2000086c
 8007480:	e000ed0c 	.word	0xe000ed0c
 8007484:	20000870 	.word	0x20000870

08007488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	; 0x28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007494:	f7ff f904 	bl	80066a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007498:	4b5b      	ldr	r3, [pc, #364]	; (8007608 <pvPortMalloc+0x180>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074a0:	f000 f920 	bl	80076e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074a4:	4b59      	ldr	r3, [pc, #356]	; (800760c <pvPortMalloc+0x184>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 8093 	bne.w	80075d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01d      	beq.n	80074f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074b8:	2208      	movs	r2, #8
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4413      	add	r3, r2
 80074be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d014      	beq.n	80074f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f023 0307 	bic.w	r3, r3, #7
 80074d0:	3308      	adds	r3, #8
 80074d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <pvPortMalloc+0x6c>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	617b      	str	r3, [r7, #20]
}
 80074f0:	bf00      	nop
 80074f2:	e7fe      	b.n	80074f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d06e      	beq.n	80075d8 <pvPortMalloc+0x150>
 80074fa:	4b45      	ldr	r3, [pc, #276]	; (8007610 <pvPortMalloc+0x188>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	429a      	cmp	r2, r3
 8007502:	d869      	bhi.n	80075d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007504:	4b43      	ldr	r3, [pc, #268]	; (8007614 <pvPortMalloc+0x18c>)
 8007506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007508:	4b42      	ldr	r3, [pc, #264]	; (8007614 <pvPortMalloc+0x18c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800750e:	e004      	b.n	800751a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	d903      	bls.n	800752c <pvPortMalloc+0xa4>
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f1      	bne.n	8007510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800752c:	4b36      	ldr	r3, [pc, #216]	; (8007608 <pvPortMalloc+0x180>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007532:	429a      	cmp	r2, r3
 8007534:	d050      	beq.n	80075d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2208      	movs	r2, #8
 800753c:	4413      	add	r3, r2
 800753e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	2308      	movs	r3, #8
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	429a      	cmp	r2, r3
 8007556:	d91f      	bls.n	8007598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <pvPortMalloc+0xf8>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	613b      	str	r3, [r7, #16]
}
 800757c:	bf00      	nop
 800757e:	e7fe      	b.n	800757e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	1ad2      	subs	r2, r2, r3
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007592:	69b8      	ldr	r0, [r7, #24]
 8007594:	f000 f908 	bl	80077a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007598:	4b1d      	ldr	r3, [pc, #116]	; (8007610 <pvPortMalloc+0x188>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <pvPortMalloc+0x188>)
 80075a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075a6:	4b1a      	ldr	r3, [pc, #104]	; (8007610 <pvPortMalloc+0x188>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <pvPortMalloc+0x190>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d203      	bcs.n	80075ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075b2:	4b17      	ldr	r3, [pc, #92]	; (8007610 <pvPortMalloc+0x188>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <pvPortMalloc+0x190>)
 80075b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <pvPortMalloc+0x184>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	431a      	orrs	r2, r3
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075ce:	4b13      	ldr	r3, [pc, #76]	; (800761c <pvPortMalloc+0x194>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3301      	adds	r3, #1
 80075d4:	4a11      	ldr	r2, [pc, #68]	; (800761c <pvPortMalloc+0x194>)
 80075d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075d8:	f7ff f870 	bl	80066bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <pvPortMalloc+0x174>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60fb      	str	r3, [r7, #12]
}
 80075f8:	bf00      	nop
 80075fa:	e7fe      	b.n	80075fa <pvPortMalloc+0x172>
	return pvReturn;
 80075fc:	69fb      	ldr	r3, [r7, #28]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3728      	adds	r7, #40	; 0x28
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20007dac 	.word	0x20007dac
 800760c:	20007dc0 	.word	0x20007dc0
 8007610:	20007db0 	.word	0x20007db0
 8007614:	20007da4 	.word	0x20007da4
 8007618:	20007db4 	.word	0x20007db4
 800761c:	20007db8 	.word	0x20007db8

08007620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d04d      	beq.n	80076ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007632:	2308      	movs	r3, #8
 8007634:	425b      	negs	r3, r3
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4413      	add	r3, r2
 800763a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <vPortFree+0xb8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4013      	ands	r3, r2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <vPortFree+0x44>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	60fb      	str	r3, [r7, #12]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <vPortFree+0x62>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	60bb      	str	r3, [r7, #8]
}
 800767e:	bf00      	nop
 8007680:	e7fe      	b.n	8007680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <vPortFree+0xb8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4013      	ands	r3, r2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01e      	beq.n	80076ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d11a      	bne.n	80076ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <vPortFree+0xb8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	43db      	mvns	r3, r3
 80076a2:	401a      	ands	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076a8:	f7fe fffa 	bl	80066a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <vPortFree+0xbc>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4413      	add	r3, r2
 80076b6:	4a09      	ldr	r2, [pc, #36]	; (80076dc <vPortFree+0xbc>)
 80076b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076ba:	6938      	ldr	r0, [r7, #16]
 80076bc:	f000 f874 	bl	80077a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076c0:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <vPortFree+0xc0>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	4a06      	ldr	r2, [pc, #24]	; (80076e0 <vPortFree+0xc0>)
 80076c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076ca:	f7fe fff7 	bl	80066bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076ce:	bf00      	nop
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20007dc0 	.word	0x20007dc0
 80076dc:	20007db0 	.word	0x20007db0
 80076e0:	20007dbc 	.word	0x20007dbc

080076e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076ea:	f247 5330 	movw	r3, #30000	; 0x7530
 80076ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076f0:	4b27      	ldr	r3, [pc, #156]	; (8007790 <prvHeapInit+0xac>)
 80076f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00c      	beq.n	8007718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3307      	adds	r3, #7
 8007702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0307 	bic.w	r3, r3, #7
 800770a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	4a1f      	ldr	r2, [pc, #124]	; (8007790 <prvHeapInit+0xac>)
 8007714:	4413      	add	r3, r2
 8007716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800771c:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <prvHeapInit+0xb0>)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007722:	4b1c      	ldr	r3, [pc, #112]	; (8007794 <prvHeapInit+0xb0>)
 8007724:	2200      	movs	r2, #0
 8007726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007730:	2208      	movs	r2, #8
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1a9b      	subs	r3, r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <prvHeapInit+0xb4>)
 8007744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <prvHeapInit+0xb4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2200      	movs	r2, #0
 800774c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800774e:	4b12      	ldr	r3, [pc, #72]	; (8007798 <prvHeapInit+0xb4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	1ad2      	subs	r2, r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007764:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <prvHeapInit+0xb4>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	4a0a      	ldr	r2, [pc, #40]	; (800779c <prvHeapInit+0xb8>)
 8007772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <prvHeapInit+0xbc>)
 800777a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <prvHeapInit+0xc0>)
 800777e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007782:	601a      	str	r2, [r3, #0]
}
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	20000874 	.word	0x20000874
 8007794:	20007da4 	.word	0x20007da4
 8007798:	20007dac 	.word	0x20007dac
 800779c:	20007db4 	.word	0x20007db4
 80077a0:	20007db0 	.word	0x20007db0
 80077a4:	20007dc0 	.word	0x20007dc0

080077a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077b0:	4b28      	ldr	r3, [pc, #160]	; (8007854 <prvInsertBlockIntoFreeList+0xac>)
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	e002      	b.n	80077bc <prvInsertBlockIntoFreeList+0x14>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d8f7      	bhi.n	80077b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	4413      	add	r3, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d108      	bne.n	80077ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	441a      	add	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	441a      	add	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d118      	bne.n	8007830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <prvInsertBlockIntoFreeList+0xb0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d00d      	beq.n	8007826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	441a      	add	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	e008      	b.n	8007838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007826:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <prvInsertBlockIntoFreeList+0xb0>)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e003      	b.n	8007838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d002      	beq.n	8007846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20007da4 	.word	0x20007da4
 8007858:	20007dac 	.word	0x20007dac

0800785c <__errno>:
 800785c:	4b01      	ldr	r3, [pc, #4]	; (8007864 <__errno+0x8>)
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	20000144 	.word	0x20000144

08007868 <__libc_init_array>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4d0d      	ldr	r5, [pc, #52]	; (80078a0 <__libc_init_array+0x38>)
 800786c:	4c0d      	ldr	r4, [pc, #52]	; (80078a4 <__libc_init_array+0x3c>)
 800786e:	1b64      	subs	r4, r4, r5
 8007870:	10a4      	asrs	r4, r4, #2
 8007872:	2600      	movs	r6, #0
 8007874:	42a6      	cmp	r6, r4
 8007876:	d109      	bne.n	800788c <__libc_init_array+0x24>
 8007878:	4d0b      	ldr	r5, [pc, #44]	; (80078a8 <__libc_init_array+0x40>)
 800787a:	4c0c      	ldr	r4, [pc, #48]	; (80078ac <__libc_init_array+0x44>)
 800787c:	f002 ff02 	bl	800a684 <_init>
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	2600      	movs	r6, #0
 8007886:	42a6      	cmp	r6, r4
 8007888:	d105      	bne.n	8007896 <__libc_init_array+0x2e>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007890:	4798      	blx	r3
 8007892:	3601      	adds	r6, #1
 8007894:	e7ee      	b.n	8007874 <__libc_init_array+0xc>
 8007896:	f855 3b04 	ldr.w	r3, [r5], #4
 800789a:	4798      	blx	r3
 800789c:	3601      	adds	r6, #1
 800789e:	e7f2      	b.n	8007886 <__libc_init_array+0x1e>
 80078a0:	0800abfc 	.word	0x0800abfc
 80078a4:	0800abfc 	.word	0x0800abfc
 80078a8:	0800abfc 	.word	0x0800abfc
 80078ac:	0800ac00 	.word	0x0800ac00

080078b0 <memcpy>:
 80078b0:	440a      	add	r2, r1
 80078b2:	4291      	cmp	r1, r2
 80078b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078b8:	d100      	bne.n	80078bc <memcpy+0xc>
 80078ba:	4770      	bx	lr
 80078bc:	b510      	push	{r4, lr}
 80078be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078c6:	4291      	cmp	r1, r2
 80078c8:	d1f9      	bne.n	80078be <memcpy+0xe>
 80078ca:	bd10      	pop	{r4, pc}

080078cc <memset>:
 80078cc:	4402      	add	r2, r0
 80078ce:	4603      	mov	r3, r0
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d100      	bne.n	80078d6 <memset+0xa>
 80078d4:	4770      	bx	lr
 80078d6:	f803 1b01 	strb.w	r1, [r3], #1
 80078da:	e7f9      	b.n	80078d0 <memset+0x4>

080078dc <__cvt>:
 80078dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	ec55 4b10 	vmov	r4, r5, d0
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	460e      	mov	r6, r1
 80078e8:	4619      	mov	r1, r3
 80078ea:	462b      	mov	r3, r5
 80078ec:	bfbb      	ittet	lt
 80078ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078f2:	461d      	movlt	r5, r3
 80078f4:	2300      	movge	r3, #0
 80078f6:	232d      	movlt	r3, #45	; 0x2d
 80078f8:	700b      	strb	r3, [r1, #0]
 80078fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007900:	4691      	mov	r9, r2
 8007902:	f023 0820 	bic.w	r8, r3, #32
 8007906:	bfbc      	itt	lt
 8007908:	4622      	movlt	r2, r4
 800790a:	4614      	movlt	r4, r2
 800790c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007910:	d005      	beq.n	800791e <__cvt+0x42>
 8007912:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007916:	d100      	bne.n	800791a <__cvt+0x3e>
 8007918:	3601      	adds	r6, #1
 800791a:	2102      	movs	r1, #2
 800791c:	e000      	b.n	8007920 <__cvt+0x44>
 800791e:	2103      	movs	r1, #3
 8007920:	ab03      	add	r3, sp, #12
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	ab02      	add	r3, sp, #8
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	ec45 4b10 	vmov	d0, r4, r5
 800792c:	4653      	mov	r3, sl
 800792e:	4632      	mov	r2, r6
 8007930:	f000 fcea 	bl	8008308 <_dtoa_r>
 8007934:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007938:	4607      	mov	r7, r0
 800793a:	d102      	bne.n	8007942 <__cvt+0x66>
 800793c:	f019 0f01 	tst.w	r9, #1
 8007940:	d022      	beq.n	8007988 <__cvt+0xac>
 8007942:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007946:	eb07 0906 	add.w	r9, r7, r6
 800794a:	d110      	bne.n	800796e <__cvt+0x92>
 800794c:	783b      	ldrb	r3, [r7, #0]
 800794e:	2b30      	cmp	r3, #48	; 0x30
 8007950:	d10a      	bne.n	8007968 <__cvt+0x8c>
 8007952:	2200      	movs	r2, #0
 8007954:	2300      	movs	r3, #0
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f9 f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800795e:	b918      	cbnz	r0, 8007968 <__cvt+0x8c>
 8007960:	f1c6 0601 	rsb	r6, r6, #1
 8007964:	f8ca 6000 	str.w	r6, [sl]
 8007968:	f8da 3000 	ldr.w	r3, [sl]
 800796c:	4499      	add	r9, r3
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	4620      	mov	r0, r4
 8007974:	4629      	mov	r1, r5
 8007976:	f7f9 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800797a:	b108      	cbz	r0, 8007980 <__cvt+0xa4>
 800797c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007980:	2230      	movs	r2, #48	; 0x30
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	454b      	cmp	r3, r9
 8007986:	d307      	bcc.n	8007998 <__cvt+0xbc>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800798c:	1bdb      	subs	r3, r3, r7
 800798e:	4638      	mov	r0, r7
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	b004      	add	sp, #16
 8007994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007998:	1c59      	adds	r1, r3, #1
 800799a:	9103      	str	r1, [sp, #12]
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	e7f0      	b.n	8007982 <__cvt+0xa6>

080079a0 <__exponent>:
 80079a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079a2:	4603      	mov	r3, r0
 80079a4:	2900      	cmp	r1, #0
 80079a6:	bfb8      	it	lt
 80079a8:	4249      	neglt	r1, r1
 80079aa:	f803 2b02 	strb.w	r2, [r3], #2
 80079ae:	bfb4      	ite	lt
 80079b0:	222d      	movlt	r2, #45	; 0x2d
 80079b2:	222b      	movge	r2, #43	; 0x2b
 80079b4:	2909      	cmp	r1, #9
 80079b6:	7042      	strb	r2, [r0, #1]
 80079b8:	dd2a      	ble.n	8007a10 <__exponent+0x70>
 80079ba:	f10d 0407 	add.w	r4, sp, #7
 80079be:	46a4      	mov	ip, r4
 80079c0:	270a      	movs	r7, #10
 80079c2:	46a6      	mov	lr, r4
 80079c4:	460a      	mov	r2, r1
 80079c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80079ca:	fb07 1516 	mls	r5, r7, r6, r1
 80079ce:	3530      	adds	r5, #48	; 0x30
 80079d0:	2a63      	cmp	r2, #99	; 0x63
 80079d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80079d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079da:	4631      	mov	r1, r6
 80079dc:	dcf1      	bgt.n	80079c2 <__exponent+0x22>
 80079de:	3130      	adds	r1, #48	; 0x30
 80079e0:	f1ae 0502 	sub.w	r5, lr, #2
 80079e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079e8:	1c44      	adds	r4, r0, #1
 80079ea:	4629      	mov	r1, r5
 80079ec:	4561      	cmp	r1, ip
 80079ee:	d30a      	bcc.n	8007a06 <__exponent+0x66>
 80079f0:	f10d 0209 	add.w	r2, sp, #9
 80079f4:	eba2 020e 	sub.w	r2, r2, lr
 80079f8:	4565      	cmp	r5, ip
 80079fa:	bf88      	it	hi
 80079fc:	2200      	movhi	r2, #0
 80079fe:	4413      	add	r3, r2
 8007a00:	1a18      	subs	r0, r3, r0
 8007a02:	b003      	add	sp, #12
 8007a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a0e:	e7ed      	b.n	80079ec <__exponent+0x4c>
 8007a10:	2330      	movs	r3, #48	; 0x30
 8007a12:	3130      	adds	r1, #48	; 0x30
 8007a14:	7083      	strb	r3, [r0, #2]
 8007a16:	70c1      	strb	r1, [r0, #3]
 8007a18:	1d03      	adds	r3, r0, #4
 8007a1a:	e7f1      	b.n	8007a00 <__exponent+0x60>

08007a1c <_printf_float>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	ed2d 8b02 	vpush	{d8}
 8007a24:	b08d      	sub	sp, #52	; 0x34
 8007a26:	460c      	mov	r4, r1
 8007a28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	461f      	mov	r7, r3
 8007a30:	4605      	mov	r5, r0
 8007a32:	f001 fa57 	bl	8008ee4 <_localeconv_r>
 8007a36:	f8d0 a000 	ldr.w	sl, [r0]
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	f7f8 fbd0 	bl	80001e0 <strlen>
 8007a40:	2300      	movs	r3, #0
 8007a42:	930a      	str	r3, [sp, #40]	; 0x28
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a50:	3307      	adds	r3, #7
 8007a52:	f023 0307 	bic.w	r3, r3, #7
 8007a56:	f103 0208 	add.w	r2, r3, #8
 8007a5a:	f8c8 2000 	str.w	r2, [r8]
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a6e:	9307      	str	r3, [sp, #28]
 8007a70:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a74:	ee08 0a10 	vmov	s16, r0
 8007a78:	4b9f      	ldr	r3, [pc, #636]	; (8007cf8 <_printf_float+0x2dc>)
 8007a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a82:	f7f9 f85b 	bl	8000b3c <__aeabi_dcmpun>
 8007a86:	bb88      	cbnz	r0, 8007aec <_printf_float+0xd0>
 8007a88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a8c:	4b9a      	ldr	r3, [pc, #616]	; (8007cf8 <_printf_float+0x2dc>)
 8007a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a92:	f7f9 f835 	bl	8000b00 <__aeabi_dcmple>
 8007a96:	bb48      	cbnz	r0, 8007aec <_printf_float+0xd0>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	f7f9 f824 	bl	8000aec <__aeabi_dcmplt>
 8007aa4:	b110      	cbz	r0, 8007aac <_printf_float+0x90>
 8007aa6:	232d      	movs	r3, #45	; 0x2d
 8007aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aac:	4b93      	ldr	r3, [pc, #588]	; (8007cfc <_printf_float+0x2e0>)
 8007aae:	4894      	ldr	r0, [pc, #592]	; (8007d00 <_printf_float+0x2e4>)
 8007ab0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ab4:	bf94      	ite	ls
 8007ab6:	4698      	movls	r8, r3
 8007ab8:	4680      	movhi	r8, r0
 8007aba:	2303      	movs	r3, #3
 8007abc:	6123      	str	r3, [r4, #16]
 8007abe:	9b05      	ldr	r3, [sp, #20]
 8007ac0:	f023 0204 	bic.w	r2, r3, #4
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	f04f 0900 	mov.w	r9, #0
 8007aca:	9700      	str	r7, [sp, #0]
 8007acc:	4633      	mov	r3, r6
 8007ace:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 f9d8 	bl	8007e88 <_printf_common>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f040 8090 	bne.w	8007bfe <_printf_float+0x1e2>
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae2:	b00d      	add	sp, #52	; 0x34
 8007ae4:	ecbd 8b02 	vpop	{d8}
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	f7f9 f822 	bl	8000b3c <__aeabi_dcmpun>
 8007af8:	b140      	cbz	r0, 8007b0c <_printf_float+0xf0>
 8007afa:	464b      	mov	r3, r9
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfbc      	itt	lt
 8007b00:	232d      	movlt	r3, #45	; 0x2d
 8007b02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b06:	487f      	ldr	r0, [pc, #508]	; (8007d04 <_printf_float+0x2e8>)
 8007b08:	4b7f      	ldr	r3, [pc, #508]	; (8007d08 <_printf_float+0x2ec>)
 8007b0a:	e7d1      	b.n	8007ab0 <_printf_float+0x94>
 8007b0c:	6863      	ldr	r3, [r4, #4]
 8007b0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b12:	9206      	str	r2, [sp, #24]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	d13f      	bne.n	8007b98 <_printf_float+0x17c>
 8007b18:	2306      	movs	r3, #6
 8007b1a:	6063      	str	r3, [r4, #4]
 8007b1c:	9b05      	ldr	r3, [sp, #20]
 8007b1e:	6861      	ldr	r1, [r4, #4]
 8007b20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b24:	2300      	movs	r3, #0
 8007b26:	9303      	str	r3, [sp, #12]
 8007b28:	ab0a      	add	r3, sp, #40	; 0x28
 8007b2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b2e:	ab09      	add	r3, sp, #36	; 0x24
 8007b30:	ec49 8b10 	vmov	d0, r8, r9
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	6022      	str	r2, [r4, #0]
 8007b38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7ff fecd 	bl	80078dc <__cvt>
 8007b42:	9b06      	ldr	r3, [sp, #24]
 8007b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b46:	2b47      	cmp	r3, #71	; 0x47
 8007b48:	4680      	mov	r8, r0
 8007b4a:	d108      	bne.n	8007b5e <_printf_float+0x142>
 8007b4c:	1cc8      	adds	r0, r1, #3
 8007b4e:	db02      	blt.n	8007b56 <_printf_float+0x13a>
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	4299      	cmp	r1, r3
 8007b54:	dd41      	ble.n	8007bda <_printf_float+0x1be>
 8007b56:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b5a:	fa5f fb8b 	uxtb.w	fp, fp
 8007b5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b62:	d820      	bhi.n	8007ba6 <_printf_float+0x18a>
 8007b64:	3901      	subs	r1, #1
 8007b66:	465a      	mov	r2, fp
 8007b68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b6c:	9109      	str	r1, [sp, #36]	; 0x24
 8007b6e:	f7ff ff17 	bl	80079a0 <__exponent>
 8007b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b74:	1813      	adds	r3, r2, r0
 8007b76:	2a01      	cmp	r2, #1
 8007b78:	4681      	mov	r9, r0
 8007b7a:	6123      	str	r3, [r4, #16]
 8007b7c:	dc02      	bgt.n	8007b84 <_printf_float+0x168>
 8007b7e:	6822      	ldr	r2, [r4, #0]
 8007b80:	07d2      	lsls	r2, r2, #31
 8007b82:	d501      	bpl.n	8007b88 <_printf_float+0x16c>
 8007b84:	3301      	adds	r3, #1
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d09c      	beq.n	8007aca <_printf_float+0xae>
 8007b90:	232d      	movs	r3, #45	; 0x2d
 8007b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b96:	e798      	b.n	8007aca <_printf_float+0xae>
 8007b98:	9a06      	ldr	r2, [sp, #24]
 8007b9a:	2a47      	cmp	r2, #71	; 0x47
 8007b9c:	d1be      	bne.n	8007b1c <_printf_float+0x100>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1bc      	bne.n	8007b1c <_printf_float+0x100>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e7b9      	b.n	8007b1a <_printf_float+0xfe>
 8007ba6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007baa:	d118      	bne.n	8007bde <_printf_float+0x1c2>
 8007bac:	2900      	cmp	r1, #0
 8007bae:	6863      	ldr	r3, [r4, #4]
 8007bb0:	dd0b      	ble.n	8007bca <_printf_float+0x1ae>
 8007bb2:	6121      	str	r1, [r4, #16]
 8007bb4:	b913      	cbnz	r3, 8007bbc <_printf_float+0x1a0>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	07d0      	lsls	r0, r2, #31
 8007bba:	d502      	bpl.n	8007bc2 <_printf_float+0x1a6>
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	440b      	add	r3, r1
 8007bc0:	6123      	str	r3, [r4, #16]
 8007bc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bc4:	f04f 0900 	mov.w	r9, #0
 8007bc8:	e7de      	b.n	8007b88 <_printf_float+0x16c>
 8007bca:	b913      	cbnz	r3, 8007bd2 <_printf_float+0x1b6>
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	07d2      	lsls	r2, r2, #31
 8007bd0:	d501      	bpl.n	8007bd6 <_printf_float+0x1ba>
 8007bd2:	3302      	adds	r3, #2
 8007bd4:	e7f4      	b.n	8007bc0 <_printf_float+0x1a4>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e7f2      	b.n	8007bc0 <_printf_float+0x1a4>
 8007bda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be0:	4299      	cmp	r1, r3
 8007be2:	db05      	blt.n	8007bf0 <_printf_float+0x1d4>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	6121      	str	r1, [r4, #16]
 8007be8:	07d8      	lsls	r0, r3, #31
 8007bea:	d5ea      	bpl.n	8007bc2 <_printf_float+0x1a6>
 8007bec:	1c4b      	adds	r3, r1, #1
 8007bee:	e7e7      	b.n	8007bc0 <_printf_float+0x1a4>
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	bfd4      	ite	le
 8007bf4:	f1c1 0202 	rsble	r2, r1, #2
 8007bf8:	2201      	movgt	r2, #1
 8007bfa:	4413      	add	r3, r2
 8007bfc:	e7e0      	b.n	8007bc0 <_printf_float+0x1a4>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	055a      	lsls	r2, r3, #21
 8007c02:	d407      	bmi.n	8007c14 <_printf_float+0x1f8>
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	4642      	mov	r2, r8
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b8      	blx	r7
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d12c      	bne.n	8007c6c <_printf_float+0x250>
 8007c12:	e764      	b.n	8007ade <_printf_float+0xc2>
 8007c14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c18:	f240 80e0 	bls.w	8007ddc <_printf_float+0x3c0>
 8007c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	f7f8 ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d034      	beq.n	8007c96 <_printf_float+0x27a>
 8007c2c:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <_printf_float+0x2f0>)
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	f43f af51 	beq.w	8007ade <_printf_float+0xc2>
 8007c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c40:	429a      	cmp	r2, r3
 8007c42:	db02      	blt.n	8007c4a <_printf_float+0x22e>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	07d8      	lsls	r0, r3, #31
 8007c48:	d510      	bpl.n	8007c6c <_printf_float+0x250>
 8007c4a:	ee18 3a10 	vmov	r3, s16
 8007c4e:	4652      	mov	r2, sl
 8007c50:	4631      	mov	r1, r6
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b8      	blx	r7
 8007c56:	3001      	adds	r0, #1
 8007c58:	f43f af41 	beq.w	8007ade <_printf_float+0xc2>
 8007c5c:	f04f 0800 	mov.w	r8, #0
 8007c60:	f104 091a 	add.w	r9, r4, #26
 8007c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c66:	3b01      	subs	r3, #1
 8007c68:	4543      	cmp	r3, r8
 8007c6a:	dc09      	bgt.n	8007c80 <_printf_float+0x264>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	079b      	lsls	r3, r3, #30
 8007c70:	f100 8105 	bmi.w	8007e7e <_printf_float+0x462>
 8007c74:	68e0      	ldr	r0, [r4, #12]
 8007c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c78:	4298      	cmp	r0, r3
 8007c7a:	bfb8      	it	lt
 8007c7c:	4618      	movlt	r0, r3
 8007c7e:	e730      	b.n	8007ae2 <_printf_float+0xc6>
 8007c80:	2301      	movs	r3, #1
 8007c82:	464a      	mov	r2, r9
 8007c84:	4631      	mov	r1, r6
 8007c86:	4628      	mov	r0, r5
 8007c88:	47b8      	blx	r7
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	f43f af27 	beq.w	8007ade <_printf_float+0xc2>
 8007c90:	f108 0801 	add.w	r8, r8, #1
 8007c94:	e7e6      	b.n	8007c64 <_printf_float+0x248>
 8007c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dc39      	bgt.n	8007d10 <_printf_float+0x2f4>
 8007c9c:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <_printf_float+0x2f0>)
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f af19 	beq.w	8007ade <_printf_float+0xc2>
 8007cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d102      	bne.n	8007cba <_printf_float+0x29e>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	07d9      	lsls	r1, r3, #31
 8007cb8:	d5d8      	bpl.n	8007c6c <_printf_float+0x250>
 8007cba:	ee18 3a10 	vmov	r3, s16
 8007cbe:	4652      	mov	r2, sl
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f af09 	beq.w	8007ade <_printf_float+0xc2>
 8007ccc:	f04f 0900 	mov.w	r9, #0
 8007cd0:	f104 0a1a 	add.w	sl, r4, #26
 8007cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd6:	425b      	negs	r3, r3
 8007cd8:	454b      	cmp	r3, r9
 8007cda:	dc01      	bgt.n	8007ce0 <_printf_float+0x2c4>
 8007cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cde:	e792      	b.n	8007c06 <_printf_float+0x1ea>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b8      	blx	r7
 8007cea:	3001      	adds	r0, #1
 8007cec:	f43f aef7 	beq.w	8007ade <_printf_float+0xc2>
 8007cf0:	f109 0901 	add.w	r9, r9, #1
 8007cf4:	e7ee      	b.n	8007cd4 <_printf_float+0x2b8>
 8007cf6:	bf00      	nop
 8007cf8:	7fefffff 	.word	0x7fefffff
 8007cfc:	0800a820 	.word	0x0800a820
 8007d00:	0800a824 	.word	0x0800a824
 8007d04:	0800a82c 	.word	0x0800a82c
 8007d08:	0800a828 	.word	0x0800a828
 8007d0c:	0800a830 	.word	0x0800a830
 8007d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d14:	429a      	cmp	r2, r3
 8007d16:	bfa8      	it	ge
 8007d18:	461a      	movge	r2, r3
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	4691      	mov	r9, r2
 8007d1e:	dc37      	bgt.n	8007d90 <_printf_float+0x374>
 8007d20:	f04f 0b00 	mov.w	fp, #0
 8007d24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d28:	f104 021a 	add.w	r2, r4, #26
 8007d2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	eba3 0309 	sub.w	r3, r3, r9
 8007d34:	455b      	cmp	r3, fp
 8007d36:	dc33      	bgt.n	8007da0 <_printf_float+0x384>
 8007d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	db3b      	blt.n	8007db8 <_printf_float+0x39c>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	07da      	lsls	r2, r3, #31
 8007d44:	d438      	bmi.n	8007db8 <_printf_float+0x39c>
 8007d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d48:	9a05      	ldr	r2, [sp, #20]
 8007d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4c:	1a9a      	subs	r2, r3, r2
 8007d4e:	eba3 0901 	sub.w	r9, r3, r1
 8007d52:	4591      	cmp	r9, r2
 8007d54:	bfa8      	it	ge
 8007d56:	4691      	movge	r9, r2
 8007d58:	f1b9 0f00 	cmp.w	r9, #0
 8007d5c:	dc35      	bgt.n	8007dca <_printf_float+0x3ae>
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d66:	f104 0a1a 	add.w	sl, r4, #26
 8007d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	eba3 0309 	sub.w	r3, r3, r9
 8007d74:	4543      	cmp	r3, r8
 8007d76:	f77f af79 	ble.w	8007c6c <_printf_float+0x250>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4652      	mov	r2, sl
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	f43f aeaa 	beq.w	8007ade <_printf_float+0xc2>
 8007d8a:	f108 0801 	add.w	r8, r8, #1
 8007d8e:	e7ec      	b.n	8007d6a <_printf_float+0x34e>
 8007d90:	4613      	mov	r3, r2
 8007d92:	4631      	mov	r1, r6
 8007d94:	4642      	mov	r2, r8
 8007d96:	4628      	mov	r0, r5
 8007d98:	47b8      	blx	r7
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d1c0      	bne.n	8007d20 <_printf_float+0x304>
 8007d9e:	e69e      	b.n	8007ade <_printf_float+0xc2>
 8007da0:	2301      	movs	r3, #1
 8007da2:	4631      	mov	r1, r6
 8007da4:	4628      	mov	r0, r5
 8007da6:	9205      	str	r2, [sp, #20]
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	f43f ae97 	beq.w	8007ade <_printf_float+0xc2>
 8007db0:	9a05      	ldr	r2, [sp, #20]
 8007db2:	f10b 0b01 	add.w	fp, fp, #1
 8007db6:	e7b9      	b.n	8007d2c <_printf_float+0x310>
 8007db8:	ee18 3a10 	vmov	r3, s16
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	47b8      	blx	r7
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d1be      	bne.n	8007d46 <_printf_float+0x32a>
 8007dc8:	e689      	b.n	8007ade <_printf_float+0xc2>
 8007dca:	9a05      	ldr	r2, [sp, #20]
 8007dcc:	464b      	mov	r3, r9
 8007dce:	4442      	add	r2, r8
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	47b8      	blx	r7
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d1c1      	bne.n	8007d5e <_printf_float+0x342>
 8007dda:	e680      	b.n	8007ade <_printf_float+0xc2>
 8007ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dde:	2a01      	cmp	r2, #1
 8007de0:	dc01      	bgt.n	8007de6 <_printf_float+0x3ca>
 8007de2:	07db      	lsls	r3, r3, #31
 8007de4:	d538      	bpl.n	8007e58 <_printf_float+0x43c>
 8007de6:	2301      	movs	r3, #1
 8007de8:	4642      	mov	r2, r8
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b8      	blx	r7
 8007df0:	3001      	adds	r0, #1
 8007df2:	f43f ae74 	beq.w	8007ade <_printf_float+0xc2>
 8007df6:	ee18 3a10 	vmov	r3, s16
 8007dfa:	4652      	mov	r2, sl
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	4628      	mov	r0, r5
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	f43f ae6b 	beq.w	8007ade <_printf_float+0xc2>
 8007e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f7f8 fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e14:	b9d8      	cbnz	r0, 8007e4e <_printf_float+0x432>
 8007e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e18:	f108 0201 	add.w	r2, r8, #1
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	47b8      	blx	r7
 8007e24:	3001      	adds	r0, #1
 8007e26:	d10e      	bne.n	8007e46 <_printf_float+0x42a>
 8007e28:	e659      	b.n	8007ade <_printf_float+0xc2>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	4631      	mov	r1, r6
 8007e30:	4628      	mov	r0, r5
 8007e32:	47b8      	blx	r7
 8007e34:	3001      	adds	r0, #1
 8007e36:	f43f ae52 	beq.w	8007ade <_printf_float+0xc2>
 8007e3a:	f108 0801 	add.w	r8, r8, #1
 8007e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e40:	3b01      	subs	r3, #1
 8007e42:	4543      	cmp	r3, r8
 8007e44:	dcf1      	bgt.n	8007e2a <_printf_float+0x40e>
 8007e46:	464b      	mov	r3, r9
 8007e48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e4c:	e6dc      	b.n	8007c08 <_printf_float+0x1ec>
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	f104 0a1a 	add.w	sl, r4, #26
 8007e56:	e7f2      	b.n	8007e3e <_printf_float+0x422>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	e7df      	b.n	8007e1e <_printf_float+0x402>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	464a      	mov	r2, r9
 8007e62:	4631      	mov	r1, r6
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b8      	blx	r7
 8007e68:	3001      	adds	r0, #1
 8007e6a:	f43f ae38 	beq.w	8007ade <_printf_float+0xc2>
 8007e6e:	f108 0801 	add.w	r8, r8, #1
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e76:	1a5b      	subs	r3, r3, r1
 8007e78:	4543      	cmp	r3, r8
 8007e7a:	dcf0      	bgt.n	8007e5e <_printf_float+0x442>
 8007e7c:	e6fa      	b.n	8007c74 <_printf_float+0x258>
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	f104 0919 	add.w	r9, r4, #25
 8007e86:	e7f4      	b.n	8007e72 <_printf_float+0x456>

08007e88 <_printf_common>:
 8007e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	4699      	mov	r9, r3
 8007e90:	688a      	ldr	r2, [r1, #8]
 8007e92:	690b      	ldr	r3, [r1, #16]
 8007e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	bfb8      	it	lt
 8007e9c:	4613      	movlt	r3, r2
 8007e9e:	6033      	str	r3, [r6, #0]
 8007ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	b10a      	cbz	r2, 8007eae <_printf_common+0x26>
 8007eaa:	3301      	adds	r3, #1
 8007eac:	6033      	str	r3, [r6, #0]
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	0699      	lsls	r1, r3, #26
 8007eb2:	bf42      	ittt	mi
 8007eb4:	6833      	ldrmi	r3, [r6, #0]
 8007eb6:	3302      	addmi	r3, #2
 8007eb8:	6033      	strmi	r3, [r6, #0]
 8007eba:	6825      	ldr	r5, [r4, #0]
 8007ebc:	f015 0506 	ands.w	r5, r5, #6
 8007ec0:	d106      	bne.n	8007ed0 <_printf_common+0x48>
 8007ec2:	f104 0a19 	add.w	sl, r4, #25
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	6832      	ldr	r2, [r6, #0]
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dc26      	bgt.n	8007f1e <_printf_common+0x96>
 8007ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ed4:	1e13      	subs	r3, r2, #0
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	bf18      	it	ne
 8007eda:	2301      	movne	r3, #1
 8007edc:	0692      	lsls	r2, r2, #26
 8007ede:	d42b      	bmi.n	8007f38 <_printf_common+0xb0>
 8007ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	47c0      	blx	r8
 8007eea:	3001      	adds	r0, #1
 8007eec:	d01e      	beq.n	8007f2c <_printf_common+0xa4>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	68e5      	ldr	r5, [r4, #12]
 8007ef2:	6832      	ldr	r2, [r6, #0]
 8007ef4:	f003 0306 	and.w	r3, r3, #6
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	bf08      	it	eq
 8007efc:	1aad      	subeq	r5, r5, r2
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	6922      	ldr	r2, [r4, #16]
 8007f02:	bf0c      	ite	eq
 8007f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f08:	2500      	movne	r5, #0
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	bfc4      	itt	gt
 8007f0e:	1a9b      	subgt	r3, r3, r2
 8007f10:	18ed      	addgt	r5, r5, r3
 8007f12:	2600      	movs	r6, #0
 8007f14:	341a      	adds	r4, #26
 8007f16:	42b5      	cmp	r5, r6
 8007f18:	d11a      	bne.n	8007f50 <_printf_common+0xc8>
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	e008      	b.n	8007f30 <_printf_common+0xa8>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4652      	mov	r2, sl
 8007f22:	4649      	mov	r1, r9
 8007f24:	4638      	mov	r0, r7
 8007f26:	47c0      	blx	r8
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d103      	bne.n	8007f34 <_printf_common+0xac>
 8007f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f34:	3501      	adds	r5, #1
 8007f36:	e7c6      	b.n	8007ec6 <_printf_common+0x3e>
 8007f38:	18e1      	adds	r1, r4, r3
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	2030      	movs	r0, #48	; 0x30
 8007f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f42:	4422      	add	r2, r4
 8007f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	e7c7      	b.n	8007ee0 <_printf_common+0x58>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4622      	mov	r2, r4
 8007f54:	4649      	mov	r1, r9
 8007f56:	4638      	mov	r0, r7
 8007f58:	47c0      	blx	r8
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d0e6      	beq.n	8007f2c <_printf_common+0xa4>
 8007f5e:	3601      	adds	r6, #1
 8007f60:	e7d9      	b.n	8007f16 <_printf_common+0x8e>
	...

08007f64 <_printf_i>:
 8007f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f68:	7e0f      	ldrb	r7, [r1, #24]
 8007f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f6c:	2f78      	cmp	r7, #120	; 0x78
 8007f6e:	4691      	mov	r9, r2
 8007f70:	4680      	mov	r8, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	469a      	mov	sl, r3
 8007f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f7a:	d807      	bhi.n	8007f8c <_printf_i+0x28>
 8007f7c:	2f62      	cmp	r7, #98	; 0x62
 8007f7e:	d80a      	bhi.n	8007f96 <_printf_i+0x32>
 8007f80:	2f00      	cmp	r7, #0
 8007f82:	f000 80d8 	beq.w	8008136 <_printf_i+0x1d2>
 8007f86:	2f58      	cmp	r7, #88	; 0x58
 8007f88:	f000 80a3 	beq.w	80080d2 <_printf_i+0x16e>
 8007f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f94:	e03a      	b.n	800800c <_printf_i+0xa8>
 8007f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f9a:	2b15      	cmp	r3, #21
 8007f9c:	d8f6      	bhi.n	8007f8c <_printf_i+0x28>
 8007f9e:	a101      	add	r1, pc, #4	; (adr r1, 8007fa4 <_printf_i+0x40>)
 8007fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fa4:	08007ffd 	.word	0x08007ffd
 8007fa8:	08008011 	.word	0x08008011
 8007fac:	08007f8d 	.word	0x08007f8d
 8007fb0:	08007f8d 	.word	0x08007f8d
 8007fb4:	08007f8d 	.word	0x08007f8d
 8007fb8:	08007f8d 	.word	0x08007f8d
 8007fbc:	08008011 	.word	0x08008011
 8007fc0:	08007f8d 	.word	0x08007f8d
 8007fc4:	08007f8d 	.word	0x08007f8d
 8007fc8:	08007f8d 	.word	0x08007f8d
 8007fcc:	08007f8d 	.word	0x08007f8d
 8007fd0:	0800811d 	.word	0x0800811d
 8007fd4:	08008041 	.word	0x08008041
 8007fd8:	080080ff 	.word	0x080080ff
 8007fdc:	08007f8d 	.word	0x08007f8d
 8007fe0:	08007f8d 	.word	0x08007f8d
 8007fe4:	0800813f 	.word	0x0800813f
 8007fe8:	08007f8d 	.word	0x08007f8d
 8007fec:	08008041 	.word	0x08008041
 8007ff0:	08007f8d 	.word	0x08007f8d
 8007ff4:	08007f8d 	.word	0x08007f8d
 8007ff8:	08008107 	.word	0x08008107
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	1d1a      	adds	r2, r3, #4
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	602a      	str	r2, [r5, #0]
 8008004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800800c:	2301      	movs	r3, #1
 800800e:	e0a3      	b.n	8008158 <_printf_i+0x1f4>
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	6829      	ldr	r1, [r5, #0]
 8008014:	0606      	lsls	r6, r0, #24
 8008016:	f101 0304 	add.w	r3, r1, #4
 800801a:	d50a      	bpl.n	8008032 <_printf_i+0xce>
 800801c:	680e      	ldr	r6, [r1, #0]
 800801e:	602b      	str	r3, [r5, #0]
 8008020:	2e00      	cmp	r6, #0
 8008022:	da03      	bge.n	800802c <_printf_i+0xc8>
 8008024:	232d      	movs	r3, #45	; 0x2d
 8008026:	4276      	negs	r6, r6
 8008028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800802c:	485e      	ldr	r0, [pc, #376]	; (80081a8 <_printf_i+0x244>)
 800802e:	230a      	movs	r3, #10
 8008030:	e019      	b.n	8008066 <_printf_i+0x102>
 8008032:	680e      	ldr	r6, [r1, #0]
 8008034:	602b      	str	r3, [r5, #0]
 8008036:	f010 0f40 	tst.w	r0, #64	; 0x40
 800803a:	bf18      	it	ne
 800803c:	b236      	sxthne	r6, r6
 800803e:	e7ef      	b.n	8008020 <_printf_i+0xbc>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	6820      	ldr	r0, [r4, #0]
 8008044:	1d19      	adds	r1, r3, #4
 8008046:	6029      	str	r1, [r5, #0]
 8008048:	0601      	lsls	r1, r0, #24
 800804a:	d501      	bpl.n	8008050 <_printf_i+0xec>
 800804c:	681e      	ldr	r6, [r3, #0]
 800804e:	e002      	b.n	8008056 <_printf_i+0xf2>
 8008050:	0646      	lsls	r6, r0, #25
 8008052:	d5fb      	bpl.n	800804c <_printf_i+0xe8>
 8008054:	881e      	ldrh	r6, [r3, #0]
 8008056:	4854      	ldr	r0, [pc, #336]	; (80081a8 <_printf_i+0x244>)
 8008058:	2f6f      	cmp	r7, #111	; 0x6f
 800805a:	bf0c      	ite	eq
 800805c:	2308      	moveq	r3, #8
 800805e:	230a      	movne	r3, #10
 8008060:	2100      	movs	r1, #0
 8008062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008066:	6865      	ldr	r5, [r4, #4]
 8008068:	60a5      	str	r5, [r4, #8]
 800806a:	2d00      	cmp	r5, #0
 800806c:	bfa2      	ittt	ge
 800806e:	6821      	ldrge	r1, [r4, #0]
 8008070:	f021 0104 	bicge.w	r1, r1, #4
 8008074:	6021      	strge	r1, [r4, #0]
 8008076:	b90e      	cbnz	r6, 800807c <_printf_i+0x118>
 8008078:	2d00      	cmp	r5, #0
 800807a:	d04d      	beq.n	8008118 <_printf_i+0x1b4>
 800807c:	4615      	mov	r5, r2
 800807e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008082:	fb03 6711 	mls	r7, r3, r1, r6
 8008086:	5dc7      	ldrb	r7, [r0, r7]
 8008088:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800808c:	4637      	mov	r7, r6
 800808e:	42bb      	cmp	r3, r7
 8008090:	460e      	mov	r6, r1
 8008092:	d9f4      	bls.n	800807e <_printf_i+0x11a>
 8008094:	2b08      	cmp	r3, #8
 8008096:	d10b      	bne.n	80080b0 <_printf_i+0x14c>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	07de      	lsls	r6, r3, #31
 800809c:	d508      	bpl.n	80080b0 <_printf_i+0x14c>
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	6861      	ldr	r1, [r4, #4]
 80080a2:	4299      	cmp	r1, r3
 80080a4:	bfde      	ittt	le
 80080a6:	2330      	movle	r3, #48	; 0x30
 80080a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080b0:	1b52      	subs	r2, r2, r5
 80080b2:	6122      	str	r2, [r4, #16]
 80080b4:	f8cd a000 	str.w	sl, [sp]
 80080b8:	464b      	mov	r3, r9
 80080ba:	aa03      	add	r2, sp, #12
 80080bc:	4621      	mov	r1, r4
 80080be:	4640      	mov	r0, r8
 80080c0:	f7ff fee2 	bl	8007e88 <_printf_common>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d14c      	bne.n	8008162 <_printf_i+0x1fe>
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295
 80080cc:	b004      	add	sp, #16
 80080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d2:	4835      	ldr	r0, [pc, #212]	; (80081a8 <_printf_i+0x244>)
 80080d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080d8:	6829      	ldr	r1, [r5, #0]
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80080e0:	6029      	str	r1, [r5, #0]
 80080e2:	061d      	lsls	r5, r3, #24
 80080e4:	d514      	bpl.n	8008110 <_printf_i+0x1ac>
 80080e6:	07df      	lsls	r7, r3, #31
 80080e8:	bf44      	itt	mi
 80080ea:	f043 0320 	orrmi.w	r3, r3, #32
 80080ee:	6023      	strmi	r3, [r4, #0]
 80080f0:	b91e      	cbnz	r6, 80080fa <_printf_i+0x196>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	f023 0320 	bic.w	r3, r3, #32
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	2310      	movs	r3, #16
 80080fc:	e7b0      	b.n	8008060 <_printf_i+0xfc>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	f043 0320 	orr.w	r3, r3, #32
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	2378      	movs	r3, #120	; 0x78
 8008108:	4828      	ldr	r0, [pc, #160]	; (80081ac <_printf_i+0x248>)
 800810a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800810e:	e7e3      	b.n	80080d8 <_printf_i+0x174>
 8008110:	0659      	lsls	r1, r3, #25
 8008112:	bf48      	it	mi
 8008114:	b2b6      	uxthmi	r6, r6
 8008116:	e7e6      	b.n	80080e6 <_printf_i+0x182>
 8008118:	4615      	mov	r5, r2
 800811a:	e7bb      	b.n	8008094 <_printf_i+0x130>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	6826      	ldr	r6, [r4, #0]
 8008120:	6961      	ldr	r1, [r4, #20]
 8008122:	1d18      	adds	r0, r3, #4
 8008124:	6028      	str	r0, [r5, #0]
 8008126:	0635      	lsls	r5, r6, #24
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	d501      	bpl.n	8008130 <_printf_i+0x1cc>
 800812c:	6019      	str	r1, [r3, #0]
 800812e:	e002      	b.n	8008136 <_printf_i+0x1d2>
 8008130:	0670      	lsls	r0, r6, #25
 8008132:	d5fb      	bpl.n	800812c <_printf_i+0x1c8>
 8008134:	8019      	strh	r1, [r3, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	4615      	mov	r5, r2
 800813c:	e7ba      	b.n	80080b4 <_printf_i+0x150>
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	1d1a      	adds	r2, r3, #4
 8008142:	602a      	str	r2, [r5, #0]
 8008144:	681d      	ldr	r5, [r3, #0]
 8008146:	6862      	ldr	r2, [r4, #4]
 8008148:	2100      	movs	r1, #0
 800814a:	4628      	mov	r0, r5
 800814c:	f7f8 f850 	bl	80001f0 <memchr>
 8008150:	b108      	cbz	r0, 8008156 <_printf_i+0x1f2>
 8008152:	1b40      	subs	r0, r0, r5
 8008154:	6060      	str	r0, [r4, #4]
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	6123      	str	r3, [r4, #16]
 800815a:	2300      	movs	r3, #0
 800815c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008160:	e7a8      	b.n	80080b4 <_printf_i+0x150>
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	462a      	mov	r2, r5
 8008166:	4649      	mov	r1, r9
 8008168:	4640      	mov	r0, r8
 800816a:	47d0      	blx	sl
 800816c:	3001      	adds	r0, #1
 800816e:	d0ab      	beq.n	80080c8 <_printf_i+0x164>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	079b      	lsls	r3, r3, #30
 8008174:	d413      	bmi.n	800819e <_printf_i+0x23a>
 8008176:	68e0      	ldr	r0, [r4, #12]
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	4298      	cmp	r0, r3
 800817c:	bfb8      	it	lt
 800817e:	4618      	movlt	r0, r3
 8008180:	e7a4      	b.n	80080cc <_printf_i+0x168>
 8008182:	2301      	movs	r3, #1
 8008184:	4632      	mov	r2, r6
 8008186:	4649      	mov	r1, r9
 8008188:	4640      	mov	r0, r8
 800818a:	47d0      	blx	sl
 800818c:	3001      	adds	r0, #1
 800818e:	d09b      	beq.n	80080c8 <_printf_i+0x164>
 8008190:	3501      	adds	r5, #1
 8008192:	68e3      	ldr	r3, [r4, #12]
 8008194:	9903      	ldr	r1, [sp, #12]
 8008196:	1a5b      	subs	r3, r3, r1
 8008198:	42ab      	cmp	r3, r5
 800819a:	dcf2      	bgt.n	8008182 <_printf_i+0x21e>
 800819c:	e7eb      	b.n	8008176 <_printf_i+0x212>
 800819e:	2500      	movs	r5, #0
 80081a0:	f104 0619 	add.w	r6, r4, #25
 80081a4:	e7f5      	b.n	8008192 <_printf_i+0x22e>
 80081a6:	bf00      	nop
 80081a8:	0800a832 	.word	0x0800a832
 80081ac:	0800a843 	.word	0x0800a843

080081b0 <siprintf>:
 80081b0:	b40e      	push	{r1, r2, r3}
 80081b2:	b500      	push	{lr}
 80081b4:	b09c      	sub	sp, #112	; 0x70
 80081b6:	ab1d      	add	r3, sp, #116	; 0x74
 80081b8:	9002      	str	r0, [sp, #8]
 80081ba:	9006      	str	r0, [sp, #24]
 80081bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081c0:	4809      	ldr	r0, [pc, #36]	; (80081e8 <siprintf+0x38>)
 80081c2:	9107      	str	r1, [sp, #28]
 80081c4:	9104      	str	r1, [sp, #16]
 80081c6:	4909      	ldr	r1, [pc, #36]	; (80081ec <siprintf+0x3c>)
 80081c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081cc:	9105      	str	r1, [sp, #20]
 80081ce:	6800      	ldr	r0, [r0, #0]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	a902      	add	r1, sp, #8
 80081d4:	f001 fb68 	bl	80098a8 <_svfiprintf_r>
 80081d8:	9b02      	ldr	r3, [sp, #8]
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	b01c      	add	sp, #112	; 0x70
 80081e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081e4:	b003      	add	sp, #12
 80081e6:	4770      	bx	lr
 80081e8:	20000144 	.word	0x20000144
 80081ec:	ffff0208 	.word	0xffff0208

080081f0 <quorem>:
 80081f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	6903      	ldr	r3, [r0, #16]
 80081f6:	690c      	ldr	r4, [r1, #16]
 80081f8:	42a3      	cmp	r3, r4
 80081fa:	4607      	mov	r7, r0
 80081fc:	f2c0 8081 	blt.w	8008302 <quorem+0x112>
 8008200:	3c01      	subs	r4, #1
 8008202:	f101 0814 	add.w	r8, r1, #20
 8008206:	f100 0514 	add.w	r5, r0, #20
 800820a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008218:	3301      	adds	r3, #1
 800821a:	429a      	cmp	r2, r3
 800821c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008224:	fbb2 f6f3 	udiv	r6, r2, r3
 8008228:	d331      	bcc.n	800828e <quorem+0x9e>
 800822a:	f04f 0e00 	mov.w	lr, #0
 800822e:	4640      	mov	r0, r8
 8008230:	46ac      	mov	ip, r5
 8008232:	46f2      	mov	sl, lr
 8008234:	f850 2b04 	ldr.w	r2, [r0], #4
 8008238:	b293      	uxth	r3, r2
 800823a:	fb06 e303 	mla	r3, r6, r3, lr
 800823e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008242:	b29b      	uxth	r3, r3
 8008244:	ebaa 0303 	sub.w	r3, sl, r3
 8008248:	f8dc a000 	ldr.w	sl, [ip]
 800824c:	0c12      	lsrs	r2, r2, #16
 800824e:	fa13 f38a 	uxtah	r3, r3, sl
 8008252:	fb06 e202 	mla	r2, r6, r2, lr
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	9b00      	ldr	r3, [sp, #0]
 800825a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800825e:	b292      	uxth	r2, r2
 8008260:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008264:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008268:	f8bd 3000 	ldrh.w	r3, [sp]
 800826c:	4581      	cmp	r9, r0
 800826e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008272:	f84c 3b04 	str.w	r3, [ip], #4
 8008276:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800827a:	d2db      	bcs.n	8008234 <quorem+0x44>
 800827c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008280:	b92b      	cbnz	r3, 800828e <quorem+0x9e>
 8008282:	9b01      	ldr	r3, [sp, #4]
 8008284:	3b04      	subs	r3, #4
 8008286:	429d      	cmp	r5, r3
 8008288:	461a      	mov	r2, r3
 800828a:	d32e      	bcc.n	80082ea <quorem+0xfa>
 800828c:	613c      	str	r4, [r7, #16]
 800828e:	4638      	mov	r0, r7
 8008290:	f001 f8b6 	bl	8009400 <__mcmp>
 8008294:	2800      	cmp	r0, #0
 8008296:	db24      	blt.n	80082e2 <quorem+0xf2>
 8008298:	3601      	adds	r6, #1
 800829a:	4628      	mov	r0, r5
 800829c:	f04f 0c00 	mov.w	ip, #0
 80082a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80082a4:	f8d0 e000 	ldr.w	lr, [r0]
 80082a8:	b293      	uxth	r3, r2
 80082aa:	ebac 0303 	sub.w	r3, ip, r3
 80082ae:	0c12      	lsrs	r2, r2, #16
 80082b0:	fa13 f38e 	uxtah	r3, r3, lr
 80082b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082bc:	b29b      	uxth	r3, r3
 80082be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c2:	45c1      	cmp	r9, r8
 80082c4:	f840 3b04 	str.w	r3, [r0], #4
 80082c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082cc:	d2e8      	bcs.n	80082a0 <quorem+0xb0>
 80082ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082d6:	b922      	cbnz	r2, 80082e2 <quorem+0xf2>
 80082d8:	3b04      	subs	r3, #4
 80082da:	429d      	cmp	r5, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	d30a      	bcc.n	80082f6 <quorem+0x106>
 80082e0:	613c      	str	r4, [r7, #16]
 80082e2:	4630      	mov	r0, r6
 80082e4:	b003      	add	sp, #12
 80082e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	3b04      	subs	r3, #4
 80082ee:	2a00      	cmp	r2, #0
 80082f0:	d1cc      	bne.n	800828c <quorem+0x9c>
 80082f2:	3c01      	subs	r4, #1
 80082f4:	e7c7      	b.n	8008286 <quorem+0x96>
 80082f6:	6812      	ldr	r2, [r2, #0]
 80082f8:	3b04      	subs	r3, #4
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	d1f0      	bne.n	80082e0 <quorem+0xf0>
 80082fe:	3c01      	subs	r4, #1
 8008300:	e7eb      	b.n	80082da <quorem+0xea>
 8008302:	2000      	movs	r0, #0
 8008304:	e7ee      	b.n	80082e4 <quorem+0xf4>
	...

08008308 <_dtoa_r>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	ed2d 8b04 	vpush	{d8-d9}
 8008310:	ec57 6b10 	vmov	r6, r7, d0
 8008314:	b093      	sub	sp, #76	; 0x4c
 8008316:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008318:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800831c:	9106      	str	r1, [sp, #24]
 800831e:	ee10 aa10 	vmov	sl, s0
 8008322:	4604      	mov	r4, r0
 8008324:	9209      	str	r2, [sp, #36]	; 0x24
 8008326:	930c      	str	r3, [sp, #48]	; 0x30
 8008328:	46bb      	mov	fp, r7
 800832a:	b975      	cbnz	r5, 800834a <_dtoa_r+0x42>
 800832c:	2010      	movs	r0, #16
 800832e:	f000 fddd 	bl	8008eec <malloc>
 8008332:	4602      	mov	r2, r0
 8008334:	6260      	str	r0, [r4, #36]	; 0x24
 8008336:	b920      	cbnz	r0, 8008342 <_dtoa_r+0x3a>
 8008338:	4ba7      	ldr	r3, [pc, #668]	; (80085d8 <_dtoa_r+0x2d0>)
 800833a:	21ea      	movs	r1, #234	; 0xea
 800833c:	48a7      	ldr	r0, [pc, #668]	; (80085dc <_dtoa_r+0x2d4>)
 800833e:	f001 fbc3 	bl	8009ac8 <__assert_func>
 8008342:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008346:	6005      	str	r5, [r0, #0]
 8008348:	60c5      	str	r5, [r0, #12]
 800834a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800834c:	6819      	ldr	r1, [r3, #0]
 800834e:	b151      	cbz	r1, 8008366 <_dtoa_r+0x5e>
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	604a      	str	r2, [r1, #4]
 8008354:	2301      	movs	r3, #1
 8008356:	4093      	lsls	r3, r2
 8008358:	608b      	str	r3, [r1, #8]
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fe0e 	bl	8008f7c <_Bfree>
 8008360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	1e3b      	subs	r3, r7, #0
 8008368:	bfaa      	itet	ge
 800836a:	2300      	movge	r3, #0
 800836c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008370:	f8c8 3000 	strge.w	r3, [r8]
 8008374:	4b9a      	ldr	r3, [pc, #616]	; (80085e0 <_dtoa_r+0x2d8>)
 8008376:	bfbc      	itt	lt
 8008378:	2201      	movlt	r2, #1
 800837a:	f8c8 2000 	strlt.w	r2, [r8]
 800837e:	ea33 030b 	bics.w	r3, r3, fp
 8008382:	d11b      	bne.n	80083bc <_dtoa_r+0xb4>
 8008384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008386:	f242 730f 	movw	r3, #9999	; 0x270f
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008390:	4333      	orrs	r3, r6
 8008392:	f000 8592 	beq.w	8008eba <_dtoa_r+0xbb2>
 8008396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008398:	b963      	cbnz	r3, 80083b4 <_dtoa_r+0xac>
 800839a:	4b92      	ldr	r3, [pc, #584]	; (80085e4 <_dtoa_r+0x2dc>)
 800839c:	e022      	b.n	80083e4 <_dtoa_r+0xdc>
 800839e:	4b92      	ldr	r3, [pc, #584]	; (80085e8 <_dtoa_r+0x2e0>)
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	3308      	adds	r3, #8
 80083a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	9801      	ldr	r0, [sp, #4]
 80083aa:	b013      	add	sp, #76	; 0x4c
 80083ac:	ecbd 8b04 	vpop	{d8-d9}
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	4b8b      	ldr	r3, [pc, #556]	; (80085e4 <_dtoa_r+0x2dc>)
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	3303      	adds	r3, #3
 80083ba:	e7f3      	b.n	80083a4 <_dtoa_r+0x9c>
 80083bc:	2200      	movs	r2, #0
 80083be:	2300      	movs	r3, #0
 80083c0:	4650      	mov	r0, sl
 80083c2:	4659      	mov	r1, fp
 80083c4:	f7f8 fb88 	bl	8000ad8 <__aeabi_dcmpeq>
 80083c8:	ec4b ab19 	vmov	d9, sl, fp
 80083cc:	4680      	mov	r8, r0
 80083ce:	b158      	cbz	r0, 80083e8 <_dtoa_r+0xe0>
 80083d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083d2:	2301      	movs	r3, #1
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 856b 	beq.w	8008eb4 <_dtoa_r+0xbac>
 80083de:	4883      	ldr	r0, [pc, #524]	; (80085ec <_dtoa_r+0x2e4>)
 80083e0:	6018      	str	r0, [r3, #0]
 80083e2:	1e43      	subs	r3, r0, #1
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	e7df      	b.n	80083a8 <_dtoa_r+0xa0>
 80083e8:	ec4b ab10 	vmov	d0, sl, fp
 80083ec:	aa10      	add	r2, sp, #64	; 0x40
 80083ee:	a911      	add	r1, sp, #68	; 0x44
 80083f0:	4620      	mov	r0, r4
 80083f2:	f001 f8ab 	bl	800954c <__d2b>
 80083f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083fa:	ee08 0a10 	vmov	s16, r0
 80083fe:	2d00      	cmp	r5, #0
 8008400:	f000 8084 	beq.w	800850c <_dtoa_r+0x204>
 8008404:	ee19 3a90 	vmov	r3, s19
 8008408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800840c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008410:	4656      	mov	r6, sl
 8008412:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800841a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800841e:	4b74      	ldr	r3, [pc, #464]	; (80085f0 <_dtoa_r+0x2e8>)
 8008420:	2200      	movs	r2, #0
 8008422:	4630      	mov	r0, r6
 8008424:	4639      	mov	r1, r7
 8008426:	f7f7 ff37 	bl	8000298 <__aeabi_dsub>
 800842a:	a365      	add	r3, pc, #404	; (adr r3, 80085c0 <_dtoa_r+0x2b8>)
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	f7f8 f8ea 	bl	8000608 <__aeabi_dmul>
 8008434:	a364      	add	r3, pc, #400	; (adr r3, 80085c8 <_dtoa_r+0x2c0>)
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	f7f7 ff2f 	bl	800029c <__adddf3>
 800843e:	4606      	mov	r6, r0
 8008440:	4628      	mov	r0, r5
 8008442:	460f      	mov	r7, r1
 8008444:	f7f8 f876 	bl	8000534 <__aeabi_i2d>
 8008448:	a361      	add	r3, pc, #388	; (adr r3, 80085d0 <_dtoa_r+0x2c8>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f8 f8db 	bl	8000608 <__aeabi_dmul>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4630      	mov	r0, r6
 8008458:	4639      	mov	r1, r7
 800845a:	f7f7 ff1f 	bl	800029c <__adddf3>
 800845e:	4606      	mov	r6, r0
 8008460:	460f      	mov	r7, r1
 8008462:	f7f8 fb81 	bl	8000b68 <__aeabi_d2iz>
 8008466:	2200      	movs	r2, #0
 8008468:	9000      	str	r0, [sp, #0]
 800846a:	2300      	movs	r3, #0
 800846c:	4630      	mov	r0, r6
 800846e:	4639      	mov	r1, r7
 8008470:	f7f8 fb3c 	bl	8000aec <__aeabi_dcmplt>
 8008474:	b150      	cbz	r0, 800848c <_dtoa_r+0x184>
 8008476:	9800      	ldr	r0, [sp, #0]
 8008478:	f7f8 f85c 	bl	8000534 <__aeabi_i2d>
 800847c:	4632      	mov	r2, r6
 800847e:	463b      	mov	r3, r7
 8008480:	f7f8 fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008484:	b910      	cbnz	r0, 800848c <_dtoa_r+0x184>
 8008486:	9b00      	ldr	r3, [sp, #0]
 8008488:	3b01      	subs	r3, #1
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	9b00      	ldr	r3, [sp, #0]
 800848e:	2b16      	cmp	r3, #22
 8008490:	d85a      	bhi.n	8008548 <_dtoa_r+0x240>
 8008492:	9a00      	ldr	r2, [sp, #0]
 8008494:	4b57      	ldr	r3, [pc, #348]	; (80085f4 <_dtoa_r+0x2ec>)
 8008496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	ec51 0b19 	vmov	r0, r1, d9
 80084a2:	f7f8 fb23 	bl	8000aec <__aeabi_dcmplt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d050      	beq.n	800854c <_dtoa_r+0x244>
 80084aa:	9b00      	ldr	r3, [sp, #0]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	2300      	movs	r3, #0
 80084b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084b6:	1b5d      	subs	r5, r3, r5
 80084b8:	1e6b      	subs	r3, r5, #1
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	bf45      	ittet	mi
 80084be:	f1c5 0301 	rsbmi	r3, r5, #1
 80084c2:	9304      	strmi	r3, [sp, #16]
 80084c4:	2300      	movpl	r3, #0
 80084c6:	2300      	movmi	r3, #0
 80084c8:	bf4c      	ite	mi
 80084ca:	9305      	strmi	r3, [sp, #20]
 80084cc:	9304      	strpl	r3, [sp, #16]
 80084ce:	9b00      	ldr	r3, [sp, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	db3d      	blt.n	8008550 <_dtoa_r+0x248>
 80084d4:	9b05      	ldr	r3, [sp, #20]
 80084d6:	9a00      	ldr	r2, [sp, #0]
 80084d8:	920a      	str	r2, [sp, #40]	; 0x28
 80084da:	4413      	add	r3, r2
 80084dc:	9305      	str	r3, [sp, #20]
 80084de:	2300      	movs	r3, #0
 80084e0:	9307      	str	r3, [sp, #28]
 80084e2:	9b06      	ldr	r3, [sp, #24]
 80084e4:	2b09      	cmp	r3, #9
 80084e6:	f200 8089 	bhi.w	80085fc <_dtoa_r+0x2f4>
 80084ea:	2b05      	cmp	r3, #5
 80084ec:	bfc4      	itt	gt
 80084ee:	3b04      	subgt	r3, #4
 80084f0:	9306      	strgt	r3, [sp, #24]
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	f1a3 0302 	sub.w	r3, r3, #2
 80084f8:	bfcc      	ite	gt
 80084fa:	2500      	movgt	r5, #0
 80084fc:	2501      	movle	r5, #1
 80084fe:	2b03      	cmp	r3, #3
 8008500:	f200 8087 	bhi.w	8008612 <_dtoa_r+0x30a>
 8008504:	e8df f003 	tbb	[pc, r3]
 8008508:	59383a2d 	.word	0x59383a2d
 800850c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008510:	441d      	add	r5, r3
 8008512:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008516:	2b20      	cmp	r3, #32
 8008518:	bfc1      	itttt	gt
 800851a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800851e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008522:	fa0b f303 	lslgt.w	r3, fp, r3
 8008526:	fa26 f000 	lsrgt.w	r0, r6, r0
 800852a:	bfda      	itte	le
 800852c:	f1c3 0320 	rsble	r3, r3, #32
 8008530:	fa06 f003 	lslle.w	r0, r6, r3
 8008534:	4318      	orrgt	r0, r3
 8008536:	f7f7 ffed 	bl	8000514 <__aeabi_ui2d>
 800853a:	2301      	movs	r3, #1
 800853c:	4606      	mov	r6, r0
 800853e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008542:	3d01      	subs	r5, #1
 8008544:	930e      	str	r3, [sp, #56]	; 0x38
 8008546:	e76a      	b.n	800841e <_dtoa_r+0x116>
 8008548:	2301      	movs	r3, #1
 800854a:	e7b2      	b.n	80084b2 <_dtoa_r+0x1aa>
 800854c:	900b      	str	r0, [sp, #44]	; 0x2c
 800854e:	e7b1      	b.n	80084b4 <_dtoa_r+0x1ac>
 8008550:	9b04      	ldr	r3, [sp, #16]
 8008552:	9a00      	ldr	r2, [sp, #0]
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	4253      	negs	r3, r2
 800855a:	9307      	str	r3, [sp, #28]
 800855c:	2300      	movs	r3, #0
 800855e:	930a      	str	r3, [sp, #40]	; 0x28
 8008560:	e7bf      	b.n	80084e2 <_dtoa_r+0x1da>
 8008562:	2300      	movs	r3, #0
 8008564:	9308      	str	r3, [sp, #32]
 8008566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008568:	2b00      	cmp	r3, #0
 800856a:	dc55      	bgt.n	8008618 <_dtoa_r+0x310>
 800856c:	2301      	movs	r3, #1
 800856e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008572:	461a      	mov	r2, r3
 8008574:	9209      	str	r2, [sp, #36]	; 0x24
 8008576:	e00c      	b.n	8008592 <_dtoa_r+0x28a>
 8008578:	2301      	movs	r3, #1
 800857a:	e7f3      	b.n	8008564 <_dtoa_r+0x25c>
 800857c:	2300      	movs	r3, #0
 800857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008580:	9308      	str	r3, [sp, #32]
 8008582:	9b00      	ldr	r3, [sp, #0]
 8008584:	4413      	add	r3, r2
 8008586:	9302      	str	r3, [sp, #8]
 8008588:	3301      	adds	r3, #1
 800858a:	2b01      	cmp	r3, #1
 800858c:	9303      	str	r3, [sp, #12]
 800858e:	bfb8      	it	lt
 8008590:	2301      	movlt	r3, #1
 8008592:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008594:	2200      	movs	r2, #0
 8008596:	6042      	str	r2, [r0, #4]
 8008598:	2204      	movs	r2, #4
 800859a:	f102 0614 	add.w	r6, r2, #20
 800859e:	429e      	cmp	r6, r3
 80085a0:	6841      	ldr	r1, [r0, #4]
 80085a2:	d93d      	bls.n	8008620 <_dtoa_r+0x318>
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 fca9 	bl	8008efc <_Balloc>
 80085aa:	9001      	str	r0, [sp, #4]
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d13b      	bne.n	8008628 <_dtoa_r+0x320>
 80085b0:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <_dtoa_r+0x2f0>)
 80085b2:	4602      	mov	r2, r0
 80085b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085b8:	e6c0      	b.n	800833c <_dtoa_r+0x34>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e7df      	b.n	800857e <_dtoa_r+0x276>
 80085be:	bf00      	nop
 80085c0:	636f4361 	.word	0x636f4361
 80085c4:	3fd287a7 	.word	0x3fd287a7
 80085c8:	8b60c8b3 	.word	0x8b60c8b3
 80085cc:	3fc68a28 	.word	0x3fc68a28
 80085d0:	509f79fb 	.word	0x509f79fb
 80085d4:	3fd34413 	.word	0x3fd34413
 80085d8:	0800a861 	.word	0x0800a861
 80085dc:	0800a878 	.word	0x0800a878
 80085e0:	7ff00000 	.word	0x7ff00000
 80085e4:	0800a85d 	.word	0x0800a85d
 80085e8:	0800a854 	.word	0x0800a854
 80085ec:	0800a831 	.word	0x0800a831
 80085f0:	3ff80000 	.word	0x3ff80000
 80085f4:	0800a968 	.word	0x0800a968
 80085f8:	0800a8d3 	.word	0x0800a8d3
 80085fc:	2501      	movs	r5, #1
 80085fe:	2300      	movs	r3, #0
 8008600:	9306      	str	r3, [sp, #24]
 8008602:	9508      	str	r5, [sp, #32]
 8008604:	f04f 33ff 	mov.w	r3, #4294967295
 8008608:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800860c:	2200      	movs	r2, #0
 800860e:	2312      	movs	r3, #18
 8008610:	e7b0      	b.n	8008574 <_dtoa_r+0x26c>
 8008612:	2301      	movs	r3, #1
 8008614:	9308      	str	r3, [sp, #32]
 8008616:	e7f5      	b.n	8008604 <_dtoa_r+0x2fc>
 8008618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800861e:	e7b8      	b.n	8008592 <_dtoa_r+0x28a>
 8008620:	3101      	adds	r1, #1
 8008622:	6041      	str	r1, [r0, #4]
 8008624:	0052      	lsls	r2, r2, #1
 8008626:	e7b8      	b.n	800859a <_dtoa_r+0x292>
 8008628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800862a:	9a01      	ldr	r2, [sp, #4]
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	2b0e      	cmp	r3, #14
 8008632:	f200 809d 	bhi.w	8008770 <_dtoa_r+0x468>
 8008636:	2d00      	cmp	r5, #0
 8008638:	f000 809a 	beq.w	8008770 <_dtoa_r+0x468>
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	dd32      	ble.n	80086a8 <_dtoa_r+0x3a0>
 8008642:	4ab7      	ldr	r2, [pc, #732]	; (8008920 <_dtoa_r+0x618>)
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800864c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	05d8      	lsls	r0, r3, #23
 8008654:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008658:	d516      	bpl.n	8008688 <_dtoa_r+0x380>
 800865a:	4bb2      	ldr	r3, [pc, #712]	; (8008924 <_dtoa_r+0x61c>)
 800865c:	ec51 0b19 	vmov	r0, r1, d9
 8008660:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008664:	f7f8 f8fa 	bl	800085c <__aeabi_ddiv>
 8008668:	f007 070f 	and.w	r7, r7, #15
 800866c:	4682      	mov	sl, r0
 800866e:	468b      	mov	fp, r1
 8008670:	2503      	movs	r5, #3
 8008672:	4eac      	ldr	r6, [pc, #688]	; (8008924 <_dtoa_r+0x61c>)
 8008674:	b957      	cbnz	r7, 800868c <_dtoa_r+0x384>
 8008676:	4642      	mov	r2, r8
 8008678:	464b      	mov	r3, r9
 800867a:	4650      	mov	r0, sl
 800867c:	4659      	mov	r1, fp
 800867e:	f7f8 f8ed 	bl	800085c <__aeabi_ddiv>
 8008682:	4682      	mov	sl, r0
 8008684:	468b      	mov	fp, r1
 8008686:	e028      	b.n	80086da <_dtoa_r+0x3d2>
 8008688:	2502      	movs	r5, #2
 800868a:	e7f2      	b.n	8008672 <_dtoa_r+0x36a>
 800868c:	07f9      	lsls	r1, r7, #31
 800868e:	d508      	bpl.n	80086a2 <_dtoa_r+0x39a>
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008698:	f7f7 ffb6 	bl	8000608 <__aeabi_dmul>
 800869c:	3501      	adds	r5, #1
 800869e:	4680      	mov	r8, r0
 80086a0:	4689      	mov	r9, r1
 80086a2:	107f      	asrs	r7, r7, #1
 80086a4:	3608      	adds	r6, #8
 80086a6:	e7e5      	b.n	8008674 <_dtoa_r+0x36c>
 80086a8:	f000 809b 	beq.w	80087e2 <_dtoa_r+0x4da>
 80086ac:	9b00      	ldr	r3, [sp, #0]
 80086ae:	4f9d      	ldr	r7, [pc, #628]	; (8008924 <_dtoa_r+0x61c>)
 80086b0:	425e      	negs	r6, r3
 80086b2:	4b9b      	ldr	r3, [pc, #620]	; (8008920 <_dtoa_r+0x618>)
 80086b4:	f006 020f 	and.w	r2, r6, #15
 80086b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	ec51 0b19 	vmov	r0, r1, d9
 80086c4:	f7f7 ffa0 	bl	8000608 <__aeabi_dmul>
 80086c8:	1136      	asrs	r6, r6, #4
 80086ca:	4682      	mov	sl, r0
 80086cc:	468b      	mov	fp, r1
 80086ce:	2300      	movs	r3, #0
 80086d0:	2502      	movs	r5, #2
 80086d2:	2e00      	cmp	r6, #0
 80086d4:	d17a      	bne.n	80087cc <_dtoa_r+0x4c4>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1d3      	bne.n	8008682 <_dtoa_r+0x37a>
 80086da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8082 	beq.w	80087e6 <_dtoa_r+0x4de>
 80086e2:	4b91      	ldr	r3, [pc, #580]	; (8008928 <_dtoa_r+0x620>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	4650      	mov	r0, sl
 80086e8:	4659      	mov	r1, fp
 80086ea:	f7f8 f9ff 	bl	8000aec <__aeabi_dcmplt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d079      	beq.n	80087e6 <_dtoa_r+0x4de>
 80086f2:	9b03      	ldr	r3, [sp, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d076      	beq.n	80087e6 <_dtoa_r+0x4de>
 80086f8:	9b02      	ldr	r3, [sp, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dd36      	ble.n	800876c <_dtoa_r+0x464>
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	4650      	mov	r0, sl
 8008702:	4659      	mov	r1, fp
 8008704:	1e5f      	subs	r7, r3, #1
 8008706:	2200      	movs	r2, #0
 8008708:	4b88      	ldr	r3, [pc, #544]	; (800892c <_dtoa_r+0x624>)
 800870a:	f7f7 ff7d 	bl	8000608 <__aeabi_dmul>
 800870e:	9e02      	ldr	r6, [sp, #8]
 8008710:	4682      	mov	sl, r0
 8008712:	468b      	mov	fp, r1
 8008714:	3501      	adds	r5, #1
 8008716:	4628      	mov	r0, r5
 8008718:	f7f7 ff0c 	bl	8000534 <__aeabi_i2d>
 800871c:	4652      	mov	r2, sl
 800871e:	465b      	mov	r3, fp
 8008720:	f7f7 ff72 	bl	8000608 <__aeabi_dmul>
 8008724:	4b82      	ldr	r3, [pc, #520]	; (8008930 <_dtoa_r+0x628>)
 8008726:	2200      	movs	r2, #0
 8008728:	f7f7 fdb8 	bl	800029c <__adddf3>
 800872c:	46d0      	mov	r8, sl
 800872e:	46d9      	mov	r9, fp
 8008730:	4682      	mov	sl, r0
 8008732:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008736:	2e00      	cmp	r6, #0
 8008738:	d158      	bne.n	80087ec <_dtoa_r+0x4e4>
 800873a:	4b7e      	ldr	r3, [pc, #504]	; (8008934 <_dtoa_r+0x62c>)
 800873c:	2200      	movs	r2, #0
 800873e:	4640      	mov	r0, r8
 8008740:	4649      	mov	r1, r9
 8008742:	f7f7 fda9 	bl	8000298 <__aeabi_dsub>
 8008746:	4652      	mov	r2, sl
 8008748:	465b      	mov	r3, fp
 800874a:	4680      	mov	r8, r0
 800874c:	4689      	mov	r9, r1
 800874e:	f7f8 f9eb 	bl	8000b28 <__aeabi_dcmpgt>
 8008752:	2800      	cmp	r0, #0
 8008754:	f040 8295 	bne.w	8008c82 <_dtoa_r+0x97a>
 8008758:	4652      	mov	r2, sl
 800875a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800875e:	4640      	mov	r0, r8
 8008760:	4649      	mov	r1, r9
 8008762:	f7f8 f9c3 	bl	8000aec <__aeabi_dcmplt>
 8008766:	2800      	cmp	r0, #0
 8008768:	f040 8289 	bne.w	8008c7e <_dtoa_r+0x976>
 800876c:	ec5b ab19 	vmov	sl, fp, d9
 8008770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008772:	2b00      	cmp	r3, #0
 8008774:	f2c0 8148 	blt.w	8008a08 <_dtoa_r+0x700>
 8008778:	9a00      	ldr	r2, [sp, #0]
 800877a:	2a0e      	cmp	r2, #14
 800877c:	f300 8144 	bgt.w	8008a08 <_dtoa_r+0x700>
 8008780:	4b67      	ldr	r3, [pc, #412]	; (8008920 <_dtoa_r+0x618>)
 8008782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008786:	e9d3 8900 	ldrd	r8, r9, [r3]
 800878a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878c:	2b00      	cmp	r3, #0
 800878e:	f280 80d5 	bge.w	800893c <_dtoa_r+0x634>
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f300 80d1 	bgt.w	800893c <_dtoa_r+0x634>
 800879a:	f040 826f 	bne.w	8008c7c <_dtoa_r+0x974>
 800879e:	4b65      	ldr	r3, [pc, #404]	; (8008934 <_dtoa_r+0x62c>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	4640      	mov	r0, r8
 80087a4:	4649      	mov	r1, r9
 80087a6:	f7f7 ff2f 	bl	8000608 <__aeabi_dmul>
 80087aa:	4652      	mov	r2, sl
 80087ac:	465b      	mov	r3, fp
 80087ae:	f7f8 f9b1 	bl	8000b14 <__aeabi_dcmpge>
 80087b2:	9e03      	ldr	r6, [sp, #12]
 80087b4:	4637      	mov	r7, r6
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f040 8245 	bne.w	8008c46 <_dtoa_r+0x93e>
 80087bc:	9d01      	ldr	r5, [sp, #4]
 80087be:	2331      	movs	r3, #49	; 0x31
 80087c0:	f805 3b01 	strb.w	r3, [r5], #1
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	3301      	adds	r3, #1
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	e240      	b.n	8008c4e <_dtoa_r+0x946>
 80087cc:	07f2      	lsls	r2, r6, #31
 80087ce:	d505      	bpl.n	80087dc <_dtoa_r+0x4d4>
 80087d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087d4:	f7f7 ff18 	bl	8000608 <__aeabi_dmul>
 80087d8:	3501      	adds	r5, #1
 80087da:	2301      	movs	r3, #1
 80087dc:	1076      	asrs	r6, r6, #1
 80087de:	3708      	adds	r7, #8
 80087e0:	e777      	b.n	80086d2 <_dtoa_r+0x3ca>
 80087e2:	2502      	movs	r5, #2
 80087e4:	e779      	b.n	80086da <_dtoa_r+0x3d2>
 80087e6:	9f00      	ldr	r7, [sp, #0]
 80087e8:	9e03      	ldr	r6, [sp, #12]
 80087ea:	e794      	b.n	8008716 <_dtoa_r+0x40e>
 80087ec:	9901      	ldr	r1, [sp, #4]
 80087ee:	4b4c      	ldr	r3, [pc, #304]	; (8008920 <_dtoa_r+0x618>)
 80087f0:	4431      	add	r1, r6
 80087f2:	910d      	str	r1, [sp, #52]	; 0x34
 80087f4:	9908      	ldr	r1, [sp, #32]
 80087f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087fe:	2900      	cmp	r1, #0
 8008800:	d043      	beq.n	800888a <_dtoa_r+0x582>
 8008802:	494d      	ldr	r1, [pc, #308]	; (8008938 <_dtoa_r+0x630>)
 8008804:	2000      	movs	r0, #0
 8008806:	f7f8 f829 	bl	800085c <__aeabi_ddiv>
 800880a:	4652      	mov	r2, sl
 800880c:	465b      	mov	r3, fp
 800880e:	f7f7 fd43 	bl	8000298 <__aeabi_dsub>
 8008812:	9d01      	ldr	r5, [sp, #4]
 8008814:	4682      	mov	sl, r0
 8008816:	468b      	mov	fp, r1
 8008818:	4649      	mov	r1, r9
 800881a:	4640      	mov	r0, r8
 800881c:	f7f8 f9a4 	bl	8000b68 <__aeabi_d2iz>
 8008820:	4606      	mov	r6, r0
 8008822:	f7f7 fe87 	bl	8000534 <__aeabi_i2d>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4640      	mov	r0, r8
 800882c:	4649      	mov	r1, r9
 800882e:	f7f7 fd33 	bl	8000298 <__aeabi_dsub>
 8008832:	3630      	adds	r6, #48	; 0x30
 8008834:	f805 6b01 	strb.w	r6, [r5], #1
 8008838:	4652      	mov	r2, sl
 800883a:	465b      	mov	r3, fp
 800883c:	4680      	mov	r8, r0
 800883e:	4689      	mov	r9, r1
 8008840:	f7f8 f954 	bl	8000aec <__aeabi_dcmplt>
 8008844:	2800      	cmp	r0, #0
 8008846:	d163      	bne.n	8008910 <_dtoa_r+0x608>
 8008848:	4642      	mov	r2, r8
 800884a:	464b      	mov	r3, r9
 800884c:	4936      	ldr	r1, [pc, #216]	; (8008928 <_dtoa_r+0x620>)
 800884e:	2000      	movs	r0, #0
 8008850:	f7f7 fd22 	bl	8000298 <__aeabi_dsub>
 8008854:	4652      	mov	r2, sl
 8008856:	465b      	mov	r3, fp
 8008858:	f7f8 f948 	bl	8000aec <__aeabi_dcmplt>
 800885c:	2800      	cmp	r0, #0
 800885e:	f040 80b5 	bne.w	80089cc <_dtoa_r+0x6c4>
 8008862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008864:	429d      	cmp	r5, r3
 8008866:	d081      	beq.n	800876c <_dtoa_r+0x464>
 8008868:	4b30      	ldr	r3, [pc, #192]	; (800892c <_dtoa_r+0x624>)
 800886a:	2200      	movs	r2, #0
 800886c:	4650      	mov	r0, sl
 800886e:	4659      	mov	r1, fp
 8008870:	f7f7 feca 	bl	8000608 <__aeabi_dmul>
 8008874:	4b2d      	ldr	r3, [pc, #180]	; (800892c <_dtoa_r+0x624>)
 8008876:	4682      	mov	sl, r0
 8008878:	468b      	mov	fp, r1
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	2200      	movs	r2, #0
 8008880:	f7f7 fec2 	bl	8000608 <__aeabi_dmul>
 8008884:	4680      	mov	r8, r0
 8008886:	4689      	mov	r9, r1
 8008888:	e7c6      	b.n	8008818 <_dtoa_r+0x510>
 800888a:	4650      	mov	r0, sl
 800888c:	4659      	mov	r1, fp
 800888e:	f7f7 febb 	bl	8000608 <__aeabi_dmul>
 8008892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008894:	9d01      	ldr	r5, [sp, #4]
 8008896:	930f      	str	r3, [sp, #60]	; 0x3c
 8008898:	4682      	mov	sl, r0
 800889a:	468b      	mov	fp, r1
 800889c:	4649      	mov	r1, r9
 800889e:	4640      	mov	r0, r8
 80088a0:	f7f8 f962 	bl	8000b68 <__aeabi_d2iz>
 80088a4:	4606      	mov	r6, r0
 80088a6:	f7f7 fe45 	bl	8000534 <__aeabi_i2d>
 80088aa:	3630      	adds	r6, #48	; 0x30
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4640      	mov	r0, r8
 80088b2:	4649      	mov	r1, r9
 80088b4:	f7f7 fcf0 	bl	8000298 <__aeabi_dsub>
 80088b8:	f805 6b01 	strb.w	r6, [r5], #1
 80088bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088be:	429d      	cmp	r5, r3
 80088c0:	4680      	mov	r8, r0
 80088c2:	4689      	mov	r9, r1
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	d124      	bne.n	8008914 <_dtoa_r+0x60c>
 80088ca:	4b1b      	ldr	r3, [pc, #108]	; (8008938 <_dtoa_r+0x630>)
 80088cc:	4650      	mov	r0, sl
 80088ce:	4659      	mov	r1, fp
 80088d0:	f7f7 fce4 	bl	800029c <__adddf3>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4640      	mov	r0, r8
 80088da:	4649      	mov	r1, r9
 80088dc:	f7f8 f924 	bl	8000b28 <__aeabi_dcmpgt>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d173      	bne.n	80089cc <_dtoa_r+0x6c4>
 80088e4:	4652      	mov	r2, sl
 80088e6:	465b      	mov	r3, fp
 80088e8:	4913      	ldr	r1, [pc, #76]	; (8008938 <_dtoa_r+0x630>)
 80088ea:	2000      	movs	r0, #0
 80088ec:	f7f7 fcd4 	bl	8000298 <__aeabi_dsub>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4640      	mov	r0, r8
 80088f6:	4649      	mov	r1, r9
 80088f8:	f7f8 f8f8 	bl	8000aec <__aeabi_dcmplt>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	f43f af35 	beq.w	800876c <_dtoa_r+0x464>
 8008902:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008904:	1e6b      	subs	r3, r5, #1
 8008906:	930f      	str	r3, [sp, #60]	; 0x3c
 8008908:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800890c:	2b30      	cmp	r3, #48	; 0x30
 800890e:	d0f8      	beq.n	8008902 <_dtoa_r+0x5fa>
 8008910:	9700      	str	r7, [sp, #0]
 8008912:	e049      	b.n	80089a8 <_dtoa_r+0x6a0>
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <_dtoa_r+0x624>)
 8008916:	f7f7 fe77 	bl	8000608 <__aeabi_dmul>
 800891a:	4680      	mov	r8, r0
 800891c:	4689      	mov	r9, r1
 800891e:	e7bd      	b.n	800889c <_dtoa_r+0x594>
 8008920:	0800a968 	.word	0x0800a968
 8008924:	0800a940 	.word	0x0800a940
 8008928:	3ff00000 	.word	0x3ff00000
 800892c:	40240000 	.word	0x40240000
 8008930:	401c0000 	.word	0x401c0000
 8008934:	40140000 	.word	0x40140000
 8008938:	3fe00000 	.word	0x3fe00000
 800893c:	9d01      	ldr	r5, [sp, #4]
 800893e:	4656      	mov	r6, sl
 8008940:	465f      	mov	r7, fp
 8008942:	4642      	mov	r2, r8
 8008944:	464b      	mov	r3, r9
 8008946:	4630      	mov	r0, r6
 8008948:	4639      	mov	r1, r7
 800894a:	f7f7 ff87 	bl	800085c <__aeabi_ddiv>
 800894e:	f7f8 f90b 	bl	8000b68 <__aeabi_d2iz>
 8008952:	4682      	mov	sl, r0
 8008954:	f7f7 fdee 	bl	8000534 <__aeabi_i2d>
 8008958:	4642      	mov	r2, r8
 800895a:	464b      	mov	r3, r9
 800895c:	f7f7 fe54 	bl	8000608 <__aeabi_dmul>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800896c:	f7f7 fc94 	bl	8000298 <__aeabi_dsub>
 8008970:	f805 6b01 	strb.w	r6, [r5], #1
 8008974:	9e01      	ldr	r6, [sp, #4]
 8008976:	9f03      	ldr	r7, [sp, #12]
 8008978:	1bae      	subs	r6, r5, r6
 800897a:	42b7      	cmp	r7, r6
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	d135      	bne.n	80089ee <_dtoa_r+0x6e6>
 8008982:	f7f7 fc8b 	bl	800029c <__adddf3>
 8008986:	4642      	mov	r2, r8
 8008988:	464b      	mov	r3, r9
 800898a:	4606      	mov	r6, r0
 800898c:	460f      	mov	r7, r1
 800898e:	f7f8 f8cb 	bl	8000b28 <__aeabi_dcmpgt>
 8008992:	b9d0      	cbnz	r0, 80089ca <_dtoa_r+0x6c2>
 8008994:	4642      	mov	r2, r8
 8008996:	464b      	mov	r3, r9
 8008998:	4630      	mov	r0, r6
 800899a:	4639      	mov	r1, r7
 800899c:	f7f8 f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 80089a0:	b110      	cbz	r0, 80089a8 <_dtoa_r+0x6a0>
 80089a2:	f01a 0f01 	tst.w	sl, #1
 80089a6:	d110      	bne.n	80089ca <_dtoa_r+0x6c2>
 80089a8:	4620      	mov	r0, r4
 80089aa:	ee18 1a10 	vmov	r1, s16
 80089ae:	f000 fae5 	bl	8008f7c <_Bfree>
 80089b2:	2300      	movs	r3, #0
 80089b4:	9800      	ldr	r0, [sp, #0]
 80089b6:	702b      	strb	r3, [r5, #0]
 80089b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ba:	3001      	adds	r0, #1
 80089bc:	6018      	str	r0, [r3, #0]
 80089be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f43f acf1 	beq.w	80083a8 <_dtoa_r+0xa0>
 80089c6:	601d      	str	r5, [r3, #0]
 80089c8:	e4ee      	b.n	80083a8 <_dtoa_r+0xa0>
 80089ca:	9f00      	ldr	r7, [sp, #0]
 80089cc:	462b      	mov	r3, r5
 80089ce:	461d      	mov	r5, r3
 80089d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089d4:	2a39      	cmp	r2, #57	; 0x39
 80089d6:	d106      	bne.n	80089e6 <_dtoa_r+0x6de>
 80089d8:	9a01      	ldr	r2, [sp, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d1f7      	bne.n	80089ce <_dtoa_r+0x6c6>
 80089de:	9901      	ldr	r1, [sp, #4]
 80089e0:	2230      	movs	r2, #48	; 0x30
 80089e2:	3701      	adds	r7, #1
 80089e4:	700a      	strb	r2, [r1, #0]
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	3201      	adds	r2, #1
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	e790      	b.n	8008910 <_dtoa_r+0x608>
 80089ee:	4ba6      	ldr	r3, [pc, #664]	; (8008c88 <_dtoa_r+0x980>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	f7f7 fe09 	bl	8000608 <__aeabi_dmul>
 80089f6:	2200      	movs	r2, #0
 80089f8:	2300      	movs	r3, #0
 80089fa:	4606      	mov	r6, r0
 80089fc:	460f      	mov	r7, r1
 80089fe:	f7f8 f86b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d09d      	beq.n	8008942 <_dtoa_r+0x63a>
 8008a06:	e7cf      	b.n	80089a8 <_dtoa_r+0x6a0>
 8008a08:	9a08      	ldr	r2, [sp, #32]
 8008a0a:	2a00      	cmp	r2, #0
 8008a0c:	f000 80d7 	beq.w	8008bbe <_dtoa_r+0x8b6>
 8008a10:	9a06      	ldr	r2, [sp, #24]
 8008a12:	2a01      	cmp	r2, #1
 8008a14:	f300 80ba 	bgt.w	8008b8c <_dtoa_r+0x884>
 8008a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	f000 80b2 	beq.w	8008b84 <_dtoa_r+0x87c>
 8008a20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a24:	9e07      	ldr	r6, [sp, #28]
 8008a26:	9d04      	ldr	r5, [sp, #16]
 8008a28:	9a04      	ldr	r2, [sp, #16]
 8008a2a:	441a      	add	r2, r3
 8008a2c:	9204      	str	r2, [sp, #16]
 8008a2e:	9a05      	ldr	r2, [sp, #20]
 8008a30:	2101      	movs	r1, #1
 8008a32:	441a      	add	r2, r3
 8008a34:	4620      	mov	r0, r4
 8008a36:	9205      	str	r2, [sp, #20]
 8008a38:	f000 fb58 	bl	80090ec <__i2b>
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	2d00      	cmp	r5, #0
 8008a40:	dd0c      	ble.n	8008a5c <_dtoa_r+0x754>
 8008a42:	9b05      	ldr	r3, [sp, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	dd09      	ble.n	8008a5c <_dtoa_r+0x754>
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	9a04      	ldr	r2, [sp, #16]
 8008a4c:	bfa8      	it	ge
 8008a4e:	462b      	movge	r3, r5
 8008a50:	1ad2      	subs	r2, r2, r3
 8008a52:	9204      	str	r2, [sp, #16]
 8008a54:	9a05      	ldr	r2, [sp, #20]
 8008a56:	1aed      	subs	r5, r5, r3
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	9305      	str	r3, [sp, #20]
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	b31b      	cbz	r3, 8008aa8 <_dtoa_r+0x7a0>
 8008a60:	9b08      	ldr	r3, [sp, #32]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 80af 	beq.w	8008bc6 <_dtoa_r+0x8be>
 8008a68:	2e00      	cmp	r6, #0
 8008a6a:	dd13      	ble.n	8008a94 <_dtoa_r+0x78c>
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	4632      	mov	r2, r6
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fbfb 	bl	800926c <__pow5mult>
 8008a76:	ee18 2a10 	vmov	r2, s16
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 fb4a 	bl	8009118 <__multiply>
 8008a84:	ee18 1a10 	vmov	r1, s16
 8008a88:	4680      	mov	r8, r0
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 fa76 	bl	8008f7c <_Bfree>
 8008a90:	ee08 8a10 	vmov	s16, r8
 8008a94:	9b07      	ldr	r3, [sp, #28]
 8008a96:	1b9a      	subs	r2, r3, r6
 8008a98:	d006      	beq.n	8008aa8 <_dtoa_r+0x7a0>
 8008a9a:	ee18 1a10 	vmov	r1, s16
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 fbe4 	bl	800926c <__pow5mult>
 8008aa4:	ee08 0a10 	vmov	s16, r0
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 fb1e 	bl	80090ec <__i2b>
 8008ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	f340 8088 	ble.w	8008bca <_dtoa_r+0x8c2>
 8008aba:	461a      	mov	r2, r3
 8008abc:	4601      	mov	r1, r0
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fbd4 	bl	800926c <__pow5mult>
 8008ac4:	9b06      	ldr	r3, [sp, #24]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	4606      	mov	r6, r0
 8008aca:	f340 8081 	ble.w	8008bd0 <_dtoa_r+0x8c8>
 8008ace:	f04f 0800 	mov.w	r8, #0
 8008ad2:	6933      	ldr	r3, [r6, #16]
 8008ad4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ad8:	6918      	ldr	r0, [r3, #16]
 8008ada:	f000 fab7 	bl	800904c <__hi0bits>
 8008ade:	f1c0 0020 	rsb	r0, r0, #32
 8008ae2:	9b05      	ldr	r3, [sp, #20]
 8008ae4:	4418      	add	r0, r3
 8008ae6:	f010 001f 	ands.w	r0, r0, #31
 8008aea:	f000 8092 	beq.w	8008c12 <_dtoa_r+0x90a>
 8008aee:	f1c0 0320 	rsb	r3, r0, #32
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	f340 808a 	ble.w	8008c0c <_dtoa_r+0x904>
 8008af8:	f1c0 001c 	rsb	r0, r0, #28
 8008afc:	9b04      	ldr	r3, [sp, #16]
 8008afe:	4403      	add	r3, r0
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	9b05      	ldr	r3, [sp, #20]
 8008b04:	4403      	add	r3, r0
 8008b06:	4405      	add	r5, r0
 8008b08:	9305      	str	r3, [sp, #20]
 8008b0a:	9b04      	ldr	r3, [sp, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dd07      	ble.n	8008b20 <_dtoa_r+0x818>
 8008b10:	ee18 1a10 	vmov	r1, s16
 8008b14:	461a      	mov	r2, r3
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 fc02 	bl	8009320 <__lshift>
 8008b1c:	ee08 0a10 	vmov	s16, r0
 8008b20:	9b05      	ldr	r3, [sp, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dd05      	ble.n	8008b32 <_dtoa_r+0x82a>
 8008b26:	4631      	mov	r1, r6
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 fbf8 	bl	8009320 <__lshift>
 8008b30:	4606      	mov	r6, r0
 8008b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d06e      	beq.n	8008c16 <_dtoa_r+0x90e>
 8008b38:	ee18 0a10 	vmov	r0, s16
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	f000 fc5f 	bl	8009400 <__mcmp>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	da67      	bge.n	8008c16 <_dtoa_r+0x90e>
 8008b46:	9b00      	ldr	r3, [sp, #0]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	ee18 1a10 	vmov	r1, s16
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	220a      	movs	r2, #10
 8008b52:	2300      	movs	r3, #0
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 fa33 	bl	8008fc0 <__multadd>
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	ee08 0a10 	vmov	s16, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 81b1 	beq.w	8008ec8 <_dtoa_r+0xbc0>
 8008b66:	2300      	movs	r3, #0
 8008b68:	4639      	mov	r1, r7
 8008b6a:	220a      	movs	r2, #10
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 fa27 	bl	8008fc0 <__multadd>
 8008b72:	9b02      	ldr	r3, [sp, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	4607      	mov	r7, r0
 8008b78:	f300 808e 	bgt.w	8008c98 <_dtoa_r+0x990>
 8008b7c:	9b06      	ldr	r3, [sp, #24]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	dc51      	bgt.n	8008c26 <_dtoa_r+0x91e>
 8008b82:	e089      	b.n	8008c98 <_dtoa_r+0x990>
 8008b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b8a:	e74b      	b.n	8008a24 <_dtoa_r+0x71c>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	1e5e      	subs	r6, r3, #1
 8008b90:	9b07      	ldr	r3, [sp, #28]
 8008b92:	42b3      	cmp	r3, r6
 8008b94:	bfbf      	itttt	lt
 8008b96:	9b07      	ldrlt	r3, [sp, #28]
 8008b98:	9607      	strlt	r6, [sp, #28]
 8008b9a:	1af2      	sublt	r2, r6, r3
 8008b9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b9e:	bfb6      	itet	lt
 8008ba0:	189b      	addlt	r3, r3, r2
 8008ba2:	1b9e      	subge	r6, r3, r6
 8008ba4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	bfb8      	it	lt
 8008baa:	2600      	movlt	r6, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfb7      	itett	lt
 8008bb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008bb8:	1a9d      	sublt	r5, r3, r2
 8008bba:	2300      	movlt	r3, #0
 8008bbc:	e734      	b.n	8008a28 <_dtoa_r+0x720>
 8008bbe:	9e07      	ldr	r6, [sp, #28]
 8008bc0:	9d04      	ldr	r5, [sp, #16]
 8008bc2:	9f08      	ldr	r7, [sp, #32]
 8008bc4:	e73b      	b.n	8008a3e <_dtoa_r+0x736>
 8008bc6:	9a07      	ldr	r2, [sp, #28]
 8008bc8:	e767      	b.n	8008a9a <_dtoa_r+0x792>
 8008bca:	9b06      	ldr	r3, [sp, #24]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	dc18      	bgt.n	8008c02 <_dtoa_r+0x8fa>
 8008bd0:	f1ba 0f00 	cmp.w	sl, #0
 8008bd4:	d115      	bne.n	8008c02 <_dtoa_r+0x8fa>
 8008bd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bda:	b993      	cbnz	r3, 8008c02 <_dtoa_r+0x8fa>
 8008bdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008be0:	0d1b      	lsrs	r3, r3, #20
 8008be2:	051b      	lsls	r3, r3, #20
 8008be4:	b183      	cbz	r3, 8008c08 <_dtoa_r+0x900>
 8008be6:	9b04      	ldr	r3, [sp, #16]
 8008be8:	3301      	adds	r3, #1
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	9b05      	ldr	r3, [sp, #20]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	f04f 0801 	mov.w	r8, #1
 8008bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f47f af6a 	bne.w	8008ad2 <_dtoa_r+0x7ca>
 8008bfe:	2001      	movs	r0, #1
 8008c00:	e76f      	b.n	8008ae2 <_dtoa_r+0x7da>
 8008c02:	f04f 0800 	mov.w	r8, #0
 8008c06:	e7f6      	b.n	8008bf6 <_dtoa_r+0x8ee>
 8008c08:	4698      	mov	r8, r3
 8008c0a:	e7f4      	b.n	8008bf6 <_dtoa_r+0x8ee>
 8008c0c:	f43f af7d 	beq.w	8008b0a <_dtoa_r+0x802>
 8008c10:	4618      	mov	r0, r3
 8008c12:	301c      	adds	r0, #28
 8008c14:	e772      	b.n	8008afc <_dtoa_r+0x7f4>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dc37      	bgt.n	8008c8c <_dtoa_r+0x984>
 8008c1c:	9b06      	ldr	r3, [sp, #24]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	dd34      	ble.n	8008c8c <_dtoa_r+0x984>
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	9302      	str	r3, [sp, #8]
 8008c26:	9b02      	ldr	r3, [sp, #8]
 8008c28:	b96b      	cbnz	r3, 8008c46 <_dtoa_r+0x93e>
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	2205      	movs	r2, #5
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f9c6 	bl	8008fc0 <__multadd>
 8008c34:	4601      	mov	r1, r0
 8008c36:	4606      	mov	r6, r0
 8008c38:	ee18 0a10 	vmov	r0, s16
 8008c3c:	f000 fbe0 	bl	8009400 <__mcmp>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	f73f adbb 	bgt.w	80087bc <_dtoa_r+0x4b4>
 8008c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c48:	9d01      	ldr	r5, [sp, #4]
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	f04f 0800 	mov.w	r8, #0
 8008c52:	4631      	mov	r1, r6
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 f991 	bl	8008f7c <_Bfree>
 8008c5a:	2f00      	cmp	r7, #0
 8008c5c:	f43f aea4 	beq.w	80089a8 <_dtoa_r+0x6a0>
 8008c60:	f1b8 0f00 	cmp.w	r8, #0
 8008c64:	d005      	beq.n	8008c72 <_dtoa_r+0x96a>
 8008c66:	45b8      	cmp	r8, r7
 8008c68:	d003      	beq.n	8008c72 <_dtoa_r+0x96a>
 8008c6a:	4641      	mov	r1, r8
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 f985 	bl	8008f7c <_Bfree>
 8008c72:	4639      	mov	r1, r7
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 f981 	bl	8008f7c <_Bfree>
 8008c7a:	e695      	b.n	80089a8 <_dtoa_r+0x6a0>
 8008c7c:	2600      	movs	r6, #0
 8008c7e:	4637      	mov	r7, r6
 8008c80:	e7e1      	b.n	8008c46 <_dtoa_r+0x93e>
 8008c82:	9700      	str	r7, [sp, #0]
 8008c84:	4637      	mov	r7, r6
 8008c86:	e599      	b.n	80087bc <_dtoa_r+0x4b4>
 8008c88:	40240000 	.word	0x40240000
 8008c8c:	9b08      	ldr	r3, [sp, #32]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 80ca 	beq.w	8008e28 <_dtoa_r+0xb20>
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	dd05      	ble.n	8008ca8 <_dtoa_r+0x9a0>
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	462a      	mov	r2, r5
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f000 fb3d 	bl	8009320 <__lshift>
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	f1b8 0f00 	cmp.w	r8, #0
 8008cac:	d05b      	beq.n	8008d66 <_dtoa_r+0xa5e>
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 f923 	bl	8008efc <_Balloc>
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	b928      	cbnz	r0, 8008cc6 <_dtoa_r+0x9be>
 8008cba:	4b87      	ldr	r3, [pc, #540]	; (8008ed8 <_dtoa_r+0xbd0>)
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cc2:	f7ff bb3b 	b.w	800833c <_dtoa_r+0x34>
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	3202      	adds	r2, #2
 8008cca:	0092      	lsls	r2, r2, #2
 8008ccc:	f107 010c 	add.w	r1, r7, #12
 8008cd0:	300c      	adds	r0, #12
 8008cd2:	f7fe fded 	bl	80078b0 <memcpy>
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fb20 	bl	8009320 <__lshift>
 8008ce0:	9b01      	ldr	r3, [sp, #4]
 8008ce2:	f103 0901 	add.w	r9, r3, #1
 8008ce6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cea:	4413      	add	r3, r2
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	f00a 0301 	and.w	r3, sl, #1
 8008cf2:	46b8      	mov	r8, r7
 8008cf4:	9304      	str	r3, [sp, #16]
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	ee18 0a10 	vmov	r0, s16
 8008cfe:	f7ff fa77 	bl	80081f0 <quorem>
 8008d02:	4641      	mov	r1, r8
 8008d04:	9002      	str	r0, [sp, #8]
 8008d06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d0a:	ee18 0a10 	vmov	r0, s16
 8008d0e:	f000 fb77 	bl	8009400 <__mcmp>
 8008d12:	463a      	mov	r2, r7
 8008d14:	9003      	str	r0, [sp, #12]
 8008d16:	4631      	mov	r1, r6
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fb8d 	bl	8009438 <__mdiff>
 8008d1e:	68c2      	ldr	r2, [r0, #12]
 8008d20:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d24:	4605      	mov	r5, r0
 8008d26:	bb02      	cbnz	r2, 8008d6a <_dtoa_r+0xa62>
 8008d28:	4601      	mov	r1, r0
 8008d2a:	ee18 0a10 	vmov	r0, s16
 8008d2e:	f000 fb67 	bl	8009400 <__mcmp>
 8008d32:	4602      	mov	r2, r0
 8008d34:	4629      	mov	r1, r5
 8008d36:	4620      	mov	r0, r4
 8008d38:	9207      	str	r2, [sp, #28]
 8008d3a:	f000 f91f 	bl	8008f7c <_Bfree>
 8008d3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d42:	ea43 0102 	orr.w	r1, r3, r2
 8008d46:	9b04      	ldr	r3, [sp, #16]
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	464d      	mov	r5, r9
 8008d4c:	d10f      	bne.n	8008d6e <_dtoa_r+0xa66>
 8008d4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d52:	d02a      	beq.n	8008daa <_dtoa_r+0xaa2>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	dd02      	ble.n	8008d60 <_dtoa_r+0xa58>
 8008d5a:	9b02      	ldr	r3, [sp, #8]
 8008d5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d60:	f88b a000 	strb.w	sl, [fp]
 8008d64:	e775      	b.n	8008c52 <_dtoa_r+0x94a>
 8008d66:	4638      	mov	r0, r7
 8008d68:	e7ba      	b.n	8008ce0 <_dtoa_r+0x9d8>
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	e7e2      	b.n	8008d34 <_dtoa_r+0xa2c>
 8008d6e:	9b03      	ldr	r3, [sp, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db04      	blt.n	8008d7e <_dtoa_r+0xa76>
 8008d74:	9906      	ldr	r1, [sp, #24]
 8008d76:	430b      	orrs	r3, r1
 8008d78:	9904      	ldr	r1, [sp, #16]
 8008d7a:	430b      	orrs	r3, r1
 8008d7c:	d122      	bne.n	8008dc4 <_dtoa_r+0xabc>
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	ddee      	ble.n	8008d60 <_dtoa_r+0xa58>
 8008d82:	ee18 1a10 	vmov	r1, s16
 8008d86:	2201      	movs	r2, #1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fac9 	bl	8009320 <__lshift>
 8008d8e:	4631      	mov	r1, r6
 8008d90:	ee08 0a10 	vmov	s16, r0
 8008d94:	f000 fb34 	bl	8009400 <__mcmp>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dc03      	bgt.n	8008da4 <_dtoa_r+0xa9c>
 8008d9c:	d1e0      	bne.n	8008d60 <_dtoa_r+0xa58>
 8008d9e:	f01a 0f01 	tst.w	sl, #1
 8008da2:	d0dd      	beq.n	8008d60 <_dtoa_r+0xa58>
 8008da4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008da8:	d1d7      	bne.n	8008d5a <_dtoa_r+0xa52>
 8008daa:	2339      	movs	r3, #57	; 0x39
 8008dac:	f88b 3000 	strb.w	r3, [fp]
 8008db0:	462b      	mov	r3, r5
 8008db2:	461d      	mov	r5, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dba:	2a39      	cmp	r2, #57	; 0x39
 8008dbc:	d071      	beq.n	8008ea2 <_dtoa_r+0xb9a>
 8008dbe:	3201      	adds	r2, #1
 8008dc0:	701a      	strb	r2, [r3, #0]
 8008dc2:	e746      	b.n	8008c52 <_dtoa_r+0x94a>
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	dd07      	ble.n	8008dd8 <_dtoa_r+0xad0>
 8008dc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dcc:	d0ed      	beq.n	8008daa <_dtoa_r+0xaa2>
 8008dce:	f10a 0301 	add.w	r3, sl, #1
 8008dd2:	f88b 3000 	strb.w	r3, [fp]
 8008dd6:	e73c      	b.n	8008c52 <_dtoa_r+0x94a>
 8008dd8:	9b05      	ldr	r3, [sp, #20]
 8008dda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dde:	4599      	cmp	r9, r3
 8008de0:	d047      	beq.n	8008e72 <_dtoa_r+0xb6a>
 8008de2:	ee18 1a10 	vmov	r1, s16
 8008de6:	2300      	movs	r3, #0
 8008de8:	220a      	movs	r2, #10
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f8e8 	bl	8008fc0 <__multadd>
 8008df0:	45b8      	cmp	r8, r7
 8008df2:	ee08 0a10 	vmov	s16, r0
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	f04f 020a 	mov.w	r2, #10
 8008dfe:	4641      	mov	r1, r8
 8008e00:	4620      	mov	r0, r4
 8008e02:	d106      	bne.n	8008e12 <_dtoa_r+0xb0a>
 8008e04:	f000 f8dc 	bl	8008fc0 <__multadd>
 8008e08:	4680      	mov	r8, r0
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	f109 0901 	add.w	r9, r9, #1
 8008e10:	e772      	b.n	8008cf8 <_dtoa_r+0x9f0>
 8008e12:	f000 f8d5 	bl	8008fc0 <__multadd>
 8008e16:	4639      	mov	r1, r7
 8008e18:	4680      	mov	r8, r0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	220a      	movs	r2, #10
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 f8ce 	bl	8008fc0 <__multadd>
 8008e24:	4607      	mov	r7, r0
 8008e26:	e7f1      	b.n	8008e0c <_dtoa_r+0xb04>
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	9302      	str	r3, [sp, #8]
 8008e2c:	9d01      	ldr	r5, [sp, #4]
 8008e2e:	ee18 0a10 	vmov	r0, s16
 8008e32:	4631      	mov	r1, r6
 8008e34:	f7ff f9dc 	bl	80081f0 <quorem>
 8008e38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e3c:	9b01      	ldr	r3, [sp, #4]
 8008e3e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e42:	1aea      	subs	r2, r5, r3
 8008e44:	9b02      	ldr	r3, [sp, #8]
 8008e46:	4293      	cmp	r3, r2
 8008e48:	dd09      	ble.n	8008e5e <_dtoa_r+0xb56>
 8008e4a:	ee18 1a10 	vmov	r1, s16
 8008e4e:	2300      	movs	r3, #0
 8008e50:	220a      	movs	r2, #10
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f8b4 	bl	8008fc0 <__multadd>
 8008e58:	ee08 0a10 	vmov	s16, r0
 8008e5c:	e7e7      	b.n	8008e2e <_dtoa_r+0xb26>
 8008e5e:	9b02      	ldr	r3, [sp, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bfc8      	it	gt
 8008e64:	461d      	movgt	r5, r3
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	bfd8      	it	le
 8008e6a:	2501      	movle	r5, #1
 8008e6c:	441d      	add	r5, r3
 8008e6e:	f04f 0800 	mov.w	r8, #0
 8008e72:	ee18 1a10 	vmov	r1, s16
 8008e76:	2201      	movs	r2, #1
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 fa51 	bl	8009320 <__lshift>
 8008e7e:	4631      	mov	r1, r6
 8008e80:	ee08 0a10 	vmov	s16, r0
 8008e84:	f000 fabc 	bl	8009400 <__mcmp>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	dc91      	bgt.n	8008db0 <_dtoa_r+0xaa8>
 8008e8c:	d102      	bne.n	8008e94 <_dtoa_r+0xb8c>
 8008e8e:	f01a 0f01 	tst.w	sl, #1
 8008e92:	d18d      	bne.n	8008db0 <_dtoa_r+0xaa8>
 8008e94:	462b      	mov	r3, r5
 8008e96:	461d      	mov	r5, r3
 8008e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e9c:	2a30      	cmp	r2, #48	; 0x30
 8008e9e:	d0fa      	beq.n	8008e96 <_dtoa_r+0xb8e>
 8008ea0:	e6d7      	b.n	8008c52 <_dtoa_r+0x94a>
 8008ea2:	9a01      	ldr	r2, [sp, #4]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d184      	bne.n	8008db2 <_dtoa_r+0xaaa>
 8008ea8:	9b00      	ldr	r3, [sp, #0]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	2331      	movs	r3, #49	; 0x31
 8008eb0:	7013      	strb	r3, [r2, #0]
 8008eb2:	e6ce      	b.n	8008c52 <_dtoa_r+0x94a>
 8008eb4:	4b09      	ldr	r3, [pc, #36]	; (8008edc <_dtoa_r+0xbd4>)
 8008eb6:	f7ff ba95 	b.w	80083e4 <_dtoa_r+0xdc>
 8008eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f47f aa6e 	bne.w	800839e <_dtoa_r+0x96>
 8008ec2:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <_dtoa_r+0xbd8>)
 8008ec4:	f7ff ba8e 	b.w	80083e4 <_dtoa_r+0xdc>
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dcae      	bgt.n	8008e2c <_dtoa_r+0xb24>
 8008ece:	9b06      	ldr	r3, [sp, #24]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	f73f aea8 	bgt.w	8008c26 <_dtoa_r+0x91e>
 8008ed6:	e7a9      	b.n	8008e2c <_dtoa_r+0xb24>
 8008ed8:	0800a8d3 	.word	0x0800a8d3
 8008edc:	0800a830 	.word	0x0800a830
 8008ee0:	0800a854 	.word	0x0800a854

08008ee4 <_localeconv_r>:
 8008ee4:	4800      	ldr	r0, [pc, #0]	; (8008ee8 <_localeconv_r+0x4>)
 8008ee6:	4770      	bx	lr
 8008ee8:	20000298 	.word	0x20000298

08008eec <malloc>:
 8008eec:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <malloc+0xc>)
 8008eee:	4601      	mov	r1, r0
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f000 bc09 	b.w	8009708 <_malloc_r>
 8008ef6:	bf00      	nop
 8008ef8:	20000144 	.word	0x20000144

08008efc <_Balloc>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	b976      	cbnz	r6, 8008f24 <_Balloc+0x28>
 8008f06:	2010      	movs	r0, #16
 8008f08:	f7ff fff0 	bl	8008eec <malloc>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f10:	b920      	cbnz	r0, 8008f1c <_Balloc+0x20>
 8008f12:	4b18      	ldr	r3, [pc, #96]	; (8008f74 <_Balloc+0x78>)
 8008f14:	4818      	ldr	r0, [pc, #96]	; (8008f78 <_Balloc+0x7c>)
 8008f16:	2166      	movs	r1, #102	; 0x66
 8008f18:	f000 fdd6 	bl	8009ac8 <__assert_func>
 8008f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f20:	6006      	str	r6, [r0, #0]
 8008f22:	60c6      	str	r6, [r0, #12]
 8008f24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f26:	68f3      	ldr	r3, [r6, #12]
 8008f28:	b183      	cbz	r3, 8008f4c <_Balloc+0x50>
 8008f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f32:	b9b8      	cbnz	r0, 8008f64 <_Balloc+0x68>
 8008f34:	2101      	movs	r1, #1
 8008f36:	fa01 f605 	lsl.w	r6, r1, r5
 8008f3a:	1d72      	adds	r2, r6, #5
 8008f3c:	0092      	lsls	r2, r2, #2
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 fb60 	bl	8009604 <_calloc_r>
 8008f44:	b160      	cbz	r0, 8008f60 <_Balloc+0x64>
 8008f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f4a:	e00e      	b.n	8008f6a <_Balloc+0x6e>
 8008f4c:	2221      	movs	r2, #33	; 0x21
 8008f4e:	2104      	movs	r1, #4
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fb57 	bl	8009604 <_calloc_r>
 8008f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f58:	60f0      	str	r0, [r6, #12]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e4      	bne.n	8008f2a <_Balloc+0x2e>
 8008f60:	2000      	movs	r0, #0
 8008f62:	bd70      	pop	{r4, r5, r6, pc}
 8008f64:	6802      	ldr	r2, [r0, #0]
 8008f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f70:	e7f7      	b.n	8008f62 <_Balloc+0x66>
 8008f72:	bf00      	nop
 8008f74:	0800a861 	.word	0x0800a861
 8008f78:	0800a8e4 	.word	0x0800a8e4

08008f7c <_Bfree>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f80:	4605      	mov	r5, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	b976      	cbnz	r6, 8008fa4 <_Bfree+0x28>
 8008f86:	2010      	movs	r0, #16
 8008f88:	f7ff ffb0 	bl	8008eec <malloc>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6268      	str	r0, [r5, #36]	; 0x24
 8008f90:	b920      	cbnz	r0, 8008f9c <_Bfree+0x20>
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <_Bfree+0x3c>)
 8008f94:	4809      	ldr	r0, [pc, #36]	; (8008fbc <_Bfree+0x40>)
 8008f96:	218a      	movs	r1, #138	; 0x8a
 8008f98:	f000 fd96 	bl	8009ac8 <__assert_func>
 8008f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fa0:	6006      	str	r6, [r0, #0]
 8008fa2:	60c6      	str	r6, [r0, #12]
 8008fa4:	b13c      	cbz	r4, 8008fb6 <_Bfree+0x3a>
 8008fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fa8:	6862      	ldr	r2, [r4, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fb0:	6021      	str	r1, [r4, #0]
 8008fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	0800a861 	.word	0x0800a861
 8008fbc:	0800a8e4 	.word	0x0800a8e4

08008fc0 <__multadd>:
 8008fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc4:	690d      	ldr	r5, [r1, #16]
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	460c      	mov	r4, r1
 8008fca:	461e      	mov	r6, r3
 8008fcc:	f101 0c14 	add.w	ip, r1, #20
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	f8dc 3000 	ldr.w	r3, [ip]
 8008fd6:	b299      	uxth	r1, r3
 8008fd8:	fb02 6101 	mla	r1, r2, r1, r6
 8008fdc:	0c1e      	lsrs	r6, r3, #16
 8008fde:	0c0b      	lsrs	r3, r1, #16
 8008fe0:	fb02 3306 	mla	r3, r2, r6, r3
 8008fe4:	b289      	uxth	r1, r1
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fec:	4285      	cmp	r5, r0
 8008fee:	f84c 1b04 	str.w	r1, [ip], #4
 8008ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ff6:	dcec      	bgt.n	8008fd2 <__multadd+0x12>
 8008ff8:	b30e      	cbz	r6, 800903e <__multadd+0x7e>
 8008ffa:	68a3      	ldr	r3, [r4, #8]
 8008ffc:	42ab      	cmp	r3, r5
 8008ffe:	dc19      	bgt.n	8009034 <__multadd+0x74>
 8009000:	6861      	ldr	r1, [r4, #4]
 8009002:	4638      	mov	r0, r7
 8009004:	3101      	adds	r1, #1
 8009006:	f7ff ff79 	bl	8008efc <_Balloc>
 800900a:	4680      	mov	r8, r0
 800900c:	b928      	cbnz	r0, 800901a <__multadd+0x5a>
 800900e:	4602      	mov	r2, r0
 8009010:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <__multadd+0x84>)
 8009012:	480d      	ldr	r0, [pc, #52]	; (8009048 <__multadd+0x88>)
 8009014:	21b5      	movs	r1, #181	; 0xb5
 8009016:	f000 fd57 	bl	8009ac8 <__assert_func>
 800901a:	6922      	ldr	r2, [r4, #16]
 800901c:	3202      	adds	r2, #2
 800901e:	f104 010c 	add.w	r1, r4, #12
 8009022:	0092      	lsls	r2, r2, #2
 8009024:	300c      	adds	r0, #12
 8009026:	f7fe fc43 	bl	80078b0 <memcpy>
 800902a:	4621      	mov	r1, r4
 800902c:	4638      	mov	r0, r7
 800902e:	f7ff ffa5 	bl	8008f7c <_Bfree>
 8009032:	4644      	mov	r4, r8
 8009034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009038:	3501      	adds	r5, #1
 800903a:	615e      	str	r6, [r3, #20]
 800903c:	6125      	str	r5, [r4, #16]
 800903e:	4620      	mov	r0, r4
 8009040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009044:	0800a8d3 	.word	0x0800a8d3
 8009048:	0800a8e4 	.word	0x0800a8e4

0800904c <__hi0bits>:
 800904c:	0c03      	lsrs	r3, r0, #16
 800904e:	041b      	lsls	r3, r3, #16
 8009050:	b9d3      	cbnz	r3, 8009088 <__hi0bits+0x3c>
 8009052:	0400      	lsls	r0, r0, #16
 8009054:	2310      	movs	r3, #16
 8009056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800905a:	bf04      	itt	eq
 800905c:	0200      	lsleq	r0, r0, #8
 800905e:	3308      	addeq	r3, #8
 8009060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009064:	bf04      	itt	eq
 8009066:	0100      	lsleq	r0, r0, #4
 8009068:	3304      	addeq	r3, #4
 800906a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800906e:	bf04      	itt	eq
 8009070:	0080      	lsleq	r0, r0, #2
 8009072:	3302      	addeq	r3, #2
 8009074:	2800      	cmp	r0, #0
 8009076:	db05      	blt.n	8009084 <__hi0bits+0x38>
 8009078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800907c:	f103 0301 	add.w	r3, r3, #1
 8009080:	bf08      	it	eq
 8009082:	2320      	moveq	r3, #32
 8009084:	4618      	mov	r0, r3
 8009086:	4770      	bx	lr
 8009088:	2300      	movs	r3, #0
 800908a:	e7e4      	b.n	8009056 <__hi0bits+0xa>

0800908c <__lo0bits>:
 800908c:	6803      	ldr	r3, [r0, #0]
 800908e:	f013 0207 	ands.w	r2, r3, #7
 8009092:	4601      	mov	r1, r0
 8009094:	d00b      	beq.n	80090ae <__lo0bits+0x22>
 8009096:	07da      	lsls	r2, r3, #31
 8009098:	d423      	bmi.n	80090e2 <__lo0bits+0x56>
 800909a:	0798      	lsls	r0, r3, #30
 800909c:	bf49      	itett	mi
 800909e:	085b      	lsrmi	r3, r3, #1
 80090a0:	089b      	lsrpl	r3, r3, #2
 80090a2:	2001      	movmi	r0, #1
 80090a4:	600b      	strmi	r3, [r1, #0]
 80090a6:	bf5c      	itt	pl
 80090a8:	600b      	strpl	r3, [r1, #0]
 80090aa:	2002      	movpl	r0, #2
 80090ac:	4770      	bx	lr
 80090ae:	b298      	uxth	r0, r3
 80090b0:	b9a8      	cbnz	r0, 80090de <__lo0bits+0x52>
 80090b2:	0c1b      	lsrs	r3, r3, #16
 80090b4:	2010      	movs	r0, #16
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	b90a      	cbnz	r2, 80090be <__lo0bits+0x32>
 80090ba:	3008      	adds	r0, #8
 80090bc:	0a1b      	lsrs	r3, r3, #8
 80090be:	071a      	lsls	r2, r3, #28
 80090c0:	bf04      	itt	eq
 80090c2:	091b      	lsreq	r3, r3, #4
 80090c4:	3004      	addeq	r0, #4
 80090c6:	079a      	lsls	r2, r3, #30
 80090c8:	bf04      	itt	eq
 80090ca:	089b      	lsreq	r3, r3, #2
 80090cc:	3002      	addeq	r0, #2
 80090ce:	07da      	lsls	r2, r3, #31
 80090d0:	d403      	bmi.n	80090da <__lo0bits+0x4e>
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	f100 0001 	add.w	r0, r0, #1
 80090d8:	d005      	beq.n	80090e6 <__lo0bits+0x5a>
 80090da:	600b      	str	r3, [r1, #0]
 80090dc:	4770      	bx	lr
 80090de:	4610      	mov	r0, r2
 80090e0:	e7e9      	b.n	80090b6 <__lo0bits+0x2a>
 80090e2:	2000      	movs	r0, #0
 80090e4:	4770      	bx	lr
 80090e6:	2020      	movs	r0, #32
 80090e8:	4770      	bx	lr
	...

080090ec <__i2b>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	460c      	mov	r4, r1
 80090f0:	2101      	movs	r1, #1
 80090f2:	f7ff ff03 	bl	8008efc <_Balloc>
 80090f6:	4602      	mov	r2, r0
 80090f8:	b928      	cbnz	r0, 8009106 <__i2b+0x1a>
 80090fa:	4b05      	ldr	r3, [pc, #20]	; (8009110 <__i2b+0x24>)
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <__i2b+0x28>)
 80090fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009102:	f000 fce1 	bl	8009ac8 <__assert_func>
 8009106:	2301      	movs	r3, #1
 8009108:	6144      	str	r4, [r0, #20]
 800910a:	6103      	str	r3, [r0, #16]
 800910c:	bd10      	pop	{r4, pc}
 800910e:	bf00      	nop
 8009110:	0800a8d3 	.word	0x0800a8d3
 8009114:	0800a8e4 	.word	0x0800a8e4

08009118 <__multiply>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	4691      	mov	r9, r2
 800911e:	690a      	ldr	r2, [r1, #16]
 8009120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009124:	429a      	cmp	r2, r3
 8009126:	bfb8      	it	lt
 8009128:	460b      	movlt	r3, r1
 800912a:	460c      	mov	r4, r1
 800912c:	bfbc      	itt	lt
 800912e:	464c      	movlt	r4, r9
 8009130:	4699      	movlt	r9, r3
 8009132:	6927      	ldr	r7, [r4, #16]
 8009134:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009138:	68a3      	ldr	r3, [r4, #8]
 800913a:	6861      	ldr	r1, [r4, #4]
 800913c:	eb07 060a 	add.w	r6, r7, sl
 8009140:	42b3      	cmp	r3, r6
 8009142:	b085      	sub	sp, #20
 8009144:	bfb8      	it	lt
 8009146:	3101      	addlt	r1, #1
 8009148:	f7ff fed8 	bl	8008efc <_Balloc>
 800914c:	b930      	cbnz	r0, 800915c <__multiply+0x44>
 800914e:	4602      	mov	r2, r0
 8009150:	4b44      	ldr	r3, [pc, #272]	; (8009264 <__multiply+0x14c>)
 8009152:	4845      	ldr	r0, [pc, #276]	; (8009268 <__multiply+0x150>)
 8009154:	f240 115d 	movw	r1, #349	; 0x15d
 8009158:	f000 fcb6 	bl	8009ac8 <__assert_func>
 800915c:	f100 0514 	add.w	r5, r0, #20
 8009160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009164:	462b      	mov	r3, r5
 8009166:	2200      	movs	r2, #0
 8009168:	4543      	cmp	r3, r8
 800916a:	d321      	bcc.n	80091b0 <__multiply+0x98>
 800916c:	f104 0314 	add.w	r3, r4, #20
 8009170:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009174:	f109 0314 	add.w	r3, r9, #20
 8009178:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800917c:	9202      	str	r2, [sp, #8]
 800917e:	1b3a      	subs	r2, r7, r4
 8009180:	3a15      	subs	r2, #21
 8009182:	f022 0203 	bic.w	r2, r2, #3
 8009186:	3204      	adds	r2, #4
 8009188:	f104 0115 	add.w	r1, r4, #21
 800918c:	428f      	cmp	r7, r1
 800918e:	bf38      	it	cc
 8009190:	2204      	movcc	r2, #4
 8009192:	9201      	str	r2, [sp, #4]
 8009194:	9a02      	ldr	r2, [sp, #8]
 8009196:	9303      	str	r3, [sp, #12]
 8009198:	429a      	cmp	r2, r3
 800919a:	d80c      	bhi.n	80091b6 <__multiply+0x9e>
 800919c:	2e00      	cmp	r6, #0
 800919e:	dd03      	ble.n	80091a8 <__multiply+0x90>
 80091a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d05a      	beq.n	800925e <__multiply+0x146>
 80091a8:	6106      	str	r6, [r0, #16]
 80091aa:	b005      	add	sp, #20
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b0:	f843 2b04 	str.w	r2, [r3], #4
 80091b4:	e7d8      	b.n	8009168 <__multiply+0x50>
 80091b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80091ba:	f1ba 0f00 	cmp.w	sl, #0
 80091be:	d024      	beq.n	800920a <__multiply+0xf2>
 80091c0:	f104 0e14 	add.w	lr, r4, #20
 80091c4:	46a9      	mov	r9, r5
 80091c6:	f04f 0c00 	mov.w	ip, #0
 80091ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091ce:	f8d9 1000 	ldr.w	r1, [r9]
 80091d2:	fa1f fb82 	uxth.w	fp, r2
 80091d6:	b289      	uxth	r1, r1
 80091d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80091dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091e0:	f8d9 2000 	ldr.w	r2, [r9]
 80091e4:	4461      	add	r1, ip
 80091e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80091ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091f2:	b289      	uxth	r1, r1
 80091f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091f8:	4577      	cmp	r7, lr
 80091fa:	f849 1b04 	str.w	r1, [r9], #4
 80091fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009202:	d8e2      	bhi.n	80091ca <__multiply+0xb2>
 8009204:	9a01      	ldr	r2, [sp, #4]
 8009206:	f845 c002 	str.w	ip, [r5, r2]
 800920a:	9a03      	ldr	r2, [sp, #12]
 800920c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009210:	3304      	adds	r3, #4
 8009212:	f1b9 0f00 	cmp.w	r9, #0
 8009216:	d020      	beq.n	800925a <__multiply+0x142>
 8009218:	6829      	ldr	r1, [r5, #0]
 800921a:	f104 0c14 	add.w	ip, r4, #20
 800921e:	46ae      	mov	lr, r5
 8009220:	f04f 0a00 	mov.w	sl, #0
 8009224:	f8bc b000 	ldrh.w	fp, [ip]
 8009228:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800922c:	fb09 220b 	mla	r2, r9, fp, r2
 8009230:	4492      	add	sl, r2
 8009232:	b289      	uxth	r1, r1
 8009234:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009238:	f84e 1b04 	str.w	r1, [lr], #4
 800923c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009240:	f8be 1000 	ldrh.w	r1, [lr]
 8009244:	0c12      	lsrs	r2, r2, #16
 8009246:	fb09 1102 	mla	r1, r9, r2, r1
 800924a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800924e:	4567      	cmp	r7, ip
 8009250:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009254:	d8e6      	bhi.n	8009224 <__multiply+0x10c>
 8009256:	9a01      	ldr	r2, [sp, #4]
 8009258:	50a9      	str	r1, [r5, r2]
 800925a:	3504      	adds	r5, #4
 800925c:	e79a      	b.n	8009194 <__multiply+0x7c>
 800925e:	3e01      	subs	r6, #1
 8009260:	e79c      	b.n	800919c <__multiply+0x84>
 8009262:	bf00      	nop
 8009264:	0800a8d3 	.word	0x0800a8d3
 8009268:	0800a8e4 	.word	0x0800a8e4

0800926c <__pow5mult>:
 800926c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009270:	4615      	mov	r5, r2
 8009272:	f012 0203 	ands.w	r2, r2, #3
 8009276:	4606      	mov	r6, r0
 8009278:	460f      	mov	r7, r1
 800927a:	d007      	beq.n	800928c <__pow5mult+0x20>
 800927c:	4c25      	ldr	r4, [pc, #148]	; (8009314 <__pow5mult+0xa8>)
 800927e:	3a01      	subs	r2, #1
 8009280:	2300      	movs	r3, #0
 8009282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009286:	f7ff fe9b 	bl	8008fc0 <__multadd>
 800928a:	4607      	mov	r7, r0
 800928c:	10ad      	asrs	r5, r5, #2
 800928e:	d03d      	beq.n	800930c <__pow5mult+0xa0>
 8009290:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009292:	b97c      	cbnz	r4, 80092b4 <__pow5mult+0x48>
 8009294:	2010      	movs	r0, #16
 8009296:	f7ff fe29 	bl	8008eec <malloc>
 800929a:	4602      	mov	r2, r0
 800929c:	6270      	str	r0, [r6, #36]	; 0x24
 800929e:	b928      	cbnz	r0, 80092ac <__pow5mult+0x40>
 80092a0:	4b1d      	ldr	r3, [pc, #116]	; (8009318 <__pow5mult+0xac>)
 80092a2:	481e      	ldr	r0, [pc, #120]	; (800931c <__pow5mult+0xb0>)
 80092a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092a8:	f000 fc0e 	bl	8009ac8 <__assert_func>
 80092ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092b0:	6004      	str	r4, [r0, #0]
 80092b2:	60c4      	str	r4, [r0, #12]
 80092b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092bc:	b94c      	cbnz	r4, 80092d2 <__pow5mult+0x66>
 80092be:	f240 2171 	movw	r1, #625	; 0x271
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ff12 	bl	80090ec <__i2b>
 80092c8:	2300      	movs	r3, #0
 80092ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ce:	4604      	mov	r4, r0
 80092d0:	6003      	str	r3, [r0, #0]
 80092d2:	f04f 0900 	mov.w	r9, #0
 80092d6:	07eb      	lsls	r3, r5, #31
 80092d8:	d50a      	bpl.n	80092f0 <__pow5mult+0x84>
 80092da:	4639      	mov	r1, r7
 80092dc:	4622      	mov	r2, r4
 80092de:	4630      	mov	r0, r6
 80092e0:	f7ff ff1a 	bl	8009118 <__multiply>
 80092e4:	4639      	mov	r1, r7
 80092e6:	4680      	mov	r8, r0
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff fe47 	bl	8008f7c <_Bfree>
 80092ee:	4647      	mov	r7, r8
 80092f0:	106d      	asrs	r5, r5, #1
 80092f2:	d00b      	beq.n	800930c <__pow5mult+0xa0>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	b938      	cbnz	r0, 8009308 <__pow5mult+0x9c>
 80092f8:	4622      	mov	r2, r4
 80092fa:	4621      	mov	r1, r4
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7ff ff0b 	bl	8009118 <__multiply>
 8009302:	6020      	str	r0, [r4, #0]
 8009304:	f8c0 9000 	str.w	r9, [r0]
 8009308:	4604      	mov	r4, r0
 800930a:	e7e4      	b.n	80092d6 <__pow5mult+0x6a>
 800930c:	4638      	mov	r0, r7
 800930e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009312:	bf00      	nop
 8009314:	0800aa30 	.word	0x0800aa30
 8009318:	0800a861 	.word	0x0800a861
 800931c:	0800a8e4 	.word	0x0800a8e4

08009320 <__lshift>:
 8009320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	6849      	ldr	r1, [r1, #4]
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	4607      	mov	r7, r0
 8009332:	4691      	mov	r9, r2
 8009334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009338:	f108 0601 	add.w	r6, r8, #1
 800933c:	42b3      	cmp	r3, r6
 800933e:	db0b      	blt.n	8009358 <__lshift+0x38>
 8009340:	4638      	mov	r0, r7
 8009342:	f7ff fddb 	bl	8008efc <_Balloc>
 8009346:	4605      	mov	r5, r0
 8009348:	b948      	cbnz	r0, 800935e <__lshift+0x3e>
 800934a:	4602      	mov	r2, r0
 800934c:	4b2a      	ldr	r3, [pc, #168]	; (80093f8 <__lshift+0xd8>)
 800934e:	482b      	ldr	r0, [pc, #172]	; (80093fc <__lshift+0xdc>)
 8009350:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009354:	f000 fbb8 	bl	8009ac8 <__assert_func>
 8009358:	3101      	adds	r1, #1
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	e7ee      	b.n	800933c <__lshift+0x1c>
 800935e:	2300      	movs	r3, #0
 8009360:	f100 0114 	add.w	r1, r0, #20
 8009364:	f100 0210 	add.w	r2, r0, #16
 8009368:	4618      	mov	r0, r3
 800936a:	4553      	cmp	r3, sl
 800936c:	db37      	blt.n	80093de <__lshift+0xbe>
 800936e:	6920      	ldr	r0, [r4, #16]
 8009370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009374:	f104 0314 	add.w	r3, r4, #20
 8009378:	f019 091f 	ands.w	r9, r9, #31
 800937c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009380:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009384:	d02f      	beq.n	80093e6 <__lshift+0xc6>
 8009386:	f1c9 0e20 	rsb	lr, r9, #32
 800938a:	468a      	mov	sl, r1
 800938c:	f04f 0c00 	mov.w	ip, #0
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	fa02 f209 	lsl.w	r2, r2, r9
 8009396:	ea42 020c 	orr.w	r2, r2, ip
 800939a:	f84a 2b04 	str.w	r2, [sl], #4
 800939e:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a2:	4298      	cmp	r0, r3
 80093a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80093a8:	d8f2      	bhi.n	8009390 <__lshift+0x70>
 80093aa:	1b03      	subs	r3, r0, r4
 80093ac:	3b15      	subs	r3, #21
 80093ae:	f023 0303 	bic.w	r3, r3, #3
 80093b2:	3304      	adds	r3, #4
 80093b4:	f104 0215 	add.w	r2, r4, #21
 80093b8:	4290      	cmp	r0, r2
 80093ba:	bf38      	it	cc
 80093bc:	2304      	movcc	r3, #4
 80093be:	f841 c003 	str.w	ip, [r1, r3]
 80093c2:	f1bc 0f00 	cmp.w	ip, #0
 80093c6:	d001      	beq.n	80093cc <__lshift+0xac>
 80093c8:	f108 0602 	add.w	r6, r8, #2
 80093cc:	3e01      	subs	r6, #1
 80093ce:	4638      	mov	r0, r7
 80093d0:	612e      	str	r6, [r5, #16]
 80093d2:	4621      	mov	r1, r4
 80093d4:	f7ff fdd2 	bl	8008f7c <_Bfree>
 80093d8:	4628      	mov	r0, r5
 80093da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093de:	f842 0f04 	str.w	r0, [r2, #4]!
 80093e2:	3301      	adds	r3, #1
 80093e4:	e7c1      	b.n	800936a <__lshift+0x4a>
 80093e6:	3904      	subs	r1, #4
 80093e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80093f0:	4298      	cmp	r0, r3
 80093f2:	d8f9      	bhi.n	80093e8 <__lshift+0xc8>
 80093f4:	e7ea      	b.n	80093cc <__lshift+0xac>
 80093f6:	bf00      	nop
 80093f8:	0800a8d3 	.word	0x0800a8d3
 80093fc:	0800a8e4 	.word	0x0800a8e4

08009400 <__mcmp>:
 8009400:	b530      	push	{r4, r5, lr}
 8009402:	6902      	ldr	r2, [r0, #16]
 8009404:	690c      	ldr	r4, [r1, #16]
 8009406:	1b12      	subs	r2, r2, r4
 8009408:	d10e      	bne.n	8009428 <__mcmp+0x28>
 800940a:	f100 0314 	add.w	r3, r0, #20
 800940e:	3114      	adds	r1, #20
 8009410:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009418:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800941c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009420:	42a5      	cmp	r5, r4
 8009422:	d003      	beq.n	800942c <__mcmp+0x2c>
 8009424:	d305      	bcc.n	8009432 <__mcmp+0x32>
 8009426:	2201      	movs	r2, #1
 8009428:	4610      	mov	r0, r2
 800942a:	bd30      	pop	{r4, r5, pc}
 800942c:	4283      	cmp	r3, r0
 800942e:	d3f3      	bcc.n	8009418 <__mcmp+0x18>
 8009430:	e7fa      	b.n	8009428 <__mcmp+0x28>
 8009432:	f04f 32ff 	mov.w	r2, #4294967295
 8009436:	e7f7      	b.n	8009428 <__mcmp+0x28>

08009438 <__mdiff>:
 8009438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	460c      	mov	r4, r1
 800943e:	4606      	mov	r6, r0
 8009440:	4611      	mov	r1, r2
 8009442:	4620      	mov	r0, r4
 8009444:	4690      	mov	r8, r2
 8009446:	f7ff ffdb 	bl	8009400 <__mcmp>
 800944a:	1e05      	subs	r5, r0, #0
 800944c:	d110      	bne.n	8009470 <__mdiff+0x38>
 800944e:	4629      	mov	r1, r5
 8009450:	4630      	mov	r0, r6
 8009452:	f7ff fd53 	bl	8008efc <_Balloc>
 8009456:	b930      	cbnz	r0, 8009466 <__mdiff+0x2e>
 8009458:	4b3a      	ldr	r3, [pc, #232]	; (8009544 <__mdiff+0x10c>)
 800945a:	4602      	mov	r2, r0
 800945c:	f240 2132 	movw	r1, #562	; 0x232
 8009460:	4839      	ldr	r0, [pc, #228]	; (8009548 <__mdiff+0x110>)
 8009462:	f000 fb31 	bl	8009ac8 <__assert_func>
 8009466:	2301      	movs	r3, #1
 8009468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800946c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009470:	bfa4      	itt	ge
 8009472:	4643      	movge	r3, r8
 8009474:	46a0      	movge	r8, r4
 8009476:	4630      	mov	r0, r6
 8009478:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800947c:	bfa6      	itte	ge
 800947e:	461c      	movge	r4, r3
 8009480:	2500      	movge	r5, #0
 8009482:	2501      	movlt	r5, #1
 8009484:	f7ff fd3a 	bl	8008efc <_Balloc>
 8009488:	b920      	cbnz	r0, 8009494 <__mdiff+0x5c>
 800948a:	4b2e      	ldr	r3, [pc, #184]	; (8009544 <__mdiff+0x10c>)
 800948c:	4602      	mov	r2, r0
 800948e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009492:	e7e5      	b.n	8009460 <__mdiff+0x28>
 8009494:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009498:	6926      	ldr	r6, [r4, #16]
 800949a:	60c5      	str	r5, [r0, #12]
 800949c:	f104 0914 	add.w	r9, r4, #20
 80094a0:	f108 0514 	add.w	r5, r8, #20
 80094a4:	f100 0e14 	add.w	lr, r0, #20
 80094a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094b0:	f108 0210 	add.w	r2, r8, #16
 80094b4:	46f2      	mov	sl, lr
 80094b6:	2100      	movs	r1, #0
 80094b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80094bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094c0:	fa1f f883 	uxth.w	r8, r3
 80094c4:	fa11 f18b 	uxtah	r1, r1, fp
 80094c8:	0c1b      	lsrs	r3, r3, #16
 80094ca:	eba1 0808 	sub.w	r8, r1, r8
 80094ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094d6:	fa1f f888 	uxth.w	r8, r8
 80094da:	1419      	asrs	r1, r3, #16
 80094dc:	454e      	cmp	r6, r9
 80094de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094e2:	f84a 3b04 	str.w	r3, [sl], #4
 80094e6:	d8e7      	bhi.n	80094b8 <__mdiff+0x80>
 80094e8:	1b33      	subs	r3, r6, r4
 80094ea:	3b15      	subs	r3, #21
 80094ec:	f023 0303 	bic.w	r3, r3, #3
 80094f0:	3304      	adds	r3, #4
 80094f2:	3415      	adds	r4, #21
 80094f4:	42a6      	cmp	r6, r4
 80094f6:	bf38      	it	cc
 80094f8:	2304      	movcc	r3, #4
 80094fa:	441d      	add	r5, r3
 80094fc:	4473      	add	r3, lr
 80094fe:	469e      	mov	lr, r3
 8009500:	462e      	mov	r6, r5
 8009502:	4566      	cmp	r6, ip
 8009504:	d30e      	bcc.n	8009524 <__mdiff+0xec>
 8009506:	f10c 0203 	add.w	r2, ip, #3
 800950a:	1b52      	subs	r2, r2, r5
 800950c:	f022 0203 	bic.w	r2, r2, #3
 8009510:	3d03      	subs	r5, #3
 8009512:	45ac      	cmp	ip, r5
 8009514:	bf38      	it	cc
 8009516:	2200      	movcc	r2, #0
 8009518:	441a      	add	r2, r3
 800951a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800951e:	b17b      	cbz	r3, 8009540 <__mdiff+0x108>
 8009520:	6107      	str	r7, [r0, #16]
 8009522:	e7a3      	b.n	800946c <__mdiff+0x34>
 8009524:	f856 8b04 	ldr.w	r8, [r6], #4
 8009528:	fa11 f288 	uxtah	r2, r1, r8
 800952c:	1414      	asrs	r4, r2, #16
 800952e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009532:	b292      	uxth	r2, r2
 8009534:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009538:	f84e 2b04 	str.w	r2, [lr], #4
 800953c:	1421      	asrs	r1, r4, #16
 800953e:	e7e0      	b.n	8009502 <__mdiff+0xca>
 8009540:	3f01      	subs	r7, #1
 8009542:	e7ea      	b.n	800951a <__mdiff+0xe2>
 8009544:	0800a8d3 	.word	0x0800a8d3
 8009548:	0800a8e4 	.word	0x0800a8e4

0800954c <__d2b>:
 800954c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009550:	4689      	mov	r9, r1
 8009552:	2101      	movs	r1, #1
 8009554:	ec57 6b10 	vmov	r6, r7, d0
 8009558:	4690      	mov	r8, r2
 800955a:	f7ff fccf 	bl	8008efc <_Balloc>
 800955e:	4604      	mov	r4, r0
 8009560:	b930      	cbnz	r0, 8009570 <__d2b+0x24>
 8009562:	4602      	mov	r2, r0
 8009564:	4b25      	ldr	r3, [pc, #148]	; (80095fc <__d2b+0xb0>)
 8009566:	4826      	ldr	r0, [pc, #152]	; (8009600 <__d2b+0xb4>)
 8009568:	f240 310a 	movw	r1, #778	; 0x30a
 800956c:	f000 faac 	bl	8009ac8 <__assert_func>
 8009570:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009574:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009578:	bb35      	cbnz	r5, 80095c8 <__d2b+0x7c>
 800957a:	2e00      	cmp	r6, #0
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	d028      	beq.n	80095d2 <__d2b+0x86>
 8009580:	4668      	mov	r0, sp
 8009582:	9600      	str	r6, [sp, #0]
 8009584:	f7ff fd82 	bl	800908c <__lo0bits>
 8009588:	9900      	ldr	r1, [sp, #0]
 800958a:	b300      	cbz	r0, 80095ce <__d2b+0x82>
 800958c:	9a01      	ldr	r2, [sp, #4]
 800958e:	f1c0 0320 	rsb	r3, r0, #32
 8009592:	fa02 f303 	lsl.w	r3, r2, r3
 8009596:	430b      	orrs	r3, r1
 8009598:	40c2      	lsrs	r2, r0
 800959a:	6163      	str	r3, [r4, #20]
 800959c:	9201      	str	r2, [sp, #4]
 800959e:	9b01      	ldr	r3, [sp, #4]
 80095a0:	61a3      	str	r3, [r4, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bf14      	ite	ne
 80095a6:	2202      	movne	r2, #2
 80095a8:	2201      	moveq	r2, #1
 80095aa:	6122      	str	r2, [r4, #16]
 80095ac:	b1d5      	cbz	r5, 80095e4 <__d2b+0x98>
 80095ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095b2:	4405      	add	r5, r0
 80095b4:	f8c9 5000 	str.w	r5, [r9]
 80095b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095bc:	f8c8 0000 	str.w	r0, [r8]
 80095c0:	4620      	mov	r0, r4
 80095c2:	b003      	add	sp, #12
 80095c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095cc:	e7d5      	b.n	800957a <__d2b+0x2e>
 80095ce:	6161      	str	r1, [r4, #20]
 80095d0:	e7e5      	b.n	800959e <__d2b+0x52>
 80095d2:	a801      	add	r0, sp, #4
 80095d4:	f7ff fd5a 	bl	800908c <__lo0bits>
 80095d8:	9b01      	ldr	r3, [sp, #4]
 80095da:	6163      	str	r3, [r4, #20]
 80095dc:	2201      	movs	r2, #1
 80095de:	6122      	str	r2, [r4, #16]
 80095e0:	3020      	adds	r0, #32
 80095e2:	e7e3      	b.n	80095ac <__d2b+0x60>
 80095e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095ec:	f8c9 0000 	str.w	r0, [r9]
 80095f0:	6918      	ldr	r0, [r3, #16]
 80095f2:	f7ff fd2b 	bl	800904c <__hi0bits>
 80095f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095fa:	e7df      	b.n	80095bc <__d2b+0x70>
 80095fc:	0800a8d3 	.word	0x0800a8d3
 8009600:	0800a8e4 	.word	0x0800a8e4

08009604 <_calloc_r>:
 8009604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009606:	fba1 2402 	umull	r2, r4, r1, r2
 800960a:	b94c      	cbnz	r4, 8009620 <_calloc_r+0x1c>
 800960c:	4611      	mov	r1, r2
 800960e:	9201      	str	r2, [sp, #4]
 8009610:	f000 f87a 	bl	8009708 <_malloc_r>
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	4605      	mov	r5, r0
 8009618:	b930      	cbnz	r0, 8009628 <_calloc_r+0x24>
 800961a:	4628      	mov	r0, r5
 800961c:	b003      	add	sp, #12
 800961e:	bd30      	pop	{r4, r5, pc}
 8009620:	220c      	movs	r2, #12
 8009622:	6002      	str	r2, [r0, #0]
 8009624:	2500      	movs	r5, #0
 8009626:	e7f8      	b.n	800961a <_calloc_r+0x16>
 8009628:	4621      	mov	r1, r4
 800962a:	f7fe f94f 	bl	80078cc <memset>
 800962e:	e7f4      	b.n	800961a <_calloc_r+0x16>

08009630 <_free_r>:
 8009630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009632:	2900      	cmp	r1, #0
 8009634:	d044      	beq.n	80096c0 <_free_r+0x90>
 8009636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800963a:	9001      	str	r0, [sp, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f1a1 0404 	sub.w	r4, r1, #4
 8009642:	bfb8      	it	lt
 8009644:	18e4      	addlt	r4, r4, r3
 8009646:	f000 fa9b 	bl	8009b80 <__malloc_lock>
 800964a:	4a1e      	ldr	r2, [pc, #120]	; (80096c4 <_free_r+0x94>)
 800964c:	9801      	ldr	r0, [sp, #4]
 800964e:	6813      	ldr	r3, [r2, #0]
 8009650:	b933      	cbnz	r3, 8009660 <_free_r+0x30>
 8009652:	6063      	str	r3, [r4, #4]
 8009654:	6014      	str	r4, [r2, #0]
 8009656:	b003      	add	sp, #12
 8009658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800965c:	f000 ba96 	b.w	8009b8c <__malloc_unlock>
 8009660:	42a3      	cmp	r3, r4
 8009662:	d908      	bls.n	8009676 <_free_r+0x46>
 8009664:	6825      	ldr	r5, [r4, #0]
 8009666:	1961      	adds	r1, r4, r5
 8009668:	428b      	cmp	r3, r1
 800966a:	bf01      	itttt	eq
 800966c:	6819      	ldreq	r1, [r3, #0]
 800966e:	685b      	ldreq	r3, [r3, #4]
 8009670:	1949      	addeq	r1, r1, r5
 8009672:	6021      	streq	r1, [r4, #0]
 8009674:	e7ed      	b.n	8009652 <_free_r+0x22>
 8009676:	461a      	mov	r2, r3
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	b10b      	cbz	r3, 8009680 <_free_r+0x50>
 800967c:	42a3      	cmp	r3, r4
 800967e:	d9fa      	bls.n	8009676 <_free_r+0x46>
 8009680:	6811      	ldr	r1, [r2, #0]
 8009682:	1855      	adds	r5, r2, r1
 8009684:	42a5      	cmp	r5, r4
 8009686:	d10b      	bne.n	80096a0 <_free_r+0x70>
 8009688:	6824      	ldr	r4, [r4, #0]
 800968a:	4421      	add	r1, r4
 800968c:	1854      	adds	r4, r2, r1
 800968e:	42a3      	cmp	r3, r4
 8009690:	6011      	str	r1, [r2, #0]
 8009692:	d1e0      	bne.n	8009656 <_free_r+0x26>
 8009694:	681c      	ldr	r4, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	6053      	str	r3, [r2, #4]
 800969a:	4421      	add	r1, r4
 800969c:	6011      	str	r1, [r2, #0]
 800969e:	e7da      	b.n	8009656 <_free_r+0x26>
 80096a0:	d902      	bls.n	80096a8 <_free_r+0x78>
 80096a2:	230c      	movs	r3, #12
 80096a4:	6003      	str	r3, [r0, #0]
 80096a6:	e7d6      	b.n	8009656 <_free_r+0x26>
 80096a8:	6825      	ldr	r5, [r4, #0]
 80096aa:	1961      	adds	r1, r4, r5
 80096ac:	428b      	cmp	r3, r1
 80096ae:	bf04      	itt	eq
 80096b0:	6819      	ldreq	r1, [r3, #0]
 80096b2:	685b      	ldreq	r3, [r3, #4]
 80096b4:	6063      	str	r3, [r4, #4]
 80096b6:	bf04      	itt	eq
 80096b8:	1949      	addeq	r1, r1, r5
 80096ba:	6021      	streq	r1, [r4, #0]
 80096bc:	6054      	str	r4, [r2, #4]
 80096be:	e7ca      	b.n	8009656 <_free_r+0x26>
 80096c0:	b003      	add	sp, #12
 80096c2:	bd30      	pop	{r4, r5, pc}
 80096c4:	20007dc4 	.word	0x20007dc4

080096c8 <sbrk_aligned>:
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	4e0e      	ldr	r6, [pc, #56]	; (8009704 <sbrk_aligned+0x3c>)
 80096cc:	460c      	mov	r4, r1
 80096ce:	6831      	ldr	r1, [r6, #0]
 80096d0:	4605      	mov	r5, r0
 80096d2:	b911      	cbnz	r1, 80096da <sbrk_aligned+0x12>
 80096d4:	f000 f9e8 	bl	8009aa8 <_sbrk_r>
 80096d8:	6030      	str	r0, [r6, #0]
 80096da:	4621      	mov	r1, r4
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 f9e3 	bl	8009aa8 <_sbrk_r>
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	d00a      	beq.n	80096fc <sbrk_aligned+0x34>
 80096e6:	1cc4      	adds	r4, r0, #3
 80096e8:	f024 0403 	bic.w	r4, r4, #3
 80096ec:	42a0      	cmp	r0, r4
 80096ee:	d007      	beq.n	8009700 <sbrk_aligned+0x38>
 80096f0:	1a21      	subs	r1, r4, r0
 80096f2:	4628      	mov	r0, r5
 80096f4:	f000 f9d8 	bl	8009aa8 <_sbrk_r>
 80096f8:	3001      	adds	r0, #1
 80096fa:	d101      	bne.n	8009700 <sbrk_aligned+0x38>
 80096fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009700:	4620      	mov	r0, r4
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	20007dc8 	.word	0x20007dc8

08009708 <_malloc_r>:
 8009708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970c:	1ccd      	adds	r5, r1, #3
 800970e:	f025 0503 	bic.w	r5, r5, #3
 8009712:	3508      	adds	r5, #8
 8009714:	2d0c      	cmp	r5, #12
 8009716:	bf38      	it	cc
 8009718:	250c      	movcc	r5, #12
 800971a:	2d00      	cmp	r5, #0
 800971c:	4607      	mov	r7, r0
 800971e:	db01      	blt.n	8009724 <_malloc_r+0x1c>
 8009720:	42a9      	cmp	r1, r5
 8009722:	d905      	bls.n	8009730 <_malloc_r+0x28>
 8009724:	230c      	movs	r3, #12
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	2600      	movs	r6, #0
 800972a:	4630      	mov	r0, r6
 800972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009730:	4e2e      	ldr	r6, [pc, #184]	; (80097ec <_malloc_r+0xe4>)
 8009732:	f000 fa25 	bl	8009b80 <__malloc_lock>
 8009736:	6833      	ldr	r3, [r6, #0]
 8009738:	461c      	mov	r4, r3
 800973a:	bb34      	cbnz	r4, 800978a <_malloc_r+0x82>
 800973c:	4629      	mov	r1, r5
 800973e:	4638      	mov	r0, r7
 8009740:	f7ff ffc2 	bl	80096c8 <sbrk_aligned>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	4604      	mov	r4, r0
 8009748:	d14d      	bne.n	80097e6 <_malloc_r+0xde>
 800974a:	6834      	ldr	r4, [r6, #0]
 800974c:	4626      	mov	r6, r4
 800974e:	2e00      	cmp	r6, #0
 8009750:	d140      	bne.n	80097d4 <_malloc_r+0xcc>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	4631      	mov	r1, r6
 8009756:	4638      	mov	r0, r7
 8009758:	eb04 0803 	add.w	r8, r4, r3
 800975c:	f000 f9a4 	bl	8009aa8 <_sbrk_r>
 8009760:	4580      	cmp	r8, r0
 8009762:	d13a      	bne.n	80097da <_malloc_r+0xd2>
 8009764:	6821      	ldr	r1, [r4, #0]
 8009766:	3503      	adds	r5, #3
 8009768:	1a6d      	subs	r5, r5, r1
 800976a:	f025 0503 	bic.w	r5, r5, #3
 800976e:	3508      	adds	r5, #8
 8009770:	2d0c      	cmp	r5, #12
 8009772:	bf38      	it	cc
 8009774:	250c      	movcc	r5, #12
 8009776:	4629      	mov	r1, r5
 8009778:	4638      	mov	r0, r7
 800977a:	f7ff ffa5 	bl	80096c8 <sbrk_aligned>
 800977e:	3001      	adds	r0, #1
 8009780:	d02b      	beq.n	80097da <_malloc_r+0xd2>
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	442b      	add	r3, r5
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	e00e      	b.n	80097a8 <_malloc_r+0xa0>
 800978a:	6822      	ldr	r2, [r4, #0]
 800978c:	1b52      	subs	r2, r2, r5
 800978e:	d41e      	bmi.n	80097ce <_malloc_r+0xc6>
 8009790:	2a0b      	cmp	r2, #11
 8009792:	d916      	bls.n	80097c2 <_malloc_r+0xba>
 8009794:	1961      	adds	r1, r4, r5
 8009796:	42a3      	cmp	r3, r4
 8009798:	6025      	str	r5, [r4, #0]
 800979a:	bf18      	it	ne
 800979c:	6059      	strne	r1, [r3, #4]
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	bf08      	it	eq
 80097a2:	6031      	streq	r1, [r6, #0]
 80097a4:	5162      	str	r2, [r4, r5]
 80097a6:	604b      	str	r3, [r1, #4]
 80097a8:	4638      	mov	r0, r7
 80097aa:	f104 060b 	add.w	r6, r4, #11
 80097ae:	f000 f9ed 	bl	8009b8c <__malloc_unlock>
 80097b2:	f026 0607 	bic.w	r6, r6, #7
 80097b6:	1d23      	adds	r3, r4, #4
 80097b8:	1af2      	subs	r2, r6, r3
 80097ba:	d0b6      	beq.n	800972a <_malloc_r+0x22>
 80097bc:	1b9b      	subs	r3, r3, r6
 80097be:	50a3      	str	r3, [r4, r2]
 80097c0:	e7b3      	b.n	800972a <_malloc_r+0x22>
 80097c2:	6862      	ldr	r2, [r4, #4]
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	bf0c      	ite	eq
 80097c8:	6032      	streq	r2, [r6, #0]
 80097ca:	605a      	strne	r2, [r3, #4]
 80097cc:	e7ec      	b.n	80097a8 <_malloc_r+0xa0>
 80097ce:	4623      	mov	r3, r4
 80097d0:	6864      	ldr	r4, [r4, #4]
 80097d2:	e7b2      	b.n	800973a <_malloc_r+0x32>
 80097d4:	4634      	mov	r4, r6
 80097d6:	6876      	ldr	r6, [r6, #4]
 80097d8:	e7b9      	b.n	800974e <_malloc_r+0x46>
 80097da:	230c      	movs	r3, #12
 80097dc:	603b      	str	r3, [r7, #0]
 80097de:	4638      	mov	r0, r7
 80097e0:	f000 f9d4 	bl	8009b8c <__malloc_unlock>
 80097e4:	e7a1      	b.n	800972a <_malloc_r+0x22>
 80097e6:	6025      	str	r5, [r4, #0]
 80097e8:	e7de      	b.n	80097a8 <_malloc_r+0xa0>
 80097ea:	bf00      	nop
 80097ec:	20007dc4 	.word	0x20007dc4

080097f0 <__ssputs_r>:
 80097f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f4:	688e      	ldr	r6, [r1, #8]
 80097f6:	429e      	cmp	r6, r3
 80097f8:	4682      	mov	sl, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	4690      	mov	r8, r2
 80097fe:	461f      	mov	r7, r3
 8009800:	d838      	bhi.n	8009874 <__ssputs_r+0x84>
 8009802:	898a      	ldrh	r2, [r1, #12]
 8009804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009808:	d032      	beq.n	8009870 <__ssputs_r+0x80>
 800980a:	6825      	ldr	r5, [r4, #0]
 800980c:	6909      	ldr	r1, [r1, #16]
 800980e:	eba5 0901 	sub.w	r9, r5, r1
 8009812:	6965      	ldr	r5, [r4, #20]
 8009814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800981c:	3301      	adds	r3, #1
 800981e:	444b      	add	r3, r9
 8009820:	106d      	asrs	r5, r5, #1
 8009822:	429d      	cmp	r5, r3
 8009824:	bf38      	it	cc
 8009826:	461d      	movcc	r5, r3
 8009828:	0553      	lsls	r3, r2, #21
 800982a:	d531      	bpl.n	8009890 <__ssputs_r+0xa0>
 800982c:	4629      	mov	r1, r5
 800982e:	f7ff ff6b 	bl	8009708 <_malloc_r>
 8009832:	4606      	mov	r6, r0
 8009834:	b950      	cbnz	r0, 800984c <__ssputs_r+0x5c>
 8009836:	230c      	movs	r3, #12
 8009838:	f8ca 3000 	str.w	r3, [sl]
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	f04f 30ff 	mov.w	r0, #4294967295
 8009848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984c:	6921      	ldr	r1, [r4, #16]
 800984e:	464a      	mov	r2, r9
 8009850:	f7fe f82e 	bl	80078b0 <memcpy>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800985a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	6126      	str	r6, [r4, #16]
 8009862:	6165      	str	r5, [r4, #20]
 8009864:	444e      	add	r6, r9
 8009866:	eba5 0509 	sub.w	r5, r5, r9
 800986a:	6026      	str	r6, [r4, #0]
 800986c:	60a5      	str	r5, [r4, #8]
 800986e:	463e      	mov	r6, r7
 8009870:	42be      	cmp	r6, r7
 8009872:	d900      	bls.n	8009876 <__ssputs_r+0x86>
 8009874:	463e      	mov	r6, r7
 8009876:	6820      	ldr	r0, [r4, #0]
 8009878:	4632      	mov	r2, r6
 800987a:	4641      	mov	r1, r8
 800987c:	f000 f966 	bl	8009b4c <memmove>
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	1b9b      	subs	r3, r3, r6
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	4433      	add	r3, r6
 800988a:	6023      	str	r3, [r4, #0]
 800988c:	2000      	movs	r0, #0
 800988e:	e7db      	b.n	8009848 <__ssputs_r+0x58>
 8009890:	462a      	mov	r2, r5
 8009892:	f000 f981 	bl	8009b98 <_realloc_r>
 8009896:	4606      	mov	r6, r0
 8009898:	2800      	cmp	r0, #0
 800989a:	d1e1      	bne.n	8009860 <__ssputs_r+0x70>
 800989c:	6921      	ldr	r1, [r4, #16]
 800989e:	4650      	mov	r0, sl
 80098a0:	f7ff fec6 	bl	8009630 <_free_r>
 80098a4:	e7c7      	b.n	8009836 <__ssputs_r+0x46>
	...

080098a8 <_svfiprintf_r>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	4698      	mov	r8, r3
 80098ae:	898b      	ldrh	r3, [r1, #12]
 80098b0:	061b      	lsls	r3, r3, #24
 80098b2:	b09d      	sub	sp, #116	; 0x74
 80098b4:	4607      	mov	r7, r0
 80098b6:	460d      	mov	r5, r1
 80098b8:	4614      	mov	r4, r2
 80098ba:	d50e      	bpl.n	80098da <_svfiprintf_r+0x32>
 80098bc:	690b      	ldr	r3, [r1, #16]
 80098be:	b963      	cbnz	r3, 80098da <_svfiprintf_r+0x32>
 80098c0:	2140      	movs	r1, #64	; 0x40
 80098c2:	f7ff ff21 	bl	8009708 <_malloc_r>
 80098c6:	6028      	str	r0, [r5, #0]
 80098c8:	6128      	str	r0, [r5, #16]
 80098ca:	b920      	cbnz	r0, 80098d6 <_svfiprintf_r+0x2e>
 80098cc:	230c      	movs	r3, #12
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295
 80098d4:	e0d1      	b.n	8009a7a <_svfiprintf_r+0x1d2>
 80098d6:	2340      	movs	r3, #64	; 0x40
 80098d8:	616b      	str	r3, [r5, #20]
 80098da:	2300      	movs	r3, #0
 80098dc:	9309      	str	r3, [sp, #36]	; 0x24
 80098de:	2320      	movs	r3, #32
 80098e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80098e8:	2330      	movs	r3, #48	; 0x30
 80098ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a94 <_svfiprintf_r+0x1ec>
 80098ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098f2:	f04f 0901 	mov.w	r9, #1
 80098f6:	4623      	mov	r3, r4
 80098f8:	469a      	mov	sl, r3
 80098fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098fe:	b10a      	cbz	r2, 8009904 <_svfiprintf_r+0x5c>
 8009900:	2a25      	cmp	r2, #37	; 0x25
 8009902:	d1f9      	bne.n	80098f8 <_svfiprintf_r+0x50>
 8009904:	ebba 0b04 	subs.w	fp, sl, r4
 8009908:	d00b      	beq.n	8009922 <_svfiprintf_r+0x7a>
 800990a:	465b      	mov	r3, fp
 800990c:	4622      	mov	r2, r4
 800990e:	4629      	mov	r1, r5
 8009910:	4638      	mov	r0, r7
 8009912:	f7ff ff6d 	bl	80097f0 <__ssputs_r>
 8009916:	3001      	adds	r0, #1
 8009918:	f000 80aa 	beq.w	8009a70 <_svfiprintf_r+0x1c8>
 800991c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800991e:	445a      	add	r2, fp
 8009920:	9209      	str	r2, [sp, #36]	; 0x24
 8009922:	f89a 3000 	ldrb.w	r3, [sl]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 80a2 	beq.w	8009a70 <_svfiprintf_r+0x1c8>
 800992c:	2300      	movs	r3, #0
 800992e:	f04f 32ff 	mov.w	r2, #4294967295
 8009932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009936:	f10a 0a01 	add.w	sl, sl, #1
 800993a:	9304      	str	r3, [sp, #16]
 800993c:	9307      	str	r3, [sp, #28]
 800993e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009942:	931a      	str	r3, [sp, #104]	; 0x68
 8009944:	4654      	mov	r4, sl
 8009946:	2205      	movs	r2, #5
 8009948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800994c:	4851      	ldr	r0, [pc, #324]	; (8009a94 <_svfiprintf_r+0x1ec>)
 800994e:	f7f6 fc4f 	bl	80001f0 <memchr>
 8009952:	9a04      	ldr	r2, [sp, #16]
 8009954:	b9d8      	cbnz	r0, 800998e <_svfiprintf_r+0xe6>
 8009956:	06d0      	lsls	r0, r2, #27
 8009958:	bf44      	itt	mi
 800995a:	2320      	movmi	r3, #32
 800995c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009960:	0711      	lsls	r1, r2, #28
 8009962:	bf44      	itt	mi
 8009964:	232b      	movmi	r3, #43	; 0x2b
 8009966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800996a:	f89a 3000 	ldrb.w	r3, [sl]
 800996e:	2b2a      	cmp	r3, #42	; 0x2a
 8009970:	d015      	beq.n	800999e <_svfiprintf_r+0xf6>
 8009972:	9a07      	ldr	r2, [sp, #28]
 8009974:	4654      	mov	r4, sl
 8009976:	2000      	movs	r0, #0
 8009978:	f04f 0c0a 	mov.w	ip, #10
 800997c:	4621      	mov	r1, r4
 800997e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009982:	3b30      	subs	r3, #48	; 0x30
 8009984:	2b09      	cmp	r3, #9
 8009986:	d94e      	bls.n	8009a26 <_svfiprintf_r+0x17e>
 8009988:	b1b0      	cbz	r0, 80099b8 <_svfiprintf_r+0x110>
 800998a:	9207      	str	r2, [sp, #28]
 800998c:	e014      	b.n	80099b8 <_svfiprintf_r+0x110>
 800998e:	eba0 0308 	sub.w	r3, r0, r8
 8009992:	fa09 f303 	lsl.w	r3, r9, r3
 8009996:	4313      	orrs	r3, r2
 8009998:	9304      	str	r3, [sp, #16]
 800999a:	46a2      	mov	sl, r4
 800999c:	e7d2      	b.n	8009944 <_svfiprintf_r+0x9c>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	1d19      	adds	r1, r3, #4
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	9103      	str	r1, [sp, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	bfbb      	ittet	lt
 80099aa:	425b      	neglt	r3, r3
 80099ac:	f042 0202 	orrlt.w	r2, r2, #2
 80099b0:	9307      	strge	r3, [sp, #28]
 80099b2:	9307      	strlt	r3, [sp, #28]
 80099b4:	bfb8      	it	lt
 80099b6:	9204      	strlt	r2, [sp, #16]
 80099b8:	7823      	ldrb	r3, [r4, #0]
 80099ba:	2b2e      	cmp	r3, #46	; 0x2e
 80099bc:	d10c      	bne.n	80099d8 <_svfiprintf_r+0x130>
 80099be:	7863      	ldrb	r3, [r4, #1]
 80099c0:	2b2a      	cmp	r3, #42	; 0x2a
 80099c2:	d135      	bne.n	8009a30 <_svfiprintf_r+0x188>
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	1d1a      	adds	r2, r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	9203      	str	r2, [sp, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	bfb8      	it	lt
 80099d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80099d4:	3402      	adds	r4, #2
 80099d6:	9305      	str	r3, [sp, #20]
 80099d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009aa4 <_svfiprintf_r+0x1fc>
 80099dc:	7821      	ldrb	r1, [r4, #0]
 80099de:	2203      	movs	r2, #3
 80099e0:	4650      	mov	r0, sl
 80099e2:	f7f6 fc05 	bl	80001f0 <memchr>
 80099e6:	b140      	cbz	r0, 80099fa <_svfiprintf_r+0x152>
 80099e8:	2340      	movs	r3, #64	; 0x40
 80099ea:	eba0 000a 	sub.w	r0, r0, sl
 80099ee:	fa03 f000 	lsl.w	r0, r3, r0
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	4303      	orrs	r3, r0
 80099f6:	3401      	adds	r4, #1
 80099f8:	9304      	str	r3, [sp, #16]
 80099fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fe:	4826      	ldr	r0, [pc, #152]	; (8009a98 <_svfiprintf_r+0x1f0>)
 8009a00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a04:	2206      	movs	r2, #6
 8009a06:	f7f6 fbf3 	bl	80001f0 <memchr>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d038      	beq.n	8009a80 <_svfiprintf_r+0x1d8>
 8009a0e:	4b23      	ldr	r3, [pc, #140]	; (8009a9c <_svfiprintf_r+0x1f4>)
 8009a10:	bb1b      	cbnz	r3, 8009a5a <_svfiprintf_r+0x1b2>
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	3307      	adds	r3, #7
 8009a16:	f023 0307 	bic.w	r3, r3, #7
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	9303      	str	r3, [sp, #12]
 8009a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a20:	4433      	add	r3, r6
 8009a22:	9309      	str	r3, [sp, #36]	; 0x24
 8009a24:	e767      	b.n	80098f6 <_svfiprintf_r+0x4e>
 8009a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	e7a5      	b.n	800997c <_svfiprintf_r+0xd4>
 8009a30:	2300      	movs	r3, #0
 8009a32:	3401      	adds	r4, #1
 8009a34:	9305      	str	r3, [sp, #20]
 8009a36:	4619      	mov	r1, r3
 8009a38:	f04f 0c0a 	mov.w	ip, #10
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a42:	3a30      	subs	r2, #48	; 0x30
 8009a44:	2a09      	cmp	r2, #9
 8009a46:	d903      	bls.n	8009a50 <_svfiprintf_r+0x1a8>
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0c5      	beq.n	80099d8 <_svfiprintf_r+0x130>
 8009a4c:	9105      	str	r1, [sp, #20]
 8009a4e:	e7c3      	b.n	80099d8 <_svfiprintf_r+0x130>
 8009a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a54:	4604      	mov	r4, r0
 8009a56:	2301      	movs	r3, #1
 8009a58:	e7f0      	b.n	8009a3c <_svfiprintf_r+0x194>
 8009a5a:	ab03      	add	r3, sp, #12
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	462a      	mov	r2, r5
 8009a60:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <_svfiprintf_r+0x1f8>)
 8009a62:	a904      	add	r1, sp, #16
 8009a64:	4638      	mov	r0, r7
 8009a66:	f7fd ffd9 	bl	8007a1c <_printf_float>
 8009a6a:	1c42      	adds	r2, r0, #1
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	d1d6      	bne.n	8009a1e <_svfiprintf_r+0x176>
 8009a70:	89ab      	ldrh	r3, [r5, #12]
 8009a72:	065b      	lsls	r3, r3, #25
 8009a74:	f53f af2c 	bmi.w	80098d0 <_svfiprintf_r+0x28>
 8009a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a7a:	b01d      	add	sp, #116	; 0x74
 8009a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a80:	ab03      	add	r3, sp, #12
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	462a      	mov	r2, r5
 8009a86:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <_svfiprintf_r+0x1f8>)
 8009a88:	a904      	add	r1, sp, #16
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	f7fe fa6a 	bl	8007f64 <_printf_i>
 8009a90:	e7eb      	b.n	8009a6a <_svfiprintf_r+0x1c2>
 8009a92:	bf00      	nop
 8009a94:	0800aa3c 	.word	0x0800aa3c
 8009a98:	0800aa46 	.word	0x0800aa46
 8009a9c:	08007a1d 	.word	0x08007a1d
 8009aa0:	080097f1 	.word	0x080097f1
 8009aa4:	0800aa42 	.word	0x0800aa42

08009aa8 <_sbrk_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d06      	ldr	r5, [pc, #24]	; (8009ac4 <_sbrk_r+0x1c>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	f7f9 fbda 	bl	800326c <_sbrk>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_sbrk_r+0x1a>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_sbrk_r+0x1a>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	20007dcc 	.word	0x20007dcc

08009ac8 <__assert_func>:
 8009ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aca:	4614      	mov	r4, r2
 8009acc:	461a      	mov	r2, r3
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <__assert_func+0x2c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	68d8      	ldr	r0, [r3, #12]
 8009ad6:	b14c      	cbz	r4, 8009aec <__assert_func+0x24>
 8009ad8:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <__assert_func+0x30>)
 8009ada:	9100      	str	r1, [sp, #0]
 8009adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ae0:	4906      	ldr	r1, [pc, #24]	; (8009afc <__assert_func+0x34>)
 8009ae2:	462b      	mov	r3, r5
 8009ae4:	f000 f80e 	bl	8009b04 <fiprintf>
 8009ae8:	f000 faac 	bl	800a044 <abort>
 8009aec:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <__assert_func+0x38>)
 8009aee:	461c      	mov	r4, r3
 8009af0:	e7f3      	b.n	8009ada <__assert_func+0x12>
 8009af2:	bf00      	nop
 8009af4:	20000144 	.word	0x20000144
 8009af8:	0800aa4d 	.word	0x0800aa4d
 8009afc:	0800aa5a 	.word	0x0800aa5a
 8009b00:	0800aa88 	.word	0x0800aa88

08009b04 <fiprintf>:
 8009b04:	b40e      	push	{r1, r2, r3}
 8009b06:	b503      	push	{r0, r1, lr}
 8009b08:	4601      	mov	r1, r0
 8009b0a:	ab03      	add	r3, sp, #12
 8009b0c:	4805      	ldr	r0, [pc, #20]	; (8009b24 <fiprintf+0x20>)
 8009b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b12:	6800      	ldr	r0, [r0, #0]
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	f000 f897 	bl	8009c48 <_vfiprintf_r>
 8009b1a:	b002      	add	sp, #8
 8009b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b20:	b003      	add	sp, #12
 8009b22:	4770      	bx	lr
 8009b24:	20000144 	.word	0x20000144

08009b28 <__ascii_mbtowc>:
 8009b28:	b082      	sub	sp, #8
 8009b2a:	b901      	cbnz	r1, 8009b2e <__ascii_mbtowc+0x6>
 8009b2c:	a901      	add	r1, sp, #4
 8009b2e:	b142      	cbz	r2, 8009b42 <__ascii_mbtowc+0x1a>
 8009b30:	b14b      	cbz	r3, 8009b46 <__ascii_mbtowc+0x1e>
 8009b32:	7813      	ldrb	r3, [r2, #0]
 8009b34:	600b      	str	r3, [r1, #0]
 8009b36:	7812      	ldrb	r2, [r2, #0]
 8009b38:	1e10      	subs	r0, r2, #0
 8009b3a:	bf18      	it	ne
 8009b3c:	2001      	movne	r0, #1
 8009b3e:	b002      	add	sp, #8
 8009b40:	4770      	bx	lr
 8009b42:	4610      	mov	r0, r2
 8009b44:	e7fb      	b.n	8009b3e <__ascii_mbtowc+0x16>
 8009b46:	f06f 0001 	mvn.w	r0, #1
 8009b4a:	e7f8      	b.n	8009b3e <__ascii_mbtowc+0x16>

08009b4c <memmove>:
 8009b4c:	4288      	cmp	r0, r1
 8009b4e:	b510      	push	{r4, lr}
 8009b50:	eb01 0402 	add.w	r4, r1, r2
 8009b54:	d902      	bls.n	8009b5c <memmove+0x10>
 8009b56:	4284      	cmp	r4, r0
 8009b58:	4623      	mov	r3, r4
 8009b5a:	d807      	bhi.n	8009b6c <memmove+0x20>
 8009b5c:	1e43      	subs	r3, r0, #1
 8009b5e:	42a1      	cmp	r1, r4
 8009b60:	d008      	beq.n	8009b74 <memmove+0x28>
 8009b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b6a:	e7f8      	b.n	8009b5e <memmove+0x12>
 8009b6c:	4402      	add	r2, r0
 8009b6e:	4601      	mov	r1, r0
 8009b70:	428a      	cmp	r2, r1
 8009b72:	d100      	bne.n	8009b76 <memmove+0x2a>
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b7e:	e7f7      	b.n	8009b70 <memmove+0x24>

08009b80 <__malloc_lock>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__malloc_lock+0x8>)
 8009b82:	f000 bc1f 	b.w	800a3c4 <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	20007dd0 	.word	0x20007dd0

08009b8c <__malloc_unlock>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__malloc_unlock+0x8>)
 8009b8e:	f000 bc1a 	b.w	800a3c6 <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	20007dd0 	.word	0x20007dd0

08009b98 <_realloc_r>:
 8009b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	4614      	mov	r4, r2
 8009ba0:	460e      	mov	r6, r1
 8009ba2:	b921      	cbnz	r1, 8009bae <_realloc_r+0x16>
 8009ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba8:	4611      	mov	r1, r2
 8009baa:	f7ff bdad 	b.w	8009708 <_malloc_r>
 8009bae:	b92a      	cbnz	r2, 8009bbc <_realloc_r+0x24>
 8009bb0:	f7ff fd3e 	bl	8009630 <_free_r>
 8009bb4:	4625      	mov	r5, r4
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bbc:	f000 fc6a 	bl	800a494 <_malloc_usable_size_r>
 8009bc0:	4284      	cmp	r4, r0
 8009bc2:	4607      	mov	r7, r0
 8009bc4:	d802      	bhi.n	8009bcc <_realloc_r+0x34>
 8009bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bca:	d812      	bhi.n	8009bf2 <_realloc_r+0x5a>
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4640      	mov	r0, r8
 8009bd0:	f7ff fd9a 	bl	8009708 <_malloc_r>
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d0ed      	beq.n	8009bb6 <_realloc_r+0x1e>
 8009bda:	42bc      	cmp	r4, r7
 8009bdc:	4622      	mov	r2, r4
 8009bde:	4631      	mov	r1, r6
 8009be0:	bf28      	it	cs
 8009be2:	463a      	movcs	r2, r7
 8009be4:	f7fd fe64 	bl	80078b0 <memcpy>
 8009be8:	4631      	mov	r1, r6
 8009bea:	4640      	mov	r0, r8
 8009bec:	f7ff fd20 	bl	8009630 <_free_r>
 8009bf0:	e7e1      	b.n	8009bb6 <_realloc_r+0x1e>
 8009bf2:	4635      	mov	r5, r6
 8009bf4:	e7df      	b.n	8009bb6 <_realloc_r+0x1e>

08009bf6 <__sfputc_r>:
 8009bf6:	6893      	ldr	r3, [r2, #8]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	b410      	push	{r4}
 8009bfe:	6093      	str	r3, [r2, #8]
 8009c00:	da08      	bge.n	8009c14 <__sfputc_r+0x1e>
 8009c02:	6994      	ldr	r4, [r2, #24]
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	db01      	blt.n	8009c0c <__sfputc_r+0x16>
 8009c08:	290a      	cmp	r1, #10
 8009c0a:	d103      	bne.n	8009c14 <__sfputc_r+0x1e>
 8009c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c10:	f000 b94a 	b.w	8009ea8 <__swbuf_r>
 8009c14:	6813      	ldr	r3, [r2, #0]
 8009c16:	1c58      	adds	r0, r3, #1
 8009c18:	6010      	str	r0, [r2, #0]
 8009c1a:	7019      	strb	r1, [r3, #0]
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <__sfputs_r>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	4606      	mov	r6, r0
 8009c28:	460f      	mov	r7, r1
 8009c2a:	4614      	mov	r4, r2
 8009c2c:	18d5      	adds	r5, r2, r3
 8009c2e:	42ac      	cmp	r4, r5
 8009c30:	d101      	bne.n	8009c36 <__sfputs_r+0x12>
 8009c32:	2000      	movs	r0, #0
 8009c34:	e007      	b.n	8009c46 <__sfputs_r+0x22>
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	463a      	mov	r2, r7
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7ff ffda 	bl	8009bf6 <__sfputc_r>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d1f3      	bne.n	8009c2e <__sfputs_r+0xa>
 8009c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c48 <_vfiprintf_r>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	b09d      	sub	sp, #116	; 0x74
 8009c50:	4614      	mov	r4, r2
 8009c52:	4698      	mov	r8, r3
 8009c54:	4606      	mov	r6, r0
 8009c56:	b118      	cbz	r0, 8009c60 <_vfiprintf_r+0x18>
 8009c58:	6983      	ldr	r3, [r0, #24]
 8009c5a:	b90b      	cbnz	r3, 8009c60 <_vfiprintf_r+0x18>
 8009c5c:	f000 fb14 	bl	800a288 <__sinit>
 8009c60:	4b89      	ldr	r3, [pc, #548]	; (8009e88 <_vfiprintf_r+0x240>)
 8009c62:	429d      	cmp	r5, r3
 8009c64:	d11b      	bne.n	8009c9e <_vfiprintf_r+0x56>
 8009c66:	6875      	ldr	r5, [r6, #4]
 8009c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c6a:	07d9      	lsls	r1, r3, #31
 8009c6c:	d405      	bmi.n	8009c7a <_vfiprintf_r+0x32>
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	059a      	lsls	r2, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_vfiprintf_r+0x32>
 8009c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c76:	f000 fba5 	bl	800a3c4 <__retarget_lock_acquire_recursive>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	071b      	lsls	r3, r3, #28
 8009c7e:	d501      	bpl.n	8009c84 <_vfiprintf_r+0x3c>
 8009c80:	692b      	ldr	r3, [r5, #16]
 8009c82:	b9eb      	cbnz	r3, 8009cc0 <_vfiprintf_r+0x78>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 f96e 	bl	8009f68 <__swsetup_r>
 8009c8c:	b1c0      	cbz	r0, 8009cc0 <_vfiprintf_r+0x78>
 8009c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c90:	07dc      	lsls	r4, r3, #31
 8009c92:	d50e      	bpl.n	8009cb2 <_vfiprintf_r+0x6a>
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	b01d      	add	sp, #116	; 0x74
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9e:	4b7b      	ldr	r3, [pc, #492]	; (8009e8c <_vfiprintf_r+0x244>)
 8009ca0:	429d      	cmp	r5, r3
 8009ca2:	d101      	bne.n	8009ca8 <_vfiprintf_r+0x60>
 8009ca4:	68b5      	ldr	r5, [r6, #8]
 8009ca6:	e7df      	b.n	8009c68 <_vfiprintf_r+0x20>
 8009ca8:	4b79      	ldr	r3, [pc, #484]	; (8009e90 <_vfiprintf_r+0x248>)
 8009caa:	429d      	cmp	r5, r3
 8009cac:	bf08      	it	eq
 8009cae:	68f5      	ldreq	r5, [r6, #12]
 8009cb0:	e7da      	b.n	8009c68 <_vfiprintf_r+0x20>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	0598      	lsls	r0, r3, #22
 8009cb6:	d4ed      	bmi.n	8009c94 <_vfiprintf_r+0x4c>
 8009cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cba:	f000 fb84 	bl	800a3c6 <__retarget_lock_release_recursive>
 8009cbe:	e7e9      	b.n	8009c94 <_vfiprintf_r+0x4c>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc4:	2320      	movs	r3, #32
 8009cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cce:	2330      	movs	r3, #48	; 0x30
 8009cd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e94 <_vfiprintf_r+0x24c>
 8009cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cd8:	f04f 0901 	mov.w	r9, #1
 8009cdc:	4623      	mov	r3, r4
 8009cde:	469a      	mov	sl, r3
 8009ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce4:	b10a      	cbz	r2, 8009cea <_vfiprintf_r+0xa2>
 8009ce6:	2a25      	cmp	r2, #37	; 0x25
 8009ce8:	d1f9      	bne.n	8009cde <_vfiprintf_r+0x96>
 8009cea:	ebba 0b04 	subs.w	fp, sl, r4
 8009cee:	d00b      	beq.n	8009d08 <_vfiprintf_r+0xc0>
 8009cf0:	465b      	mov	r3, fp
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ff94 	bl	8009c24 <__sfputs_r>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f000 80aa 	beq.w	8009e56 <_vfiprintf_r+0x20e>
 8009d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d04:	445a      	add	r2, fp
 8009d06:	9209      	str	r2, [sp, #36]	; 0x24
 8009d08:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 80a2 	beq.w	8009e56 <_vfiprintf_r+0x20e>
 8009d12:	2300      	movs	r3, #0
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d1c:	f10a 0a01 	add.w	sl, sl, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d28:	931a      	str	r3, [sp, #104]	; 0x68
 8009d2a:	4654      	mov	r4, sl
 8009d2c:	2205      	movs	r2, #5
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	4858      	ldr	r0, [pc, #352]	; (8009e94 <_vfiprintf_r+0x24c>)
 8009d34:	f7f6 fa5c 	bl	80001f0 <memchr>
 8009d38:	9a04      	ldr	r2, [sp, #16]
 8009d3a:	b9d8      	cbnz	r0, 8009d74 <_vfiprintf_r+0x12c>
 8009d3c:	06d1      	lsls	r1, r2, #27
 8009d3e:	bf44      	itt	mi
 8009d40:	2320      	movmi	r3, #32
 8009d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d46:	0713      	lsls	r3, r2, #28
 8009d48:	bf44      	itt	mi
 8009d4a:	232b      	movmi	r3, #43	; 0x2b
 8009d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d50:	f89a 3000 	ldrb.w	r3, [sl]
 8009d54:	2b2a      	cmp	r3, #42	; 0x2a
 8009d56:	d015      	beq.n	8009d84 <_vfiprintf_r+0x13c>
 8009d58:	9a07      	ldr	r2, [sp, #28]
 8009d5a:	4654      	mov	r4, sl
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f04f 0c0a 	mov.w	ip, #10
 8009d62:	4621      	mov	r1, r4
 8009d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d68:	3b30      	subs	r3, #48	; 0x30
 8009d6a:	2b09      	cmp	r3, #9
 8009d6c:	d94e      	bls.n	8009e0c <_vfiprintf_r+0x1c4>
 8009d6e:	b1b0      	cbz	r0, 8009d9e <_vfiprintf_r+0x156>
 8009d70:	9207      	str	r2, [sp, #28]
 8009d72:	e014      	b.n	8009d9e <_vfiprintf_r+0x156>
 8009d74:	eba0 0308 	sub.w	r3, r0, r8
 8009d78:	fa09 f303 	lsl.w	r3, r9, r3
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	46a2      	mov	sl, r4
 8009d82:	e7d2      	b.n	8009d2a <_vfiprintf_r+0xe2>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	1d19      	adds	r1, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9103      	str	r1, [sp, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfbb      	ittet	lt
 8009d90:	425b      	neglt	r3, r3
 8009d92:	f042 0202 	orrlt.w	r2, r2, #2
 8009d96:	9307      	strge	r3, [sp, #28]
 8009d98:	9307      	strlt	r3, [sp, #28]
 8009d9a:	bfb8      	it	lt
 8009d9c:	9204      	strlt	r2, [sp, #16]
 8009d9e:	7823      	ldrb	r3, [r4, #0]
 8009da0:	2b2e      	cmp	r3, #46	; 0x2e
 8009da2:	d10c      	bne.n	8009dbe <_vfiprintf_r+0x176>
 8009da4:	7863      	ldrb	r3, [r4, #1]
 8009da6:	2b2a      	cmp	r3, #42	; 0x2a
 8009da8:	d135      	bne.n	8009e16 <_vfiprintf_r+0x1ce>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	1d1a      	adds	r2, r3, #4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	9203      	str	r2, [sp, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	bfb8      	it	lt
 8009db6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dba:	3402      	adds	r4, #2
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ea4 <_vfiprintf_r+0x25c>
 8009dc2:	7821      	ldrb	r1, [r4, #0]
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	4650      	mov	r0, sl
 8009dc8:	f7f6 fa12 	bl	80001f0 <memchr>
 8009dcc:	b140      	cbz	r0, 8009de0 <_vfiprintf_r+0x198>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	eba0 000a 	sub.w	r0, r0, sl
 8009dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	4303      	orrs	r3, r0
 8009ddc:	3401      	adds	r4, #1
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de4:	482c      	ldr	r0, [pc, #176]	; (8009e98 <_vfiprintf_r+0x250>)
 8009de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dea:	2206      	movs	r2, #6
 8009dec:	f7f6 fa00 	bl	80001f0 <memchr>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d03f      	beq.n	8009e74 <_vfiprintf_r+0x22c>
 8009df4:	4b29      	ldr	r3, [pc, #164]	; (8009e9c <_vfiprintf_r+0x254>)
 8009df6:	bb1b      	cbnz	r3, 8009e40 <_vfiprintf_r+0x1f8>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	3307      	adds	r3, #7
 8009dfc:	f023 0307 	bic.w	r3, r3, #7
 8009e00:	3308      	adds	r3, #8
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	443b      	add	r3, r7
 8009e08:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0a:	e767      	b.n	8009cdc <_vfiprintf_r+0x94>
 8009e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e10:	460c      	mov	r4, r1
 8009e12:	2001      	movs	r0, #1
 8009e14:	e7a5      	b.n	8009d62 <_vfiprintf_r+0x11a>
 8009e16:	2300      	movs	r3, #0
 8009e18:	3401      	adds	r4, #1
 8009e1a:	9305      	str	r3, [sp, #20]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f04f 0c0a 	mov.w	ip, #10
 8009e22:	4620      	mov	r0, r4
 8009e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e28:	3a30      	subs	r2, #48	; 0x30
 8009e2a:	2a09      	cmp	r2, #9
 8009e2c:	d903      	bls.n	8009e36 <_vfiprintf_r+0x1ee>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0c5      	beq.n	8009dbe <_vfiprintf_r+0x176>
 8009e32:	9105      	str	r1, [sp, #20]
 8009e34:	e7c3      	b.n	8009dbe <_vfiprintf_r+0x176>
 8009e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e7f0      	b.n	8009e22 <_vfiprintf_r+0x1da>
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	462a      	mov	r2, r5
 8009e46:	4b16      	ldr	r3, [pc, #88]	; (8009ea0 <_vfiprintf_r+0x258>)
 8009e48:	a904      	add	r1, sp, #16
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f7fd fde6 	bl	8007a1c <_printf_float>
 8009e50:	4607      	mov	r7, r0
 8009e52:	1c78      	adds	r0, r7, #1
 8009e54:	d1d6      	bne.n	8009e04 <_vfiprintf_r+0x1bc>
 8009e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e58:	07d9      	lsls	r1, r3, #31
 8009e5a:	d405      	bmi.n	8009e68 <_vfiprintf_r+0x220>
 8009e5c:	89ab      	ldrh	r3, [r5, #12]
 8009e5e:	059a      	lsls	r2, r3, #22
 8009e60:	d402      	bmi.n	8009e68 <_vfiprintf_r+0x220>
 8009e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e64:	f000 faaf 	bl	800a3c6 <__retarget_lock_release_recursive>
 8009e68:	89ab      	ldrh	r3, [r5, #12]
 8009e6a:	065b      	lsls	r3, r3, #25
 8009e6c:	f53f af12 	bmi.w	8009c94 <_vfiprintf_r+0x4c>
 8009e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e72:	e711      	b.n	8009c98 <_vfiprintf_r+0x50>
 8009e74:	ab03      	add	r3, sp, #12
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	462a      	mov	r2, r5
 8009e7a:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <_vfiprintf_r+0x258>)
 8009e7c:	a904      	add	r1, sp, #16
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f7fe f870 	bl	8007f64 <_printf_i>
 8009e84:	e7e4      	b.n	8009e50 <_vfiprintf_r+0x208>
 8009e86:	bf00      	nop
 8009e88:	0800abb4 	.word	0x0800abb4
 8009e8c:	0800abd4 	.word	0x0800abd4
 8009e90:	0800ab94 	.word	0x0800ab94
 8009e94:	0800aa3c 	.word	0x0800aa3c
 8009e98:	0800aa46 	.word	0x0800aa46
 8009e9c:	08007a1d 	.word	0x08007a1d
 8009ea0:	08009c25 	.word	0x08009c25
 8009ea4:	0800aa42 	.word	0x0800aa42

08009ea8 <__swbuf_r>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	460e      	mov	r6, r1
 8009eac:	4614      	mov	r4, r2
 8009eae:	4605      	mov	r5, r0
 8009eb0:	b118      	cbz	r0, 8009eba <__swbuf_r+0x12>
 8009eb2:	6983      	ldr	r3, [r0, #24]
 8009eb4:	b90b      	cbnz	r3, 8009eba <__swbuf_r+0x12>
 8009eb6:	f000 f9e7 	bl	800a288 <__sinit>
 8009eba:	4b21      	ldr	r3, [pc, #132]	; (8009f40 <__swbuf_r+0x98>)
 8009ebc:	429c      	cmp	r4, r3
 8009ebe:	d12b      	bne.n	8009f18 <__swbuf_r+0x70>
 8009ec0:	686c      	ldr	r4, [r5, #4]
 8009ec2:	69a3      	ldr	r3, [r4, #24]
 8009ec4:	60a3      	str	r3, [r4, #8]
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	071a      	lsls	r2, r3, #28
 8009eca:	d52f      	bpl.n	8009f2c <__swbuf_r+0x84>
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	b36b      	cbz	r3, 8009f2c <__swbuf_r+0x84>
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	6820      	ldr	r0, [r4, #0]
 8009ed4:	1ac0      	subs	r0, r0, r3
 8009ed6:	6963      	ldr	r3, [r4, #20]
 8009ed8:	b2f6      	uxtb	r6, r6
 8009eda:	4283      	cmp	r3, r0
 8009edc:	4637      	mov	r7, r6
 8009ede:	dc04      	bgt.n	8009eea <__swbuf_r+0x42>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f000 f93c 	bl	800a160 <_fflush_r>
 8009ee8:	bb30      	cbnz	r0, 8009f38 <__swbuf_r+0x90>
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	60a3      	str	r3, [r4, #8]
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	6022      	str	r2, [r4, #0]
 8009ef6:	701e      	strb	r6, [r3, #0]
 8009ef8:	6963      	ldr	r3, [r4, #20]
 8009efa:	3001      	adds	r0, #1
 8009efc:	4283      	cmp	r3, r0
 8009efe:	d004      	beq.n	8009f0a <__swbuf_r+0x62>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	07db      	lsls	r3, r3, #31
 8009f04:	d506      	bpl.n	8009f14 <__swbuf_r+0x6c>
 8009f06:	2e0a      	cmp	r6, #10
 8009f08:	d104      	bne.n	8009f14 <__swbuf_r+0x6c>
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 f927 	bl	800a160 <_fflush_r>
 8009f12:	b988      	cbnz	r0, 8009f38 <__swbuf_r+0x90>
 8009f14:	4638      	mov	r0, r7
 8009f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <__swbuf_r+0x9c>)
 8009f1a:	429c      	cmp	r4, r3
 8009f1c:	d101      	bne.n	8009f22 <__swbuf_r+0x7a>
 8009f1e:	68ac      	ldr	r4, [r5, #8]
 8009f20:	e7cf      	b.n	8009ec2 <__swbuf_r+0x1a>
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <__swbuf_r+0xa0>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	bf08      	it	eq
 8009f28:	68ec      	ldreq	r4, [r5, #12]
 8009f2a:	e7ca      	b.n	8009ec2 <__swbuf_r+0x1a>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f000 f81a 	bl	8009f68 <__swsetup_r>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d0cb      	beq.n	8009ed0 <__swbuf_r+0x28>
 8009f38:	f04f 37ff 	mov.w	r7, #4294967295
 8009f3c:	e7ea      	b.n	8009f14 <__swbuf_r+0x6c>
 8009f3e:	bf00      	nop
 8009f40:	0800abb4 	.word	0x0800abb4
 8009f44:	0800abd4 	.word	0x0800abd4
 8009f48:	0800ab94 	.word	0x0800ab94

08009f4c <__ascii_wctomb>:
 8009f4c:	b149      	cbz	r1, 8009f62 <__ascii_wctomb+0x16>
 8009f4e:	2aff      	cmp	r2, #255	; 0xff
 8009f50:	bf85      	ittet	hi
 8009f52:	238a      	movhi	r3, #138	; 0x8a
 8009f54:	6003      	strhi	r3, [r0, #0]
 8009f56:	700a      	strbls	r2, [r1, #0]
 8009f58:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f5c:	bf98      	it	ls
 8009f5e:	2001      	movls	r0, #1
 8009f60:	4770      	bx	lr
 8009f62:	4608      	mov	r0, r1
 8009f64:	4770      	bx	lr
	...

08009f68 <__swsetup_r>:
 8009f68:	4b32      	ldr	r3, [pc, #200]	; (800a034 <__swsetup_r+0xcc>)
 8009f6a:	b570      	push	{r4, r5, r6, lr}
 8009f6c:	681d      	ldr	r5, [r3, #0]
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	b125      	cbz	r5, 8009f7e <__swsetup_r+0x16>
 8009f74:	69ab      	ldr	r3, [r5, #24]
 8009f76:	b913      	cbnz	r3, 8009f7e <__swsetup_r+0x16>
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 f985 	bl	800a288 <__sinit>
 8009f7e:	4b2e      	ldr	r3, [pc, #184]	; (800a038 <__swsetup_r+0xd0>)
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d10f      	bne.n	8009fa4 <__swsetup_r+0x3c>
 8009f84:	686c      	ldr	r4, [r5, #4]
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8c:	0719      	lsls	r1, r3, #28
 8009f8e:	d42c      	bmi.n	8009fea <__swsetup_r+0x82>
 8009f90:	06dd      	lsls	r5, r3, #27
 8009f92:	d411      	bmi.n	8009fb8 <__swsetup_r+0x50>
 8009f94:	2309      	movs	r3, #9
 8009f96:	6033      	str	r3, [r6, #0]
 8009f98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa2:	e03e      	b.n	800a022 <__swsetup_r+0xba>
 8009fa4:	4b25      	ldr	r3, [pc, #148]	; (800a03c <__swsetup_r+0xd4>)
 8009fa6:	429c      	cmp	r4, r3
 8009fa8:	d101      	bne.n	8009fae <__swsetup_r+0x46>
 8009faa:	68ac      	ldr	r4, [r5, #8]
 8009fac:	e7eb      	b.n	8009f86 <__swsetup_r+0x1e>
 8009fae:	4b24      	ldr	r3, [pc, #144]	; (800a040 <__swsetup_r+0xd8>)
 8009fb0:	429c      	cmp	r4, r3
 8009fb2:	bf08      	it	eq
 8009fb4:	68ec      	ldreq	r4, [r5, #12]
 8009fb6:	e7e6      	b.n	8009f86 <__swsetup_r+0x1e>
 8009fb8:	0758      	lsls	r0, r3, #29
 8009fba:	d512      	bpl.n	8009fe2 <__swsetup_r+0x7a>
 8009fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fbe:	b141      	cbz	r1, 8009fd2 <__swsetup_r+0x6a>
 8009fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc4:	4299      	cmp	r1, r3
 8009fc6:	d002      	beq.n	8009fce <__swsetup_r+0x66>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff fb31 	bl	8009630 <_free_r>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6063      	str	r3, [r4, #4]
 8009fde:	6923      	ldr	r3, [r4, #16]
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f043 0308 	orr.w	r3, r3, #8
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	b94b      	cbnz	r3, 800a002 <__swsetup_r+0x9a>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff8:	d003      	beq.n	800a002 <__swsetup_r+0x9a>
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f000 fa09 	bl	800a414 <__smakebuf_r>
 800a002:	89a0      	ldrh	r0, [r4, #12]
 800a004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a008:	f010 0301 	ands.w	r3, r0, #1
 800a00c:	d00a      	beq.n	800a024 <__swsetup_r+0xbc>
 800a00e:	2300      	movs	r3, #0
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	6963      	ldr	r3, [r4, #20]
 800a014:	425b      	negs	r3, r3
 800a016:	61a3      	str	r3, [r4, #24]
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	b943      	cbnz	r3, 800a02e <__swsetup_r+0xc6>
 800a01c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a020:	d1ba      	bne.n	8009f98 <__swsetup_r+0x30>
 800a022:	bd70      	pop	{r4, r5, r6, pc}
 800a024:	0781      	lsls	r1, r0, #30
 800a026:	bf58      	it	pl
 800a028:	6963      	ldrpl	r3, [r4, #20]
 800a02a:	60a3      	str	r3, [r4, #8]
 800a02c:	e7f4      	b.n	800a018 <__swsetup_r+0xb0>
 800a02e:	2000      	movs	r0, #0
 800a030:	e7f7      	b.n	800a022 <__swsetup_r+0xba>
 800a032:	bf00      	nop
 800a034:	20000144 	.word	0x20000144
 800a038:	0800abb4 	.word	0x0800abb4
 800a03c:	0800abd4 	.word	0x0800abd4
 800a040:	0800ab94 	.word	0x0800ab94

0800a044 <abort>:
 800a044:	b508      	push	{r3, lr}
 800a046:	2006      	movs	r0, #6
 800a048:	f000 fa54 	bl	800a4f4 <raise>
 800a04c:	2001      	movs	r0, #1
 800a04e:	f7f9 f895 	bl	800317c <_exit>
	...

0800a054 <__sflush_r>:
 800a054:	898a      	ldrh	r2, [r1, #12]
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	4605      	mov	r5, r0
 800a05c:	0710      	lsls	r0, r2, #28
 800a05e:	460c      	mov	r4, r1
 800a060:	d458      	bmi.n	800a114 <__sflush_r+0xc0>
 800a062:	684b      	ldr	r3, [r1, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dc05      	bgt.n	800a074 <__sflush_r+0x20>
 800a068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dc02      	bgt.n	800a074 <__sflush_r+0x20>
 800a06e:	2000      	movs	r0, #0
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a076:	2e00      	cmp	r6, #0
 800a078:	d0f9      	beq.n	800a06e <__sflush_r+0x1a>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a080:	682f      	ldr	r7, [r5, #0]
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	d032      	beq.n	800a0ec <__sflush_r+0x98>
 800a086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	075a      	lsls	r2, r3, #29
 800a08c:	d505      	bpl.n	800a09a <__sflush_r+0x46>
 800a08e:	6863      	ldr	r3, [r4, #4]
 800a090:	1ac0      	subs	r0, r0, r3
 800a092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a094:	b10b      	cbz	r3, 800a09a <__sflush_r+0x46>
 800a096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a098:	1ac0      	subs	r0, r0, r3
 800a09a:	2300      	movs	r3, #0
 800a09c:	4602      	mov	r2, r0
 800a09e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0a0:	6a21      	ldr	r1, [r4, #32]
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b0      	blx	r6
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	d106      	bne.n	800a0ba <__sflush_r+0x66>
 800a0ac:	6829      	ldr	r1, [r5, #0]
 800a0ae:	291d      	cmp	r1, #29
 800a0b0:	d82c      	bhi.n	800a10c <__sflush_r+0xb8>
 800a0b2:	4a2a      	ldr	r2, [pc, #168]	; (800a15c <__sflush_r+0x108>)
 800a0b4:	40ca      	lsrs	r2, r1
 800a0b6:	07d6      	lsls	r6, r2, #31
 800a0b8:	d528      	bpl.n	800a10c <__sflush_r+0xb8>
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	6062      	str	r2, [r4, #4]
 800a0be:	04d9      	lsls	r1, r3, #19
 800a0c0:	6922      	ldr	r2, [r4, #16]
 800a0c2:	6022      	str	r2, [r4, #0]
 800a0c4:	d504      	bpl.n	800a0d0 <__sflush_r+0x7c>
 800a0c6:	1c42      	adds	r2, r0, #1
 800a0c8:	d101      	bne.n	800a0ce <__sflush_r+0x7a>
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	b903      	cbnz	r3, 800a0d0 <__sflush_r+0x7c>
 800a0ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a0d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d2:	602f      	str	r7, [r5, #0]
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	d0ca      	beq.n	800a06e <__sflush_r+0x1a>
 800a0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0dc:	4299      	cmp	r1, r3
 800a0de:	d002      	beq.n	800a0e6 <__sflush_r+0x92>
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f7ff faa5 	bl	8009630 <_free_r>
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0ea:	e7c1      	b.n	800a070 <__sflush_r+0x1c>
 800a0ec:	6a21      	ldr	r1, [r4, #32]
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	1c41      	adds	r1, r0, #1
 800a0f6:	d1c7      	bne.n	800a088 <__sflush_r+0x34>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0c4      	beq.n	800a088 <__sflush_r+0x34>
 800a0fe:	2b1d      	cmp	r3, #29
 800a100:	d001      	beq.n	800a106 <__sflush_r+0xb2>
 800a102:	2b16      	cmp	r3, #22
 800a104:	d101      	bne.n	800a10a <__sflush_r+0xb6>
 800a106:	602f      	str	r7, [r5, #0]
 800a108:	e7b1      	b.n	800a06e <__sflush_r+0x1a>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a110:	81a3      	strh	r3, [r4, #12]
 800a112:	e7ad      	b.n	800a070 <__sflush_r+0x1c>
 800a114:	690f      	ldr	r7, [r1, #16]
 800a116:	2f00      	cmp	r7, #0
 800a118:	d0a9      	beq.n	800a06e <__sflush_r+0x1a>
 800a11a:	0793      	lsls	r3, r2, #30
 800a11c:	680e      	ldr	r6, [r1, #0]
 800a11e:	bf08      	it	eq
 800a120:	694b      	ldreq	r3, [r1, #20]
 800a122:	600f      	str	r7, [r1, #0]
 800a124:	bf18      	it	ne
 800a126:	2300      	movne	r3, #0
 800a128:	eba6 0807 	sub.w	r8, r6, r7
 800a12c:	608b      	str	r3, [r1, #8]
 800a12e:	f1b8 0f00 	cmp.w	r8, #0
 800a132:	dd9c      	ble.n	800a06e <__sflush_r+0x1a>
 800a134:	6a21      	ldr	r1, [r4, #32]
 800a136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a138:	4643      	mov	r3, r8
 800a13a:	463a      	mov	r2, r7
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b0      	blx	r6
 800a140:	2800      	cmp	r0, #0
 800a142:	dc06      	bgt.n	800a152 <__sflush_r+0xfe>
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	e78e      	b.n	800a070 <__sflush_r+0x1c>
 800a152:	4407      	add	r7, r0
 800a154:	eba8 0800 	sub.w	r8, r8, r0
 800a158:	e7e9      	b.n	800a12e <__sflush_r+0xda>
 800a15a:	bf00      	nop
 800a15c:	20400001 	.word	0x20400001

0800a160 <_fflush_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	4605      	mov	r5, r0
 800a166:	460c      	mov	r4, r1
 800a168:	b913      	cbnz	r3, 800a170 <_fflush_r+0x10>
 800a16a:	2500      	movs	r5, #0
 800a16c:	4628      	mov	r0, r5
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	b118      	cbz	r0, 800a17a <_fflush_r+0x1a>
 800a172:	6983      	ldr	r3, [r0, #24]
 800a174:	b90b      	cbnz	r3, 800a17a <_fflush_r+0x1a>
 800a176:	f000 f887 	bl	800a288 <__sinit>
 800a17a:	4b14      	ldr	r3, [pc, #80]	; (800a1cc <_fflush_r+0x6c>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	d11b      	bne.n	800a1b8 <_fflush_r+0x58>
 800a180:	686c      	ldr	r4, [r5, #4]
 800a182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0ef      	beq.n	800a16a <_fflush_r+0xa>
 800a18a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a18c:	07d0      	lsls	r0, r2, #31
 800a18e:	d404      	bmi.n	800a19a <_fflush_r+0x3a>
 800a190:	0599      	lsls	r1, r3, #22
 800a192:	d402      	bmi.n	800a19a <_fflush_r+0x3a>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f000 f915 	bl	800a3c4 <__retarget_lock_acquire_recursive>
 800a19a:	4628      	mov	r0, r5
 800a19c:	4621      	mov	r1, r4
 800a19e:	f7ff ff59 	bl	800a054 <__sflush_r>
 800a1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a4:	07da      	lsls	r2, r3, #31
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	d4e0      	bmi.n	800a16c <_fflush_r+0xc>
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	059b      	lsls	r3, r3, #22
 800a1ae:	d4dd      	bmi.n	800a16c <_fflush_r+0xc>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1b2:	f000 f908 	bl	800a3c6 <__retarget_lock_release_recursive>
 800a1b6:	e7d9      	b.n	800a16c <_fflush_r+0xc>
 800a1b8:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <_fflush_r+0x70>)
 800a1ba:	429c      	cmp	r4, r3
 800a1bc:	d101      	bne.n	800a1c2 <_fflush_r+0x62>
 800a1be:	68ac      	ldr	r4, [r5, #8]
 800a1c0:	e7df      	b.n	800a182 <_fflush_r+0x22>
 800a1c2:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <_fflush_r+0x74>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	bf08      	it	eq
 800a1c8:	68ec      	ldreq	r4, [r5, #12]
 800a1ca:	e7da      	b.n	800a182 <_fflush_r+0x22>
 800a1cc:	0800abb4 	.word	0x0800abb4
 800a1d0:	0800abd4 	.word	0x0800abd4
 800a1d4:	0800ab94 	.word	0x0800ab94

0800a1d8 <std>:
 800a1d8:	2300      	movs	r3, #0
 800a1da:	b510      	push	{r4, lr}
 800a1dc:	4604      	mov	r4, r0
 800a1de:	e9c0 3300 	strd	r3, r3, [r0]
 800a1e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1e6:	6083      	str	r3, [r0, #8]
 800a1e8:	8181      	strh	r1, [r0, #12]
 800a1ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a1ec:	81c2      	strh	r2, [r0, #14]
 800a1ee:	6183      	str	r3, [r0, #24]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	2208      	movs	r2, #8
 800a1f4:	305c      	adds	r0, #92	; 0x5c
 800a1f6:	f7fd fb69 	bl	80078cc <memset>
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <std+0x38>)
 800a1fc:	6263      	str	r3, [r4, #36]	; 0x24
 800a1fe:	4b05      	ldr	r3, [pc, #20]	; (800a214 <std+0x3c>)
 800a200:	62a3      	str	r3, [r4, #40]	; 0x28
 800a202:	4b05      	ldr	r3, [pc, #20]	; (800a218 <std+0x40>)
 800a204:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a206:	4b05      	ldr	r3, [pc, #20]	; (800a21c <std+0x44>)
 800a208:	6224      	str	r4, [r4, #32]
 800a20a:	6323      	str	r3, [r4, #48]	; 0x30
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	bf00      	nop
 800a210:	0800a52d 	.word	0x0800a52d
 800a214:	0800a54f 	.word	0x0800a54f
 800a218:	0800a587 	.word	0x0800a587
 800a21c:	0800a5ab 	.word	0x0800a5ab

0800a220 <_cleanup_r>:
 800a220:	4901      	ldr	r1, [pc, #4]	; (800a228 <_cleanup_r+0x8>)
 800a222:	f000 b8af 	b.w	800a384 <_fwalk_reent>
 800a226:	bf00      	nop
 800a228:	0800a161 	.word	0x0800a161

0800a22c <__sfmoreglue>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	2268      	movs	r2, #104	; 0x68
 800a230:	1e4d      	subs	r5, r1, #1
 800a232:	4355      	muls	r5, r2
 800a234:	460e      	mov	r6, r1
 800a236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a23a:	f7ff fa65 	bl	8009708 <_malloc_r>
 800a23e:	4604      	mov	r4, r0
 800a240:	b140      	cbz	r0, 800a254 <__sfmoreglue+0x28>
 800a242:	2100      	movs	r1, #0
 800a244:	e9c0 1600 	strd	r1, r6, [r0]
 800a248:	300c      	adds	r0, #12
 800a24a:	60a0      	str	r0, [r4, #8]
 800a24c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a250:	f7fd fb3c 	bl	80078cc <memset>
 800a254:	4620      	mov	r0, r4
 800a256:	bd70      	pop	{r4, r5, r6, pc}

0800a258 <__sfp_lock_acquire>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__sfp_lock_acquire+0x8>)
 800a25a:	f000 b8b3 	b.w	800a3c4 <__retarget_lock_acquire_recursive>
 800a25e:	bf00      	nop
 800a260:	20007dd1 	.word	0x20007dd1

0800a264 <__sfp_lock_release>:
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <__sfp_lock_release+0x8>)
 800a266:	f000 b8ae 	b.w	800a3c6 <__retarget_lock_release_recursive>
 800a26a:	bf00      	nop
 800a26c:	20007dd1 	.word	0x20007dd1

0800a270 <__sinit_lock_acquire>:
 800a270:	4801      	ldr	r0, [pc, #4]	; (800a278 <__sinit_lock_acquire+0x8>)
 800a272:	f000 b8a7 	b.w	800a3c4 <__retarget_lock_acquire_recursive>
 800a276:	bf00      	nop
 800a278:	20007dd2 	.word	0x20007dd2

0800a27c <__sinit_lock_release>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__sinit_lock_release+0x8>)
 800a27e:	f000 b8a2 	b.w	800a3c6 <__retarget_lock_release_recursive>
 800a282:	bf00      	nop
 800a284:	20007dd2 	.word	0x20007dd2

0800a288 <__sinit>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	4604      	mov	r4, r0
 800a28c:	f7ff fff0 	bl	800a270 <__sinit_lock_acquire>
 800a290:	69a3      	ldr	r3, [r4, #24]
 800a292:	b11b      	cbz	r3, 800a29c <__sinit+0x14>
 800a294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a298:	f7ff bff0 	b.w	800a27c <__sinit_lock_release>
 800a29c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a2a2:	4b13      	ldr	r3, [pc, #76]	; (800a2f0 <__sinit+0x68>)
 800a2a4:	4a13      	ldr	r2, [pc, #76]	; (800a2f4 <__sinit+0x6c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	bf04      	itt	eq
 800a2ae:	2301      	moveq	r3, #1
 800a2b0:	61a3      	streq	r3, [r4, #24]
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 f820 	bl	800a2f8 <__sfp>
 800a2b8:	6060      	str	r0, [r4, #4]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 f81c 	bl	800a2f8 <__sfp>
 800a2c0:	60a0      	str	r0, [r4, #8]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 f818 	bl	800a2f8 <__sfp>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	60e0      	str	r0, [r4, #12]
 800a2cc:	2104      	movs	r1, #4
 800a2ce:	6860      	ldr	r0, [r4, #4]
 800a2d0:	f7ff ff82 	bl	800a1d8 <std>
 800a2d4:	68a0      	ldr	r0, [r4, #8]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	2109      	movs	r1, #9
 800a2da:	f7ff ff7d 	bl	800a1d8 <std>
 800a2de:	68e0      	ldr	r0, [r4, #12]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	2112      	movs	r1, #18
 800a2e4:	f7ff ff78 	bl	800a1d8 <std>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	61a3      	str	r3, [r4, #24]
 800a2ec:	e7d2      	b.n	800a294 <__sinit+0xc>
 800a2ee:	bf00      	nop
 800a2f0:	0800a81c 	.word	0x0800a81c
 800a2f4:	0800a221 	.word	0x0800a221

0800a2f8 <__sfp>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	4607      	mov	r7, r0
 800a2fc:	f7ff ffac 	bl	800a258 <__sfp_lock_acquire>
 800a300:	4b1e      	ldr	r3, [pc, #120]	; (800a37c <__sfp+0x84>)
 800a302:	681e      	ldr	r6, [r3, #0]
 800a304:	69b3      	ldr	r3, [r6, #24]
 800a306:	b913      	cbnz	r3, 800a30e <__sfp+0x16>
 800a308:	4630      	mov	r0, r6
 800a30a:	f7ff ffbd 	bl	800a288 <__sinit>
 800a30e:	3648      	adds	r6, #72	; 0x48
 800a310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a314:	3b01      	subs	r3, #1
 800a316:	d503      	bpl.n	800a320 <__sfp+0x28>
 800a318:	6833      	ldr	r3, [r6, #0]
 800a31a:	b30b      	cbz	r3, 800a360 <__sfp+0x68>
 800a31c:	6836      	ldr	r6, [r6, #0]
 800a31e:	e7f7      	b.n	800a310 <__sfp+0x18>
 800a320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a324:	b9d5      	cbnz	r5, 800a35c <__sfp+0x64>
 800a326:	4b16      	ldr	r3, [pc, #88]	; (800a380 <__sfp+0x88>)
 800a328:	60e3      	str	r3, [r4, #12]
 800a32a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a32e:	6665      	str	r5, [r4, #100]	; 0x64
 800a330:	f000 f847 	bl	800a3c2 <__retarget_lock_init_recursive>
 800a334:	f7ff ff96 	bl	800a264 <__sfp_lock_release>
 800a338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a33c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a340:	6025      	str	r5, [r4, #0]
 800a342:	61a5      	str	r5, [r4, #24]
 800a344:	2208      	movs	r2, #8
 800a346:	4629      	mov	r1, r5
 800a348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a34c:	f7fd fabe 	bl	80078cc <memset>
 800a350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a358:	4620      	mov	r0, r4
 800a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a35c:	3468      	adds	r4, #104	; 0x68
 800a35e:	e7d9      	b.n	800a314 <__sfp+0x1c>
 800a360:	2104      	movs	r1, #4
 800a362:	4638      	mov	r0, r7
 800a364:	f7ff ff62 	bl	800a22c <__sfmoreglue>
 800a368:	4604      	mov	r4, r0
 800a36a:	6030      	str	r0, [r6, #0]
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d1d5      	bne.n	800a31c <__sfp+0x24>
 800a370:	f7ff ff78 	bl	800a264 <__sfp_lock_release>
 800a374:	230c      	movs	r3, #12
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	e7ee      	b.n	800a358 <__sfp+0x60>
 800a37a:	bf00      	nop
 800a37c:	0800a81c 	.word	0x0800a81c
 800a380:	ffff0001 	.word	0xffff0001

0800a384 <_fwalk_reent>:
 800a384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a388:	4606      	mov	r6, r0
 800a38a:	4688      	mov	r8, r1
 800a38c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a390:	2700      	movs	r7, #0
 800a392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a396:	f1b9 0901 	subs.w	r9, r9, #1
 800a39a:	d505      	bpl.n	800a3a8 <_fwalk_reent+0x24>
 800a39c:	6824      	ldr	r4, [r4, #0]
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	d1f7      	bne.n	800a392 <_fwalk_reent+0xe>
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a8:	89ab      	ldrh	r3, [r5, #12]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d907      	bls.n	800a3be <_fwalk_reent+0x3a>
 800a3ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	d003      	beq.n	800a3be <_fwalk_reent+0x3a>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	47c0      	blx	r8
 800a3bc:	4307      	orrs	r7, r0
 800a3be:	3568      	adds	r5, #104	; 0x68
 800a3c0:	e7e9      	b.n	800a396 <_fwalk_reent+0x12>

0800a3c2 <__retarget_lock_init_recursive>:
 800a3c2:	4770      	bx	lr

0800a3c4 <__retarget_lock_acquire_recursive>:
 800a3c4:	4770      	bx	lr

0800a3c6 <__retarget_lock_release_recursive>:
 800a3c6:	4770      	bx	lr

0800a3c8 <__swhatbuf_r>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	460e      	mov	r6, r1
 800a3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d0:	2900      	cmp	r1, #0
 800a3d2:	b096      	sub	sp, #88	; 0x58
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	461d      	mov	r5, r3
 800a3d8:	da08      	bge.n	800a3ec <__swhatbuf_r+0x24>
 800a3da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	602a      	str	r2, [r5, #0]
 800a3e2:	061a      	lsls	r2, r3, #24
 800a3e4:	d410      	bmi.n	800a408 <__swhatbuf_r+0x40>
 800a3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ea:	e00e      	b.n	800a40a <__swhatbuf_r+0x42>
 800a3ec:	466a      	mov	r2, sp
 800a3ee:	f000 f903 	bl	800a5f8 <_fstat_r>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	dbf1      	blt.n	800a3da <__swhatbuf_r+0x12>
 800a3f6:	9a01      	ldr	r2, [sp, #4]
 800a3f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a400:	425a      	negs	r2, r3
 800a402:	415a      	adcs	r2, r3
 800a404:	602a      	str	r2, [r5, #0]
 800a406:	e7ee      	b.n	800a3e6 <__swhatbuf_r+0x1e>
 800a408:	2340      	movs	r3, #64	; 0x40
 800a40a:	2000      	movs	r0, #0
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	b016      	add	sp, #88	; 0x58
 800a410:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a414 <__smakebuf_r>:
 800a414:	898b      	ldrh	r3, [r1, #12]
 800a416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a418:	079d      	lsls	r5, r3, #30
 800a41a:	4606      	mov	r6, r0
 800a41c:	460c      	mov	r4, r1
 800a41e:	d507      	bpl.n	800a430 <__smakebuf_r+0x1c>
 800a420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	2301      	movs	r3, #1
 800a42a:	6163      	str	r3, [r4, #20]
 800a42c:	b002      	add	sp, #8
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	ab01      	add	r3, sp, #4
 800a432:	466a      	mov	r2, sp
 800a434:	f7ff ffc8 	bl	800a3c8 <__swhatbuf_r>
 800a438:	9900      	ldr	r1, [sp, #0]
 800a43a:	4605      	mov	r5, r0
 800a43c:	4630      	mov	r0, r6
 800a43e:	f7ff f963 	bl	8009708 <_malloc_r>
 800a442:	b948      	cbnz	r0, 800a458 <__smakebuf_r+0x44>
 800a444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a448:	059a      	lsls	r2, r3, #22
 800a44a:	d4ef      	bmi.n	800a42c <__smakebuf_r+0x18>
 800a44c:	f023 0303 	bic.w	r3, r3, #3
 800a450:	f043 0302 	orr.w	r3, r3, #2
 800a454:	81a3      	strh	r3, [r4, #12]
 800a456:	e7e3      	b.n	800a420 <__smakebuf_r+0xc>
 800a458:	4b0d      	ldr	r3, [pc, #52]	; (800a490 <__smakebuf_r+0x7c>)
 800a45a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	6020      	str	r0, [r4, #0]
 800a460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	9b00      	ldr	r3, [sp, #0]
 800a468:	6163      	str	r3, [r4, #20]
 800a46a:	9b01      	ldr	r3, [sp, #4]
 800a46c:	6120      	str	r0, [r4, #16]
 800a46e:	b15b      	cbz	r3, 800a488 <__smakebuf_r+0x74>
 800a470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a474:	4630      	mov	r0, r6
 800a476:	f000 f8d1 	bl	800a61c <_isatty_r>
 800a47a:	b128      	cbz	r0, 800a488 <__smakebuf_r+0x74>
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	f023 0303 	bic.w	r3, r3, #3
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	89a0      	ldrh	r0, [r4, #12]
 800a48a:	4305      	orrs	r5, r0
 800a48c:	81a5      	strh	r5, [r4, #12]
 800a48e:	e7cd      	b.n	800a42c <__smakebuf_r+0x18>
 800a490:	0800a221 	.word	0x0800a221

0800a494 <_malloc_usable_size_r>:
 800a494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a498:	1f18      	subs	r0, r3, #4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bfbc      	itt	lt
 800a49e:	580b      	ldrlt	r3, [r1, r0]
 800a4a0:	18c0      	addlt	r0, r0, r3
 800a4a2:	4770      	bx	lr

0800a4a4 <_raise_r>:
 800a4a4:	291f      	cmp	r1, #31
 800a4a6:	b538      	push	{r3, r4, r5, lr}
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	d904      	bls.n	800a4b8 <_raise_r+0x14>
 800a4ae:	2316      	movs	r3, #22
 800a4b0:	6003      	str	r3, [r0, #0]
 800a4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4ba:	b112      	cbz	r2, 800a4c2 <_raise_r+0x1e>
 800a4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4c0:	b94b      	cbnz	r3, 800a4d6 <_raise_r+0x32>
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 f830 	bl	800a528 <_getpid_r>
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d2:	f000 b817 	b.w	800a504 <_kill_r>
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d00a      	beq.n	800a4f0 <_raise_r+0x4c>
 800a4da:	1c59      	adds	r1, r3, #1
 800a4dc:	d103      	bne.n	800a4e6 <_raise_r+0x42>
 800a4de:	2316      	movs	r3, #22
 800a4e0:	6003      	str	r3, [r0, #0]
 800a4e2:	2001      	movs	r0, #1
 800a4e4:	e7e7      	b.n	800a4b6 <_raise_r+0x12>
 800a4e6:	2400      	movs	r4, #0
 800a4e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	4798      	blx	r3
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	e7e0      	b.n	800a4b6 <_raise_r+0x12>

0800a4f4 <raise>:
 800a4f4:	4b02      	ldr	r3, [pc, #8]	; (800a500 <raise+0xc>)
 800a4f6:	4601      	mov	r1, r0
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	f7ff bfd3 	b.w	800a4a4 <_raise_r>
 800a4fe:	bf00      	nop
 800a500:	20000144 	.word	0x20000144

0800a504 <_kill_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d07      	ldr	r5, [pc, #28]	; (800a524 <_kill_r+0x20>)
 800a508:	2300      	movs	r3, #0
 800a50a:	4604      	mov	r4, r0
 800a50c:	4608      	mov	r0, r1
 800a50e:	4611      	mov	r1, r2
 800a510:	602b      	str	r3, [r5, #0]
 800a512:	f7f8 fe23 	bl	800315c <_kill>
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	d102      	bne.n	800a520 <_kill_r+0x1c>
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	b103      	cbz	r3, 800a520 <_kill_r+0x1c>
 800a51e:	6023      	str	r3, [r4, #0]
 800a520:	bd38      	pop	{r3, r4, r5, pc}
 800a522:	bf00      	nop
 800a524:	20007dcc 	.word	0x20007dcc

0800a528 <_getpid_r>:
 800a528:	f7f8 be10 	b.w	800314c <_getpid>

0800a52c <__sread>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	460c      	mov	r4, r1
 800a530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a534:	f000 f894 	bl	800a660 <_read_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	bfab      	itete	ge
 800a53c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a53e:	89a3      	ldrhlt	r3, [r4, #12]
 800a540:	181b      	addge	r3, r3, r0
 800a542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a546:	bfac      	ite	ge
 800a548:	6563      	strge	r3, [r4, #84]	; 0x54
 800a54a:	81a3      	strhlt	r3, [r4, #12]
 800a54c:	bd10      	pop	{r4, pc}

0800a54e <__swrite>:
 800a54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a552:	461f      	mov	r7, r3
 800a554:	898b      	ldrh	r3, [r1, #12]
 800a556:	05db      	lsls	r3, r3, #23
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	4616      	mov	r6, r2
 800a55e:	d505      	bpl.n	800a56c <__swrite+0x1e>
 800a560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a564:	2302      	movs	r3, #2
 800a566:	2200      	movs	r2, #0
 800a568:	f000 f868 	bl	800a63c <_lseek_r>
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	4628      	mov	r0, r5
 800a57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	f000 b817 	b.w	800a5b4 <_write_r>

0800a586 <__sseek>:
 800a586:	b510      	push	{r4, lr}
 800a588:	460c      	mov	r4, r1
 800a58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58e:	f000 f855 	bl	800a63c <_lseek_r>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	bf15      	itete	ne
 800a598:	6560      	strne	r0, [r4, #84]	; 0x54
 800a59a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a59e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5a2:	81a3      	strheq	r3, [r4, #12]
 800a5a4:	bf18      	it	ne
 800a5a6:	81a3      	strhne	r3, [r4, #12]
 800a5a8:	bd10      	pop	{r4, pc}

0800a5aa <__sclose>:
 800a5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ae:	f000 b813 	b.w	800a5d8 <_close_r>
	...

0800a5b4 <_write_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d07      	ldr	r5, [pc, #28]	; (800a5d4 <_write_r+0x20>)
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	4611      	mov	r1, r2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	602a      	str	r2, [r5, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	f7f8 fe01 	bl	80031ca <_write>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d102      	bne.n	800a5d2 <_write_r+0x1e>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	b103      	cbz	r3, 800a5d2 <_write_r+0x1e>
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	20007dcc 	.word	0x20007dcc

0800a5d8 <_close_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4d06      	ldr	r5, [pc, #24]	; (800a5f4 <_close_r+0x1c>)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7f8 fe0d 	bl	8003202 <_close>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_close_r+0x1a>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_close_r+0x1a>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	20007dcc 	.word	0x20007dcc

0800a5f8 <_fstat_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d07      	ldr	r5, [pc, #28]	; (800a618 <_fstat_r+0x20>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	4611      	mov	r1, r2
 800a604:	602b      	str	r3, [r5, #0]
 800a606:	f7f8 fe08 	bl	800321a <_fstat>
 800a60a:	1c43      	adds	r3, r0, #1
 800a60c:	d102      	bne.n	800a614 <_fstat_r+0x1c>
 800a60e:	682b      	ldr	r3, [r5, #0]
 800a610:	b103      	cbz	r3, 800a614 <_fstat_r+0x1c>
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	bd38      	pop	{r3, r4, r5, pc}
 800a616:	bf00      	nop
 800a618:	20007dcc 	.word	0x20007dcc

0800a61c <_isatty_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d06      	ldr	r5, [pc, #24]	; (800a638 <_isatty_r+0x1c>)
 800a620:	2300      	movs	r3, #0
 800a622:	4604      	mov	r4, r0
 800a624:	4608      	mov	r0, r1
 800a626:	602b      	str	r3, [r5, #0]
 800a628:	f7f8 fe07 	bl	800323a <_isatty>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_isatty_r+0x1a>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_isatty_r+0x1a>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	20007dcc 	.word	0x20007dcc

0800a63c <_lseek_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d07      	ldr	r5, [pc, #28]	; (800a65c <_lseek_r+0x20>)
 800a640:	4604      	mov	r4, r0
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	2200      	movs	r2, #0
 800a648:	602a      	str	r2, [r5, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f7f8 fe00 	bl	8003250 <_lseek>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d102      	bne.n	800a65a <_lseek_r+0x1e>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	b103      	cbz	r3, 800a65a <_lseek_r+0x1e>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	20007dcc 	.word	0x20007dcc

0800a660 <_read_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	; (800a680 <_read_r+0x20>)
 800a664:	4604      	mov	r4, r0
 800a666:	4608      	mov	r0, r1
 800a668:	4611      	mov	r1, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	602a      	str	r2, [r5, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7f8 fd8e 	bl	8003190 <_read>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_read_r+0x1e>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_read_r+0x1e>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	20007dcc 	.word	0x20007dcc

0800a684 <_init>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr

0800a690 <_fini>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr
