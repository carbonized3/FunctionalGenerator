
FUNCTIONAL_GENERATOR_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a06c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800a210  0800a210  0001a210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a75c  0800a75c  000202e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a75c  0800a75c  0001a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a764  0800a764  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a768  0800a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0800a76c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ac8  200002e4  0800aa50  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007dac  0800aa50  00027dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cd4  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e5  00000000  00000000  00034fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  000383d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  00039700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0da  00000000  00000000  0003a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158f5  00000000  00000000  000549aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009855b  00000000  00000000  0006a29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001027fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000611c  00000000  00000000  0010284c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1f4 	.word	0x0800a1f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	0800a1f4 	.word	0x0800a1f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <DAC_stop>:

static float one_dac_tick;
static uint16_t tim3_counter_period;

void DAC_stop()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <DAC_stop+0x14>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Stop_IT(&htim3);
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <DAC_stop+0x18>)
 8000fa8:	f003 fa7a 	bl	80044a0 <HAL_TIM_Base_Stop_IT>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40000400 	.word	0x40000400
 8000fb4:	200005b8 	.word	0x200005b8

08000fb8 <DAC_init>:
void DAC_init(signal_t signal, float freq)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	ed87 0a00 	vstr	s0, [r7]
 8000fc4:	71fb      	strb	r3, [r7, #7]
	if( signal == SAW || signal == REVERSE_SAW ) // Для обычной и обратной пилы настройки одинаковые
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d002      	beq.n	8000fd2 <DAC_init+0x1a>
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d10d      	bne.n	8000fee <DAC_init+0x36>
	{
		one_dac_tick = (1000 / freq) / (51);
 8000fd2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001080 <DAC_init+0xc8>
 8000fd6:	edd7 7a00 	vldr	s15, [r7]
 8000fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fde:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001084 <DAC_init+0xcc>
 8000fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <DAC_init+0xd0>)
 8000fe8:	edc3 7a00 	vstr	s15, [r3]
 8000fec:	e020      	b.n	8001030 <DAC_init+0x78>
	}
	else if(signal == TRIANGLE)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10d      	bne.n	8001010 <DAC_init+0x58>
	{
		/*	Частота таймера базовая будет 64 Мгц. Предделитель допустим всегда 1. Шаг ЦАПа 5
			51*2 = 102 ступенек если выбрать шаг 5. Вычислили тик ЦАПа в мкс чтобы настроить на него таймер. 	*/
		one_dac_tick = (1000 / freq) / (102);
 8000ff4:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001080 <DAC_init+0xc8>
 8000ff8:	edd7 7a00 	vldr	s15, [r7]
 8000ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001000:	eddf 6a22 	vldr	s13, [pc, #136]	; 800108c <DAC_init+0xd4>
 8001004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <DAC_init+0xd0>)
 800100a:	edc3 7a00 	vstr	s15, [r3]
 800100e:	e00f      	b.n	8001030 <DAC_init+0x78>
	}
	else if( signal == SIN )
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d10c      	bne.n	8001030 <DAC_init+0x78>
	{
		one_dac_tick = (1000 / freq) / (256);
 8001016:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001080 <DAC_init+0xc8>
 800101a:	edd7 7a00 	vldr	s15, [r7]
 800101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001022:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001090 <DAC_init+0xd8>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <DAC_init+0xd0>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
	}
	tim3_counter_period = one_dac_tick / 0.015625;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <DAC_init+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa8f 	bl	8000558 <__aeabi_f2d>
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <DAC_init+0xdc>)
 8001040:	f7ff fc0c 	bl	800085c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fdb4 	bl	8000bb8 <__aeabi_d2uiz>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <DAC_init+0xe0>)
 8001056:	801a      	strh	r2, [r3, #0]
	TIM3->ARR = tim3_counter_period;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <DAC_init+0xe0>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <DAC_init+0xe4>)
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <DAC_init+0xe4>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);		// Запустили таймер
 8001066:	480e      	ldr	r0, [pc, #56]	; (80010a0 <DAC_init+0xe8>)
 8001068:	f003 f9b8 	bl	80043dc <HAL_TIM_Base_Start_IT>
	TIM3->SR &= ~(TIM_SR_UIF);			// Сбросим флаг
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <DAC_init+0xe4>)
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <DAC_init+0xe4>)
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	6113      	str	r3, [r2, #16]
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	447a0000 	.word	0x447a0000
 8001084:	424c0000 	.word	0x424c0000
 8001088:	20000300 	.word	0x20000300
 800108c:	42cc0000 	.word	0x42cc0000
 8001090:	43800000 	.word	0x43800000
 8001094:	3f900000 	.word	0x3f900000
 8001098:	20000304 	.word	0x20000304
 800109c:	40000400 	.word	0x40000400
 80010a0:	200005b8 	.word	0x200005b8

080010a4 <DAC_writeSin>:

void DAC_writeSin()
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
	int j = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
	while( j < sizeof(sin_tab)/sizeof(uint8_t) )
 80010ae:	e014      	b.n	80010da <DAC_writeSin+0x36>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <DAC_writeSin+0x4c>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00e      	beq.n	80010da <DAC_writeSin+0x36>
		{
			TIM3->SR &= ~(TIM_SR_UIF);
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <DAC_writeSin+0x4c>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <DAC_writeSin+0x4c>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6113      	str	r3, [r2, #16]
			GPIOA->ODR = sin_tab[j];
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <DAC_writeSin+0x50>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <DAC_writeSin+0x54>)
 80010d2:	615a      	str	r2, [r3, #20]
			j++;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3301      	adds	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
	while( j < sizeof(sin_tab)/sizeof(uint8_t) )
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2bff      	cmp	r3, #255	; 0xff
 80010de:	d9e7      	bls.n	80010b0 <DAC_writeSin+0xc>
		}
	}
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40000400 	.word	0x40000400
 80010f4:	20000000 	.word	0x20000000
 80010f8:	40020000 	.word	0x40020000

080010fc <DAC_writeTriangle>:

void DAC_writeTriangle()	// freq in kHz
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
	int j = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
	while (j < 255)
 8001106:	e011      	b.n	800112c <DAC_writeTriangle+0x30>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <DAC_writeTriangle+0x70>)
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <DAC_writeTriangle+0x30>
		{
			TIM3->SR &= ~(TIM_SR_UIF);
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <DAC_writeTriangle+0x70>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <DAC_writeTriangle+0x70>)
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	6113      	str	r3, [r2, #16]
			GPIOA->ODR = j;
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <DAC_writeTriangle+0x74>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6153      	str	r3, [r2, #20]
			j += 5;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3305      	adds	r3, #5
 800112a:	607b      	str	r3, [r7, #4]
	while (j < 255)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2bfe      	cmp	r3, #254	; 0xfe
 8001130:	ddea      	ble.n	8001108 <DAC_writeTriangle+0xc>
		}
	}
	while(j > 0)
 8001132:	e011      	b.n	8001158 <DAC_writeTriangle+0x5c>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <DAC_writeTriangle+0x70>)
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <DAC_writeTriangle+0x5c>
		{
			TIM3->SR &= ~(TIM_SR_UIF);
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <DAC_writeTriangle+0x70>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	4a09      	ldr	r2, [pc, #36]	; (800116c <DAC_writeTriangle+0x70>)
 8001146:	f023 0301 	bic.w	r3, r3, #1
 800114a:	6113      	str	r3, [r2, #16]
			GPIOA->ODR = j;
 800114c:	4a08      	ldr	r2, [pc, #32]	; (8001170 <DAC_writeTriangle+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6153      	str	r3, [r2, #20]
			j -= 5;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3b05      	subs	r3, #5
 8001156:	607b      	str	r3, [r7, #4]
	while(j > 0)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	dcea      	bgt.n	8001134 <DAC_writeTriangle+0x38>
		}
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40000400 	.word	0x40000400
 8001170:	40020000 	.word	0x40020000

08001174 <DAC_writeSaw>:
void DAC_writeSaw()		// in kHz
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
	/*	Частота таймера базовая будет 64 Мгц. Предделитель допустим всегда 1. Шаг ЦАПа 5. 	*/
	int j = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
	while (j <= 255)
 800117e:	e011      	b.n	80011a4 <DAC_writeSaw+0x30>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <DAC_writeSaw+0x44>)
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00b      	beq.n	80011a4 <DAC_writeSaw+0x30>
		{
			GPIOA->ODR = j;
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <DAC_writeSaw+0x48>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6153      	str	r3, [r2, #20]
			TIM3->SR &= ~(TIM_SR_UIF);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <DAC_writeSaw+0x44>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <DAC_writeSaw+0x44>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6113      	str	r3, [r2, #16]
			j += 5;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3305      	adds	r3, #5
 80011a2:	607b      	str	r3, [r7, #4]
	while (j <= 255)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2bff      	cmp	r3, #255	; 0xff
 80011a8:	ddea      	ble.n	8001180 <DAC_writeSaw+0xc>
		}
	}
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40000400 	.word	0x40000400
 80011bc:	40020000 	.word	0x40020000

080011c0 <DAC_writeReverseSaw>:
void DAC_writeReverseSaw()		// in kHz
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	/*	Частота таймера базовая будет 64 Мгц. Предделитель допустим всегда 1. Шаг ЦАПа 5. 	*/
	int j = 255;
 80011c6:	23ff      	movs	r3, #255	; 0xff
 80011c8:	607b      	str	r3, [r7, #4]
	while (j > 0)
 80011ca:	e011      	b.n	80011f0 <DAC_writeReverseSaw+0x30>
	{
		if( (TIM3->SR & TIM_SR_UIF) )
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <DAC_writeReverseSaw+0x44>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00b      	beq.n	80011f0 <DAC_writeReverseSaw+0x30>
		{
			GPIOA->ODR = j;
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <DAC_writeReverseSaw+0x48>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6153      	str	r3, [r2, #20]
			TIM3->SR &= ~(TIM_SR_UIF);
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <DAC_writeReverseSaw+0x44>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <DAC_writeReverseSaw+0x44>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6113      	str	r3, [r2, #16]
			j -= 5;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3b05      	subs	r3, #5
 80011ee:	607b      	str	r3, [r7, #4]
	while (j > 0)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dcea      	bgt.n	80011cc <DAC_writeReverseSaw+0xc>
		}
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	40000400 	.word	0x40000400
 8001208:	40020000 	.word	0x40020000

0800120c <MAX7219_write>:
#include "MAX7219.h"

static max7219_init_t *MAX7219_Handler;	// Через неё мы все делаем

static HAL_StatusTypeDef MAX7219_write(uint8_t reg, uint8_t data)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef result;
	uint8_t value[2];
	value[0] = reg;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	733b      	strb	r3, [r7, #12]
	value[1] = data;
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	737b      	strb	r3, [r7, #13]

//	HAL_GPIO_WritePin(MAX7219_Handler->CS_PORT, MAX7219_Handler-> CS_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <MAX7219_write+0x4c>)
 800122a:	f002 f935 	bl	8003498 <HAL_GPIO_WritePin>
//	CS_reset(MAX7219_Handler->CS_PORT, MAX7219_Handler-> CS_PIN);		// Строб --\__
	result = HAL_SPI_Transmit(&hspi1, value, 2, 1000);	// Передали сначала регистр, потом инфу в него
 800122e:	f107 010c 	add.w	r1, r7, #12
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	2202      	movs	r2, #2
 8001238:	4808      	ldr	r0, [pc, #32]	; (800125c <MAX7219_write+0x50>)
 800123a:	f002 fe78 	bl	8003f2e <HAL_SPI_Transmit>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
//	CS_set(MAX7219_Handler->CS_PORT, MAX7219_Handler-> CS_PIN);		// Строб __/--
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <MAX7219_write+0x4c>)
 8001248:	f002 f926 	bl	8003498 <HAL_GPIO_WritePin>
	return result;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40020400 	.word	0x40020400
 800125c:	20000560 	.word	0x20000560

08001260 <MAX7219_setDecode>:
//---------------------------------------------------------
static HAL_StatusTypeDef MAX7219_setDecode(uint8_t mode)	// Функция задающая режим декодирования для сегментов
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	if(MAX7219_Handler->decode_mode != mode)	// Если мы завдали новый режим, то нужно все поменять
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MAX7219_setDecode+0x38>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	7b1b      	ldrb	r3, [r3, #12]
 8001270:	79fa      	ldrb	r2, [r7, #7]
 8001272:	429a      	cmp	r2, r3
 8001274:	d00a      	beq.n	800128c <MAX7219_setDecode+0x2c>
	{
		MAX7219_Handler->decode_mode = mode;	// Присовим новый режим, чтобы его потом отслеживать
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MAX7219_setDecode+0x38>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	731a      	strb	r2, [r3, #12]
		return ( MAX7219_write(MAX7219_DECODE_MODE_REG, mode) );	// Записали этот режим в регистр
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4619      	mov	r1, r3
 8001282:	2009      	movs	r0, #9
 8001284:	f7ff ffc2 	bl	800120c <MAX7219_write>
 8001288:	4603      	mov	r3, r0
 800128a:	e000      	b.n	800128e <MAX7219_setDecode+0x2e>
	}
	return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000308 	.word	0x20000308

0800129c <MAX7219_convertSymbol>:
{
//	MAX7219_setDecode(MAX7219_DECODE_FOR_ALL_DIGITS);
	MAX7219_write(seg, digit);			// И записали то что хотели
}
//---------------------------------------------------------
static char MAX7219_convertSymbol(char symbol) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	switch(symbol) {
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b5a      	cmp	r3, #90	; 0x5a
 80012aa:	f200 8117 	bhi.w	80014dc <MAX7219_convertSymbol+0x240>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <MAX7219_convertSymbol+0x18>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	08001421 	.word	0x08001421
 80012b8:	08001425 	.word	0x08001425
 80012bc:	08001429 	.word	0x08001429
 80012c0:	0800142d 	.word	0x0800142d
 80012c4:	08001431 	.word	0x08001431
 80012c8:	08001435 	.word	0x08001435
 80012cc:	08001439 	.word	0x08001439
 80012d0:	0800143d 	.word	0x0800143d
 80012d4:	08001441 	.word	0x08001441
 80012d8:	08001445 	.word	0x08001445
 80012dc:	080014dd 	.word	0x080014dd
 80012e0:	080014dd 	.word	0x080014dd
 80012e4:	080014dd 	.word	0x080014dd
 80012e8:	080014dd 	.word	0x080014dd
 80012ec:	080014dd 	.word	0x080014dd
 80012f0:	080014dd 	.word	0x080014dd
 80012f4:	080014dd 	.word	0x080014dd
 80012f8:	080014dd 	.word	0x080014dd
 80012fc:	080014dd 	.word	0x080014dd
 8001300:	080014dd 	.word	0x080014dd
 8001304:	080014dd 	.word	0x080014dd
 8001308:	080014dd 	.word	0x080014dd
 800130c:	080014dd 	.word	0x080014dd
 8001310:	080014dd 	.word	0x080014dd
 8001314:	080014dd 	.word	0x080014dd
 8001318:	080014dd 	.word	0x080014dd
 800131c:	080014dd 	.word	0x080014dd
 8001320:	080014dd 	.word	0x080014dd
 8001324:	080014dd 	.word	0x080014dd
 8001328:	080014dd 	.word	0x080014dd
 800132c:	080014dd 	.word	0x080014dd
 8001330:	080014dd 	.word	0x080014dd
 8001334:	080014dd 	.word	0x080014dd
 8001338:	080014dd 	.word	0x080014dd
 800133c:	080014dd 	.word	0x080014dd
 8001340:	080014dd 	.word	0x080014dd
 8001344:	080014dd 	.word	0x080014dd
 8001348:	080014dd 	.word	0x080014dd
 800134c:	080014dd 	.word	0x080014dd
 8001350:	080014dd 	.word	0x080014dd
 8001354:	080014dd 	.word	0x080014dd
 8001358:	080014dd 	.word	0x080014dd
 800135c:	080014dd 	.word	0x080014dd
 8001360:	080014dd 	.word	0x080014dd
 8001364:	080014dd 	.word	0x080014dd
 8001368:	080014d9 	.word	0x080014d9
 800136c:	080014dd 	.word	0x080014dd
 8001370:	080014dd 	.word	0x080014dd
 8001374:	08001449 	.word	0x08001449
 8001378:	0800144d 	.word	0x0800144d
 800137c:	08001451 	.word	0x08001451
 8001380:	08001455 	.word	0x08001455
 8001384:	08001459 	.word	0x08001459
 8001388:	0800145d 	.word	0x0800145d
 800138c:	08001461 	.word	0x08001461
 8001390:	08001465 	.word	0x08001465
 8001394:	08001469 	.word	0x08001469
 8001398:	0800146d 	.word	0x0800146d
 800139c:	080014dd 	.word	0x080014dd
 80013a0:	080014dd 	.word	0x080014dd
 80013a4:	080014dd 	.word	0x080014dd
 80013a8:	080014dd 	.word	0x080014dd
 80013ac:	080014dd 	.word	0x080014dd
 80013b0:	080014dd 	.word	0x080014dd
 80013b4:	080014dd 	.word	0x080014dd
 80013b8:	08001471 	.word	0x08001471
 80013bc:	08001475 	.word	0x08001475
 80013c0:	08001479 	.word	0x08001479
 80013c4:	0800147d 	.word	0x0800147d
 80013c8:	08001481 	.word	0x08001481
 80013cc:	08001485 	.word	0x08001485
 80013d0:	08001489 	.word	0x08001489
 80013d4:	0800148d 	.word	0x0800148d
 80013d8:	08001491 	.word	0x08001491
 80013dc:	08001495 	.word	0x08001495
 80013e0:	08001499 	.word	0x08001499
 80013e4:	0800149d 	.word	0x0800149d
 80013e8:	080014a1 	.word	0x080014a1
 80013ec:	080014a5 	.word	0x080014a5
 80013f0:	080014a9 	.word	0x080014a9
 80013f4:	080014ad 	.word	0x080014ad
 80013f8:	080014b1 	.word	0x080014b1
 80013fc:	080014b5 	.word	0x080014b5
 8001400:	080014b9 	.word	0x080014b9
 8001404:	080014bd 	.word	0x080014bd
 8001408:	080014c1 	.word	0x080014c1
 800140c:	080014c5 	.word	0x080014c5
 8001410:	080014c9 	.word	0x080014c9
 8001414:	080014cd 	.word	0x080014cd
 8001418:	080014d1 	.word	0x080014d1
 800141c:	080014d5 	.word	0x080014d5
		case 0: return _0;
 8001420:	237e      	movs	r3, #126	; 0x7e
 8001422:	e05c      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 1: return _1;
 8001424:	2330      	movs	r3, #48	; 0x30
 8001426:	e05a      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 2: return _2;
 8001428:	236d      	movs	r3, #109	; 0x6d
 800142a:	e058      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 3: return _3;
 800142c:	2379      	movs	r3, #121	; 0x79
 800142e:	e056      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 4: return _4;
 8001430:	2333      	movs	r3, #51	; 0x33
 8001432:	e054      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 5: return _5;
 8001434:	235b      	movs	r3, #91	; 0x5b
 8001436:	e052      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 6: return _6;
 8001438:	235f      	movs	r3, #95	; 0x5f
 800143a:	e050      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 7: return _7;
 800143c:	2370      	movs	r3, #112	; 0x70
 800143e:	e04e      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 8: return _8;
 8001440:	237f      	movs	r3, #127	; 0x7f
 8001442:	e04c      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 9: return _9;
 8001444:	237b      	movs	r3, #123	; 0x7b
 8001446:	e04a      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '0': return _0;
 8001448:	237e      	movs	r3, #126	; 0x7e
 800144a:	e048      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '1': return _1;
 800144c:	2330      	movs	r3, #48	; 0x30
 800144e:	e046      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '2': return _2;
 8001450:	236d      	movs	r3, #109	; 0x6d
 8001452:	e044      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '3': return _3;
 8001454:	2379      	movs	r3, #121	; 0x79
 8001456:	e042      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '4': return _4;
 8001458:	2333      	movs	r3, #51	; 0x33
 800145a:	e040      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '5': return _5;
 800145c:	235b      	movs	r3, #91	; 0x5b
 800145e:	e03e      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '6': return _6;
 8001460:	235f      	movs	r3, #95	; 0x5f
 8001462:	e03c      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '7': return _7;
 8001464:	2370      	movs	r3, #112	; 0x70
 8001466:	e03a      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '8': return _8;
 8001468:	237f      	movs	r3, #127	; 0x7f
 800146a:	e038      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '9': return _9;
 800146c:	237b      	movs	r3, #123	; 0x7b
 800146e:	e036      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'A': return _A;
 8001470:	2377      	movs	r3, #119	; 0x77
 8001472:	e034      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'B': return _B;
 8001474:	231f      	movs	r3, #31
 8001476:	e032      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'C': return _C;
 8001478:	234e      	movs	r3, #78	; 0x4e
 800147a:	e030      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'D': return _D;
 800147c:	233d      	movs	r3, #61	; 0x3d
 800147e:	e02e      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'E': return _E;
 8001480:	234f      	movs	r3, #79	; 0x4f
 8001482:	e02c      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'F': return _F;
 8001484:	2347      	movs	r3, #71	; 0x47
 8001486:	e02a      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'G': return _G;
 8001488:	235e      	movs	r3, #94	; 0x5e
 800148a:	e028      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'H': return _H;
 800148c:	2337      	movs	r3, #55	; 0x37
 800148e:	e026      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'I': return _I;
 8001490:	2330      	movs	r3, #48	; 0x30
 8001492:	e024      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'J': return _J;
 8001494:	233c      	movs	r3, #60	; 0x3c
 8001496:	e022      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'K': return _K;
 8001498:	232f      	movs	r3, #47	; 0x2f
 800149a:	e020      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'L': return _L;
 800149c:	230e      	movs	r3, #14
 800149e:	e01e      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'M': return _M;
 80014a0:	2355      	movs	r3, #85	; 0x55
 80014a2:	e01c      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'N': return _N;
 80014a4:	2315      	movs	r3, #21
 80014a6:	e01a      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'O': return _O;
 80014a8:	231d      	movs	r3, #29
 80014aa:	e018      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'P': return _P;
 80014ac:	2367      	movs	r3, #103	; 0x67
 80014ae:	e016      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'Q': return _Q;
 80014b0:	2373      	movs	r3, #115	; 0x73
 80014b2:	e014      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'R': return _R;
 80014b4:	2305      	movs	r3, #5
 80014b6:	e012      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'S': return _S;
 80014b8:	235b      	movs	r3, #91	; 0x5b
 80014ba:	e010      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'T': return _T;
 80014bc:	230f      	movs	r3, #15
 80014be:	e00e      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'U': return _U;
 80014c0:	233e      	movs	r3, #62	; 0x3e
 80014c2:	e00c      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'V': return _V;
 80014c4:	231c      	movs	r3, #28
 80014c6:	e00a      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'W': return _W;
 80014c8:	235c      	movs	r3, #92	; 0x5c
 80014ca:	e008      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'X': return _X;
 80014cc:	2349      	movs	r3, #73	; 0x49
 80014ce:	e006      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'Y': return _Y;
 80014d0:	233b      	movs	r3, #59	; 0x3b
 80014d2:	e004      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case 'Z': return _Z;
 80014d4:	236d      	movs	r3, #109	; 0x6d
 80014d6:	e002      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		case '-': return _MINUS;
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <MAX7219_convertSymbol+0x242>
		break;
		default: return 0;
 80014dc:	2300      	movs	r3, #0
	}
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop

080014ec <MAX7219_sendOneChar>:
//---------------------------------------------------------
void MAX7219_sendOneChar(uint8_t seg, char c)			// Функция преобразует к виду семисегментника и передаёт дальше
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	460a      	mov	r2, r1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	4613      	mov	r3, r2
 80014fa:	71bb      	strb	r3, [r7, #6]
	MAX7219_write(seg, MAX7219_convertSymbol( c ));			// И записали то что хотели
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fecc 	bl	800129c <MAX7219_convertSymbol>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe7d 	bl	800120c <MAX7219_write>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <MAX7219_sendOffsetString>:
//---------------------------------------------------------
void MAX7219_sendOffsetString(uint8_t offset, char *str)	// Функция записи строки со смещением
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	6039      	str	r1, [r7, #0]
 8001524:	71fb      	strb	r3, [r7, #7]
	int seg_iter = MAX7219_SEGMENTS_AMOUNT;		// Итератор сегментов
 8001526:	2308      	movs	r3, #8
 8001528:	60fb      	str	r3, [r7, #12]

	if (strlen(str) > 8) return;				// Проверка на валидность строки
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f7fe fe58 	bl	80001e0 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	2b08      	cmp	r3, #8
 8001534:	d822      	bhi.n	800157c <MAX7219_sendOffsetString+0x62>
	MAX7219_setDecode(MAX7219_NO_DECODE);		// Убрали декодирование
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fe92 	bl	8001260 <MAX7219_setDecode>
	for(uint8_t i = 0; str[i] != '\0'; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	72fb      	strb	r3, [r7, #11]
 8001540:	e015      	b.n	800156e <MAX7219_sendOffsetString+0x54>
	{
		if((seg_iter - offset) == 0) break;		// Чтобы случайно не записать в другой регистр
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	d01a      	beq.n	8001580 <MAX7219_sendOffsetString+0x66>
		MAX7219_sendOneChar( (seg_iter - offset), str[i] );
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	b2d8      	uxtb	r0, r3
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff ffc5 	bl	80014ec <MAX7219_sendOneChar>
		seg_iter--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3b01      	subs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; str[i] != '\0'; i++)
 8001568:	7afb      	ldrb	r3, [r7, #11]
 800156a:	3301      	adds	r3, #1
 800156c:	72fb      	strb	r3, [r7, #11]
 800156e:	7afb      	ldrb	r3, [r7, #11]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1e3      	bne.n	8001542 <MAX7219_sendOffsetString+0x28>
 800157a:	e002      	b.n	8001582 <MAX7219_sendOffsetString+0x68>
	if (strlen(str) > 8) return;				// Проверка на валидность строки
 800157c:	bf00      	nop
 800157e:	e000      	b.n	8001582 <MAX7219_sendOffsetString+0x68>
		if((seg_iter - offset) == 0) break;		// Чтобы случайно не записать в другой регистр
 8001580:	bf00      	nop
		/*	Передали функции записи в регистр, адрес сегмента и преобразованный char в семисегментный символ	*/
	}
}
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <MAX7219_sendString>:
//---------------------------------------------------------
void MAX7219_sendString(char *str)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	int seg_iter = 8;							// Итератор сегментов
 8001590:	2308      	movs	r3, #8
 8001592:	60fb      	str	r3, [r7, #12]
	if (strlen(str) > 8) return;				// Проверка на валидность строки
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7fe fe23 	bl	80001e0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	2b08      	cmp	r3, #8
 800159e:	d81b      	bhi.n	80015d8 <MAX7219_sendString+0x50>
	MAX7219_setDecode(MAX7219_NO_DECODE);		// Убрали декодирование
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fe5d 	bl	8001260 <MAX7219_setDecode>
	for(uint8_t i = 0; str[i] != '\0'; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	72fb      	strb	r3, [r7, #11]
 80015aa:	e00e      	b.n	80015ca <MAX7219_sendString+0x42>
	{
		MAX7219_sendOneChar( seg_iter, str[i]);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	b2d8      	uxtb	r0, r3
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff ff97 	bl	80014ec <MAX7219_sendOneChar>
		seg_iter--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; str[i] != '\0'; i++)
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	3301      	adds	r3, #1
 80015c8:	72fb      	strb	r3, [r7, #11]
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ea      	bne.n	80015ac <MAX7219_sendString+0x24>
 80015d6:	e000      	b.n	80015da <MAX7219_sendString+0x52>
	if (strlen(str) > 8) return;				// Проверка на валидность строки
 80015d8:	bf00      	nop
		/*	Передали функции записи в регистр, адрес сегмента и преобразованный char в семисегментный символ	*/
	}
}
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <MAX7219_sendFloatNumber>:
{
	MAX7219_sendString("Error");
}
//---------------------------------------------------------
uint8_t MAX7219_sendFloatNumber(float number)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	ed87 0a01 	vstr	s0, [r7, #4]
	int seg_iter = MAX7219_SEGMENTS_AMOUNT;
 80015ea:	2308      	movs	r3, #8
 80015ec:	617b      	str	r3, [r7, #20]
	char str[9];
	sprintf(str, "%.1f", number);	// Завернули в строку
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7fe ffb2 	bl	8000558 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	f107 0008 	add.w	r0, r7, #8
 80015fc:	4926      	ldr	r1, [pc, #152]	; (8001698 <MAX7219_sendFloatNumber+0xb8>)
 80015fe:	f006 fb8f 	bl	8007d20 <siprintf>

	for(uint8_t i = 0; str[i] != '\0'; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	74fb      	strb	r3, [r7, #19]
 8001606:	e034      	b.n	8001672 <MAX7219_sendFloatNumber+0x92>
	{
		if( str[i+1] == '.') {
 8001608:	7cfb      	ldrb	r3, [r7, #19]
 800160a:	3301      	adds	r3, #1
 800160c:	3318      	adds	r3, #24
 800160e:	443b      	add	r3, r7
 8001610:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001614:	2b2e      	cmp	r3, #46	; 0x2e
 8001616:	d112      	bne.n	800163e <MAX7219_sendFloatNumber+0x5e>
			MAX7219_write( seg_iter, MAX7219_convertSymbol( str[i] ) | POINT );	// Добавим 0х80 чтобы вывести в тот же сегмент точку
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	b2dc      	uxtb	r4, r3
 800161c:	7cfb      	ldrb	r3, [r7, #19]
 800161e:	3318      	adds	r3, #24
 8001620:	443b      	add	r3, r7
 8001622:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fe38 	bl	800129c <MAX7219_convertSymbol>
 800162c:	4603      	mov	r3, r0
 800162e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4619      	mov	r1, r3
 8001636:	4620      	mov	r0, r4
 8001638:	f7ff fde8 	bl	800120c <MAX7219_write>
 800163c:	e011      	b.n	8001662 <MAX7219_sendFloatNumber+0x82>
		}
		else if(str[i] == '.') {
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	3318      	adds	r3, #24
 8001642:	443b      	add	r3, r7
 8001644:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001648:	2b2e      	cmp	r3, #46	; 0x2e
 800164a:	d00e      	beq.n	800166a <MAX7219_sendFloatNumber+0x8a>
			continue;
		}
		else {
			MAX7219_sendOneChar( seg_iter, str[i] );
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	3318      	adds	r3, #24
 8001654:	443b      	add	r3, r7
 8001656:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f7ff ff45 	bl	80014ec <MAX7219_sendOneChar>
		}
		seg_iter--;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3b01      	subs	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e000      	b.n	800166c <MAX7219_sendFloatNumber+0x8c>
			continue;
 800166a:	bf00      	nop
	for(uint8_t i = 0; str[i] != '\0'; i++)
 800166c:	7cfb      	ldrb	r3, [r7, #19]
 800166e:	3301      	adds	r3, #1
 8001670:	74fb      	strb	r3, [r7, #19]
 8001672:	7cfb      	ldrb	r3, [r7, #19]
 8001674:	3318      	adds	r3, #24
 8001676:	443b      	add	r3, r7
 8001678:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1c3      	bne.n	8001608 <MAX7219_sendFloatNumber+0x28>
		/*	Передали функции записи в регистр, адрес сегмента и преобразованный char в семисегментный символ	*/
	}

	return (strlen(str));
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fdab 	bl	80001e0 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	b2db      	uxtb	r3, r3
	/* Это нужно для того, чтобы знать смещение и приписать размерность числу (205.5 Hz к примеру).
	  	  Используется для функции MAX7219_sendOffsetString() */
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	0800a218 	.word	0x0800a218

0800169c <MAX7219_sendDuty>:
		}
	}
}
//---------------------------------------------------------
uint8_t MAX7219_sendDuty(float duty)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t offset;
	offset = MAX7219_sendFloatNumber(duty);
 80016a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80016aa:	f7ff ff99 	bl	80015e0 <MAX7219_sendFloatNumber>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
	return offset;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <MAX7219_sendFreq>:
//---------------------------------------------------------
uint8_t MAX7219_sendFreq(float freq)	// Функция для отображения частоты на дисплее
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t offset;
	offset = MAX7219_sendFloatNumber(freq);
 80016c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80016ca:	f7ff ff89 	bl	80015e0 <MAX7219_sendFloatNumber>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
	MAX7219_sendOffsetString(offset, "KHZ");
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4904      	ldr	r1, [pc, #16]	; (80016e8 <MAX7219_sendFreq+0x2c>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff1f 	bl	800151a <MAX7219_sendOffsetString>
	return offset;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800a220 	.word	0x0800a220

080016ec <MAX7219_clearOneSegment>:
//---------------------------------------------------------
void MAX7219_clearOneSegment(uint8_t seg)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	MAX7219_sendOffsetString(seg, " ");
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	4903      	ldr	r1, [pc, #12]	; (8001708 <MAX7219_clearOneSegment+0x1c>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff0d 	bl	800151a <MAX7219_sendOffsetString>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	0800a224 	.word	0x0800a224

0800170c <MAX7219_clearAll>:
void MAX7219_blinkOneSegment(uint8_t seg)
{

}
void MAX7219_clearAll()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	for (uint8_t i = MAX7219_SEGMENT_0; i <= MAX7219_SEGMENT_7; i++)
 8001712:	2301      	movs	r3, #1
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	e007      	b.n	8001728 <MAX7219_clearAll+0x1c>
	{
 		MAX7219_write(i, 0);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fd75 	bl	800120c <MAX7219_write>
	for (uint8_t i = MAX7219_SEGMENT_0; i <= MAX7219_SEGMENT_7; i++)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3301      	adds	r3, #1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b08      	cmp	r3, #8
 800172c:	d9f4      	bls.n	8001718 <MAX7219_clearAll+0xc>
	}
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <MAX7219_init>:
//---------------------------------------------------------
HAL_StatusTypeDef MAX7219_init(max7219_init_t *cfg)		// Инициализация через структуру
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	MAX7219_Handler = cfg;
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <MAX7219_init+0x54>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
	/* Присвоили указатель на структуру с заполненными полями пользователем в ту, которая используется только здесь	*/
	MAX7219_write(MAX7219_DECODE_MODE_REG, MAX7219_Handler->decode_mode);		// Декодирование для всех
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MAX7219_init+0x54>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	7b1b      	ldrb	r3, [r3, #12]
 800174c:	4619      	mov	r1, r3
 800174e:	2009      	movs	r0, #9
 8001750:	f7ff fd5c 	bl	800120c <MAX7219_write>
	MAX7219_write(MAX7219_INTENSITY_REG, MAX7219_Handler->indicator_intensity);
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <MAX7219_init+0x54>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	7b5b      	ldrb	r3, [r3, #13]
 800175a:	4619      	mov	r1, r3
 800175c:	200a      	movs	r0, #10
 800175e:	f7ff fd55 	bl	800120c <MAX7219_write>
	MAX7219_write(MAX7219_SCAN_LIMIT_REG, MAX7219_Handler->digits_quantity);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MAX7219_init+0x54>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	7b9b      	ldrb	r3, [r3, #14]
 8001768:	4619      	mov	r1, r3
 800176a:	200b      	movs	r0, #11
 800176c:	f7ff fd4e 	bl	800120c <MAX7219_write>
	result = MAX7219_write(MAX7219_MODE_REG, MAX7219_NORMAL_MODE);
 8001770:	2101      	movs	r1, #1
 8001772:	200c      	movs	r0, #12
 8001774:	f7ff fd4a 	bl	800120c <MAX7219_write>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]

	MAX7219_clearAll();		// Чистим дисплей на всякий
 800177c:	f7ff ffc6 	bl	800170c <MAX7219_clearAll>
	return result;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000308 	.word	0x20000308

08001790 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <vApplicationGetIdleTaskMemory+0x2c>)
 80017a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <vApplicationGetIdleTaskMemory+0x30>)
 80017a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000030c 	.word	0x2000030c
 80017c0:	20000360 	.word	0x20000360

080017c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)		// Колбек прерывания кнопки return
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
	button_exti = GPIO_Pin;				// Присвоим глобальной переменной номер ножки, на к-ой было прерывания
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	8013      	strh	r3, [r2, #0]
//	BaseType_t high_task_awoken = 0;
	HAL_TIM_Base_Start_IT(&htim9);		// Запустили таймер, там он уже отслекдит по глобальной переменной что ему делать
 80017d4:	4808      	ldr	r0, [pc, #32]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80017d6:	f002 fe01 	bl	80043dc <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80017da:	2007      	movs	r0, #7
 80017dc:	f001 fcb2 	bl	8003144 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80017e0:	2008      	movs	r0, #8
 80017e2:	f001 fcaf 	bl	8003144 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80017e6:	2028      	movs	r0, #40	; 0x28
 80017e8:	f001 fcac 	bl	8003144 <HAL_NVIC_DisableIRQ>

//	pending = HAL_NVIC_GetPendingIRQ(EXTI15_10_IRQn);
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200006b4 	.word	0x200006b4
 80017f8:	20000648 	.word	0x20000648

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	b0ac      	sub	sp, #176	; 0xb0
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001802:	f001 fb57 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001806:	f000 f8cd 	bl	80019a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180a:	f000 fa69 	bl	8001ce0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800180e:	f000 f933 	bl	8001a78 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001812:	f000 f967 	bl	8001ae4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001816:	f000 f9b3 	bl	8001b80 <MX_TIM4_Init>
  MX_TIM9_Init();
 800181a:	f000 fa27 	bl	8001c6c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  max7219_init_t cfg = {		// инициализируем структуру
 800181e:	4b4f      	ldr	r3, [pc, #316]	; (800195c <main+0x160>)
 8001820:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		  .indicator_intensity = MAX7219_INTENSITY_25_OF_32,
  		  .digits_quantity = MAX7219_DISPLAY_0_TO_7,
		  .CS_PORT = SPI_CS_GPIO_Port,					// На каком порту сконфигурировали CS
  		  .CS_PIN = SPI_CS_Pin							// Какой конкретно пин CS
    };
  MAX7219_init(&cfg);		// Вызвали функцию инициадизации
 800182a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff82 	bl	8001738 <MAX7219_init>

  MAX7219_clearAll();
 8001834:	f7ff ff6a 	bl	800170c <MAX7219_clearAll>
  MAX7219_sendString("SET MODE");	// Если выведется то все хорошо
 8001838:	4849      	ldr	r0, [pc, #292]	; (8001960 <main+0x164>)
 800183a:	f7ff fea5 	bl	8001588 <MAX7219_sendString>
  char buff[9];

  sprintf(buff, "%s", (mode == PWM_MODE)? "DAC_MODE" : "PWM_MODE");
*/

  xButtonQueue = xQueueCreate(10, sizeof(uint16_t));
 800183e:	2200      	movs	r2, #0
 8001840:	2102      	movs	r1, #2
 8001842:	200a      	movs	r0, #10
 8001844:	f003 fed2 	bl	80055ec <xQueueGenericCreate>
 8001848:	4603      	mov	r3, r0
 800184a:	4a46      	ldr	r2, [pc, #280]	; (8001964 <main+0x168>)
 800184c:	6013      	str	r3, [r2, #0]
  xDisplayStringQueue = xQueueCreate(10, sizeof(char[9]));
 800184e:	2200      	movs	r2, #0
 8001850:	2109      	movs	r1, #9
 8001852:	200a      	movs	r0, #10
 8001854:	f003 feca 	bl	80055ec <xQueueGenericCreate>
 8001858:	4603      	mov	r3, r0
 800185a:	4a43      	ldr	r2, [pc, #268]	; (8001968 <main+0x16c>)
 800185c:	6013      	str	r3, [r2, #0]
  xDisplayFreqQueue = xQueueCreate(10, sizeof(float));
 800185e:	2200      	movs	r2, #0
 8001860:	2104      	movs	r1, #4
 8001862:	200a      	movs	r0, #10
 8001864:	f003 fec2 	bl	80055ec <xQueueGenericCreate>
 8001868:	4603      	mov	r3, r0
 800186a:	4a40      	ldr	r2, [pc, #256]	; (800196c <main+0x170>)
 800186c:	6013      	str	r3, [r2, #0]
  xDisplayDutyQueue = xQueueCreate(10, sizeof(float));
 800186e:	2200      	movs	r2, #0
 8001870:	2104      	movs	r1, #4
 8001872:	200a      	movs	r0, #10
 8001874:	f003 feba 	bl	80055ec <xQueueGenericCreate>
 8001878:	4603      	mov	r3, r0
 800187a:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <main+0x174>)
 800187c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 10, 20);
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <main+0x178>)
 8001880:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800188a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fcee 	bl	8005272 <osMessageCreate>
 8001896:	4603      	mov	r3, r0
 8001898:	4a37      	ldr	r2, [pc, #220]	; (8001978 <main+0x17c>)
 800189a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <main+0x180>)
 800189e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80018a2:	461d      	mov	r5, r3
 80018a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fc7b 	bl	80051b2 <osThreadCreate>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a30      	ldr	r2, [pc, #192]	; (8001980 <main+0x184>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, readButtonTask, osPriorityNormal, 0, 1024);
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <main+0x188>)
 80018c4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80018c8:	461d      	mov	r5, r3
 80018ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80018d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fc68 	bl	80051b2 <osThreadCreate>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4a28      	ldr	r2, [pc, #160]	; (8001988 <main+0x18c>)
 80018e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, displayTask, osPriorityBelowNormal, 0, 1024);
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <main+0x190>)
 80018ea:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80018ee:	461d      	mov	r5, r3
 80018f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80018fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fc55 	bl	80051b2 <osThreadCreate>
 8001908:	4603      	mov	r3, r0
 800190a:	4a21      	ldr	r2, [pc, #132]	; (8001990 <main+0x194>)
 800190c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, dacTask, osPriorityAboveNormal, 0, 1024);
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <main+0x198>)
 8001910:	f107 0420 	add.w	r4, r7, #32
 8001914:	461d      	mov	r5, r3
 8001916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800191e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fc42 	bl	80051b2 <osThreadCreate>
 800192e:	4603      	mov	r3, r0
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <main+0x19c>)
 8001932:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, pwmTask, osPriorityAboveNormal, 0, 1024);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <main+0x1a0>)
 8001936:	1d3c      	adds	r4, r7, #4
 8001938:	461d      	mov	r5, r3
 800193a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fc31 	bl	80051b2 <osThreadCreate>
 8001950:	4603      	mov	r3, r0
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <main+0x1a4>)
 8001954:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001956:	f003 fc25 	bl	80051a4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800195a:	e7fe      	b.n	800195a <main+0x15e>
 800195c:	0800a270 	.word	0x0800a270
 8001960:	0800a264 	.word	0x0800a264
 8001964:	200006b8 	.word	0x200006b8
 8001968:	200006bc 	.word	0x200006bc
 800196c:	200006c0 	.word	0x200006c0
 8001970:	200006c4 	.word	0x200006c4
 8001974:	0800a280 	.word	0x0800a280
 8001978:	200006a4 	.word	0x200006a4
 800197c:	0800a290 	.word	0x0800a290
 8001980:	20000690 	.word	0x20000690
 8001984:	0800a2ac 	.word	0x0800a2ac
 8001988:	20000694 	.word	0x20000694
 800198c:	0800a2c8 	.word	0x0800a2c8
 8001990:	20000698 	.word	0x20000698
 8001994:	0800a2e4 	.word	0x0800a2e4
 8001998:	2000069c 	.word	0x2000069c
 800199c:	0800a300 	.word	0x0800a300
 80019a0:	200006a0 	.word	0x200006a0

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b094      	sub	sp, #80	; 0x50
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	2230      	movs	r2, #48	; 0x30
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 fd42 	bl	800743c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <SystemClock_Config+0xcc>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <SystemClock_Config+0xcc>)
 80019d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <SystemClock_Config+0xcc>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <SystemClock_Config+0xd0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019f0:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <SystemClock_Config+0xd0>)
 80019f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <SystemClock_Config+0xd0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a18:	2319      	movs	r3, #25
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a24:	2304      	movs	r3, #4
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 fd7f 	bl	8003530 <HAL_RCC_OscConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a38:	f000 ff52 	bl	80028e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a40:	2302      	movs	r3, #2
 8001a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2102      	movs	r1, #2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 ffe1 	bl	8003a20 <HAL_RCC_ClockConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a64:	f000 ff3c 	bl	80028e0 <Error_Handler>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3750      	adds	r7, #80	; 0x50
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000

08001a78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a7e:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <MX_SPI1_Init+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_SPI1_Init+0x64>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_SPI1_Init+0x64>)
 8001aac:	2208      	movs	r2, #8
 8001aae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <MX_SPI1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_SPI1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_SPI1_Init+0x64>)
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <MX_SPI1_Init+0x64>)
 8001aca:	f002 f9a7 	bl	8003e1c <HAL_SPI_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ad4:	f000 ff04 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000560 	.word	0x20000560
 8001ae0:	40013000 	.word	0x40013000

08001ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	463b      	mov	r3, r7
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <MX_TIM3_Init+0x98>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b16:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b28:	4813      	ldr	r0, [pc, #76]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b2a:	f002 fc07 	bl	800433c <HAL_TIM_Base_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b34:	f000 fed4 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b46:	f002 fefd 	bl	8004944 <HAL_TIM_ConfigClockSource>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b50:	f000 fec6 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_TIM3_Init+0x94>)
 8001b62:	f003 fa85 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b6c:	f000 feb8 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200005b8 	.word	0x200005b8
 8001b7c:	40000400 	.word	0x40000400

08001b80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	; 0x38
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]
 8001bae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001bb2:	4a2d      	ldr	r2, [pc, #180]	; (8001c68 <MX_TIM4_Init+0xe8>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bd6:	4823      	ldr	r0, [pc, #140]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001bd8:	f002 fbb0 	bl	800433c <HAL_TIM_Base_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001be2:	f000 fe7d 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	481c      	ldr	r0, [pc, #112]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001bf4:	f002 fea6 	bl	8004944 <HAL_TIM_ConfigClockSource>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001bfe:	f000 fe6f 	bl	80028e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c02:	4818      	ldr	r0, [pc, #96]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001c04:	f002 fc7b 	bl	80044fe <HAL_TIM_PWM_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c0e:	f000 fe67 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4810      	ldr	r0, [pc, #64]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001c22:	f003 fa25 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c2c:	f000 fe58 	bl	80028e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c30:	2360      	movs	r3, #96	; 0x60
 8001c32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2204      	movs	r2, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001c48:	f002 fdba 	bl	80047c0 <HAL_TIM_PWM_ConfigChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c52:	f000 fe45 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <MX_TIM4_Init+0xe4>)
 8001c58:	f000 ff18 	bl	8002a8c <HAL_TIM_MspPostInit>

}
 8001c5c:	bf00      	nop
 8001c5e:	3738      	adds	r7, #56	; 0x38
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000600 	.word	0x20000600
 8001c68:	40000800 	.word	0x40000800

08001c6c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	463b      	mov	r3, r7
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_TIM9_Init+0x6c>)
 8001c80:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <MX_TIM9_Init+0x70>)
 8001c82:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 639;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_TIM9_Init+0x6c>)
 8001c86:	f240 227f 	movw	r2, #639	; 0x27f
 8001c8a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_TIM9_Init+0x6c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_TIM9_Init+0x6c>)
 8001c94:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c98:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_TIM9_Init+0x6c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <MX_TIM9_Init+0x6c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001ca6:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <MX_TIM9_Init+0x6c>)
 8001ca8:	f002 fb48 	bl	800433c <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001cb2:	f000 fe15 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TIM9_Init+0x6c>)
 8001cc2:	f002 fe3f 	bl	8004944 <HAL_TIM_ConfigClockSource>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001ccc:	f000 fe08 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000648 	.word	0x20000648
 8001cdc:	40014000 	.word	0x40014000

08001ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a48      	ldr	r2, [pc, #288]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a41      	ldr	r2, [pc, #260]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a3a      	ldr	r2, [pc, #232]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a33      	ldr	r2, [pc, #204]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <MX_GPIO_Init+0x140>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d6c:	482d      	ldr	r0, [pc, #180]	; (8001e24 <MX_GPIO_Init+0x144>)
 8001d6e:	f001 fb93 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001d72:	2200      	movs	r2, #0
 8001d74:	21ff      	movs	r1, #255	; 0xff
 8001d76:	482c      	ldr	r0, [pc, #176]	; (8001e28 <MX_GPIO_Init+0x148>)
 8001d78:	f001 fb8e 	bl	8003498 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	482a      	ldr	r0, [pc, #168]	; (8001e2c <MX_GPIO_Init+0x14c>)
 8001d82:	f001 fb89 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 8001d86:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4821      	ldr	r0, [pc, #132]	; (8001e24 <MX_GPIO_Init+0x144>)
 8001da0:	f001 f9de 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001da4:	23ff      	movs	r3, #255	; 0xff
 8001da6:	617b      	str	r3, [r7, #20]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	481b      	ldr	r0, [pc, #108]	; (8001e28 <MX_GPIO_Init+0x148>)
 8001dbc:	f001 f9d0 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_UP_Pin BUTTON_DOWN_Pin BUTTON_OK_Pin
                           BUTTON_RETURN_Pin BUTTON_RIGHT_Pin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_UP_Pin|BUTTON_DOWN_Pin|BUTTON_OK_Pin
 8001dc0:	f24f 4302 	movw	r3, #62466	; 0xf402
 8001dc4:	617b      	str	r3, [r7, #20]
                          |BUTTON_RETURN_Pin|BUTTON_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4815      	ldr	r0, [pc, #84]	; (8001e2c <MX_GPIO_Init+0x14c>)
 8001dd8:	f001 f9c2 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001ddc:	2340      	movs	r3, #64	; 0x40
 8001dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	480e      	ldr	r0, [pc, #56]	; (8001e2c <MX_GPIO_Init+0x14c>)
 8001df4:	f001 f9b4 	bl	8003160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2105      	movs	r1, #5
 8001dfc:	2007      	movs	r0, #7
 8001dfe:	f001 f977 	bl	80030f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e02:	2007      	movs	r0, #7
 8001e04:	f001 f990 	bl	8003128 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2105      	movs	r1, #5
 8001e0c:	2028      	movs	r0, #40	; 0x28
 8001e0e:	f001 f96f 	bl	80030f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e12:	2028      	movs	r0, #40	; 0x28
 8001e14:	f001 f988 	bl	8003128 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400

08001e30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f003 fa06 	bl	800524a <osDelay>
 8001e3e:	e7fb      	b.n	8001e38 <StartDefaultTask+0x8>

08001e40 <readButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonTask */
void readButtonTask(void const * argument)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readButtonTask */
  /* Infinite loop */
	uint16_t button_num;	// Это принимаем из прерываний после обработки от дребезга
	uint8_t digit = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77bb      	strb	r3, [r7, #30]
	float freq = 1.0f;
 8001e4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e50:	61bb      	str	r3, [r7, #24]
	float duty = 50.0f;
 8001e52:	4b91      	ldr	r3, [pc, #580]	; (8002098 <readButtonTask+0x258>)
 8001e54:	617b      	str	r3, [r7, #20]
	char buff[9] = {};
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	711a      	strb	r2, [r3, #4]
	uint8_t mode = PWM_MODE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	77fb      	strb	r3, [r7, #31]
	for(;;)
	{
		button_num = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	83bb      	strh	r3, [r7, #28]
		xQueueReceive(xButtonQueue, &button_num, 100 / portTICK_RATE_MS);
 8001e6c:	4b8b      	ldr	r3, [pc, #556]	; (800209c <readButtonTask+0x25c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f107 011c 	add.w	r1, r7, #28
 8001e74:	2264      	movs	r2, #100	; 0x64
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fdac 	bl	80059d4 <xQueueReceive>
		/* Проверяем на наличие прерывания каждые 100 мс в блокированном состоянии	*/

		/*	Обязатльно обнуляем номер кнопки иначе программа работает как будто кнопка всегда нажата	*/
		switch(button_num)
 8001e7c:	8bbb      	ldrh	r3, [r7, #28]
 8001e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e82:	d079      	beq.n	8001f78 <readButtonTask+0x138>
 8001e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e88:	f300 8363 	bgt.w	8002552 <readButtonTask+0x712>
 8001e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e90:	f000 833a 	beq.w	8002508 <readButtonTask+0x6c8>
 8001e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e98:	f300 835b 	bgt.w	8002552 <readButtonTask+0x712>
 8001e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea0:	f000 8266 	beq.w	8002370 <readButtonTask+0x530>
 8001ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea8:	f300 8353 	bgt.w	8002552 <readButtonTask+0x712>
 8001eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb0:	f000 81a0 	beq.w	80021f4 <readButtonTask+0x3b4>
 8001eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb8:	f300 834b 	bgt.w	8002552 <readButtonTask+0x712>
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d004      	beq.n	8001eca <readButtonTask+0x8a>
 8001ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec4:	f000 80ad 	beq.w	8002022 <readButtonTask+0x1e2>
 8001ec8:	e343      	b.n	8002552 <readButtonTask+0x712>
		{
			case BUTTON_LEFT_Pin:
				if( set_mode_stage )	// Если мы на выборе режима то мы должны его выбрать
 8001eca:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <readButtonTask+0x260>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01a      	beq.n	8001f08 <readButtonTask+0xc8>
				{
					sprintf(buff, "%s", (mode == PWM_MODE)? "DAC MODE" : "PWM MODE");
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <readButtonTask+0x9c>
 8001ed8:	4a72      	ldr	r2, [pc, #456]	; (80020a4 <readButtonTask+0x264>)
 8001eda:	e000      	b.n	8001ede <readButtonTask+0x9e>
 8001edc:	4a72      	ldr	r2, [pc, #456]	; (80020a8 <readButtonTask+0x268>)
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	4972      	ldr	r1, [pc, #456]	; (80020ac <readButtonTask+0x26c>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f005 ff1b 	bl	8007d20 <siprintf>
					mode = (mode == PWM_MODE)? DAC_MODE : PWM_MODE;
 8001eea:	7ffb      	ldrb	r3, [r7, #31]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	77fb      	strb	r3, [r7, #31]
					/*	Заворчиваем строку в зависимости от режима тернанрным оператором, если стоял Ш�?М то
					  	  ставим ЦАП и наоборот. Затем таким же образом присваиваем режим	*/
					xQueueSendToBack(xDisplayStringQueue, buff, 10 / portTICK_RATE_MS);
 8001ef8:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <readButtonTask+0x270>)
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	f107 0108 	add.w	r1, r7, #8
 8001f00:	2300      	movs	r3, #0
 8001f02:	220a      	movs	r2, #10
 8001f04:	f003 fbcc 	bl	80056a0 <xQueueGenericSend>
				}
				if( set_freq_stage )
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <readButtonTask+0x274>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d016      	beq.n	8001f3e <readButtonTask+0xfe>
				{
					digit_position++;		// Двигаемся влево в сторону увеличения
 8001f10:	4b69      	ldr	r3, [pc, #420]	; (80020b8 <readButtonTask+0x278>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <readButtonTask+0x278>)
 8001f1a:	701a      	strb	r2, [r3, #0]
					if( digit_position > digits_amount ) digit_position = POINT_TENS;
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <readButtonTask+0x278>)
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <readButtonTask+0x27c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d902      	bls.n	8001f2e <readButtonTask+0xee>
 8001f28:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <readButtonTask+0x278>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
					/*	Если достигли старшего разряда то возвращаемся к младшему	*/
					xQueueSendToBack(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS);
 8001f2e:	4b64      	ldr	r3, [pc, #400]	; (80020c0 <readButtonTask+0x280>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f107 0118 	add.w	r1, r7, #24
 8001f36:	2300      	movs	r3, #0
 8001f38:	220a      	movs	r2, #10
 8001f3a:	f003 fbb1 	bl	80056a0 <xQueueGenericSend>
				}
				if( set_duty_stage )
 8001f3e:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <readButtonTask+0x284>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 82fc 	beq.w	8002540 <readButtonTask+0x700>
				{
					digit_position++;		// Двигаемся влево в сторону увеличения
 8001f48:	4b5b      	ldr	r3, [pc, #364]	; (80020b8 <readButtonTask+0x278>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <readButtonTask+0x278>)
 8001f52:	701a      	strb	r2, [r3, #0]
					if( digit_position > digits_amount ) digit_position = POINT_TENS;
 8001f54:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <readButtonTask+0x278>)
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	4b58      	ldr	r3, [pc, #352]	; (80020bc <readButtonTask+0x27c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d902      	bls.n	8001f66 <readButtonTask+0x126>
 8001f60:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <readButtonTask+0x278>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
					/*	Если достигли старшего разряда то возвращаемся к младшему	*/
					xQueueSendToBack(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS);
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <readButtonTask+0x288>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	f107 0114 	add.w	r1, r7, #20
 8001f6e:	2300      	movs	r3, #0
 8001f70:	220a      	movs	r2, #10
 8001f72:	f003 fb95 	bl	80056a0 <xQueueGenericSend>
				}
				break;
 8001f76:	e2e3      	b.n	8002540 <readButtonTask+0x700>

			case BUTTON_RIGHT_Pin:
				if( set_mode_stage )	// Если мы на выборе режима то мы должны его выбрать
 8001f78:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <readButtonTask+0x260>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01a      	beq.n	8001fb6 <readButtonTask+0x176>
				{
					sprintf(buff, "%s", (mode == PWM_MODE)? "DAC MODE" : "PWM MODE");
 8001f80:	7ffb      	ldrb	r3, [r7, #31]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <readButtonTask+0x14a>
 8001f86:	4a47      	ldr	r2, [pc, #284]	; (80020a4 <readButtonTask+0x264>)
 8001f88:	e000      	b.n	8001f8c <readButtonTask+0x14c>
 8001f8a:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <readButtonTask+0x268>)
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	4946      	ldr	r1, [pc, #280]	; (80020ac <readButtonTask+0x26c>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f005 fec4 	bl	8007d20 <siprintf>
					mode = (mode == PWM_MODE)? DAC_MODE : PWM_MODE;
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	77fb      	strb	r3, [r7, #31]
					/*	Заворчиваем строку в зависимости от режима тернанрным оператором, если стоял Ш�?М то
					  	  ставим ЦАП и наоборот. Затем таким же образом присваиваем режим	*/
					xQueueSendToBack(xDisplayStringQueue, buff, 10 / portTICK_RATE_MS);
 8001fa6:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <readButtonTask+0x270>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	f107 0108 	add.w	r1, r7, #8
 8001fae:	2300      	movs	r3, #0
 8001fb0:	220a      	movs	r2, #10
 8001fb2:	f003 fb75 	bl	80056a0 <xQueueGenericSend>
				}
				if( set_freq_stage )
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <readButtonTask+0x274>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <readButtonTask+0x1aa>
				{
					digit_position--;	// Двигаемся вправо в сторону уменьшения
 8001fbe:	4b3e      	ldr	r3, [pc, #248]	; (80020b8 <readButtonTask+0x278>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <readButtonTask+0x278>)
 8001fc8:	701a      	strb	r2, [r3, #0]
					if( digit_position < POINT_TENS)	digit_position = digits_amount;
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <readButtonTask+0x278>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <readButtonTask+0x19a>
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <readButtonTask+0x27c>)
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <readButtonTask+0x278>)
 8001fd8:	701a      	strb	r2, [r3, #0]
					/*	Если мы с самого краю справа, то нужно переместиться на самый старший разряд слева */
					xQueueSendToBack(xDisplayFreqQueue, &freq, 50 / portTICK_RATE_MS);
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <readButtonTask+0x280>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f107 0118 	add.w	r1, r7, #24
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2232      	movs	r2, #50	; 0x32
 8001fe6:	f003 fb5b 	bl	80056a0 <xQueueGenericSend>
				}
				if( set_duty_stage )
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <readButtonTask+0x284>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 82a8 	beq.w	8002544 <readButtonTask+0x704>
				{
					digit_position--;	// Двигаемся вправо в сторону уменьшения
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <readButtonTask+0x278>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <readButtonTask+0x278>)
 8001ffe:	701a      	strb	r2, [r3, #0]
					if( digit_position < POINT_TENS)	digit_position = digits_amount;
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <readButtonTask+0x278>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <readButtonTask+0x1d0>
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <readButtonTask+0x27c>)
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <readButtonTask+0x278>)
 800200e:	701a      	strb	r2, [r3, #0]
					/*	Если мы с самого краю справа, то нужно переместиться на самый старший разряд слева */
					xQueueSendToBack(xDisplayDutyQueue, &duty, 50 / portTICK_RATE_MS);
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <readButtonTask+0x288>)
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	f107 0114 	add.w	r1, r7, #20
 8002018:	2300      	movs	r3, #0
 800201a:	2232      	movs	r2, #50	; 0x32
 800201c:	f003 fb40 	bl	80056a0 <xQueueGenericSend>
				}
				break;
 8002020:	e290      	b.n	8002544 <readButtonTask+0x704>

			case BUTTON_UP_Pin:
				if( set_freq_stage )
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <readButtonTask+0x274>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d07f      	beq.n	800212a <readButtonTask+0x2ea>
				{
					freq += (digit_position == POINT_TENS) ? 0.1 : 0;	// Прибавляем 0.01 иначе 0, т.е ничего
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa93 	bl	8000558 <__aeabi_f2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4920      	ldr	r1, [pc, #128]	; (80020b8 <readButtonTask+0x278>)
 8002038:	7809      	ldrb	r1, [r1, #0]
 800203a:	2901      	cmp	r1, #1
 800203c:	d103      	bne.n	8002046 <readButtonTask+0x206>
 800203e:	a114      	add	r1, pc, #80	; (adr r1, 8002090 <readButtonTask+0x250>)
 8002040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002044:	e003      	b.n	800204e <readButtonTask+0x20e>
 8002046:	f04f 0000 	mov.w	r0, #0
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	f7fe f925 	bl	800029c <__adddf3>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fdcd 	bl	8000bf8 <__aeabi_d2f>
 800205e:	4603      	mov	r3, r0
 8002060:	61bb      	str	r3, [r7, #24]
					freq += (digit_position == UNITS) ? 1 : 0;
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <readButtonTask+0x278>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d102      	bne.n	8002070 <readButtonTask+0x230>
 800206a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800206e:	e001      	b.n	8002074 <readButtonTask+0x234>
 8002070:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80020cc <readButtonTask+0x28c>
 8002074:	edd7 7a06 	vldr	s15, [r7, #24]
 8002078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207c:	edc7 7a06 	vstr	s15, [r7, #24]
					freq +=(digit_position == TENS) ? 10 : 0;
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <readButtonTask+0x278>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d123      	bne.n	80020d0 <readButtonTask+0x290>
 8002088:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800208c:	e022      	b.n	80020d4 <readButtonTask+0x294>
 800208e:	bf00      	nop
 8002090:	9999999a 	.word	0x9999999a
 8002094:	3fb99999 	.word	0x3fb99999
 8002098:	42480000 	.word	0x42480000
 800209c:	200006b8 	.word	0x200006b8
 80020a0:	200006a8 	.word	0x200006a8
 80020a4:	0800a31c 	.word	0x0800a31c
 80020a8:	0800a328 	.word	0x0800a328
 80020ac:	0800a334 	.word	0x0800a334
 80020b0:	200006bc 	.word	0x200006bc
 80020b4:	200006a9 	.word	0x200006a9
 80020b8:	20000101 	.word	0x20000101
 80020bc:	20000102 	.word	0x20000102
 80020c0:	200006c0 	.word	0x200006c0
 80020c4:	200006aa 	.word	0x200006aa
 80020c8:	200006c4 	.word	0x200006c4
 80020cc:	00000000 	.word	0x00000000
 80020d0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80020cc <readButtonTask+0x28c>
 80020d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020dc:	edc7 7a06 	vstr	s15, [r7, #24]
					/*	В зависимости от того, на каком разряде мы остановились, будем прибавлять величину на
					 	 1 нужного нам разряда, будь то десятые, еидинцы или десятки */
					if(freq > 9.9)	digits_amount = TENS;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fa38 	bl	8000558 <__aeabi_f2d>
 80020e8:	a3b3      	add	r3, pc, #716	; (adr r3, 80023b8 <readButtonTask+0x578>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe fd1b 	bl	8000b28 <__aeabi_dcmpgt>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <readButtonTask+0x2be>
 80020f8:	4bb3      	ldr	r3, [pc, #716]	; (80023c8 <readButtonTask+0x588>)
 80020fa:	2203      	movs	r2, #3
 80020fc:	701a      	strb	r2, [r3, #0]
					if(freq > 99.9)	freq = 99.9;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fa29 	bl	8000558 <__aeabi_f2d>
 8002106:	a3a8      	add	r3, pc, #672	; (adr r3, 80023a8 <readButtonTask+0x568>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe fd0c 	bl	8000b28 <__aeabi_dcmpgt>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <readButtonTask+0x2da>
 8002116:	4bad      	ldr	r3, [pc, #692]	; (80023cc <readButtonTask+0x58c>)
 8002118:	61bb      	str	r3, [r7, #24]
					/* Увеличиваем кол-во цифр на дисплее, чтобы среди них выбирать нужный разряд, а также
					 * ограничиваем частоту до 99.9 кГц */
					xQueueSendToBack(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS);
 800211a:	4bad      	ldr	r3, [pc, #692]	; (80023d0 <readButtonTask+0x590>)
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	f107 0118 	add.w	r1, r7, #24
 8002122:	2300      	movs	r3, #0
 8002124:	220a      	movs	r2, #10
 8002126:	f003 fabb 	bl	80056a0 <xQueueGenericSend>
				}
				if( set_duty_stage )		// Если мы на стадии выбора скважность
 800212a:	4baa      	ldr	r3, [pc, #680]	; (80023d4 <readButtonTask+0x594>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 820a 	beq.w	8002548 <readButtonTask+0x708>
				{
					duty += (digit_position == POINT_TENS) ? 0.1 : 0;	// Прибавляем 0.01 иначе 0, т.е ничего
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa0e 	bl	8000558 <__aeabi_f2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	49a5      	ldr	r1, [pc, #660]	; (80023d8 <readButtonTask+0x598>)
 8002142:	7809      	ldrb	r1, [r1, #0]
 8002144:	2901      	cmp	r1, #1
 8002146:	d103      	bne.n	8002150 <readButtonTask+0x310>
 8002148:	a199      	add	r1, pc, #612	; (adr r1, 80023b0 <readButtonTask+0x570>)
 800214a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800214e:	e003      	b.n	8002158 <readButtonTask+0x318>
 8002150:	f04f 0000 	mov.w	r0, #0
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	f7fe f8a0 	bl	800029c <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe fd48 	bl	8000bf8 <__aeabi_d2f>
 8002168:	4603      	mov	r3, r0
 800216a:	617b      	str	r3, [r7, #20]
					duty += (digit_position == UNITS) ? 1 : 0;
 800216c:	4b9a      	ldr	r3, [pc, #616]	; (80023d8 <readButtonTask+0x598>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d102      	bne.n	800217a <readButtonTask+0x33a>
 8002174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002178:	e001      	b.n	800217e <readButtonTask+0x33e>
 800217a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80023dc <readButtonTask+0x59c>
 800217e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002186:	edc7 7a05 	vstr	s15, [r7, #20]
					duty += (digit_position == TENS) ? 10 : 0;
 800218a:	4b93      	ldr	r3, [pc, #588]	; (80023d8 <readButtonTask+0x598>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d102      	bne.n	8002198 <readButtonTask+0x358>
 8002192:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002196:	e001      	b.n	800219c <readButtonTask+0x35c>
 8002198:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80023dc <readButtonTask+0x59c>
 800219c:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a4:	edc7 7a05 	vstr	s15, [r7, #20]

					if(duty > 9.9)	digits_amount = TENS;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f9d4 	bl	8000558 <__aeabi_f2d>
 80021b0:	a381      	add	r3, pc, #516	; (adr r3, 80023b8 <readButtonTask+0x578>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe fcb7 	bl	8000b28 <__aeabi_dcmpgt>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <readButtonTask+0x386>
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <readButtonTask+0x588>)
 80021c2:	2203      	movs	r2, #3
 80021c4:	701a      	strb	r2, [r3, #0]
					if(duty > 99.9)	duty = 99.9;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f9c5 	bl	8000558 <__aeabi_f2d>
 80021ce:	a376      	add	r3, pc, #472	; (adr r3, 80023a8 <readButtonTask+0x568>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fe fca8 	bl	8000b28 <__aeabi_dcmpgt>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <readButtonTask+0x3a2>
 80021de:	4b7b      	ldr	r3, [pc, #492]	; (80023cc <readButtonTask+0x58c>)
 80021e0:	617b      	str	r3, [r7, #20]

					xQueueSendToBack(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS);
 80021e2:	4b7f      	ldr	r3, [pc, #508]	; (80023e0 <readButtonTask+0x5a0>)
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	f107 0114 	add.w	r1, r7, #20
 80021ea:	2300      	movs	r3, #0
 80021ec:	220a      	movs	r2, #10
 80021ee:	f003 fa57 	bl	80056a0 <xQueueGenericSend>
				}
				break;
 80021f2:	e1a9      	b.n	8002548 <readButtonTask+0x708>

			case BUTTON_DOWN_Pin:
				if( set_freq_stage )
 80021f4:	4b7b      	ldr	r3, [pc, #492]	; (80023e4 <readButtonTask+0x5a4>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d059      	beq.n	80022b0 <readButtonTask+0x470>
				{
					freq -= (digit_position == POINT_TENS) ? 0.1 : 0;
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe f9aa 	bl	8000558 <__aeabi_f2d>
 8002204:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <readButtonTask+0x598>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d103      	bne.n	8002214 <readButtonTask+0x3d4>
 800220c:	a368      	add	r3, pc, #416	; (adr r3, 80023b0 <readButtonTask+0x570>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	e003      	b.n	800221c <readButtonTask+0x3dc>
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f7fe f83c 	bl	8000298 <__aeabi_dsub>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fce6 	bl	8000bf8 <__aeabi_d2f>
 800222c:	4603      	mov	r3, r0
 800222e:	61bb      	str	r3, [r7, #24]
					freq -= (digit_position == UNITS) ? 1 : 0;
 8002230:	ed97 7a06 	vldr	s14, [r7, #24]
 8002234:	4b68      	ldr	r3, [pc, #416]	; (80023d8 <readButtonTask+0x598>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d102      	bne.n	8002242 <readButtonTask+0x402>
 800223c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002240:	e001      	b.n	8002246 <readButtonTask+0x406>
 8002242:	eddf 7a66 	vldr	s15, [pc, #408]	; 80023dc <readButtonTask+0x59c>
 8002246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224a:	edc7 7a06 	vstr	s15, [r7, #24]
					freq -= (digit_position == TENS) ? 10 : 0;
 800224e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002252:	4b61      	ldr	r3, [pc, #388]	; (80023d8 <readButtonTask+0x598>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d102      	bne.n	8002260 <readButtonTask+0x420>
 800225a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800225e:	e001      	b.n	8002264 <readButtonTask+0x424>
 8002260:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80023dc <readButtonTask+0x59c>
 8002264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002268:	edc7 7a06 	vstr	s15, [r7, #24]

					if( freq < 10 )	digits_amount = UNITS;
 800226c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002270:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d502      	bpl.n	8002284 <readButtonTask+0x444>
 800227e:	4b52      	ldr	r3, [pc, #328]	; (80023c8 <readButtonTask+0x588>)
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
					if( freq <= 0.01 )	freq = 0.1;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f966 	bl	8000558 <__aeabi_f2d>
 800228c:	a34c      	add	r3, pc, #304	; (adr r3, 80023c0 <readButtonTask+0x580>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fe fc35 	bl	8000b00 <__aeabi_dcmple>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <readButtonTask+0x460>
 800229c:	4b52      	ldr	r3, [pc, #328]	; (80023e8 <readButtonTask+0x5a8>)
 800229e:	61bb      	str	r3, [r7, #24]
					/* Уменьшаем кол-во цифр на дисплее, чтобы среди них выбирать нужный разряд, а также
					 * ограничиваем частоту снизу до 0.1 кГц.
					 * Костыль в виде 0.01 нужен потому что float преобразует так, что при вычитании там не 0,
					 * а 0.000000004 сколько-то там, что больше 0, но выводится 0, т.к у нас sprintf с точностью
					 * до одного знака. Зная это, делаем 0.01*/
					xQueueSendToBack(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS);
 80022a0:	4b4b      	ldr	r3, [pc, #300]	; (80023d0 <readButtonTask+0x590>)
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	f107 0118 	add.w	r1, r7, #24
 80022a8:	2300      	movs	r3, #0
 80022aa:	220a      	movs	r2, #10
 80022ac:	f003 f9f8 	bl	80056a0 <xQueueGenericSend>
				}
				if( set_duty_stage )		// Если мы на стадии выбора скважность
 80022b0:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <readButtonTask+0x594>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8149 	beq.w	800254c <readButtonTask+0x70c>
				{
					duty -= (digit_position == POINT_TENS) ? 0.1 : 0;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f94b 	bl	8000558 <__aeabi_f2d>
 80022c2:	4b45      	ldr	r3, [pc, #276]	; (80023d8 <readButtonTask+0x598>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d103      	bne.n	80022d2 <readButtonTask+0x492>
 80022ca:	a339      	add	r3, pc, #228	; (adr r3, 80023b0 <readButtonTask+0x570>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	e003      	b.n	80022da <readButtonTask+0x49a>
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	f7fd ffdd 	bl	8000298 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fc87 	bl	8000bf8 <__aeabi_d2f>
 80022ea:	4603      	mov	r3, r0
 80022ec:	617b      	str	r3, [r7, #20]
					duty -= (digit_position == UNITS) ? 1 : 0;
 80022ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <readButtonTask+0x598>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d102      	bne.n	8002300 <readButtonTask+0x4c0>
 80022fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80022fe:	e001      	b.n	8002304 <readButtonTask+0x4c4>
 8002300:	eddf 7a36 	vldr	s15, [pc, #216]	; 80023dc <readButtonTask+0x59c>
 8002304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002308:	edc7 7a05 	vstr	s15, [r7, #20]
					duty -= (digit_position == TENS) ? 10 : 0;
 800230c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002310:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <readButtonTask+0x598>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d102      	bne.n	800231e <readButtonTask+0x4de>
 8002318:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800231c:	e001      	b.n	8002322 <readButtonTask+0x4e2>
 800231e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80023dc <readButtonTask+0x59c>
 8002322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002326:	edc7 7a05 	vstr	s15, [r7, #20]

					if(duty < 10)	digits_amount = UNITS;
 800232a:	edd7 7a05 	vldr	s15, [r7, #20]
 800232e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d502      	bpl.n	8002342 <readButtonTask+0x502>
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <readButtonTask+0x588>)
 800233e:	2202      	movs	r2, #2
 8002340:	701a      	strb	r2, [r3, #0]
					if(duty <= 0.01 )	duty = 0.1;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f907 	bl	8000558 <__aeabi_f2d>
 800234a:	a31d      	add	r3, pc, #116	; (adr r3, 80023c0 <readButtonTask+0x580>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe fbd6 	bl	8000b00 <__aeabi_dcmple>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <readButtonTask+0x51e>
 800235a:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <readButtonTask+0x5a8>)
 800235c:	617b      	str	r3, [r7, #20]

					xQueueSendToBack(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS);
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <readButtonTask+0x5a0>)
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	f107 0114 	add.w	r1, r7, #20
 8002366:	2300      	movs	r3, #0
 8002368:	220a      	movs	r2, #10
 800236a:	f003 f999 	bl	80056a0 <xQueueGenericSend>
				}
				break;
 800236e:	e0ed      	b.n	800254c <readButtonTask+0x70c>

			case BUTTON_OK_Pin:
				if( start_stage )	// Если мы в самом начале, то должны перейти дальше на выбор режима
 8002370:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <readButtonTask+0x5ac>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d041      	beq.n	80023fc <readButtonTask+0x5bc>
				{
					start_stage = false;
 8002378:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <readButtonTask+0x5ac>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
					set_mode_stage = true;
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <readButtonTask+0x5b0>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
					sprintf(buff, "PWM MODE");
 8002384:	f107 0308 	add.w	r3, r7, #8
 8002388:	491a      	ldr	r1, [pc, #104]	; (80023f4 <readButtonTask+0x5b4>)
 800238a:	4618      	mov	r0, r3
 800238c:	f005 fcc8 	bl	8007d20 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, buff, 10 / portTICK_RATE_MS);	// Ждём 10 мс
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <readButtonTask+0x5b8>)
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	f107 0108 	add.w	r1, r7, #8
 8002398:	2300      	movs	r3, #0
 800239a:	220a      	movs	r2, #10
 800239c:	f003 f980 	bl	80056a0 <xQueueGenericSend>
					continue;
 80023a0:	e0dc      	b.n	800255c <readButtonTask+0x71c>
 80023a2:	bf00      	nop
 80023a4:	f3af 8000 	nop.w
 80023a8:	9999999a 	.word	0x9999999a
 80023ac:	4058f999 	.word	0x4058f999
 80023b0:	9999999a 	.word	0x9999999a
 80023b4:	3fb99999 	.word	0x3fb99999
 80023b8:	cccccccd 	.word	0xcccccccd
 80023bc:	4023cccc 	.word	0x4023cccc
 80023c0:	47ae147b 	.word	0x47ae147b
 80023c4:	3f847ae1 	.word	0x3f847ae1
 80023c8:	20000102 	.word	0x20000102
 80023cc:	42c7cccd 	.word	0x42c7cccd
 80023d0:	200006c0 	.word	0x200006c0
 80023d4:	200006aa 	.word	0x200006aa
 80023d8:	20000101 	.word	0x20000101
 80023dc:	00000000 	.word	0x00000000
 80023e0:	200006c4 	.word	0x200006c4
 80023e4:	200006a9 	.word	0x200006a9
 80023e8:	3dcccccd 	.word	0x3dcccccd
 80023ec:	20000100 	.word	0x20000100
 80023f0:	200006a8 	.word	0x200006a8
 80023f4:	0800a328 	.word	0x0800a328
 80023f8:	200006bc 	.word	0x200006bc
				}
				if( set_mode_stage )		// Здесь подтвердили режим и выдали на дисплей частоту по умолчанию
 80023fc:	4b58      	ldr	r3, [pc, #352]	; (8002560 <readButtonTask+0x720>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <readButtonTask+0x60c>
				{
					digits_amount = UNITS;
 8002404:	4b57      	ldr	r3, [pc, #348]	; (8002564 <readButtonTask+0x724>)
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
					set_mode_stage = false;		// Чтобы сюда уже потом не зайти
 800240a:	4b55      	ldr	r3, [pc, #340]	; (8002560 <readButtonTask+0x720>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
					set_freq_stage = true;		// Чтобы зайти в условия выбора частоты
 8002410:	4b55      	ldr	r3, [pc, #340]	; (8002568 <readButtonTask+0x728>)
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
					sprintf(buff, "SET FREQ");
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4954      	ldr	r1, [pc, #336]	; (800256c <readButtonTask+0x72c>)
 800241c:	4618      	mov	r0, r3
 800241e:	f005 fc7f 	bl	8007d20 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, buff, 10 / portTICK_RATE_MS);	// На 1,5 сек отобразим надпись
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <readButtonTask+0x730>)
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	f107 0108 	add.w	r1, r7, #8
 800242a:	2300      	movs	r3, #0
 800242c:	220a      	movs	r2, #10
 800242e:	f003 f937 	bl	80056a0 <xQueueGenericSend>
					vTaskDelay(2000 / portTICK_RATE_MS);
 8002432:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002436:	f003 fe51 	bl	80060dc <vTaskDelay>
					xQueueSendToBack(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS);	// Отдали частоту в свою очередь
 800243a:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <readButtonTask+0x734>)
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	f107 0118 	add.w	r1, r7, #24
 8002442:	2300      	movs	r3, #0
 8002444:	220a      	movs	r2, #10
 8002446:	f003 f92b 	bl	80056a0 <xQueueGenericSend>
					continue;
 800244a:	e087      	b.n	800255c <readButtonTask+0x71c>
				}
				if( set_freq_stage )		// Здесь подтвердили частоту
 800244c:	4b46      	ldr	r3, [pc, #280]	; (8002568 <readButtonTask+0x728>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03f      	beq.n	80024d4 <readButtonTask+0x694>
				{
					if( mode == PWM_MODE )	// Если нам нужно задать ещё и скважность
 8002454:	7ffb      	ldrb	r3, [r7, #31]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d124      	bne.n	80024a4 <readButtonTask+0x664>
					{
						digits_amount = TENS;
 800245a:	4b42      	ldr	r3, [pc, #264]	; (8002564 <readButtonTask+0x724>)
 800245c:	2203      	movs	r2, #3
 800245e:	701a      	strb	r2, [r3, #0]
						sprintf(buff, "%s", "SET DUTY");
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	4a44      	ldr	r2, [pc, #272]	; (8002578 <readButtonTask+0x738>)
 8002466:	4945      	ldr	r1, [pc, #276]	; (800257c <readButtonTask+0x73c>)
 8002468:	4618      	mov	r0, r3
 800246a:	f005 fc59 	bl	8007d20 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, buff, 35 / portTICK_RATE_MS);
 800246e:	4b40      	ldr	r3, [pc, #256]	; (8002570 <readButtonTask+0x730>)
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f107 0108 	add.w	r1, r7, #8
 8002476:	2300      	movs	r3, #0
 8002478:	2223      	movs	r2, #35	; 0x23
 800247a:	f003 f911 	bl	80056a0 <xQueueGenericSend>
						vTaskDelay(2000 / portTICK_RATE_MS);
 800247e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002482:	f003 fe2b 	bl	80060dc <vTaskDelay>
						xQueueSendToBack(xDisplayDutyQueue, &duty, 35 / portTICK_RATE_MS);
 8002486:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <readButtonTask+0x740>)
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	f107 0114 	add.w	r1, r7, #20
 800248e:	2300      	movs	r3, #0
 8002490:	2223      	movs	r2, #35	; 0x23
 8002492:	f003 f905 	bl	80056a0 <xQueueGenericSend>
						set_duty_stage = true;			// Для режима Ш�?М нужно задать ещё и скважность
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <readButtonTask+0x744>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
						set_freq_stage = false;
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <readButtonTask+0x728>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
						continue;
 80024a2:	e05b      	b.n	800255c <readButtonTask+0x71c>
					}
					else 		// Если мы в режиме ЦАПа, то уже ничего больше задавать не нужно
					{
						set_duty_stage = false;
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <readButtonTask+0x744>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
						sprintf(buff, "%s", "DAC RUN");
 80024aa:	f107 0308 	add.w	r3, r7, #8
 80024ae:	4a36      	ldr	r2, [pc, #216]	; (8002588 <readButtonTask+0x748>)
 80024b0:	4932      	ldr	r1, [pc, #200]	; (800257c <readButtonTask+0x73c>)
 80024b2:	4618      	mov	r0, r3
 80024b4:	f005 fc34 	bl	8007d20 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, buff, 10 / portTICK_RATE_MS);
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <readButtonTask+0x730>)
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	f107 0108 	add.w	r1, r7, #8
 80024c0:	2300      	movs	r3, #0
 80024c2:	220a      	movs	r2, #10
 80024c4:	f003 f8ec 	bl	80056a0 <xQueueGenericSend>
						dac_is_running = true;
 80024c8:	4b30      	ldr	r3, [pc, #192]	; (800258c <readButtonTask+0x74c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
						/*	Завернем строку в buff о том, какой у нас режим работает, в зависимости от значения
						 	 переменной mode и сразу отправим её в очередь.	А также поднимем флаг для ЦАПа*/
					}
					set_freq_stage = false;
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <readButtonTask+0x728>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
				}
				if( set_duty_stage )
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <readButtonTask+0x744>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d039      	beq.n	8002550 <readButtonTask+0x710>
				{
					set_duty_stage = false;
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <readButtonTask+0x744>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
					sprintf(buff, "%s", "PWM RUN");
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <readButtonTask+0x750>)
 80024e8:	4924      	ldr	r1, [pc, #144]	; (800257c <readButtonTask+0x73c>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f005 fc18 	bl	8007d20 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, buff, 10 / portTICK_RATE_MS);
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <readButtonTask+0x730>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	f107 0108 	add.w	r1, r7, #8
 80024f8:	2300      	movs	r3, #0
 80024fa:	220a      	movs	r2, #10
 80024fc:	f003 f8d0 	bl	80056a0 <xQueueGenericSend>
					pwm_is_running = true;
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <readButtonTask+0x754>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002506:	e023      	b.n	8002550 <readButtonTask+0x710>

			case BUTTON_RETURN_Pin:
				set_mode_stage = false;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <readButtonTask+0x720>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
				set_duty_stage = false;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <readButtonTask+0x744>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
				set_freq_stage = false;
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <readButtonTask+0x728>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
				start_stage = true;
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <readButtonTask+0x758>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
				sprintf(buff, "%s", "SET MODE");
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4a1d      	ldr	r2, [pc, #116]	; (800259c <readButtonTask+0x75c>)
 8002526:	4915      	ldr	r1, [pc, #84]	; (800257c <readButtonTask+0x73c>)
 8002528:	4618      	mov	r0, r3
 800252a:	f005 fbf9 	bl	8007d20 <siprintf>
				xQueueSendToBack(xDisplayStringQueue, buff, 10 / portTICK_RATE_MS);
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <readButtonTask+0x730>)
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	f107 0108 	add.w	r1, r7, #8
 8002536:	2300      	movs	r3, #0
 8002538:	220a      	movs	r2, #10
 800253a:	f003 f8b1 	bl	80056a0 <xQueueGenericSend>
				break;
 800253e:	e008      	b.n	8002552 <readButtonTask+0x712>
				break;
 8002540:	bf00      	nop
 8002542:	e006      	b.n	8002552 <readButtonTask+0x712>
				break;
 8002544:	bf00      	nop
 8002546:	e004      	b.n	8002552 <readButtonTask+0x712>
				break;
 8002548:	bf00      	nop
 800254a:	e002      	b.n	8002552 <readButtonTask+0x712>
				break;
 800254c:	bf00      	nop
 800254e:	e000      	b.n	8002552 <readButtonTask+0x712>
				break;
 8002550:	bf00      	nop
		}

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002556:	4812      	ldr	r0, [pc, #72]	; (80025a0 <readButtonTask+0x760>)
 8002558:	f000 ffb7 	bl	80034ca <HAL_GPIO_TogglePin>
		button_num = 0;
 800255c:	e484      	b.n	8001e68 <readButtonTask+0x28>
 800255e:	bf00      	nop
 8002560:	200006a8 	.word	0x200006a8
 8002564:	20000102 	.word	0x20000102
 8002568:	200006a9 	.word	0x200006a9
 800256c:	0800a338 	.word	0x0800a338
 8002570:	200006bc 	.word	0x200006bc
 8002574:	200006c0 	.word	0x200006c0
 8002578:	0800a344 	.word	0x0800a344
 800257c:	0800a334 	.word	0x0800a334
 8002580:	200006c4 	.word	0x200006c4
 8002584:	200006aa 	.word	0x200006aa
 8002588:	0800a350 	.word	0x0800a350
 800258c:	200006b1 	.word	0x200006b1
 8002590:	0800a358 	.word	0x0800a358
 8002594:	200006b2 	.word	0x200006b2
 8002598:	20000100 	.word	0x20000100
 800259c:	0800a264 	.word	0x0800a264
 80025a0:	40020800 	.word	0x40020800

080025a4 <displayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTask */
void displayTask(void const * argument)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayTask */
  /* Infinite loop */
	char str[9] = {};
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	f107 0318 	add.w	r3, r7, #24
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	711a      	strb	r2, [r3, #4]
	uint8_t segment;
	uint8_t offset;
	float freq = 0.0f;
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
	float duty = 0.0f;
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if( xQueueReceive(xDisplayStringQueue, str, 10 / portTICK_RATE_MS) == pdPASS )
 80025c6:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <displayTask+0x124>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f107 0114 	add.w	r1, r7, #20
 80025ce:	220a      	movs	r2, #10
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 f9ff 	bl	80059d4 <xQueueReceive>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d110      	bne.n	80025fe <displayTask+0x5a>
		{
			if( pwm_is_running || dac_is_running)
 80025dc:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <displayTask+0x128>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <displayTask+0x4c>
 80025e6:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <displayTask+0x12c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <displayTask+0x50>
			MAX7219_clearAll();
 80025f0:	f7ff f88c 	bl	800170c <MAX7219_clearAll>
			MAX7219_sendString(str);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe ffc5 	bl	8001588 <MAX7219_sendString>
		}
		if( set_duty_stage )
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <displayTask+0x130>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02b      	beq.n	800265e <displayTask+0xba>
		{
			if( xQueueReceive(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS) != pdPASS ) continue;
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <displayTask+0x134>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f107 010c 	add.w	r1, r7, #12
 800260e:	220a      	movs	r2, #10
 8002610:	4618      	mov	r0, r3
 8002612:	f003 f9df 	bl	80059d4 <xQueueReceive>
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	d150      	bne.n	80026be <displayTask+0x11a>
			MAX7219_clearAll();
 800261c:	f7ff f876 	bl	800170c <MAX7219_clearAll>
			offset = MAX7219_sendDuty(duty);		// Возвращается смещение
 8002620:	edd7 7a03 	vldr	s15, [r7, #12]
 8002624:	eeb0 0a67 	vmov.f32	s0, s15
 8002628:	f7ff f838 	bl	800169c <MAX7219_sendDuty>
 800262c:	4603      	mov	r3, r0
 800262e:	77fb      	strb	r3, [r7, #31]
			MAX7219_clearOneSegment( offset - (1 + digit_position) );
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <displayTask+0x138>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	7ffa      	ldrb	r2, [r7, #31]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f854 	bl	80016ec <MAX7219_clearOneSegment>

			vTaskDelay(300 / portTICK_RATE_MS);	// Потушим на 500 мс
 8002644:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002648:	f003 fd48 	bl	80060dc <vTaskDelay>
			MAX7219_clearAll();
 800264c:	f7ff f85e 	bl	800170c <MAX7219_clearAll>
			MAX7219_sendDuty(duty);
 8002650:	edd7 7a03 	vldr	s15, [r7, #12]
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	f7ff f820 	bl	800169c <MAX7219_sendDuty>
 800265c:	e7b3      	b.n	80025c6 <displayTask+0x22>
		}
		else if( set_freq_stage )	// Здесь же ждём число, ибо строк уже тут не будет
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <displayTask+0x13c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0af      	beq.n	80025c6 <displayTask+0x22>
		{
			if( xQueueReceive(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS) != pdPASS) continue;
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <displayTask+0x140>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f107 0110 	add.w	r1, r7, #16
 800266e:	220a      	movs	r2, #10
 8002670:	4618      	mov	r0, r3
 8002672:	f003 f9af 	bl	80059d4 <xQueueReceive>
 8002676:	4603      	mov	r3, r0
 8002678:	2b01      	cmp	r3, #1
 800267a:	d122      	bne.n	80026c2 <displayTask+0x11e>
			MAX7219_clearAll();
 800267c:	f7ff f846 	bl	800170c <MAX7219_clearAll>
			offset = MAX7219_sendFreq(freq);		// Возвращается смещение
 8002680:	edd7 7a04 	vldr	s15, [r7, #16]
 8002684:	eeb0 0a67 	vmov.f32	s0, s15
 8002688:	f7ff f818 	bl	80016bc <MAX7219_sendFreq>
 800268c:	4603      	mov	r3, r0
 800268e:	77fb      	strb	r3, [r7, #31]
			MAX7219_clearOneSegment( offset - (1 + digit_position) );
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <displayTask+0x138>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	7ffa      	ldrb	r2, [r7, #31]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f824 	bl	80016ec <MAX7219_clearOneSegment>
			 * и нужен	*/
			/*if( (offset - (2 + digit_position)) == 0 )
			{
				digit_position = POINT_HUNDREDS;
			}*/
			vTaskDelay(300 / portTICK_RATE_MS);	// Потушим на 500 мс
 80026a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026a8:	f003 fd18 	bl	80060dc <vTaskDelay>
			MAX7219_clearAll();
 80026ac:	f7ff f82e 	bl	800170c <MAX7219_clearAll>
			MAX7219_sendFreq(freq);
 80026b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	f7ff f800 	bl	80016bc <MAX7219_sendFreq>
 80026bc:	e783      	b.n	80025c6 <displayTask+0x22>
			if( xQueueReceive(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS) != pdPASS ) continue;
 80026be:	bf00      	nop
 80026c0:	e781      	b.n	80025c6 <displayTask+0x22>
			if( xQueueReceive(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS) != pdPASS) continue;
 80026c2:	bf00      	nop
		if( xQueueReceive(xDisplayStringQueue, str, 10 / portTICK_RATE_MS) == pdPASS )
 80026c4:	e77f      	b.n	80025c6 <displayTask+0x22>
 80026c6:	bf00      	nop
 80026c8:	200006bc 	.word	0x200006bc
 80026cc:	200006b2 	.word	0x200006b2
 80026d0:	200006b1 	.word	0x200006b1
 80026d4:	200006aa 	.word	0x200006aa
 80026d8:	200006c4 	.word	0x200006c4
 80026dc:	20000101 	.word	0x20000101
 80026e0:	200006a9 	.word	0x200006a9
 80026e4:	200006c0 	.word	0x200006c0

080026e8 <dacTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dacTask */
void dacTask(void const * argument)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dacTask */
  /* Infinite loop */
	for(;;)
	{
		if( dac_is_running )
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <dacTask+0x7c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d026      	beq.n	8002748 <dacTask+0x60>
		{
			DAC_init(sig, freq_dac);
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <dacTask+0x80>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <dacTask+0x84>)
 8002700:	edd2 7a00 	vldr	s15, [r2]
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fc55 	bl	8000fb8 <DAC_init>
		}
		while( dac_is_running )
 800270e:	e01b      	b.n	8002748 <dacTask+0x60>
		{
			switch(sig) {
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <dacTask+0x80>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d818      	bhi.n	800274a <dacTask+0x62>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <dacTask+0x38>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002731 	.word	0x08002731
 8002724:	08002737 	.word	0x08002737
 8002728:	0800273d 	.word	0x0800273d
 800272c:	08002743 	.word	0x08002743
				case TRIANGLE:
					DAC_writeTriangle();
 8002730:	f7fe fce4 	bl	80010fc <DAC_writeTriangle>
					break;
 8002734:	e009      	b.n	800274a <dacTask+0x62>
				case SIN:
					DAC_writeSin();
 8002736:	f7fe fcb5 	bl	80010a4 <DAC_writeSin>
					break;
 800273a:	e006      	b.n	800274a <dacTask+0x62>
				case SAW:
					DAC_writeSaw();
 800273c:	f7fe fd1a 	bl	8001174 <DAC_writeSaw>
					break;
 8002740:	e003      	b.n	800274a <dacTask+0x62>
				case REVERSE_SAW:
					DAC_writeReverseSaw();
 8002742:	f7fe fd3d 	bl	80011c0 <DAC_writeReverseSaw>
					break;
 8002746:	e000      	b.n	800274a <dacTask+0x62>
		while( dac_is_running )
 8002748:	bf00      	nop
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <dacTask+0x7c>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1dd      	bne.n	8002710 <dacTask+0x28>
			}
		}
		DAC_stop();
 8002754:	f7fe fc22 	bl	8000f9c <DAC_stop>
		vTaskDelay(500 / portTICK_RATE_MS);
 8002758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800275c:	f003 fcbe 	bl	80060dc <vTaskDelay>
		if( dac_is_running )
 8002760:	e7c6      	b.n	80026f0 <dacTask+0x8>
 8002762:	bf00      	nop
 8002764:	200006b1 	.word	0x200006b1
 8002768:	200006b0 	.word	0x200006b0
 800276c:	200006ac 	.word	0x200006ac

08002770 <pwmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwmTask */
void pwmTask(void const * argument)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pwmTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f002 fd66 	bl	800524a <osDelay>
 800277e:	e7fb      	b.n	8002778 <pwmTask+0x8>

08002780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002790:	d101      	bne.n	8002796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002792:	f000 fbb1 	bl	8002ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM9)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a48      	ldr	r2, [pc, #288]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	f040 8088 	bne.w	80028b2 <HAL_TIM_PeriodElapsedCallback+0x132>
	{
		HAL_TIM_Base_Stop_IT(&htim9);
 80027a2:	4847      	ldr	r0, [pc, #284]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80027a4:	f001 fe7c 	bl	80044a0 <HAL_TIM_Base_Stop_IT>
		BaseType_t high_task_awoken = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
		if( HAL_GPIO_ReadPin(GPIOB, button_exti) == GPIO_PIN_RESET )	// Если спустя 50 мс сигнал устойчивый
 80027ac:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4619      	mov	r1, r3
 80027b4:	4844      	ldr	r0, [pc, #272]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80027b6:	f000 fe57 	bl	8003468 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d14a      	bne.n	8002856 <HAL_TIM_PeriodElapsedCallback+0xd6>
		{
			uint16_t button_num = button_exti;
 80027c0:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	817b      	strh	r3, [r7, #10]
			switch(button_exti)
 80027c8:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d2:	d01d      	beq.n	8002810 <HAL_TIM_PeriodElapsedCallback+0x90>
 80027d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d8:	dc34      	bgt.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80027da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027de:	d027      	beq.n	8002830 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80027e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027e4:	dc2e      	bgt.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ea:	d01d      	beq.n	8002828 <HAL_TIM_PeriodElapsedCallback+0xa8>
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f0:	dc28      	bgt.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	d013      	beq.n	8002820 <HAL_TIM_PeriodElapsedCallback+0xa0>
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	dc22      	bgt.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d003      	beq.n	800280a <HAL_TIM_PeriodElapsedCallback+0x8a>
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002806:	d007      	beq.n	8002818 <HAL_TIM_PeriodElapsedCallback+0x98>
 8002808:	e01c      	b.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
			{
				case BUTTON_LEFT_Pin:
					button_num = BUTTON_LEFT_Pin;
 800280a:	2302      	movs	r3, #2
 800280c:	817b      	strh	r3, [r7, #10]
					break;
 800280e:	e019      	b.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_RIGHT_Pin:
					button_num = BUTTON_RIGHT_Pin;
 8002810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002814:	817b      	strh	r3, [r7, #10]
					break;
 8002816:	e015      	b.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_UP_Pin:
					button_num = BUTTON_UP_Pin;
 8002818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281c:	817b      	strh	r3, [r7, #10]
					break;
 800281e:	e011      	b.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_DOWN_Pin:
					button_num = BUTTON_DOWN_Pin;
 8002820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002824:	817b      	strh	r3, [r7, #10]
					break;
 8002826:	e00d      	b.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_OK_Pin:
					button_num = BUTTON_OK_Pin;
 8002828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282c:	817b      	strh	r3, [r7, #10]
					break;
 800282e:	e009      	b.n	8002844 <HAL_TIM_PeriodElapsedCallback+0xc4>
				case BUTTON_RETURN_Pin:
					button_num = BUTTON_RETURN_Pin;
 8002830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002834:	817b      	strh	r3, [r7, #10]
					dac_is_running = false;				// Чтобы остановить бесконечную работу ЦАПа или Ш�?Ма
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
					pwm_is_running = false;
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
					break;
 8002842:	bf00      	nop
			}

			xQueueSendToBackFromISR(xButtonQueue, &button_num, &high_task_awoken);	// Отправим номер порта в очередь
 8002844:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	f107 020c 	add.w	r2, r7, #12
 800284c:	f107 010a 	add.w	r1, r7, #10
 8002850:	2300      	movs	r3, #0
 8002852:	f003 f823 	bl	800589c <xQueueGenericSendFromISR>
		}
		EXTI->PR = (1<<1);
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002858:	2202      	movs	r2, #2
 800285a:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<10);
 800285c:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800285e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002862:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<12);
 8002864:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002866:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800286a:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<13);
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800286e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002872:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<14);
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800287a:	615a      	str	r2, [r3, #20]
		EXTI->PR = (1<<15);
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800287e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002882:	615a      	str	r2, [r3, #20]
		/*	Чистим флаги прерываний которые могли произойти во время задрежки таймером, чтобы не попасть в колбек
		 * ещё лишний раз	*/
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002884:	2007      	movs	r0, #7
 8002886:	f000 fc4f 	bl	8003128 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800288a:	2008      	movs	r0, #8
 800288c:	f000 fc4c 	bl	8003128 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002890:	2028      	movs	r0, #40	; 0x28
 8002892:	f000 fc49 	bl	8003128 <HAL_NVIC_EnableIRQ>
		if( high_task_awoken == pdTRUE )
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10a      	bne.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x132>
		{
			portYIELD_FROM_ISR(high_task_awoken);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x132>
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80028a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	f3bf 8f6f 	isb	sy
		}
		/* Обратно включили все прерывания и остановили таймер в любом случае, был это дребезг
		 * или нет. Сразу переключим контекст, если надо.	*/
	}
  /* USER CODE END Callback 1 */
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40014000 	.word	0x40014000
 80028c0:	20000648 	.word	0x20000648
 80028c4:	200006b4 	.word	0x200006b4
 80028c8:	40020400 	.word	0x40020400
 80028cc:	200006b1 	.word	0x200006b1
 80028d0:	200006b2 	.word	0x200006b2
 80028d4:	200006b8 	.word	0x200006b8
 80028d8:	40013c00 	.word	0x40013c00
 80028dc:	e000ed04 	.word	0xe000ed04

080028e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e4:	b672      	cpsid	i
}
 80028e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <Error_Handler+0x8>
	...

080028ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_MspInit+0x54>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_MspInit+0x54>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_MspInit+0x54>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_MspInit+0x54>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <HAL_MspInit+0x54>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_MspInit+0x54>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	210f      	movs	r1, #15
 800292e:	f06f 0001 	mvn.w	r0, #1
 8002932:	f000 fbdd 	bl	80030f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_SPI_MspInit+0x84>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d12b      	bne.n	80029be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_SPI_MspInit+0x88>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_SPI_MspInit+0x88>)
 8002970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_SPI_MspInit+0x88>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_SPI_MspInit+0x88>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_SPI_MspInit+0x88>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_SPI_MspInit+0x88>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800299e:	2338      	movs	r3, #56	; 0x38
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ae:	2305      	movs	r3, #5
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	; (80029d0 <HAL_SPI_MspInit+0x8c>)
 80029ba:	f000 fbd1 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40013000 	.word	0x40013000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020400 	.word	0x40020400

080029d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <HAL_TIM_Base_MspInit+0xa8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d116      	bne.n	8002a14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2105      	movs	r1, #5
 8002a06:	201d      	movs	r0, #29
 8002a08:	f000 fb72 	bl	80030f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a0c:	201d      	movs	r0, #29
 8002a0e:	f000 fb8b 	bl	8003128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002a12:	e02e      	b.n	8002a72 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <HAL_TIM_Base_MspInit+0xb0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10e      	bne.n	8002a3c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
}
 8002a3a:	e01a      	b.n	8002a72 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM9)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_TIM_Base_MspInit+0xb4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d115      	bne.n	8002a72 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_TIM_Base_MspInit+0xac>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2105      	movs	r1, #5
 8002a66:	2018      	movs	r0, #24
 8002a68:	f000 fb42 	bl	80030f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a6c:	2018      	movs	r0, #24
 8002a6e:	f000 fb5b 	bl	8003128 <HAL_NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40014000 	.word	0x40014000

08002a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <HAL_TIM_MspPostInit+0x68>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d11d      	bne.n	8002aea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_TIM_MspPostInit+0x6c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_TIM_MspPostInit+0x6c>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_TIM_MspPostInit+0x6c>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ada:	2302      	movs	r3, #2
 8002adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <HAL_TIM_MspPostInit+0x70>)
 8002ae6:	f000 fb3b 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020400 	.word	0x40020400

08002b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	; 0x38
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <HAL_InitTick+0xe8>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	4a33      	ldr	r2, [pc, #204]	; (8002be8 <HAL_InitTick+0xe8>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_InitTick+0xe8>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b2c:	f107 0210 	add.w	r2, r7, #16
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f93e 	bl	8003db8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b46:	f001 f923 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8002b4a:	6378      	str	r0, [r7, #52]	; 0x34
 8002b4c:	e004      	b.n	8002b58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b4e:	f001 f91f 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8002b52:	4603      	mov	r3, r0
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	4a24      	ldr	r2, [pc, #144]	; (8002bec <HAL_InitTick+0xec>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	0c9b      	lsrs	r3, r3, #18
 8002b62:	3b01      	subs	r3, #1
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_InitTick+0xf0>)
 8002b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_InitTick+0xf0>)
 8002b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b74:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <HAL_InitTick+0xf0>)
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_InitTick+0xf0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_InitTick+0xf0>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_InitTick+0xf0>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002b8e:	4818      	ldr	r0, [pc, #96]	; (8002bf0 <HAL_InitTick+0xf0>)
 8002b90:	f001 fbd4 	bl	800433c <HAL_TIM_Base_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002b9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11b      	bne.n	8002bda <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002ba2:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <HAL_InitTick+0xf0>)
 8002ba4:	f001 fc1a 	bl	80043dc <HAL_TIM_Base_Start_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002bae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d111      	bne.n	8002bda <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bb6:	201c      	movs	r0, #28
 8002bb8:	f000 fab6 	bl	8003128 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d808      	bhi.n	8002bd4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	201c      	movs	r0, #28
 8002bc8:	f000 fa92 	bl	80030f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bcc:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <HAL_InitTick+0xf4>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e002      	b.n	8002bda <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002bda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3738      	adds	r7, #56	; 0x38
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	431bde83 	.word	0x431bde83
 8002bf0:	200006c8 	.word	0x200006c8
 8002bf4:	20000108 	.word	0x20000108

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <NMI_Handler+0x4>

08002bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
	    uint32_t pc;
	    uint32_t psr;
	  }*stack_ptr; //Указатель на текущее значение стека(SP)


	  asm(
 8002c04:	f01e 0f04 	tst.w	lr, #4
 8002c08:	bf0c      	ite	eq
 8002c0a:	f3ef 8308 	mrseq	r3, MSP
 8002c0e:	f3ef 8309 	mrsne	r3, PSP
 8002c12:	607b      	str	r3, [r7, #4]
	      );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  continue;
 8002c14:	e7fe      	b.n	8002c14 <HardFault_Handler+0x16>

08002c16 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <MemManage_Handler+0x4>

08002c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <BusFault_Handler+0x4>

08002c22 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <UsageFault_Handler+0x4>

08002c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_LEFT_Pin);
 8002c3a:	2002      	movs	r0, #2
 8002c3c:	f000 fc60 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002c4a:	f001 fcb1 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000648 	.word	0x20000648

08002c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <TIM2_IRQHandler+0x10>)
 8002c5e:	f001 fca7 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200006c8 	.word	0x200006c8

08002c6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <TIM3_IRQHandler+0x10>)
 8002c72:	f001 fc9d 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200005b8 	.word	0x200005b8

08002c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8002c84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c88:	f000 fc3a 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8002c8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c90:	f000 fc36 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OK_Pin);
 8002c94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c98:	f000 fc32 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RETURN_Pin);
 8002c9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ca0:	f000 fc2e 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RIGHT_Pin);
 8002ca4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ca8:	f000 fc2a 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return 1;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_kill>:

int _kill(int pid, int sig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cca:	f004 fb7f 	bl	80073cc <__errno>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2216      	movs	r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_exit>:

void _exit (int status)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe7 	bl	8002cc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cf2:	e7fe      	b.n	8002cf2 <_exit+0x12>

08002cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00a      	b.n	8002d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d06:	f3af 8000 	nop.w
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf0      	blt.n	8002d06 <_read+0x12>
  }

  return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e009      	b.n	8002d54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	60ba      	str	r2, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf1      	blt.n	8002d40 <_write+0x12>
  }
  return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_close>:

int _close(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_isatty>:

int _isatty(int file)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002da6:	2301      	movs	r3, #1
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <_sbrk+0x5c>)
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <_sbrk+0x60>)
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <_sbrk+0x64>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <_sbrk+0x68>)
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d207      	bcs.n	8002e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e00:	f004 fae4 	bl	80073cc <__errno>
 8002e04:	4603      	mov	r3, r0
 8002e06:	220c      	movs	r2, #12
 8002e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e009      	b.n	8002e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <_sbrk+0x64>)
 8002e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20010000 	.word	0x20010000
 8002e30:	00000400 	.word	0x00000400
 8002e34:	20000710 	.word	0x20000710
 8002e38:	20007db0 	.word	0x20007db0

08002e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <SystemInit+0x20>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <SystemInit+0x20>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e64:	480d      	ldr	r0, [pc, #52]	; (8002e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e66:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e7c:	4c0b      	ldr	r4, [pc, #44]	; (8002eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e8a:	f7ff ffd7 	bl	8002e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e8e:	f004 faa3 	bl	80073d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e92:	f7fe fcb3 	bl	80017fc <main>
  bx  lr    
 8002e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8002ea4:	0800a76c 	.word	0x0800a76c
  ldr r2, =_sbss
 8002ea8:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8002eac:	20007dac 	.word	0x20007dac

08002eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_Init+0x40>)
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_Init+0x40>)
 8002eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_Init+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x40>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 f8fc 	bl	80030da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f7ff fe0c 	bl	8002b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7ff fd00 	bl	80028ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x20>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x24>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_IncTick+0x24>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	2000010c 	.word	0x2000010c
 8002f1c:	20000714 	.word	0x20000714

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_GetTick+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000714 	.word	0x20000714

08002f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	60d3      	str	r3, [r2, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <__NVIC_EnableIRQ+0x38>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db12      	blt.n	8003010 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	490a      	ldr	r1, [pc, #40]	; (800301c <__NVIC_DisableIRQ+0x44>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	3320      	adds	r3, #32
 8003000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003004:	f3bf 8f4f 	dsb	sy
}
 8003008:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800300a:	f3bf 8f6f 	isb	sy
}
 800300e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	; (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf28      	it	cs
 8003092:	2304      	movcs	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	2b06      	cmp	r3, #6
 800309c:	d902      	bls.n	80030a4 <NVIC_EncodePriority+0x30>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b03      	subs	r3, #3
 80030a2:	e000      	b.n	80030a6 <NVIC_EncodePriority+0x32>
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	4313      	orrs	r3, r2
         );
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff28 	bl	8002f38 <__NVIC_SetPriorityGrouping>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003102:	f7ff ff3d 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 8003106:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	6978      	ldr	r0, [r7, #20]
 800310e:	f7ff ffb1 	bl	8003074 <NVIC_EncodePriority>
 8003112:	4602      	mov	r2, r0
 8003114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff80 	bl	8003020 <__NVIC_SetPriority>
}
 8003120:	bf00      	nop
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff30 	bl	8002f9c <__NVIC_EnableIRQ>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff40 	bl	8002fd8 <__NVIC_DisableIRQ>
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e159      	b.n	8003430 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 8148 	bne.w	800342a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80a2 	beq.w	800342a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a56      	ldr	r2, [pc, #344]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b54      	ldr	r3, [pc, #336]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_GPIO_Init+0x2ec>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a49      	ldr	r2, [pc, #292]	; (8003450 <HAL_GPIO_Init+0x2f0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x202>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a48      	ldr	r2, [pc, #288]	; (8003454 <HAL_GPIO_Init+0x2f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x1fe>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a47      	ldr	r2, [pc, #284]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x1fa>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a46      	ldr	r2, [pc, #280]	; (800345c <HAL_GPIO_Init+0x2fc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x1f6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a45      	ldr	r2, [pc, #276]	; (8003460 <HAL_GPIO_Init+0x300>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x1f2>
 800334e:	2304      	movs	r3, #4
 8003350:	e008      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003352:	2307      	movs	r3, #7
 8003354:	e006      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003356:	2303      	movs	r3, #3
 8003358:	e004      	b.n	8003364 <HAL_GPIO_Init+0x204>
 800335a:	2302      	movs	r3, #2
 800335c:	e002      	b.n	8003364 <HAL_GPIO_Init+0x204>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003362:	2300      	movs	r3, #0
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f002 0203 	and.w	r2, r2, #3
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	4093      	lsls	r3, r2
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003374:	4935      	ldr	r1, [pc, #212]	; (800344c <HAL_GPIO_Init+0x2ec>)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_GPIO_Init+0x304>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033a6:	4a2f      	ldr	r2, [pc, #188]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d0:	4a24      	ldr	r2, [pc, #144]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033fa:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003400:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_GPIO_Init+0x304>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003424:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <HAL_GPIO_Init+0x304>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3301      	adds	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b0f      	cmp	r3, #15
 8003434:	f67f aea2 	bls.w	800317c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40013800 	.word	0x40013800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40013c00 	.word	0x40013c00

08003468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	887b      	ldrh	r3, [r7, #2]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e001      	b.n	800348a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b4:	e003      	b.n	80034be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	041a      	lsls	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034dc:	887a      	ldrh	r2, [r7, #2]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	041a      	lsls	r2, r3, #16
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	400b      	ands	r3, r1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	619a      	str	r2, [r3, #24]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe f950 	bl	80017c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40013c00 	.word	0x40013c00

08003530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e267      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d075      	beq.n	800363a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354e:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b04      	cmp	r3, #4
 8003558:	d00c      	beq.n	8003574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355a:	4b85      	ldr	r3, [pc, #532]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003562:	2b08      	cmp	r3, #8
 8003564:	d112      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003566:	4b82      	ldr	r3, [pc, #520]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003572:	d10b      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d05b      	beq.n	8003638 <HAL_RCC_OscConfig+0x108>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d157      	bne.n	8003638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e242      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d106      	bne.n	80035a4 <HAL_RCC_OscConfig+0x74>
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e01d      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b70      	ldr	r3, [pc, #448]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6f      	ldr	r2, [pc, #444]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6c      	ldr	r2, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035c8:	4b69      	ldr	r3, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a68      	ldr	r2, [pc, #416]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b66      	ldr	r3, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a65      	ldr	r2, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7ff fc9a 	bl	8002f20 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f0:	f7ff fc96 	bl	8002f20 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e207      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0xc0>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7ff fc86 	bl	8002f20 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003618:	f7ff fc82 	bl	8002f20 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1f3      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0xe8>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d063      	beq.n	800370e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11c      	bne.n	8003698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365e:	4b44      	ldr	r3, [pc, #272]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x152>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e1c7      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4937      	ldr	r1, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	e03a      	b.n	800370e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a0:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_RCC_OscConfig+0x244>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7ff fc3b 	bl	8002f20 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ae:	f7ff fc37 	bl	8002f20 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1a8      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4925      	ldr	r1, [pc, #148]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
 80036e0:	e015      	b.n	800370e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_OscConfig+0x244>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7ff fc1a 	bl	8002f20 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f0:	f7ff fc16 	bl	8002f20 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e187      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d036      	beq.n	8003788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCC_OscConfig+0x248>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7ff fbfa 	bl	8002f20 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003730:	f7ff fbf6 	bl	8002f20 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e167      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x200>
 800374e:	e01b      	b.n	8003788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_OscConfig+0x248>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7ff fbe3 	bl	8002f20 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	e00e      	b.n	800377c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375e:	f7ff fbdf 	bl	8002f20 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d907      	bls.n	800377c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e150      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
 8003770:	40023800 	.word	0x40023800
 8003774:	42470000 	.word	0x42470000
 8003778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377c:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800377e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ea      	bne.n	800375e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8097 	beq.w	80038c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379a:	4b81      	ldr	r3, [pc, #516]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10f      	bne.n	80037c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	4b7d      	ldr	r3, [pc, #500]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	4a7c      	ldr	r2, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6413      	str	r3, [r2, #64]	; 0x40
 80037b6:	4b7a      	ldr	r3, [pc, #488]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d2:	4b74      	ldr	r3, [pc, #464]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a73      	ldr	r2, [pc, #460]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7ff fb9f 	bl	8002f20 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7ff fb9b 	bl	8002f20 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e10c      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x2ea>
 800380c:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a63      	ldr	r2, [pc, #396]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	e01c      	b.n	8003854 <HAL_RCC_OscConfig+0x324>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b05      	cmp	r3, #5
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x30c>
 8003822:	4b5f      	ldr	r3, [pc, #380]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a5e      	ldr	r2, [pc, #376]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	6713      	str	r3, [r2, #112]	; 0x70
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a5b      	ldr	r2, [pc, #364]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0x324>
 800383c:	4b58      	ldr	r3, [pc, #352]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a57      	ldr	r2, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	4b55      	ldr	r3, [pc, #340]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	4a54      	ldr	r2, [pc, #336]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 0304 	bic.w	r3, r3, #4
 8003852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7ff fb60 	bl	8002f20 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7ff fb5c 	bl	8002f20 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0cb      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0ee      	beq.n	8003864 <HAL_RCC_OscConfig+0x334>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003888:	f7ff fb4a 	bl	8002f20 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7ff fb46 	bl	8002f20 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0b5      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a6:	4b3e      	ldr	r3, [pc, #248]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1ee      	bne.n	8003890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b8:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4a38      	ldr	r2, [pc, #224]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80a1 	beq.w	8003a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d05c      	beq.n	8003994 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d141      	bne.n	8003966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7ff fb1a 	bl	8002f20 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f0:	f7ff fb16 	bl	8002f20 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e087      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	491b      	ldr	r1, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7ff faef 	bl	8002f20 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003946:	f7ff faeb 	bl	8002f20 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e05c      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x416>
 8003964:	e054      	b.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7ff fad8 	bl	8002f20 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7ff fad4 	bl	8002f20 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e045      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x444>
 8003992:	e03d      	b.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e038      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40007000 	.word	0x40007000
 80039a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d028      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d121      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d11a      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039dc:	4013      	ands	r3, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d111      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800

08003a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0cc      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b68      	ldr	r3, [pc, #416]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d90c      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b65      	ldr	r3, [pc, #404]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d044      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d119      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e06f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e067      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b37      	ldr	r3, [pc, #220]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4934      	ldr	r1, [pc, #208]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7ff fa06 	bl	8002f20 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7ff fa02 	bl	8002f20 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e04f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b25      	ldr	r3, [pc, #148]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d20c      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe ff9a 	bl	8002b00 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	0800a368 	.word	0x0800a368
 8003be4:	20000104 	.word	0x20000104
 8003be8:	20000108 	.word	0x20000108

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b090      	sub	sp, #64	; 0x40
 8003bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c04:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d00d      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x40>
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	f200 80a1 	bhi.w	8003d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1e:	e09b      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c24:	e09b      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c26:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2a:	e098      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c2c:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c36:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d028      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	2200      	movs	r2, #0
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c54:	2100      	movs	r1, #0
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c58:	fb03 f201 	mul.w	r2, r3, r1
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	fb00 f303 	mul.w	r3, r0, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	4a43      	ldr	r2, [pc, #268]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c66:	fba0 1202 	umull	r1, r2, r0, r2
 8003c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c6c:	460a      	mov	r2, r1
 8003c6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c72:	4413      	add	r3, r2
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c78:	2200      	movs	r2, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	61fa      	str	r2, [r7, #28]
 8003c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c86:	f7fd f807 	bl	8000c98 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4613      	mov	r3, r2
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c92:	e053      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c94:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	617a      	str	r2, [r7, #20]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ca6:	f04f 0b00 	mov.w	fp, #0
 8003caa:	4652      	mov	r2, sl
 8003cac:	465b      	mov	r3, fp
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	0159      	lsls	r1, r3, #5
 8003cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cbc:	0150      	lsls	r0, r2, #5
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8003cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cde:	ebb2 0408 	subs.w	r4, r2, r8
 8003ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	00eb      	lsls	r3, r5, #3
 8003cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf4:	00e2      	lsls	r2, r4, #3
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	eb14 030a 	adds.w	r3, r4, sl
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	eb45 030b 	adc.w	r3, r5, fp
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d12:	4629      	mov	r1, r5
 8003d14:	028b      	lsls	r3, r1, #10
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	028a      	lsls	r2, r1, #10
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	2200      	movs	r2, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	60fa      	str	r2, [r7, #12]
 8003d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d30:	f7fc ffb2 	bl	8000c98 <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4613      	mov	r3, r2
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	3301      	adds	r3, #1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3740      	adds	r7, #64	; 0x40
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	00f42400 	.word	0x00f42400
 8003d74:	017d7840 	.word	0x017d7840

08003d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000104 	.word	0x20000104

08003d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d94:	f7ff fff0 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0a9b      	lsrs	r3, r3, #10
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	0800a378 	.word	0x0800a378

08003db8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_GetClockConfig+0x5c>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0203 	and.w	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_RCC_GetClockConfig+0x5c>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <HAL_RCC_GetClockConfig+0x5c>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_GetClockConfig+0x5c>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	08db      	lsrs	r3, r3, #3
 8003df2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <HAL_RCC_GetClockConfig+0x60>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0207 	and.w	r2, r3, #7
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	601a      	str	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40023c00 	.word	0x40023c00

08003e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07b      	b.n	8003f26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d009      	beq.n	8003e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
 8003e46:	e005      	b.n	8003e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fe fd68 	bl	8002944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	ea42 0103 	orr.w	r1, r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	f003 0104 	and.w	r1, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	f003 0210 	and.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b088      	sub	sp, #32
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_SPI_Transmit+0x22>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e126      	b.n	800419e <HAL_SPI_Transmit+0x270>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f58:	f7fe ffe2 	bl	8002f20 <HAL_GetTick>
 8003f5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d002      	beq.n	8003f74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f72:	e10b      	b.n	800418c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_SPI_Transmit+0x52>
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f84:	e102      	b.n	800418c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fcc:	d10f      	bne.n	8003fee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d007      	beq.n	800400c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004014:	d14b      	bne.n	80040ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_SPI_Transmit+0xf6>
 800401e:	8afb      	ldrh	r3, [r7, #22]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d13e      	bne.n	80040a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	881a      	ldrh	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004048:	e02b      	b.n	80040a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	d112      	bne.n	800407e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	86da      	strh	r2, [r3, #54]	; 0x36
 800407c:	e011      	b.n	80040a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800407e:	f7fe ff4f 	bl	8002f20 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d803      	bhi.n	8004096 <HAL_SPI_Transmit+0x168>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d102      	bne.n	800409c <HAL_SPI_Transmit+0x16e>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040a0:	e074      	b.n	800418c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ce      	bne.n	800404a <HAL_SPI_Transmit+0x11c>
 80040ac:	e04c      	b.n	8004148 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_SPI_Transmit+0x18e>
 80040b6:	8afb      	ldrh	r3, [r7, #22]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d140      	bne.n	800413e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040e2:	e02c      	b.n	800413e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d113      	bne.n	800411a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	7812      	ldrb	r2, [r2, #0]
 80040fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	86da      	strh	r2, [r3, #54]	; 0x36
 8004118:	e011      	b.n	800413e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411a:	f7fe ff01 	bl	8002f20 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d803      	bhi.n	8004132 <HAL_SPI_Transmit+0x204>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d102      	bne.n	8004138 <HAL_SPI_Transmit+0x20a>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800413c:	e026      	b.n	800418c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1cd      	bne.n	80040e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	6839      	ldr	r1, [r7, #0]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f8b3 	bl	80042b8 <SPI_EndRxTxTransaction>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e000      	b.n	800418c <HAL_SPI_Transmit+0x25e>
  }

error:
 800418a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800419c:	7ffb      	ldrb	r3, [r7, #31]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041b8:	f7fe feb2 	bl	8002f20 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	4413      	add	r3, r2
 80041c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041c8:	f7fe feaa 	bl	8002f20 <HAL_GetTick>
 80041cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ce:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	015b      	lsls	r3, r3, #5
 80041d4:	0d1b      	lsrs	r3, r3, #20
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041de:	e054      	b.n	800428a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d050      	beq.n	800428a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041e8:	f7fe fe9a 	bl	8002f20 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d902      	bls.n	80041fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d13d      	bne.n	800427a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800420c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004216:	d111      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004220:	d004      	beq.n	800422c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422a:	d107      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004244:	d10f      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e017      	b.n	80042aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3b01      	subs	r3, #1
 8004288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4013      	ands	r3, r2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d19b      	bne.n	80041e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000104 	.word	0x20000104

080042b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <SPI_EndRxTxTransaction+0x7c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <SPI_EndRxTxTransaction+0x80>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	0d5b      	lsrs	r3, r3, #21
 80042d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e2:	d112      	bne.n	800430a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff ff5a 	bl	80041a8 <SPI_WaitFlagStateUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f043 0220 	orr.w	r2, r3, #32
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e00f      	b.n	800432a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3b01      	subs	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d0f2      	beq.n	800430a <SPI_EndRxTxTransaction+0x52>
 8004324:	e000      	b.n	8004328 <SPI_EndRxTxTransaction+0x70>
        break;
 8004326:	bf00      	nop
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000104 	.word	0x20000104
 8004338:	165e9f81 	.word	0x165e9f81

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe fb36 	bl	80029d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 fbd2 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e044      	b.n	800447e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1e      	ldr	r2, [pc, #120]	; (800448c <HAL_TIM_Base_Start_IT+0xb0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x6c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d013      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x6c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <HAL_TIM_Base_Start_IT+0xb4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x6c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_TIM_Base_Start_IT+0xb8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x6c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a17      	ldr	r2, [pc, #92]	; (8004498 <HAL_TIM_Base_Start_IT+0xbc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x6c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a16      	ldr	r2, [pc, #88]	; (800449c <HAL_TIM_Base_Start_IT+0xc0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d111      	bne.n	800446c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b06      	cmp	r3, #6
 8004458:	d010      	beq.n	800447c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446a:	e007      	b.n	800447c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40014000 	.word	0x40014000

080044a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a1a      	ldr	r2, [r3, #32]
 80044be:	f241 1311 	movw	r3, #4369	; 0x1111
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_TIM_Base_Stop_IT+0x48>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	f240 4344 	movw	r3, #1092	; 0x444
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_Base_Stop_IT+0x48>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e041      	b.n	8004594 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f839 	bl	800459c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f000 faf1 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d122      	bne.n	800460c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d11b      	bne.n	800460c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0202 	mvn.w	r2, #2
 80045dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fa77 	bl	8004ae6 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa69 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fa7a 	bl	8004afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d122      	bne.n	8004660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b04      	cmp	r3, #4
 8004626:	d11b      	bne.n	8004660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0204 	mvn.w	r2, #4
 8004630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa4d 	bl	8004ae6 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa3f 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fa50 	bl	8004afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b08      	cmp	r3, #8
 800466c:	d122      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b08      	cmp	r3, #8
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0208 	mvn.w	r2, #8
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2204      	movs	r2, #4
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa23 	bl	8004ae6 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa15 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fa26 	bl	8004afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d122      	bne.n	8004708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d11b      	bne.n	8004708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0210 	mvn.w	r2, #16
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2208      	movs	r2, #8
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9f9 	bl	8004ae6 <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9eb 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f9fc 	bl	8004afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10e      	bne.n	8004734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d107      	bne.n	8004734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0201 	mvn.w	r2, #1
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe f826 	bl	8002780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473e:	2b80      	cmp	r3, #128	; 0x80
 8004740:	d10e      	bne.n	8004760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d107      	bne.n	8004760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd00 	bl	8005160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	d10e      	bne.n	800478c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d107      	bne.n	800478c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f9c1 	bl	8004b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b20      	cmp	r3, #32
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0220 	mvn.w	r2, #32
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fcca 	bl	800514c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047da:	2302      	movs	r3, #2
 80047dc:	e0ae      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	f200 809f 	bhi.w	800492c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047ee:	a201      	add	r2, pc, #4	; (adr r2, 80047f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	08004829 	.word	0x08004829
 80047f8:	0800492d 	.word	0x0800492d
 80047fc:	0800492d 	.word	0x0800492d
 8004800:	0800492d 	.word	0x0800492d
 8004804:	08004869 	.word	0x08004869
 8004808:	0800492d 	.word	0x0800492d
 800480c:	0800492d 	.word	0x0800492d
 8004810:	0800492d 	.word	0x0800492d
 8004814:	080048ab 	.word	0x080048ab
 8004818:	0800492d 	.word	0x0800492d
 800481c:	0800492d 	.word	0x0800492d
 8004820:	0800492d 	.word	0x0800492d
 8004824:	080048eb 	.word	0x080048eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f9f8 	bl	8004c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0208 	orr.w	r2, r2, #8
 8004842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0204 	bic.w	r2, r2, #4
 8004852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6999      	ldr	r1, [r3, #24]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	619a      	str	r2, [r3, #24]
      break;
 8004866:	e064      	b.n	8004932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fa3e 	bl	8004cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6999      	ldr	r1, [r3, #24]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	021a      	lsls	r2, r3, #8
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	619a      	str	r2, [r3, #24]
      break;
 80048a8:	e043      	b.n	8004932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fa89 	bl	8004dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0208 	orr.w	r2, r2, #8
 80048c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0204 	bic.w	r2, r2, #4
 80048d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69d9      	ldr	r1, [r3, #28]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	61da      	str	r2, [r3, #28]
      break;
 80048e8:	e023      	b.n	8004932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fad3 	bl	8004e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69d9      	ldr	r1, [r3, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	021a      	lsls	r2, r3, #8
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	61da      	str	r2, [r3, #28]
      break;
 800492a:	e002      	b.n	8004932 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
      break;
 8004930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800493a:	7dfb      	ldrb	r3, [r7, #23]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIM_ConfigClockSource+0x1c>
 800495c:	2302      	movs	r3, #2
 800495e:	e0b4      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x186>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800497e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004998:	d03e      	beq.n	8004a18 <HAL_TIM_ConfigClockSource+0xd4>
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499e:	f200 8087 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	f000 8086 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x172>
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	d87f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b70      	cmp	r3, #112	; 0x70
 80049b2:	d01a      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xa6>
 80049b4:	2b70      	cmp	r3, #112	; 0x70
 80049b6:	d87b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b60      	cmp	r3, #96	; 0x60
 80049ba:	d050      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x11a>
 80049bc:	2b60      	cmp	r3, #96	; 0x60
 80049be:	d877      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d03c      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0xfa>
 80049c4:	2b50      	cmp	r3, #80	; 0x50
 80049c6:	d873      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d058      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x13a>
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d86f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d064      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15a>
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d86b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d060      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15a>
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d867      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05c      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15a>
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d05a      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x15a>
 80049e8:	e062      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6899      	ldr	r1, [r3, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f000 fb19 	bl	8005030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	609a      	str	r2, [r3, #8]
      break;
 8004a16:	e04f      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6899      	ldr	r1, [r3, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f000 fb02 	bl	8005030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a3a:	609a      	str	r2, [r3, #8]
      break;
 8004a3c:	e03c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 fa76 	bl	8004f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2150      	movs	r1, #80	; 0x50
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 facf 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e02c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 fa95 	bl	8004f9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2160      	movs	r1, #96	; 0x60
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fabf 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e01c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f000 fa56 	bl	8004f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 faaf 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e00c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f000 faa6 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004aae:	e003      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab4:	e000      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a34      	ldr	r2, [pc, #208]	; (8004c08 <TIM_Base_SetConfig+0xe4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00f      	beq.n	8004b5c <TIM_Base_SetConfig+0x38>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b42:	d00b      	beq.n	8004b5c <TIM_Base_SetConfig+0x38>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a31      	ldr	r2, [pc, #196]	; (8004c0c <TIM_Base_SetConfig+0xe8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_Base_SetConfig+0x38>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a30      	ldr	r2, [pc, #192]	; (8004c10 <TIM_Base_SetConfig+0xec>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_Base_SetConfig+0x38>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a2f      	ldr	r2, [pc, #188]	; (8004c14 <TIM_Base_SetConfig+0xf0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d108      	bne.n	8004b6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a25      	ldr	r2, [pc, #148]	; (8004c08 <TIM_Base_SetConfig+0xe4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01b      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d017      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <TIM_Base_SetConfig+0xe8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <TIM_Base_SetConfig+0xec>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00f      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <TIM_Base_SetConfig+0xf0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <TIM_Base_SetConfig+0xf4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <TIM_Base_SetConfig+0xf8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <TIM_Base_SetConfig+0xfc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <TIM_Base_SetConfig+0xe4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d103      	bne.n	8004bf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	615a      	str	r2, [r3, #20]
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40000c00 	.word	0x40000c00
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40014400 	.word	0x40014400
 8004c20:	40014800 	.word	0x40014800

08004c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f023 0201 	bic.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f023 0302 	bic.w	r3, r3, #2
 8004c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <TIM_OC1_SetConfig+0xc8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10c      	bne.n	8004c9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0308 	bic.w	r3, r3, #8
 8004c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f023 0304 	bic.w	r3, r3, #4
 8004c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a13      	ldr	r2, [pc, #76]	; (8004cec <TIM_OC1_SetConfig+0xc8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d111      	bne.n	8004cc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	621a      	str	r2, [r3, #32]
}
 8004ce0:	bf00      	nop
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	40010000 	.word	0x40010000

08004cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0210 	bic.w	r2, r3, #16
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0320 	bic.w	r3, r3, #32
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <TIM_OC2_SetConfig+0xd4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d10d      	bne.n	8004d6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <TIM_OC2_SetConfig+0xd4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d113      	bne.n	8004d9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	621a      	str	r2, [r3, #32]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000

08004dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <TIM_OC3_SetConfig+0xd0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d10d      	bne.n	8004e42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <TIM_OC3_SetConfig+0xd0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d113      	bne.n	8004e72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	621a      	str	r2, [r3, #32]
}
 8004e8c:	bf00      	nop
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40010000 	.word	0x40010000

08004e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	031b      	lsls	r3, r3, #12
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <TIM_OC4_SetConfig+0x9c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d109      	bne.n	8004f10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	019b      	lsls	r3, r3, #6
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	621a      	str	r2, [r3, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000

08004f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f023 0201 	bic.w	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 030a 	bic.w	r3, r3, #10
 8004f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b087      	sub	sp, #28
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0210 	bic.w	r2, r3, #16
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	031b      	lsls	r3, r3, #12
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	f043 0307 	orr.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800504a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	021a      	lsls	r2, r3, #8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	431a      	orrs	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e050      	b.n	800512a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d013      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a18      	ldr	r2, [pc, #96]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a15      	ldr	r2, [pc, #84]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10c      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	4313      	orrs	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40014000 	.word	0x40014000

0800514c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005186:	2b84      	cmp	r3, #132	; 0x84
 8005188:	d005      	beq.n	8005196 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800518a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	3303      	adds	r3, #3
 8005194:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051a8:	f000 ffcc 	bl	8006144 <vTaskStartScheduler>
  
  return osOK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b4:	b089      	sub	sp, #36	; 0x24
 80051b6:	af04      	add	r7, sp, #16
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <osThreadCreate+0x54>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01c      	beq.n	8005206 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685c      	ldr	r4, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681d      	ldr	r5, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691e      	ldr	r6, [r3, #16]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ffc8 	bl	8005174 <makeFreeRtosPriority>
 80051e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ee:	9202      	str	r2, [sp, #8]
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	9100      	str	r1, [sp, #0]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4632      	mov	r2, r6
 80051f8:	4629      	mov	r1, r5
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 fdda 	bl	8005db4 <xTaskCreateStatic>
 8005200:	4603      	mov	r3, r0
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e01c      	b.n	8005240 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685c      	ldr	r4, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005212:	b29e      	uxth	r6, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ffaa 	bl	8005174 <makeFreeRtosPriority>
 8005220:	4602      	mov	r2, r0
 8005222:	f107 030c 	add.w	r3, r7, #12
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	9200      	str	r2, [sp, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	4632      	mov	r2, r6
 800522e:	4629      	mov	r1, r5
 8005230:	4620      	mov	r0, r4
 8005232:	f000 fe1c 	bl	8005e6e <xTaskCreate>
 8005236:	4603      	mov	r3, r0
 8005238:	2b01      	cmp	r3, #1
 800523a:	d001      	beq.n	8005240 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800524a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <osDelay+0x16>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	e000      	b.n	8005262 <osDelay+0x18>
 8005260:	2301      	movs	r3, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f000 ff3a 	bl	80060dc <vTaskDelay>
  
  return osOK;
 8005268:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005272:	b590      	push	{r4, r7, lr}
 8005274:	b085      	sub	sp, #20
 8005276:	af02      	add	r7, sp, #8
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d011      	beq.n	80052a8 <osMessageCreate+0x36>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2400      	movs	r4, #0
 800529e:	9400      	str	r4, [sp, #0]
 80052a0:	f000 f92c 	bl	80054fc <xQueueGenericCreateStatic>
 80052a4:	4603      	mov	r3, r0
 80052a6:	e008      	b.n	80052ba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	4619      	mov	r1, r3
 80052b4:	f000 f99a 	bl	80055ec <xQueueGenericCreate>
 80052b8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}

080052c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f103 0208 	add.w	r2, r3, #8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f04f 32ff 	mov.w	r2, #4294967295
 80052da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f103 0208 	add.w	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f103 0208 	add.w	r2, r3, #8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d103      	bne.n	8005384 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	e00c      	b.n	800539e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3308      	adds	r3, #8
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e002      	b.n	8005392 <vListInsert+0x2e>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	d2f6      	bcs.n	800538c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6892      	ldr	r2, [r2, #8]
 80053ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6852      	ldr	r2, [r2, #4]
 80053f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d103      	bne.n	800540a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005456:	f001 fcad 	bl	8006db4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	441a      	add	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	3b01      	subs	r3, #1
 8005488:	68f9      	ldr	r1, [r7, #12]
 800548a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	22ff      	movs	r2, #255	; 0xff
 800549a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	22ff      	movs	r2, #255	; 0xff
 80054a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d114      	bne.n	80054d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01a      	beq.n	80054ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3310      	adds	r3, #16
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 f885 	bl	80065c8 <xTaskRemoveFromEventList>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d012      	beq.n	80054ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054c4:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <xQueueGenericReset+0xcc>)
 80054c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	e009      	b.n	80054ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3310      	adds	r3, #16
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fef1 	bl	80052c2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3324      	adds	r3, #36	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff feec 	bl	80052c2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054ea:	f001 fc93 	bl	8006e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054ee:	2301      	movs	r3, #1
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	; 0x38
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <xQueueGenericCreateStatic+0x52>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <xQueueGenericCreateStatic+0x56>
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <xQueueGenericCreateStatic+0x58>
 8005552:	2300      	movs	r3, #0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	623b      	str	r3, [r7, #32]
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <xQueueGenericCreateStatic+0x7e>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <xQueueGenericCreateStatic+0x82>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <xQueueGenericCreateStatic+0x84>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	61fb      	str	r3, [r7, #28]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800559a:	2348      	movs	r3, #72	; 0x48
 800559c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b48      	cmp	r3, #72	; 0x48
 80055a2:	d00a      	beq.n	80055ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	61bb      	str	r3, [r7, #24]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	4613      	mov	r3, r2
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f83f 	bl	8005660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3730      	adds	r7, #48	; 0x30
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	; 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	613b      	str	r3, [r7, #16]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3348      	adds	r3, #72	; 0x48
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fce7 	bl	8006ff8 <pvPortMalloc>
 800562a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d011      	beq.n	8005656 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	3348      	adds	r3, #72	; 0x48
 800563a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005644:	79fa      	ldrb	r2, [r7, #7]
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f805 	bl	8005660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005656:	69bb      	ldr	r3, [r7, #24]
	}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e002      	b.n	8005682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800568e:	2101      	movs	r1, #1
 8005690:	69b8      	ldr	r0, [r7, #24]
 8005692:	f7ff fecb 	bl	800542c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericSend+0x32>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d103      	bne.n	80056e0 <xQueueGenericSend+0x40>
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <xQueueGenericSend+0x44>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <xQueueGenericSend+0x46>
 80056e4:	2300      	movs	r3, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <xQueueGenericSend+0x60>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d103      	bne.n	800570e <xQueueGenericSend+0x6e>
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <xQueueGenericSend+0x72>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueGenericSend+0x74>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueGenericSend+0x8e>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	623b      	str	r3, [r7, #32]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800572e:	f001 f907 	bl	8006940 <xTaskGetSchedulerState>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <xQueueGenericSend+0x9e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <xQueueGenericSend+0xa2>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <xQueueGenericSend+0xa4>
 8005742:	2300      	movs	r3, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <xQueueGenericSend+0xbe>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61fb      	str	r3, [r7, #28]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800575e:	f001 fb29 	bl	8006db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	429a      	cmp	r2, r3
 800576c:	d302      	bcc.n	8005774 <xQueueGenericSend+0xd4>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d129      	bne.n	80057c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800577a:	f000 fa0b 	bl	8005b94 <prvCopyDataToQueue>
 800577e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	3324      	adds	r3, #36	; 0x24
 800578c:	4618      	mov	r0, r3
 800578e:	f000 ff1b 	bl	80065c8 <xTaskRemoveFromEventList>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d013      	beq.n	80057c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005798:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <xQueueGenericSend+0x1f8>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	e00a      	b.n	80057c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057b0:	4b39      	ldr	r3, [pc, #228]	; (8005898 <xQueueGenericSend+0x1f8>)
 80057b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057c0:	f001 fb28 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e063      	b.n	8005890 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057ce:	f001 fb21 	bl	8006e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e05c      	b.n	8005890 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057dc:	f107 0314 	add.w	r3, r7, #20
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 ff53 	bl	800668c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057ea:	f001 fb13 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ee:	f000 fd09 	bl	8006204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057f2:	f001 fadf 	bl	8006db4 <vPortEnterCritical>
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057fc:	b25b      	sxtb	r3, r3
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d103      	bne.n	800580c <xQueueGenericSend+0x16c>
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005812:	b25b      	sxtb	r3, r3
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d103      	bne.n	8005822 <xQueueGenericSend+0x182>
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005822:	f001 faf7 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005826:	1d3a      	adds	r2, r7, #4
 8005828:	f107 0314 	add.w	r3, r7, #20
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f000 ff42 	bl	80066b8 <xTaskCheckForTimeOut>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d124      	bne.n	8005884 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800583a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800583c:	f000 faa2 	bl	8005d84 <prvIsQueueFull>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	3310      	adds	r3, #16
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4611      	mov	r1, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fe96 	bl	8006580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005856:	f000 fa2d 	bl	8005cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800585a:	f000 fce1 	bl	8006220 <xTaskResumeAll>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	f47f af7c 	bne.w	800575e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <xQueueGenericSend+0x1f8>)
 8005868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	e772      	b.n	800575e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587a:	f000 fa1b 	bl	8005cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800587e:	f000 fccf 	bl	8006220 <xTaskResumeAll>
 8005882:	e76c      	b.n	800575e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005886:	f000 fa15 	bl	8005cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800588a:	f000 fcc9 	bl	8006220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800588e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005890:	4618      	mov	r0, r3
 8005892:	3738      	adds	r7, #56	; 0x38
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b090      	sub	sp, #64	; 0x40
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <xQueueGenericSendFromISR+0x3c>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <xQueueGenericSendFromISR+0x40>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <xQueueGenericSendFromISR+0x42>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d103      	bne.n	8005906 <xQueueGenericSendFromISR+0x6a>
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <xQueueGenericSendFromISR+0x6e>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <xQueueGenericSendFromISR+0x70>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	623b      	str	r3, [r7, #32]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005926:	f001 fb27 	bl	8006f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800592a:	f3ef 8211 	mrs	r2, BASEPRI
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	61fa      	str	r2, [r7, #28]
 8005940:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005942:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	429a      	cmp	r2, r3
 8005950:	d302      	bcc.n	8005958 <xQueueGenericSendFromISR+0xbc>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d12f      	bne.n	80059b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800595e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800596e:	f000 f911 	bl	8005b94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005972:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d112      	bne.n	80059a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d016      	beq.n	80059b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	3324      	adds	r3, #36	; 0x24
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fe1d 	bl	80065c8 <xTaskRemoveFromEventList>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00e      	beq.n	80059b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e007      	b.n	80059b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059a6:	3301      	adds	r3, #1
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	b25a      	sxtb	r2, r3
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059b2:	2301      	movs	r3, #1
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059b6:	e001      	b.n	80059bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3740      	adds	r7, #64	; 0x40
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08c      	sub	sp, #48	; 0x30
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <xQueueReceive+0x30>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	623b      	str	r3, [r7, #32]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <xQueueReceive+0x3e>
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <xQueueReceive+0x42>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <xQueueReceive+0x44>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xQueueReceive+0x5e>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	61fb      	str	r3, [r7, #28]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a32:	f000 ff85 	bl	8006940 <xTaskGetSchedulerState>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <xQueueReceive+0x6e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <xQueueReceive+0x72>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <xQueueReceive+0x74>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xQueueReceive+0x8e>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	61bb      	str	r3, [r7, #24]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a62:	f001 f9a7 	bl	8006db4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d01f      	beq.n	8005ab2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a76:	f000 f8f7 	bl	8005c68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	1e5a      	subs	r2, r3, #1
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00f      	beq.n	8005aaa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	3310      	adds	r3, #16
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fd9a 	bl	80065c8 <xTaskRemoveFromEventList>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a9a:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <xQueueReceive+0x1bc>)
 8005a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aaa:	f001 f9b3 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e069      	b.n	8005b86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ab8:	f001 f9ac 	bl	8006e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e062      	b.n	8005b86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ac6:	f107 0310 	add.w	r3, r7, #16
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fdde 	bl	800668c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ad4:	f001 f99e 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ad8:	f000 fb94 	bl	8006204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005adc:	f001 f96a 	bl	8006db4 <vPortEnterCritical>
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ae6:	b25b      	sxtb	r3, r3
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d103      	bne.n	8005af6 <xQueueReceive+0x122>
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b02:	d103      	bne.n	8005b0c <xQueueReceive+0x138>
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b0c:	f001 f982 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b10:	1d3a      	adds	r2, r7, #4
 8005b12:	f107 0310 	add.w	r3, r7, #16
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fdcd 	bl	80066b8 <xTaskCheckForTimeOut>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d123      	bne.n	8005b6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b26:	f000 f917 	bl	8005d58 <prvIsQueueEmpty>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d017      	beq.n	8005b60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	3324      	adds	r3, #36	; 0x24
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fd21 	bl	8006580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b40:	f000 f8b8 	bl	8005cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b44:	f000 fb6c 	bl	8006220 <xTaskResumeAll>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d189      	bne.n	8005a62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b4e:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <xQueueReceive+0x1bc>)
 8005b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	e780      	b.n	8005a62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b62:	f000 f8a7 	bl	8005cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b66:	f000 fb5b 	bl	8006220 <xTaskResumeAll>
 8005b6a:	e77a      	b.n	8005a62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6e:	f000 f8a1 	bl	8005cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b72:	f000 fb55 	bl	8006220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b78:	f000 f8ee 	bl	8005d58 <prvIsQueueEmpty>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f43f af6f 	beq.w	8005a62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3730      	adds	r7, #48	; 0x30
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d14d      	bne.n	8005c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fedc 	bl	800697c <xTaskPriorityDisinherit>
 8005bc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	e043      	b.n	8005c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d119      	bne.n	8005c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6858      	ldr	r0, [r3, #4]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	f001 fc1e 	bl	8007420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	441a      	add	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d32b      	bcc.n	8005c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e026      	b.n	8005c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68d8      	ldr	r0, [r3, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	461a      	mov	r2, r3
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	f001 fc04 	bl	8007420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	425b      	negs	r3, r3
 8005c22:	441a      	add	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d207      	bcs.n	8005c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	441a      	add	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d105      	bne.n	8005c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c5e:	697b      	ldr	r3, [r7, #20]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d018      	beq.n	8005cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	441a      	add	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d303      	bcc.n	8005c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68d9      	ldr	r1, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6838      	ldr	r0, [r7, #0]
 8005ca8:	f001 fbba 	bl	8007420 <memcpy>
	}
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cbc:	f001 f87a 	bl	8006db4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cc8:	e011      	b.n	8005cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d012      	beq.n	8005cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3324      	adds	r3, #36	; 0x24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fc76 	bl	80065c8 <xTaskRemoveFromEventList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ce2:	f000 fd4b 	bl	800677c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	dce9      	bgt.n	8005cca <prvUnlockQueue+0x16>
 8005cf6:	e000      	b.n	8005cfa <prvUnlockQueue+0x46>
					break;
 8005cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	22ff      	movs	r2, #255	; 0xff
 8005cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d02:	f001 f887 	bl	8006e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d06:	f001 f855 	bl	8006db4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d12:	e011      	b.n	8005d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d012      	beq.n	8005d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3310      	adds	r3, #16
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fc51 	bl	80065c8 <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d2c:	f000 fd26 	bl	800677c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dce9      	bgt.n	8005d14 <prvUnlockQueue+0x60>
 8005d40:	e000      	b.n	8005d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	22ff      	movs	r2, #255	; 0xff
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d4c:	f001 f862 	bl	8006e14 <vPortExitCritical>
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d60:	f001 f828 	bl	8006db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e001      	b.n	8005d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d76:	f001 f84d 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d8c:	f001 f812 	bl	8006db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d102      	bne.n	8005da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e001      	b.n	8005da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005da6:	f001 f835 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08e      	sub	sp, #56	; 0x38
 8005db8:	af04      	add	r7, sp, #16
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	623b      	str	r3, [r7, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <xTaskCreateStatic+0x46>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	61fb      	str	r3, [r7, #28]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dfa:	2354      	movs	r3, #84	; 0x54
 8005dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b54      	cmp	r3, #84	; 0x54
 8005e02:	d00a      	beq.n	8005e1a <xTaskCreateStatic+0x66>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	61bb      	str	r3, [r7, #24]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01e      	beq.n	8005e60 <xTaskCreateStatic+0xac>
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01b      	beq.n	8005e60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	9302      	str	r3, [sp, #8]
 8005e42:	f107 0314 	add.w	r3, r7, #20
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f850 	bl	8005ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e5a:	f000 f8d5 	bl	8006008 <prvAddNewTaskToReadyList>
 8005e5e:	e001      	b.n	8005e64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e64:	697b      	ldr	r3, [r7, #20]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3728      	adds	r7, #40	; 0x28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b08c      	sub	sp, #48	; 0x30
 8005e72:	af04      	add	r7, sp, #16
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f8b8 	bl	8006ff8 <pvPortMalloc>
 8005e88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e90:	2054      	movs	r0, #84	; 0x54
 8005e92:	f001 f8b1 	bl	8006ff8 <pvPortMalloc>
 8005e96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ea4:	e005      	b.n	8005eb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ea6:	6978      	ldr	r0, [r7, #20]
 8005ea8:	f001 f972 	bl	8007190 <vPortFree>
 8005eac:	e001      	b.n	8005eb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d017      	beq.n	8005ee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ec0:	88fa      	ldrh	r2, [r7, #6]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9303      	str	r3, [sp, #12]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	9302      	str	r3, [sp, #8]
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 f80e 	bl	8005ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005edc:	69f8      	ldr	r0, [r7, #28]
 8005ede:	f000 f893 	bl	8006008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e002      	b.n	8005eee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eee:	69bb      	ldr	r3, [r7, #24]
	}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3720      	adds	r7, #32
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f10:	3b01      	subs	r3, #1
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	617b      	str	r3, [r7, #20]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01f      	beq.n	8005f86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	e012      	b.n	8005f72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	7819      	ldrb	r1, [r3, #0]
 8005f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	3334      	adds	r3, #52	; 0x34
 8005f5c:	460a      	mov	r2, r1
 8005f5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d006      	beq.n	8005f7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b0f      	cmp	r3, #15
 8005f76:	d9e9      	bls.n	8005f4c <prvInitialiseNewTask+0x54>
 8005f78:	e000      	b.n	8005f7c <prvInitialiseNewTask+0x84>
			{
				break;
 8005f7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f84:	e003      	b.n	8005f8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	2b06      	cmp	r3, #6
 8005f92:	d901      	bls.n	8005f98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f94:	2306      	movs	r3, #6
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	3304      	adds	r3, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff f9a7 	bl	8005302 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff f9a2 	bl	8005302 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	f1c3 0207 	rsb	r2, r3, #7
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	68f9      	ldr	r1, [r7, #12]
 8005fe6:	69b8      	ldr	r0, [r7, #24]
 8005fe8:	f000 fdb4 	bl	8006b54 <pxPortInitialiseStack>
 8005fec:	4602      	mov	r2, r0
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ffe:	bf00      	nop
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006010:	f000 fed0 	bl	8006db4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <prvAddNewTaskToReadyList+0xb8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <prvAddNewTaskToReadyList+0xb8>)
 800601c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800601e:	4b29      	ldr	r3, [pc, #164]	; (80060c4 <prvAddNewTaskToReadyList+0xbc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006026:	4a27      	ldr	r2, [pc, #156]	; (80060c4 <prvAddNewTaskToReadyList+0xbc>)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <prvAddNewTaskToReadyList+0xb8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d110      	bne.n	8006056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006034:	f000 fbc6 	bl	80067c4 <prvInitialiseTaskLists>
 8006038:	e00d      	b.n	8006056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800603a:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <prvAddNewTaskToReadyList+0xc0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <prvAddNewTaskToReadyList+0xbc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	429a      	cmp	r2, r3
 800604e:	d802      	bhi.n	8006056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006050:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <prvAddNewTaskToReadyList+0xbc>)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006056:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <prvAddNewTaskToReadyList+0xc4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3301      	adds	r3, #1
 800605c:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <prvAddNewTaskToReadyList+0xc4>)
 800605e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	2201      	movs	r2, #1
 8006066:	409a      	lsls	r2, r3
 8006068:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <prvAddNewTaskToReadyList+0xc8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4313      	orrs	r3, r2
 800606e:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <prvAddNewTaskToReadyList+0xc8>)
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <prvAddNewTaskToReadyList+0xcc>)
 8006080:	441a      	add	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7ff f947 	bl	800531c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800608e:	f000 fec1 	bl	8006e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006092:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <prvAddNewTaskToReadyList+0xc0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00e      	beq.n	80060b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <prvAddNewTaskToReadyList+0xbc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d207      	bcs.n	80060b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <prvAddNewTaskToReadyList+0xd0>)
 80060aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000818 	.word	0x20000818
 80060c4:	20000718 	.word	0x20000718
 80060c8:	20000824 	.word	0x20000824
 80060cc:	20000834 	.word	0x20000834
 80060d0:	20000820 	.word	0x20000820
 80060d4:	2000071c 	.word	0x2000071c
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d017      	beq.n	800611e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <vTaskDelay+0x60>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <vTaskDelay+0x30>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60bb      	str	r3, [r7, #8]
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800610c:	f000 f87a 	bl	8006204 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006110:	2100      	movs	r1, #0
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fcb8 	bl	8006a88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006118:	f000 f882 	bl	8006220 <xTaskResumeAll>
 800611c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d107      	bne.n	8006134 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <vTaskDelay+0x64>)
 8006126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000840 	.word	0x20000840
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006152:	463a      	mov	r2, r7
 8006154:	1d39      	adds	r1, r7, #4
 8006156:	f107 0308 	add.w	r3, r7, #8
 800615a:	4618      	mov	r0, r3
 800615c:	f7fb fb18 	bl	8001790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	9202      	str	r2, [sp, #8]
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	2300      	movs	r3, #0
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2300      	movs	r3, #0
 8006170:	460a      	mov	r2, r1
 8006172:	491e      	ldr	r1, [pc, #120]	; (80061ec <vTaskStartScheduler+0xa8>)
 8006174:	481e      	ldr	r0, [pc, #120]	; (80061f0 <vTaskStartScheduler+0xac>)
 8006176:	f7ff fe1d 	bl	8005db4 <xTaskCreateStatic>
 800617a:	4603      	mov	r3, r0
 800617c:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <vTaskStartScheduler+0xb0>)
 800617e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006180:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <vTaskStartScheduler+0xb0>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e001      	b.n	8006192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d116      	bne.n	80061c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	613b      	str	r3, [r7, #16]
}
 80061aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <vTaskStartScheduler+0xb4>)
 80061ae:	f04f 32ff 	mov.w	r2, #4294967295
 80061b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061b4:	4b11      	ldr	r3, [pc, #68]	; (80061fc <vTaskStartScheduler+0xb8>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <vTaskStartScheduler+0xbc>)
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061c0:	f000 fd56 	bl	8006c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061c4:	e00e      	b.n	80061e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061cc:	d10a      	bne.n	80061e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60fb      	str	r3, [r7, #12]
}
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <vTaskStartScheduler+0x9e>
}
 80061e4:	bf00      	nop
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	0800a360 	.word	0x0800a360
 80061f0:	08006795 	.word	0x08006795
 80061f4:	2000083c 	.word	0x2000083c
 80061f8:	20000838 	.word	0x20000838
 80061fc:	20000824 	.word	0x20000824
 8006200:	2000081c 	.word	0x2000081c

08006204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <vTaskSuspendAll+0x18>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4a03      	ldr	r2, [pc, #12]	; (800621c <vTaskSuspendAll+0x18>)
 8006210:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006212:	bf00      	nop
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20000840 	.word	0x20000840

08006220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800622e:	4b41      	ldr	r3, [pc, #260]	; (8006334 <xTaskResumeAll+0x114>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <xTaskResumeAll+0x2c>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	603b      	str	r3, [r7, #0]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800624c:	f000 fdb2 	bl	8006db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006250:	4b38      	ldr	r3, [pc, #224]	; (8006334 <xTaskResumeAll+0x114>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3b01      	subs	r3, #1
 8006256:	4a37      	ldr	r2, [pc, #220]	; (8006334 <xTaskResumeAll+0x114>)
 8006258:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625a:	4b36      	ldr	r3, [pc, #216]	; (8006334 <xTaskResumeAll+0x114>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d161      	bne.n	8006326 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006262:	4b35      	ldr	r3, [pc, #212]	; (8006338 <xTaskResumeAll+0x118>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d05d      	beq.n	8006326 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800626a:	e02e      	b.n	80062ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800626c:	4b33      	ldr	r3, [pc, #204]	; (800633c <xTaskResumeAll+0x11c>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3318      	adds	r3, #24
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff f8ac 	bl	80053d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3304      	adds	r3, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff f8a7 	bl	80053d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	2201      	movs	r2, #1
 800628e:	409a      	lsls	r2, r3
 8006290:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <xTaskResumeAll+0x120>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4313      	orrs	r3, r2
 8006296:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <xTaskResumeAll+0x120>)
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4a27      	ldr	r2, [pc, #156]	; (8006344 <xTaskResumeAll+0x124>)
 80062a8:	441a      	add	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7ff f833 	bl	800531c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	4b23      	ldr	r3, [pc, #140]	; (8006348 <xTaskResumeAll+0x128>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d302      	bcc.n	80062ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80062c4:	4b21      	ldr	r3, [pc, #132]	; (800634c <xTaskResumeAll+0x12c>)
 80062c6:	2201      	movs	r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ca:	4b1c      	ldr	r3, [pc, #112]	; (800633c <xTaskResumeAll+0x11c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1cc      	bne.n	800626c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062d8:	f000 fb12 	bl	8006900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062dc:	4b1c      	ldr	r3, [pc, #112]	; (8006350 <xTaskResumeAll+0x130>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d010      	beq.n	800630a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062e8:	f000 f836 	bl	8006358 <xTaskIncrementTick>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80062f2:	4b16      	ldr	r3, [pc, #88]	; (800634c <xTaskResumeAll+0x12c>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f1      	bne.n	80062e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <xTaskResumeAll+0x130>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800630a:	4b10      	ldr	r3, [pc, #64]	; (800634c <xTaskResumeAll+0x12c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006312:	2301      	movs	r3, #1
 8006314:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006316:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <xTaskResumeAll+0x134>)
 8006318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006326:	f000 fd75 	bl	8006e14 <vPortExitCritical>

	return xAlreadyYielded;
 800632a:	68bb      	ldr	r3, [r7, #8]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000840 	.word	0x20000840
 8006338:	20000818 	.word	0x20000818
 800633c:	200007d8 	.word	0x200007d8
 8006340:	20000820 	.word	0x20000820
 8006344:	2000071c 	.word	0x2000071c
 8006348:	20000718 	.word	0x20000718
 800634c:	2000082c 	.word	0x2000082c
 8006350:	20000828 	.word	0x20000828
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006362:	4b4e      	ldr	r3, [pc, #312]	; (800649c <xTaskIncrementTick+0x144>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f040 808e 	bne.w	8006488 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800636c:	4b4c      	ldr	r3, [pc, #304]	; (80064a0 <xTaskIncrementTick+0x148>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006374:	4a4a      	ldr	r2, [pc, #296]	; (80064a0 <xTaskIncrementTick+0x148>)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d120      	bne.n	80063c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006380:	4b48      	ldr	r3, [pc, #288]	; (80064a4 <xTaskIncrementTick+0x14c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	603b      	str	r3, [r7, #0]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <xTaskIncrementTick+0x46>
 80063a0:	4b40      	ldr	r3, [pc, #256]	; (80064a4 <xTaskIncrementTick+0x14c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	4b40      	ldr	r3, [pc, #256]	; (80064a8 <xTaskIncrementTick+0x150>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a3e      	ldr	r2, [pc, #248]	; (80064a4 <xTaskIncrementTick+0x14c>)
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4a3e      	ldr	r2, [pc, #248]	; (80064a8 <xTaskIncrementTick+0x150>)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b3d      	ldr	r3, [pc, #244]	; (80064ac <xTaskIncrementTick+0x154>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	4a3c      	ldr	r2, [pc, #240]	; (80064ac <xTaskIncrementTick+0x154>)
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	f000 fa9f 	bl	8006900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063c2:	4b3b      	ldr	r3, [pc, #236]	; (80064b0 <xTaskIncrementTick+0x158>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d348      	bcc.n	800645e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063cc:	4b35      	ldr	r3, [pc, #212]	; (80064a4 <xTaskIncrementTick+0x14c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d6:	4b36      	ldr	r3, [pc, #216]	; (80064b0 <xTaskIncrementTick+0x158>)
 80063d8:	f04f 32ff 	mov.w	r2, #4294967295
 80063dc:	601a      	str	r2, [r3, #0]
					break;
 80063de:	e03e      	b.n	800645e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e0:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <xTaskIncrementTick+0x14c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d203      	bcs.n	8006400 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063f8:	4a2d      	ldr	r2, [pc, #180]	; (80064b0 <xTaskIncrementTick+0x158>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063fe:	e02e      	b.n	800645e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	3304      	adds	r3, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe ffe6 	bl	80053d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	3318      	adds	r3, #24
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe ffdd 	bl	80053d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	2201      	movs	r2, #1
 8006422:	409a      	lsls	r2, r3
 8006424:	4b23      	ldr	r3, [pc, #140]	; (80064b4 <xTaskIncrementTick+0x15c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4313      	orrs	r3, r2
 800642a:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <xTaskIncrementTick+0x15c>)
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <xTaskIncrementTick+0x160>)
 800643c:	441a      	add	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f7fe ff69 	bl	800531c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644e:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <xTaskIncrementTick+0x164>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	429a      	cmp	r2, r3
 8006456:	d3b9      	bcc.n	80063cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006458:	2301      	movs	r3, #1
 800645a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800645c:	e7b6      	b.n	80063cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800645e:	4b17      	ldr	r3, [pc, #92]	; (80064bc <xTaskIncrementTick+0x164>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006464:	4914      	ldr	r1, [pc, #80]	; (80064b8 <xTaskIncrementTick+0x160>)
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d901      	bls.n	800647a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800647a:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <xTaskIncrementTick+0x168>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e004      	b.n	8006492 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006488:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <xTaskIncrementTick+0x16c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	4a0d      	ldr	r2, [pc, #52]	; (80064c4 <xTaskIncrementTick+0x16c>)
 8006490:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006492:	697b      	ldr	r3, [r7, #20]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20000840 	.word	0x20000840
 80064a0:	2000081c 	.word	0x2000081c
 80064a4:	200007d0 	.word	0x200007d0
 80064a8:	200007d4 	.word	0x200007d4
 80064ac:	20000830 	.word	0x20000830
 80064b0:	20000838 	.word	0x20000838
 80064b4:	20000820 	.word	0x20000820
 80064b8:	2000071c 	.word	0x2000071c
 80064bc:	20000718 	.word	0x20000718
 80064c0:	2000082c 	.word	0x2000082c
 80064c4:	20000828 	.word	0x20000828

080064c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ce:	4b27      	ldr	r3, [pc, #156]	; (800656c <vTaskSwitchContext+0xa4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064d6:	4b26      	ldr	r3, [pc, #152]	; (8006570 <vTaskSwitchContext+0xa8>)
 80064d8:	2201      	movs	r2, #1
 80064da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064dc:	e03f      	b.n	800655e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80064de:	4b24      	ldr	r3, [pc, #144]	; (8006570 <vTaskSwitchContext+0xa8>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e4:	4b23      	ldr	r3, [pc, #140]	; (8006574 <vTaskSwitchContext+0xac>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	fab3 f383 	clz	r3, r3
 80064f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	f1c3 031f 	rsb	r3, r3, #31
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	491f      	ldr	r1, [pc, #124]	; (8006578 <vTaskSwitchContext+0xb0>)
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <vTaskSwitchContext+0x5c>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <vTaskSwitchContext+0x5a>
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4a12      	ldr	r2, [pc, #72]	; (8006578 <vTaskSwitchContext+0xb0>)
 8006530:	4413      	add	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	3308      	adds	r3, #8
 8006546:	429a      	cmp	r2, r3
 8006548:	d104      	bne.n	8006554 <vTaskSwitchContext+0x8c>
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	4a08      	ldr	r2, [pc, #32]	; (800657c <vTaskSwitchContext+0xb4>)
 800655c:	6013      	str	r3, [r2, #0]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000840 	.word	0x20000840
 8006570:	2000082c 	.word	0x2000082c
 8006574:	20000820 	.word	0x20000820
 8006578:	2000071c 	.word	0x2000071c
 800657c:	20000718 	.word	0x20000718

08006580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a6:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <vTaskPlaceOnEventList+0x44>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3318      	adds	r3, #24
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fe fed8 	bl	8005364 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065b4:	2101      	movs	r1, #1
 80065b6:	6838      	ldr	r0, [r7, #0]
 80065b8:	f000 fa66 	bl	8006a88 <prvAddCurrentTaskToDelayedList>
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000718 	.word	0x20000718

080065c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60fb      	str	r3, [r7, #12]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	3318      	adds	r3, #24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe feec 	bl	80053d6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065fe:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <xTaskRemoveFromEventList+0xac>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11c      	bne.n	8006640 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	3304      	adds	r3, #4
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fee3 	bl	80053d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	2201      	movs	r2, #1
 8006616:	409a      	lsls	r2, r3
 8006618:	4b17      	ldr	r3, [pc, #92]	; (8006678 <xTaskRemoveFromEventList+0xb0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4313      	orrs	r3, r2
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <xTaskRemoveFromEventList+0xb0>)
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4a13      	ldr	r2, [pc, #76]	; (800667c <xTaskRemoveFromEventList+0xb4>)
 8006630:	441a      	add	r2, r3
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fe fe6f 	bl	800531c <vListInsertEnd>
 800663e:	e005      	b.n	800664c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3318      	adds	r3, #24
 8006644:	4619      	mov	r1, r3
 8006646:	480e      	ldr	r0, [pc, #56]	; (8006680 <xTaskRemoveFromEventList+0xb8>)
 8006648:	f7fe fe68 	bl	800531c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <xTaskRemoveFromEventList+0xbc>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	429a      	cmp	r2, r3
 8006658:	d905      	bls.n	8006666 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800665a:	2301      	movs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800665e:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <xTaskRemoveFromEventList+0xc0>)
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e001      	b.n	800666a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800666a:	697b      	ldr	r3, [r7, #20]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	20000840 	.word	0x20000840
 8006678:	20000820 	.word	0x20000820
 800667c:	2000071c 	.word	0x2000071c
 8006680:	200007d8 	.word	0x200007d8
 8006684:	20000718 	.word	0x20000718
 8006688:	2000082c 	.word	0x2000082c

0800668c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006694:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <vTaskInternalSetTimeOutState+0x24>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <vTaskInternalSetTimeOutState+0x28>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	605a      	str	r2, [r3, #4]
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20000830 	.word	0x20000830
 80066b4:	2000081c 	.word	0x2000081c

080066b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	613b      	str	r3, [r7, #16]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	60fb      	str	r3, [r7, #12]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80066fa:	f000 fb5b 	bl	8006db4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066fe:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <xTaskCheckForTimeOut+0xbc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d102      	bne.n	800671e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006718:	2300      	movs	r3, #0
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	e023      	b.n	8006766 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <xTaskCheckForTimeOut+0xc0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d007      	beq.n	800673a <xTaskCheckForTimeOut+0x82>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	429a      	cmp	r2, r3
 8006732:	d302      	bcc.n	800673a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006734:	2301      	movs	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	e015      	b.n	8006766 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	429a      	cmp	r2, r3
 8006742:	d20b      	bcs.n	800675c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff ff9b 	bl	800668c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	e004      	b.n	8006766 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006762:	2301      	movs	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006766:	f000 fb55 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 800676a:	69fb      	ldr	r3, [r7, #28]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	2000081c 	.word	0x2000081c
 8006778:	20000830 	.word	0x20000830

0800677c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006780:	4b03      	ldr	r3, [pc, #12]	; (8006790 <vTaskMissedYield+0x14>)
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]
}
 8006786:	bf00      	nop
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	2000082c 	.word	0x2000082c

08006794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800679c:	f000 f852 	bl	8006844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <prvIdleTask+0x28>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d9f9      	bls.n	800679c <prvIdleTask+0x8>
			{
				taskYIELD();
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <prvIdleTask+0x2c>)
 80067aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067b8:	e7f0      	b.n	800679c <prvIdleTask+0x8>
 80067ba:	bf00      	nop
 80067bc:	2000071c 	.word	0x2000071c
 80067c0:	e000ed04 	.word	0xe000ed04

080067c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067ca:	2300      	movs	r3, #0
 80067cc:	607b      	str	r3, [r7, #4]
 80067ce:	e00c      	b.n	80067ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4a12      	ldr	r2, [pc, #72]	; (8006824 <prvInitialiseTaskLists+0x60>)
 80067dc:	4413      	add	r3, r2
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fd6f 	bl	80052c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3301      	adds	r3, #1
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b06      	cmp	r3, #6
 80067ee:	d9ef      	bls.n	80067d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067f0:	480d      	ldr	r0, [pc, #52]	; (8006828 <prvInitialiseTaskLists+0x64>)
 80067f2:	f7fe fd66 	bl	80052c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067f6:	480d      	ldr	r0, [pc, #52]	; (800682c <prvInitialiseTaskLists+0x68>)
 80067f8:	f7fe fd63 	bl	80052c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067fc:	480c      	ldr	r0, [pc, #48]	; (8006830 <prvInitialiseTaskLists+0x6c>)
 80067fe:	f7fe fd60 	bl	80052c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006802:	480c      	ldr	r0, [pc, #48]	; (8006834 <prvInitialiseTaskLists+0x70>)
 8006804:	f7fe fd5d 	bl	80052c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006808:	480b      	ldr	r0, [pc, #44]	; (8006838 <prvInitialiseTaskLists+0x74>)
 800680a:	f7fe fd5a 	bl	80052c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <prvInitialiseTaskLists+0x78>)
 8006810:	4a05      	ldr	r2, [pc, #20]	; (8006828 <prvInitialiseTaskLists+0x64>)
 8006812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <prvInitialiseTaskLists+0x7c>)
 8006816:	4a05      	ldr	r2, [pc, #20]	; (800682c <prvInitialiseTaskLists+0x68>)
 8006818:	601a      	str	r2, [r3, #0]
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	2000071c 	.word	0x2000071c
 8006828:	200007a8 	.word	0x200007a8
 800682c:	200007bc 	.word	0x200007bc
 8006830:	200007d8 	.word	0x200007d8
 8006834:	200007ec 	.word	0x200007ec
 8006838:	20000804 	.word	0x20000804
 800683c:	200007d0 	.word	0x200007d0
 8006840:	200007d4 	.word	0x200007d4

08006844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800684a:	e019      	b.n	8006880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800684c:	f000 fab2 	bl	8006db4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006850:	4b10      	ldr	r3, [pc, #64]	; (8006894 <prvCheckTasksWaitingTermination+0x50>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3304      	adds	r3, #4
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe fdba 	bl	80053d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006862:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <prvCheckTasksWaitingTermination+0x54>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3b01      	subs	r3, #1
 8006868:	4a0b      	ldr	r2, [pc, #44]	; (8006898 <prvCheckTasksWaitingTermination+0x54>)
 800686a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <prvCheckTasksWaitingTermination+0x58>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3b01      	subs	r3, #1
 8006872:	4a0a      	ldr	r2, [pc, #40]	; (800689c <prvCheckTasksWaitingTermination+0x58>)
 8006874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006876:	f000 facd 	bl	8006e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f810 	bl	80068a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006880:	4b06      	ldr	r3, [pc, #24]	; (800689c <prvCheckTasksWaitingTermination+0x58>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e1      	bne.n	800684c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	200007ec 	.word	0x200007ec
 8006898:	20000818 	.word	0x20000818
 800689c:	20000800 	.word	0x20000800

080068a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d108      	bne.n	80068c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fc6a 	bl	8007190 <vPortFree>
				vPortFree( pxTCB );
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fc67 	bl	8007190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068c2:	e018      	b.n	80068f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d103      	bne.n	80068d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc5e 	bl	8007190 <vPortFree>
	}
 80068d4:	e00f      	b.n	80068f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d00a      	beq.n	80068f6 <prvDeleteTCB+0x56>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <prvDeleteTCB+0x54>
	}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006906:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <prvResetNextTaskUnblockTime+0x38>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <prvResetNextTaskUnblockTime+0x3c>)
 8006912:	f04f 32ff 	mov.w	r2, #4294967295
 8006916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006918:	e008      	b.n	800692c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <prvResetNextTaskUnblockTime+0x38>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	4a04      	ldr	r2, [pc, #16]	; (800693c <prvResetNextTaskUnblockTime+0x3c>)
 800692a:	6013      	str	r3, [r2, #0]
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	200007d0 	.word	0x200007d0
 800693c:	20000838 	.word	0x20000838

08006940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006946:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <xTaskGetSchedulerState+0x34>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800694e:	2301      	movs	r3, #1
 8006950:	607b      	str	r3, [r7, #4]
 8006952:	e008      	b.n	8006966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006954:	4b08      	ldr	r3, [pc, #32]	; (8006978 <xTaskGetSchedulerState+0x38>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800695c:	2302      	movs	r3, #2
 800695e:	607b      	str	r3, [r7, #4]
 8006960:	e001      	b.n	8006966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006966:	687b      	ldr	r3, [r7, #4]
	}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20000824 	.word	0x20000824
 8006978:	20000840 	.word	0x20000840

0800697c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d06e      	beq.n	8006a70 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006992:	4b3a      	ldr	r3, [pc, #232]	; (8006a7c <xTaskPriorityDisinherit+0x100>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	429a      	cmp	r2, r3
 800699a:	d00a      	beq.n	80069b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60fb      	str	r3, [r7, #12]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	60bb      	str	r3, [r7, #8]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d4:	1e5a      	subs	r2, r3, #1
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d044      	beq.n	8006a70 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d140      	bne.n	8006a70 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fcef 	bl	80053d6 <uxListRemove>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d115      	bne.n	8006a2a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	491f      	ldr	r1, [pc, #124]	; (8006a80 <xTaskPriorityDisinherit+0x104>)
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <xTaskPriorityDisinherit+0xae>
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	2201      	movs	r2, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <xTaskPriorityDisinherit+0x108>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4013      	ands	r3, r2
 8006a26:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <xTaskPriorityDisinherit+0x108>)
 8006a28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	f1c3 0207 	rsb	r2, r3, #7
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	2201      	movs	r2, #1
 8006a44:	409a      	lsls	r2, r3
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <xTaskPriorityDisinherit+0x108>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	4a0d      	ldr	r2, [pc, #52]	; (8006a84 <xTaskPriorityDisinherit+0x108>)
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <xTaskPriorityDisinherit+0x104>)
 8006a5e:	441a      	add	r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f7fe fc58 	bl	800531c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a70:	697b      	ldr	r3, [r7, #20]
	}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000718 	.word	0x20000718
 8006a80:	2000071c 	.word	0x2000071c
 8006a84:	20000820 	.word	0x20000820

08006a88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a92:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a98:	4b28      	ldr	r3, [pc, #160]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fc99 	bl	80053d6 <uxListRemove>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006aaa:	4b24      	ldr	r3, [pc, #144]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43da      	mvns	r2, r3
 8006ab8:	4b21      	ldr	r3, [pc, #132]	; (8006b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4013      	ands	r3, r2
 8006abe:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ac0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d10a      	bne.n	8006ae0 <prvAddCurrentTaskToDelayedList+0x58>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d007      	beq.n	8006ae0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	481a      	ldr	r0, [pc, #104]	; (8006b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006ada:	f7fe fc1f 	bl	800531c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ade:	e026      	b.n	8006b2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ae8:	4b14      	ldr	r3, [pc, #80]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d209      	bcs.n	8006b0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af8:	4b13      	ldr	r3, [pc, #76]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7fe fc2d 	bl	8005364 <vListInsert>
}
 8006b0a:	e010      	b.n	8006b2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b0c:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f7fe fc23 	bl	8005364 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d202      	bcs.n	8006b2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6013      	str	r3, [r2, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	2000081c 	.word	0x2000081c
 8006b3c:	20000718 	.word	0x20000718
 8006b40:	20000820 	.word	0x20000820
 8006b44:	20000804 	.word	0x20000804
 8006b48:	200007d4 	.word	0x200007d4
 8006b4c:	200007d0 	.word	0x200007d0
 8006b50:	20000838 	.word	0x20000838

08006b54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3b04      	subs	r3, #4
 8006b64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3b04      	subs	r3, #4
 8006b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f023 0201 	bic.w	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b84:	4a0c      	ldr	r2, [pc, #48]	; (8006bb8 <pxPortInitialiseStack+0x64>)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3b14      	subs	r3, #20
 8006b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f06f 0202 	mvn.w	r2, #2
 8006ba2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3b20      	subs	r3, #32
 8006ba8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006baa:	68fb      	ldr	r3, [r7, #12]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	08006bbd 	.word	0x08006bbd

08006bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bc6:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <prvTaskExitError+0x54>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d00a      	beq.n	8006be6 <prvTaskExitError+0x2a>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	60fb      	str	r3, [r7, #12]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <prvTaskExitError+0x28>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60bb      	str	r3, [r7, #8]
}
 8006bf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bfa:	bf00      	nop
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0fc      	beq.n	8006bfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20000110 	.word	0x20000110
	...

08006c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <pxCurrentTCBConst2>)
 8006c22:	6819      	ldr	r1, [r3, #0]
 8006c24:	6808      	ldr	r0, [r1, #0]
 8006c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2a:	f380 8809 	msr	PSP, r0
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	f380 8811 	msr	BASEPRI, r0
 8006c3a:	4770      	bx	lr
 8006c3c:	f3af 8000 	nop.w

08006c40 <pxCurrentTCBConst2>:
 8006c40:	20000718 	.word	0x20000718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop

08006c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c48:	4808      	ldr	r0, [pc, #32]	; (8006c6c <prvPortStartFirstTask+0x24>)
 8006c4a:	6800      	ldr	r0, [r0, #0]
 8006c4c:	6800      	ldr	r0, [r0, #0]
 8006c4e:	f380 8808 	msr	MSP, r0
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8814 	msr	CONTROL, r0
 8006c5a:	b662      	cpsie	i
 8006c5c:	b661      	cpsie	f
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	df00      	svc	0
 8006c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c6a:	bf00      	nop
 8006c6c:	e000ed08 	.word	0xe000ed08

08006c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c76:	4b46      	ldr	r3, [pc, #280]	; (8006d90 <xPortStartScheduler+0x120>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a46      	ldr	r2, [pc, #280]	; (8006d94 <xPortStartScheduler+0x124>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10a      	bne.n	8006c96 <xPortStartScheduler+0x26>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c96:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <xPortStartScheduler+0x120>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a3f      	ldr	r2, [pc, #252]	; (8006d98 <xPortStartScheduler+0x128>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d10a      	bne.n	8006cb6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cb6:	4b39      	ldr	r3, [pc, #228]	; (8006d9c <xPortStartScheduler+0x12c>)
 8006cb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	22ff      	movs	r2, #255	; 0xff
 8006cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <xPortStartScheduler+0x130>)
 8006cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cde:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <xPortStartScheduler+0x134>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ce4:	e009      	b.n	8006cfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ce6:	4b2f      	ldr	r3, [pc, #188]	; (8006da4 <xPortStartScheduler+0x134>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	4a2d      	ldr	r2, [pc, #180]	; (8006da4 <xPortStartScheduler+0x134>)
 8006cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b80      	cmp	r3, #128	; 0x80
 8006d04:	d0ef      	beq.n	8006ce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d06:	4b27      	ldr	r3, [pc, #156]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f1c3 0307 	rsb	r3, r3, #7
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d00a      	beq.n	8006d28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60bb      	str	r3, [r7, #8]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d28:	4b1e      	ldr	r3, [pc, #120]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d46:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a14      	ldr	r2, [pc, #80]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d5e:	f000 f8dd 	bl	8006f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d62:	4b12      	ldr	r3, [pc, #72]	; (8006dac <xPortStartScheduler+0x13c>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d68:	f000 f8fc 	bl	8006f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d6c:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <xPortStartScheduler+0x140>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <xPortStartScheduler+0x140>)
 8006d72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d78:	f7ff ff66 	bl	8006c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d7c:	f7ff fba4 	bl	80064c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006d80:	f7ff ff1c 	bl	8006bbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	e000ed00 	.word	0xe000ed00
 8006d94:	410fc271 	.word	0x410fc271
 8006d98:	410fc270 	.word	0x410fc270
 8006d9c:	e000e400 	.word	0xe000e400
 8006da0:	20000844 	.word	0x20000844
 8006da4:	20000848 	.word	0x20000848
 8006da8:	e000ed20 	.word	0xe000ed20
 8006dac:	20000110 	.word	0x20000110
 8006db0:	e000ef34 	.word	0xe000ef34

08006db4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	607b      	str	r3, [r7, #4]
}
 8006dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dce:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a0d      	ldr	r2, [pc, #52]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d10f      	bne.n	8006e00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <vPortEnterCritical+0x5c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	603b      	str	r3, [r7, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <vPortEnterCritical+0x4a>
	}
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000110 	.word	0x20000110
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e1a:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <vPortExitCritical+0x50>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <vPortExitCritical+0x24>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	607b      	str	r3, [r7, #4]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <vPortExitCritical+0x50>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <vPortExitCritical+0x50>)
 8006e40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e42:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <vPortExitCritical+0x50>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <vPortExitCritical+0x42>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f383 8811 	msr	BASEPRI, r3
}
 8006e54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20000110 	.word	0x20000110
	...

08006e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e70:	f3ef 8009 	mrs	r0, PSP
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <pxCurrentTCBConst>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	f01e 0f10 	tst.w	lr, #16
 8006e80:	bf08      	it	eq
 8006e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8a:	6010      	str	r0, [r2, #0]
 8006e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e94:	f380 8811 	msr	BASEPRI, r0
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f7ff fb12 	bl	80064c8 <vTaskSwitchContext>
 8006ea4:	f04f 0000 	mov.w	r0, #0
 8006ea8:	f380 8811 	msr	BASEPRI, r0
 8006eac:	bc09      	pop	{r0, r3}
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	6808      	ldr	r0, [r1, #0]
 8006eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb6:	f01e 0f10 	tst.w	lr, #16
 8006eba:	bf08      	it	eq
 8006ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ec0:	f380 8809 	msr	PSP, r0
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	f3af 8000 	nop.w

08006ed0 <pxCurrentTCBConst>:
 8006ed0:	20000718 	.word	0x20000718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop

08006ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	607b      	str	r3, [r7, #4]
}
 8006ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ef2:	f7ff fa31 	bl	8006358 <xTaskIncrementTick>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <SysTick_Handler+0x40>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	2300      	movs	r3, #0
 8006f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	f383 8811 	msr	BASEPRI, r3
}
 8006f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <vPortSetupTimerInterrupt+0x34>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <vPortSetupTimerInterrupt+0x38>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vPortSetupTimerInterrupt+0x3c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <vPortSetupTimerInterrupt+0x40>)
 8006f32:	fba2 2303 	umull	r2, r3, r2, r3
 8006f36:	099b      	lsrs	r3, r3, #6
 8006f38:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <vPortSetupTimerInterrupt+0x44>)
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <vPortSetupTimerInterrupt+0x34>)
 8006f40:	2207      	movs	r2, #7
 8006f42:	601a      	str	r2, [r3, #0]
}
 8006f44:	bf00      	nop
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	e000e010 	.word	0xe000e010
 8006f54:	e000e018 	.word	0xe000e018
 8006f58:	20000104 	.word	0x20000104
 8006f5c:	10624dd3 	.word	0x10624dd3
 8006f60:	e000e014 	.word	0xe000e014

08006f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f74 <vPortEnableVFP+0x10>
 8006f68:	6801      	ldr	r1, [r0, #0]
 8006f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f6e:	6001      	str	r1, [r0, #0]
 8006f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f72:	bf00      	nop
 8006f74:	e000ed88 	.word	0xe000ed88

08006f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f7e:	f3ef 8305 	mrs	r3, IPSR
 8006f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b0f      	cmp	r3, #15
 8006f88:	d914      	bls.n	8006fb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <vPortValidateInterruptPriority+0x70>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f94:	4b15      	ldr	r3, [pc, #84]	; (8006fec <vPortValidateInterruptPriority+0x74>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	7afa      	ldrb	r2, [r7, #11]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d20a      	bcs.n	8006fb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <vPortValidateInterruptPriority+0x78>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <vPortValidateInterruptPriority+0x7c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d90a      	bls.n	8006fda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	603b      	str	r3, [r7, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <vPortValidateInterruptPriority+0x60>
	}
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	e000e3f0 	.word	0xe000e3f0
 8006fec:	20000844 	.word	0x20000844
 8006ff0:	e000ed0c 	.word	0xe000ed0c
 8006ff4:	20000848 	.word	0x20000848

08006ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007004:	f7ff f8fe 	bl	8006204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007008:	4b5b      	ldr	r3, [pc, #364]	; (8007178 <pvPortMalloc+0x180>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007010:	f000 f920 	bl	8007254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007014:	4b59      	ldr	r3, [pc, #356]	; (800717c <pvPortMalloc+0x184>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	f040 8093 	bne.w	8007148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01d      	beq.n	8007064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007028:	2208      	movs	r2, #8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b00      	cmp	r3, #0
 8007038:	d014      	beq.n	8007064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f023 0307 	bic.w	r3, r3, #7
 8007040:	3308      	adds	r3, #8
 8007042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <pvPortMalloc+0x6c>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	617b      	str	r3, [r7, #20]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d06e      	beq.n	8007148 <pvPortMalloc+0x150>
 800706a:	4b45      	ldr	r3, [pc, #276]	; (8007180 <pvPortMalloc+0x188>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	429a      	cmp	r2, r3
 8007072:	d869      	bhi.n	8007148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007074:	4b43      	ldr	r3, [pc, #268]	; (8007184 <pvPortMalloc+0x18c>)
 8007076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007078:	4b42      	ldr	r3, [pc, #264]	; (8007184 <pvPortMalloc+0x18c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800707e:	e004      	b.n	800708a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	429a      	cmp	r2, r3
 8007092:	d903      	bls.n	800709c <pvPortMalloc+0xa4>
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f1      	bne.n	8007080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800709c:	4b36      	ldr	r3, [pc, #216]	; (8007178 <pvPortMalloc+0x180>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d050      	beq.n	8007148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2208      	movs	r2, #8
 80070ac:	4413      	add	r3, r2
 80070ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	1ad2      	subs	r2, r2, r3
 80070c0:	2308      	movs	r3, #8
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d91f      	bls.n	8007108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <pvPortMalloc+0xf8>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	613b      	str	r3, [r7, #16]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	1ad2      	subs	r2, r2, r3
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007102:	69b8      	ldr	r0, [r7, #24]
 8007104:	f000 f908 	bl	8007318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007108:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <pvPortMalloc+0x188>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <pvPortMalloc+0x188>)
 8007114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007116:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <pvPortMalloc+0x188>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <pvPortMalloc+0x190>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d203      	bcs.n	800712a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007122:	4b17      	ldr	r3, [pc, #92]	; (8007180 <pvPortMalloc+0x188>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a18      	ldr	r2, [pc, #96]	; (8007188 <pvPortMalloc+0x190>)
 8007128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <pvPortMalloc+0x184>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	431a      	orrs	r2, r3
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <pvPortMalloc+0x194>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	4a11      	ldr	r2, [pc, #68]	; (800718c <pvPortMalloc+0x194>)
 8007146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007148:	f7ff f86a 	bl	8006220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <pvPortMalloc+0x174>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <pvPortMalloc+0x172>
	return pvReturn;
 800716c:	69fb      	ldr	r3, [r7, #28]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3728      	adds	r7, #40	; 0x28
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20007d84 	.word	0x20007d84
 800717c:	20007d98 	.word	0x20007d98
 8007180:	20007d88 	.word	0x20007d88
 8007184:	20007d7c 	.word	0x20007d7c
 8007188:	20007d8c 	.word	0x20007d8c
 800718c:	20007d90 	.word	0x20007d90

08007190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d04d      	beq.n	800723e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071a2:	2308      	movs	r3, #8
 80071a4:	425b      	negs	r3, r3
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4413      	add	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4b24      	ldr	r3, [pc, #144]	; (8007248 <vPortFree+0xb8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4013      	ands	r3, r2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <vPortFree+0x44>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	60fb      	str	r3, [r7, #12]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <vPortFree+0x62>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	60bb      	str	r3, [r7, #8]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	4b14      	ldr	r3, [pc, #80]	; (8007248 <vPortFree+0xb8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01e      	beq.n	800723e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11a      	bne.n	800723e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	4b0e      	ldr	r3, [pc, #56]	; (8007248 <vPortFree+0xb8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	43db      	mvns	r3, r3
 8007212:	401a      	ands	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007218:	f7fe fff4 	bl	8006204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	4b0a      	ldr	r3, [pc, #40]	; (800724c <vPortFree+0xbc>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4413      	add	r3, r2
 8007226:	4a09      	ldr	r2, [pc, #36]	; (800724c <vPortFree+0xbc>)
 8007228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800722a:	6938      	ldr	r0, [r7, #16]
 800722c:	f000 f874 	bl	8007318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <vPortFree+0xc0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	4a06      	ldr	r2, [pc, #24]	; (8007250 <vPortFree+0xc0>)
 8007238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800723a:	f7fe fff1 	bl	8006220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800723e:	bf00      	nop
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20007d98 	.word	0x20007d98
 800724c:	20007d88 	.word	0x20007d88
 8007250:	20007d94 	.word	0x20007d94

08007254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800725a:	f247 5330 	movw	r3, #30000	; 0x7530
 800725e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007260:	4b27      	ldr	r3, [pc, #156]	; (8007300 <prvHeapInit+0xac>)
 8007262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3307      	adds	r3, #7
 8007272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <prvHeapInit+0xac>)
 8007284:	4413      	add	r3, r2
 8007286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800728c:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <prvHeapInit+0xb0>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007292:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <prvHeapInit+0xb0>)
 8007294:	2200      	movs	r2, #0
 8007296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4413      	add	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072a0:	2208      	movs	r2, #8
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a15      	ldr	r2, [pc, #84]	; (8007308 <prvHeapInit+0xb4>)
 80072b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072b6:	4b14      	ldr	r3, [pc, #80]	; (8007308 <prvHeapInit+0xb4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072be:	4b12      	ldr	r3, [pc, #72]	; (8007308 <prvHeapInit+0xb4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <prvHeapInit+0xb4>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	; (800730c <prvHeapInit+0xb8>)
 80072e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4a09      	ldr	r2, [pc, #36]	; (8007310 <prvHeapInit+0xbc>)
 80072ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072ec:	4b09      	ldr	r3, [pc, #36]	; (8007314 <prvHeapInit+0xc0>)
 80072ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	2000084c 	.word	0x2000084c
 8007304:	20007d7c 	.word	0x20007d7c
 8007308:	20007d84 	.word	0x20007d84
 800730c:	20007d8c 	.word	0x20007d8c
 8007310:	20007d88 	.word	0x20007d88
 8007314:	20007d98 	.word	0x20007d98

08007318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007320:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <prvInsertBlockIntoFreeList+0xac>)
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	e002      	b.n	800732c <prvInsertBlockIntoFreeList+0x14>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d8f7      	bhi.n	8007326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4413      	add	r3, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d108      	bne.n	800735a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	441a      	add	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d118      	bne.n	80073a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d00d      	beq.n	8007396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	441a      	add	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	e008      	b.n	80073a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007396:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e003      	b.n	80073a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d002      	beq.n	80073b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20007d7c 	.word	0x20007d7c
 80073c8:	20007d84 	.word	0x20007d84

080073cc <__errno>:
 80073cc:	4b01      	ldr	r3, [pc, #4]	; (80073d4 <__errno+0x8>)
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20000114 	.word	0x20000114

080073d8 <__libc_init_array>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	4d0d      	ldr	r5, [pc, #52]	; (8007410 <__libc_init_array+0x38>)
 80073dc:	4c0d      	ldr	r4, [pc, #52]	; (8007414 <__libc_init_array+0x3c>)
 80073de:	1b64      	subs	r4, r4, r5
 80073e0:	10a4      	asrs	r4, r4, #2
 80073e2:	2600      	movs	r6, #0
 80073e4:	42a6      	cmp	r6, r4
 80073e6:	d109      	bne.n	80073fc <__libc_init_array+0x24>
 80073e8:	4d0b      	ldr	r5, [pc, #44]	; (8007418 <__libc_init_array+0x40>)
 80073ea:	4c0c      	ldr	r4, [pc, #48]	; (800741c <__libc_init_array+0x44>)
 80073ec:	f002 ff02 	bl	800a1f4 <_init>
 80073f0:	1b64      	subs	r4, r4, r5
 80073f2:	10a4      	asrs	r4, r4, #2
 80073f4:	2600      	movs	r6, #0
 80073f6:	42a6      	cmp	r6, r4
 80073f8:	d105      	bne.n	8007406 <__libc_init_array+0x2e>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007400:	4798      	blx	r3
 8007402:	3601      	adds	r6, #1
 8007404:	e7ee      	b.n	80073e4 <__libc_init_array+0xc>
 8007406:	f855 3b04 	ldr.w	r3, [r5], #4
 800740a:	4798      	blx	r3
 800740c:	3601      	adds	r6, #1
 800740e:	e7f2      	b.n	80073f6 <__libc_init_array+0x1e>
 8007410:	0800a764 	.word	0x0800a764
 8007414:	0800a764 	.word	0x0800a764
 8007418:	0800a764 	.word	0x0800a764
 800741c:	0800a768 	.word	0x0800a768

08007420 <memcpy>:
 8007420:	440a      	add	r2, r1
 8007422:	4291      	cmp	r1, r2
 8007424:	f100 33ff 	add.w	r3, r0, #4294967295
 8007428:	d100      	bne.n	800742c <memcpy+0xc>
 800742a:	4770      	bx	lr
 800742c:	b510      	push	{r4, lr}
 800742e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007436:	4291      	cmp	r1, r2
 8007438:	d1f9      	bne.n	800742e <memcpy+0xe>
 800743a:	bd10      	pop	{r4, pc}

0800743c <memset>:
 800743c:	4402      	add	r2, r0
 800743e:	4603      	mov	r3, r0
 8007440:	4293      	cmp	r3, r2
 8007442:	d100      	bne.n	8007446 <memset+0xa>
 8007444:	4770      	bx	lr
 8007446:	f803 1b01 	strb.w	r1, [r3], #1
 800744a:	e7f9      	b.n	8007440 <memset+0x4>

0800744c <__cvt>:
 800744c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	ec55 4b10 	vmov	r4, r5, d0
 8007454:	2d00      	cmp	r5, #0
 8007456:	460e      	mov	r6, r1
 8007458:	4619      	mov	r1, r3
 800745a:	462b      	mov	r3, r5
 800745c:	bfbb      	ittet	lt
 800745e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007462:	461d      	movlt	r5, r3
 8007464:	2300      	movge	r3, #0
 8007466:	232d      	movlt	r3, #45	; 0x2d
 8007468:	700b      	strb	r3, [r1, #0]
 800746a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800746c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007470:	4691      	mov	r9, r2
 8007472:	f023 0820 	bic.w	r8, r3, #32
 8007476:	bfbc      	itt	lt
 8007478:	4622      	movlt	r2, r4
 800747a:	4614      	movlt	r4, r2
 800747c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007480:	d005      	beq.n	800748e <__cvt+0x42>
 8007482:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007486:	d100      	bne.n	800748a <__cvt+0x3e>
 8007488:	3601      	adds	r6, #1
 800748a:	2102      	movs	r1, #2
 800748c:	e000      	b.n	8007490 <__cvt+0x44>
 800748e:	2103      	movs	r1, #3
 8007490:	ab03      	add	r3, sp, #12
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	ab02      	add	r3, sp, #8
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	ec45 4b10 	vmov	d0, r4, r5
 800749c:	4653      	mov	r3, sl
 800749e:	4632      	mov	r2, r6
 80074a0:	f000 fcea 	bl	8007e78 <_dtoa_r>
 80074a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074a8:	4607      	mov	r7, r0
 80074aa:	d102      	bne.n	80074b2 <__cvt+0x66>
 80074ac:	f019 0f01 	tst.w	r9, #1
 80074b0:	d022      	beq.n	80074f8 <__cvt+0xac>
 80074b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074b6:	eb07 0906 	add.w	r9, r7, r6
 80074ba:	d110      	bne.n	80074de <__cvt+0x92>
 80074bc:	783b      	ldrb	r3, [r7, #0]
 80074be:	2b30      	cmp	r3, #48	; 0x30
 80074c0:	d10a      	bne.n	80074d8 <__cvt+0x8c>
 80074c2:	2200      	movs	r2, #0
 80074c4:	2300      	movs	r3, #0
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f9 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80074ce:	b918      	cbnz	r0, 80074d8 <__cvt+0x8c>
 80074d0:	f1c6 0601 	rsb	r6, r6, #1
 80074d4:	f8ca 6000 	str.w	r6, [sl]
 80074d8:	f8da 3000 	ldr.w	r3, [sl]
 80074dc:	4499      	add	r9, r3
 80074de:	2200      	movs	r2, #0
 80074e0:	2300      	movs	r3, #0
 80074e2:	4620      	mov	r0, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	f7f9 faf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80074ea:	b108      	cbz	r0, 80074f0 <__cvt+0xa4>
 80074ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80074f0:	2230      	movs	r2, #48	; 0x30
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	454b      	cmp	r3, r9
 80074f6:	d307      	bcc.n	8007508 <__cvt+0xbc>
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074fc:	1bdb      	subs	r3, r3, r7
 80074fe:	4638      	mov	r0, r7
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	b004      	add	sp, #16
 8007504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007508:	1c59      	adds	r1, r3, #1
 800750a:	9103      	str	r1, [sp, #12]
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	e7f0      	b.n	80074f2 <__cvt+0xa6>

08007510 <__exponent>:
 8007510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007512:	4603      	mov	r3, r0
 8007514:	2900      	cmp	r1, #0
 8007516:	bfb8      	it	lt
 8007518:	4249      	neglt	r1, r1
 800751a:	f803 2b02 	strb.w	r2, [r3], #2
 800751e:	bfb4      	ite	lt
 8007520:	222d      	movlt	r2, #45	; 0x2d
 8007522:	222b      	movge	r2, #43	; 0x2b
 8007524:	2909      	cmp	r1, #9
 8007526:	7042      	strb	r2, [r0, #1]
 8007528:	dd2a      	ble.n	8007580 <__exponent+0x70>
 800752a:	f10d 0407 	add.w	r4, sp, #7
 800752e:	46a4      	mov	ip, r4
 8007530:	270a      	movs	r7, #10
 8007532:	46a6      	mov	lr, r4
 8007534:	460a      	mov	r2, r1
 8007536:	fb91 f6f7 	sdiv	r6, r1, r7
 800753a:	fb07 1516 	mls	r5, r7, r6, r1
 800753e:	3530      	adds	r5, #48	; 0x30
 8007540:	2a63      	cmp	r2, #99	; 0x63
 8007542:	f104 34ff 	add.w	r4, r4, #4294967295
 8007546:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800754a:	4631      	mov	r1, r6
 800754c:	dcf1      	bgt.n	8007532 <__exponent+0x22>
 800754e:	3130      	adds	r1, #48	; 0x30
 8007550:	f1ae 0502 	sub.w	r5, lr, #2
 8007554:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007558:	1c44      	adds	r4, r0, #1
 800755a:	4629      	mov	r1, r5
 800755c:	4561      	cmp	r1, ip
 800755e:	d30a      	bcc.n	8007576 <__exponent+0x66>
 8007560:	f10d 0209 	add.w	r2, sp, #9
 8007564:	eba2 020e 	sub.w	r2, r2, lr
 8007568:	4565      	cmp	r5, ip
 800756a:	bf88      	it	hi
 800756c:	2200      	movhi	r2, #0
 800756e:	4413      	add	r3, r2
 8007570:	1a18      	subs	r0, r3, r0
 8007572:	b003      	add	sp, #12
 8007574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800757a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800757e:	e7ed      	b.n	800755c <__exponent+0x4c>
 8007580:	2330      	movs	r3, #48	; 0x30
 8007582:	3130      	adds	r1, #48	; 0x30
 8007584:	7083      	strb	r3, [r0, #2]
 8007586:	70c1      	strb	r1, [r0, #3]
 8007588:	1d03      	adds	r3, r0, #4
 800758a:	e7f1      	b.n	8007570 <__exponent+0x60>

0800758c <_printf_float>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	ed2d 8b02 	vpush	{d8}
 8007594:	b08d      	sub	sp, #52	; 0x34
 8007596:	460c      	mov	r4, r1
 8007598:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800759c:	4616      	mov	r6, r2
 800759e:	461f      	mov	r7, r3
 80075a0:	4605      	mov	r5, r0
 80075a2:	f001 fa57 	bl	8008a54 <_localeconv_r>
 80075a6:	f8d0 a000 	ldr.w	sl, [r0]
 80075aa:	4650      	mov	r0, sl
 80075ac:	f7f8 fe18 	bl	80001e0 <strlen>
 80075b0:	2300      	movs	r3, #0
 80075b2:	930a      	str	r3, [sp, #40]	; 0x28
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	f8d8 3000 	ldr.w	r3, [r8]
 80075bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075c0:	3307      	adds	r3, #7
 80075c2:	f023 0307 	bic.w	r3, r3, #7
 80075c6:	f103 0208 	add.w	r2, r3, #8
 80075ca:	f8c8 2000 	str.w	r2, [r8]
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075de:	9307      	str	r3, [sp, #28]
 80075e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80075e4:	ee08 0a10 	vmov	s16, r0
 80075e8:	4b9f      	ldr	r3, [pc, #636]	; (8007868 <_printf_float+0x2dc>)
 80075ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	f7f9 faa3 	bl	8000b3c <__aeabi_dcmpun>
 80075f6:	bb88      	cbnz	r0, 800765c <_printf_float+0xd0>
 80075f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075fc:	4b9a      	ldr	r3, [pc, #616]	; (8007868 <_printf_float+0x2dc>)
 80075fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007602:	f7f9 fa7d 	bl	8000b00 <__aeabi_dcmple>
 8007606:	bb48      	cbnz	r0, 800765c <_printf_float+0xd0>
 8007608:	2200      	movs	r2, #0
 800760a:	2300      	movs	r3, #0
 800760c:	4640      	mov	r0, r8
 800760e:	4649      	mov	r1, r9
 8007610:	f7f9 fa6c 	bl	8000aec <__aeabi_dcmplt>
 8007614:	b110      	cbz	r0, 800761c <_printf_float+0x90>
 8007616:	232d      	movs	r3, #45	; 0x2d
 8007618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800761c:	4b93      	ldr	r3, [pc, #588]	; (800786c <_printf_float+0x2e0>)
 800761e:	4894      	ldr	r0, [pc, #592]	; (8007870 <_printf_float+0x2e4>)
 8007620:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007624:	bf94      	ite	ls
 8007626:	4698      	movls	r8, r3
 8007628:	4680      	movhi	r8, r0
 800762a:	2303      	movs	r3, #3
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	9b05      	ldr	r3, [sp, #20]
 8007630:	f023 0204 	bic.w	r2, r3, #4
 8007634:	6022      	str	r2, [r4, #0]
 8007636:	f04f 0900 	mov.w	r9, #0
 800763a:	9700      	str	r7, [sp, #0]
 800763c:	4633      	mov	r3, r6
 800763e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007640:	4621      	mov	r1, r4
 8007642:	4628      	mov	r0, r5
 8007644:	f000 f9d8 	bl	80079f8 <_printf_common>
 8007648:	3001      	adds	r0, #1
 800764a:	f040 8090 	bne.w	800776e <_printf_float+0x1e2>
 800764e:	f04f 30ff 	mov.w	r0, #4294967295
 8007652:	b00d      	add	sp, #52	; 0x34
 8007654:	ecbd 8b02 	vpop	{d8}
 8007658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765c:	4642      	mov	r2, r8
 800765e:	464b      	mov	r3, r9
 8007660:	4640      	mov	r0, r8
 8007662:	4649      	mov	r1, r9
 8007664:	f7f9 fa6a 	bl	8000b3c <__aeabi_dcmpun>
 8007668:	b140      	cbz	r0, 800767c <_printf_float+0xf0>
 800766a:	464b      	mov	r3, r9
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfbc      	itt	lt
 8007670:	232d      	movlt	r3, #45	; 0x2d
 8007672:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007676:	487f      	ldr	r0, [pc, #508]	; (8007874 <_printf_float+0x2e8>)
 8007678:	4b7f      	ldr	r3, [pc, #508]	; (8007878 <_printf_float+0x2ec>)
 800767a:	e7d1      	b.n	8007620 <_printf_float+0x94>
 800767c:	6863      	ldr	r3, [r4, #4]
 800767e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007682:	9206      	str	r2, [sp, #24]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	d13f      	bne.n	8007708 <_printf_float+0x17c>
 8007688:	2306      	movs	r3, #6
 800768a:	6063      	str	r3, [r4, #4]
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	6861      	ldr	r1, [r4, #4]
 8007690:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007694:	2300      	movs	r3, #0
 8007696:	9303      	str	r3, [sp, #12]
 8007698:	ab0a      	add	r3, sp, #40	; 0x28
 800769a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800769e:	ab09      	add	r3, sp, #36	; 0x24
 80076a0:	ec49 8b10 	vmov	d0, r8, r9
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	6022      	str	r2, [r4, #0]
 80076a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076ac:	4628      	mov	r0, r5
 80076ae:	f7ff fecd 	bl	800744c <__cvt>
 80076b2:	9b06      	ldr	r3, [sp, #24]
 80076b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076b6:	2b47      	cmp	r3, #71	; 0x47
 80076b8:	4680      	mov	r8, r0
 80076ba:	d108      	bne.n	80076ce <_printf_float+0x142>
 80076bc:	1cc8      	adds	r0, r1, #3
 80076be:	db02      	blt.n	80076c6 <_printf_float+0x13a>
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	4299      	cmp	r1, r3
 80076c4:	dd41      	ble.n	800774a <_printf_float+0x1be>
 80076c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80076ca:	fa5f fb8b 	uxtb.w	fp, fp
 80076ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076d2:	d820      	bhi.n	8007716 <_printf_float+0x18a>
 80076d4:	3901      	subs	r1, #1
 80076d6:	465a      	mov	r2, fp
 80076d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076dc:	9109      	str	r1, [sp, #36]	; 0x24
 80076de:	f7ff ff17 	bl	8007510 <__exponent>
 80076e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e4:	1813      	adds	r3, r2, r0
 80076e6:	2a01      	cmp	r2, #1
 80076e8:	4681      	mov	r9, r0
 80076ea:	6123      	str	r3, [r4, #16]
 80076ec:	dc02      	bgt.n	80076f4 <_printf_float+0x168>
 80076ee:	6822      	ldr	r2, [r4, #0]
 80076f0:	07d2      	lsls	r2, r2, #31
 80076f2:	d501      	bpl.n	80076f8 <_printf_float+0x16c>
 80076f4:	3301      	adds	r3, #1
 80076f6:	6123      	str	r3, [r4, #16]
 80076f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d09c      	beq.n	800763a <_printf_float+0xae>
 8007700:	232d      	movs	r3, #45	; 0x2d
 8007702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007706:	e798      	b.n	800763a <_printf_float+0xae>
 8007708:	9a06      	ldr	r2, [sp, #24]
 800770a:	2a47      	cmp	r2, #71	; 0x47
 800770c:	d1be      	bne.n	800768c <_printf_float+0x100>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1bc      	bne.n	800768c <_printf_float+0x100>
 8007712:	2301      	movs	r3, #1
 8007714:	e7b9      	b.n	800768a <_printf_float+0xfe>
 8007716:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800771a:	d118      	bne.n	800774e <_printf_float+0x1c2>
 800771c:	2900      	cmp	r1, #0
 800771e:	6863      	ldr	r3, [r4, #4]
 8007720:	dd0b      	ble.n	800773a <_printf_float+0x1ae>
 8007722:	6121      	str	r1, [r4, #16]
 8007724:	b913      	cbnz	r3, 800772c <_printf_float+0x1a0>
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d502      	bpl.n	8007732 <_printf_float+0x1a6>
 800772c:	3301      	adds	r3, #1
 800772e:	440b      	add	r3, r1
 8007730:	6123      	str	r3, [r4, #16]
 8007732:	65a1      	str	r1, [r4, #88]	; 0x58
 8007734:	f04f 0900 	mov.w	r9, #0
 8007738:	e7de      	b.n	80076f8 <_printf_float+0x16c>
 800773a:	b913      	cbnz	r3, 8007742 <_printf_float+0x1b6>
 800773c:	6822      	ldr	r2, [r4, #0]
 800773e:	07d2      	lsls	r2, r2, #31
 8007740:	d501      	bpl.n	8007746 <_printf_float+0x1ba>
 8007742:	3302      	adds	r3, #2
 8007744:	e7f4      	b.n	8007730 <_printf_float+0x1a4>
 8007746:	2301      	movs	r3, #1
 8007748:	e7f2      	b.n	8007730 <_printf_float+0x1a4>
 800774a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800774e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007750:	4299      	cmp	r1, r3
 8007752:	db05      	blt.n	8007760 <_printf_float+0x1d4>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	6121      	str	r1, [r4, #16]
 8007758:	07d8      	lsls	r0, r3, #31
 800775a:	d5ea      	bpl.n	8007732 <_printf_float+0x1a6>
 800775c:	1c4b      	adds	r3, r1, #1
 800775e:	e7e7      	b.n	8007730 <_printf_float+0x1a4>
 8007760:	2900      	cmp	r1, #0
 8007762:	bfd4      	ite	le
 8007764:	f1c1 0202 	rsble	r2, r1, #2
 8007768:	2201      	movgt	r2, #1
 800776a:	4413      	add	r3, r2
 800776c:	e7e0      	b.n	8007730 <_printf_float+0x1a4>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	055a      	lsls	r2, r3, #21
 8007772:	d407      	bmi.n	8007784 <_printf_float+0x1f8>
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	4642      	mov	r2, r8
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	d12c      	bne.n	80077dc <_printf_float+0x250>
 8007782:	e764      	b.n	800764e <_printf_float+0xc2>
 8007784:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007788:	f240 80e0 	bls.w	800794c <_printf_float+0x3c0>
 800778c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007790:	2200      	movs	r2, #0
 8007792:	2300      	movs	r3, #0
 8007794:	f7f9 f9a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007798:	2800      	cmp	r0, #0
 800779a:	d034      	beq.n	8007806 <_printf_float+0x27a>
 800779c:	4a37      	ldr	r2, [pc, #220]	; (800787c <_printf_float+0x2f0>)
 800779e:	2301      	movs	r3, #1
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	f43f af51 	beq.w	800764e <_printf_float+0xc2>
 80077ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077b0:	429a      	cmp	r2, r3
 80077b2:	db02      	blt.n	80077ba <_printf_float+0x22e>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	07d8      	lsls	r0, r3, #31
 80077b8:	d510      	bpl.n	80077dc <_printf_float+0x250>
 80077ba:	ee18 3a10 	vmov	r3, s16
 80077be:	4652      	mov	r2, sl
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	f43f af41 	beq.w	800764e <_printf_float+0xc2>
 80077cc:	f04f 0800 	mov.w	r8, #0
 80077d0:	f104 091a 	add.w	r9, r4, #26
 80077d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4543      	cmp	r3, r8
 80077da:	dc09      	bgt.n	80077f0 <_printf_float+0x264>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	079b      	lsls	r3, r3, #30
 80077e0:	f100 8105 	bmi.w	80079ee <_printf_float+0x462>
 80077e4:	68e0      	ldr	r0, [r4, #12]
 80077e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e8:	4298      	cmp	r0, r3
 80077ea:	bfb8      	it	lt
 80077ec:	4618      	movlt	r0, r3
 80077ee:	e730      	b.n	8007652 <_printf_float+0xc6>
 80077f0:	2301      	movs	r3, #1
 80077f2:	464a      	mov	r2, r9
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f af27 	beq.w	800764e <_printf_float+0xc2>
 8007800:	f108 0801 	add.w	r8, r8, #1
 8007804:	e7e6      	b.n	80077d4 <_printf_float+0x248>
 8007806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc39      	bgt.n	8007880 <_printf_float+0x2f4>
 800780c:	4a1b      	ldr	r2, [pc, #108]	; (800787c <_printf_float+0x2f0>)
 800780e:	2301      	movs	r3, #1
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f af19 	beq.w	800764e <_printf_float+0xc2>
 800781c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007820:	4313      	orrs	r3, r2
 8007822:	d102      	bne.n	800782a <_printf_float+0x29e>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	07d9      	lsls	r1, r3, #31
 8007828:	d5d8      	bpl.n	80077dc <_printf_float+0x250>
 800782a:	ee18 3a10 	vmov	r3, s16
 800782e:	4652      	mov	r2, sl
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	f43f af09 	beq.w	800764e <_printf_float+0xc2>
 800783c:	f04f 0900 	mov.w	r9, #0
 8007840:	f104 0a1a 	add.w	sl, r4, #26
 8007844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007846:	425b      	negs	r3, r3
 8007848:	454b      	cmp	r3, r9
 800784a:	dc01      	bgt.n	8007850 <_printf_float+0x2c4>
 800784c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784e:	e792      	b.n	8007776 <_printf_float+0x1ea>
 8007850:	2301      	movs	r3, #1
 8007852:	4652      	mov	r2, sl
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	f43f aef7 	beq.w	800764e <_printf_float+0xc2>
 8007860:	f109 0901 	add.w	r9, r9, #1
 8007864:	e7ee      	b.n	8007844 <_printf_float+0x2b8>
 8007866:	bf00      	nop
 8007868:	7fefffff 	.word	0x7fefffff
 800786c:	0800a384 	.word	0x0800a384
 8007870:	0800a388 	.word	0x0800a388
 8007874:	0800a390 	.word	0x0800a390
 8007878:	0800a38c 	.word	0x0800a38c
 800787c:	0800a394 	.word	0x0800a394
 8007880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007884:	429a      	cmp	r2, r3
 8007886:	bfa8      	it	ge
 8007888:	461a      	movge	r2, r3
 800788a:	2a00      	cmp	r2, #0
 800788c:	4691      	mov	r9, r2
 800788e:	dc37      	bgt.n	8007900 <_printf_float+0x374>
 8007890:	f04f 0b00 	mov.w	fp, #0
 8007894:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007898:	f104 021a 	add.w	r2, r4, #26
 800789c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	eba3 0309 	sub.w	r3, r3, r9
 80078a4:	455b      	cmp	r3, fp
 80078a6:	dc33      	bgt.n	8007910 <_printf_float+0x384>
 80078a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078ac:	429a      	cmp	r2, r3
 80078ae:	db3b      	blt.n	8007928 <_printf_float+0x39c>
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	07da      	lsls	r2, r3, #31
 80078b4:	d438      	bmi.n	8007928 <_printf_float+0x39c>
 80078b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b8:	9a05      	ldr	r2, [sp, #20]
 80078ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078bc:	1a9a      	subs	r2, r3, r2
 80078be:	eba3 0901 	sub.w	r9, r3, r1
 80078c2:	4591      	cmp	r9, r2
 80078c4:	bfa8      	it	ge
 80078c6:	4691      	movge	r9, r2
 80078c8:	f1b9 0f00 	cmp.w	r9, #0
 80078cc:	dc35      	bgt.n	800793a <_printf_float+0x3ae>
 80078ce:	f04f 0800 	mov.w	r8, #0
 80078d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078d6:	f104 0a1a 	add.w	sl, r4, #26
 80078da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078de:	1a9b      	subs	r3, r3, r2
 80078e0:	eba3 0309 	sub.w	r3, r3, r9
 80078e4:	4543      	cmp	r3, r8
 80078e6:	f77f af79 	ble.w	80077dc <_printf_float+0x250>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4652      	mov	r2, sl
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	f43f aeaa 	beq.w	800764e <_printf_float+0xc2>
 80078fa:	f108 0801 	add.w	r8, r8, #1
 80078fe:	e7ec      	b.n	80078da <_printf_float+0x34e>
 8007900:	4613      	mov	r3, r2
 8007902:	4631      	mov	r1, r6
 8007904:	4642      	mov	r2, r8
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	d1c0      	bne.n	8007890 <_printf_float+0x304>
 800790e:	e69e      	b.n	800764e <_printf_float+0xc2>
 8007910:	2301      	movs	r3, #1
 8007912:	4631      	mov	r1, r6
 8007914:	4628      	mov	r0, r5
 8007916:	9205      	str	r2, [sp, #20]
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f ae97 	beq.w	800764e <_printf_float+0xc2>
 8007920:	9a05      	ldr	r2, [sp, #20]
 8007922:	f10b 0b01 	add.w	fp, fp, #1
 8007926:	e7b9      	b.n	800789c <_printf_float+0x310>
 8007928:	ee18 3a10 	vmov	r3, s16
 800792c:	4652      	mov	r2, sl
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	d1be      	bne.n	80078b6 <_printf_float+0x32a>
 8007938:	e689      	b.n	800764e <_printf_float+0xc2>
 800793a:	9a05      	ldr	r2, [sp, #20]
 800793c:	464b      	mov	r3, r9
 800793e:	4442      	add	r2, r8
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	d1c1      	bne.n	80078ce <_printf_float+0x342>
 800794a:	e680      	b.n	800764e <_printf_float+0xc2>
 800794c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800794e:	2a01      	cmp	r2, #1
 8007950:	dc01      	bgt.n	8007956 <_printf_float+0x3ca>
 8007952:	07db      	lsls	r3, r3, #31
 8007954:	d538      	bpl.n	80079c8 <_printf_float+0x43c>
 8007956:	2301      	movs	r3, #1
 8007958:	4642      	mov	r2, r8
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f ae74 	beq.w	800764e <_printf_float+0xc2>
 8007966:	ee18 3a10 	vmov	r3, s16
 800796a:	4652      	mov	r2, sl
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	47b8      	blx	r7
 8007972:	3001      	adds	r0, #1
 8007974:	f43f ae6b 	beq.w	800764e <_printf_float+0xc2>
 8007978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800797c:	2200      	movs	r2, #0
 800797e:	2300      	movs	r3, #0
 8007980:	f7f9 f8aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007984:	b9d8      	cbnz	r0, 80079be <_printf_float+0x432>
 8007986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007988:	f108 0201 	add.w	r2, r8, #1
 800798c:	3b01      	subs	r3, #1
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	d10e      	bne.n	80079b6 <_printf_float+0x42a>
 8007998:	e659      	b.n	800764e <_printf_float+0xc2>
 800799a:	2301      	movs	r3, #1
 800799c:	4652      	mov	r2, sl
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f ae52 	beq.w	800764e <_printf_float+0xc2>
 80079aa:	f108 0801 	add.w	r8, r8, #1
 80079ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b0:	3b01      	subs	r3, #1
 80079b2:	4543      	cmp	r3, r8
 80079b4:	dcf1      	bgt.n	800799a <_printf_float+0x40e>
 80079b6:	464b      	mov	r3, r9
 80079b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079bc:	e6dc      	b.n	8007778 <_printf_float+0x1ec>
 80079be:	f04f 0800 	mov.w	r8, #0
 80079c2:	f104 0a1a 	add.w	sl, r4, #26
 80079c6:	e7f2      	b.n	80079ae <_printf_float+0x422>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4642      	mov	r2, r8
 80079cc:	e7df      	b.n	800798e <_printf_float+0x402>
 80079ce:	2301      	movs	r3, #1
 80079d0:	464a      	mov	r2, r9
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f ae38 	beq.w	800764e <_printf_float+0xc2>
 80079de:	f108 0801 	add.w	r8, r8, #1
 80079e2:	68e3      	ldr	r3, [r4, #12]
 80079e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079e6:	1a5b      	subs	r3, r3, r1
 80079e8:	4543      	cmp	r3, r8
 80079ea:	dcf0      	bgt.n	80079ce <_printf_float+0x442>
 80079ec:	e6fa      	b.n	80077e4 <_printf_float+0x258>
 80079ee:	f04f 0800 	mov.w	r8, #0
 80079f2:	f104 0919 	add.w	r9, r4, #25
 80079f6:	e7f4      	b.n	80079e2 <_printf_float+0x456>

080079f8 <_printf_common>:
 80079f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079fc:	4616      	mov	r6, r2
 80079fe:	4699      	mov	r9, r3
 8007a00:	688a      	ldr	r2, [r1, #8]
 8007a02:	690b      	ldr	r3, [r1, #16]
 8007a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	bfb8      	it	lt
 8007a0c:	4613      	movlt	r3, r2
 8007a0e:	6033      	str	r3, [r6, #0]
 8007a10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a14:	4607      	mov	r7, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	b10a      	cbz	r2, 8007a1e <_printf_common+0x26>
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	6033      	str	r3, [r6, #0]
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	0699      	lsls	r1, r3, #26
 8007a22:	bf42      	ittt	mi
 8007a24:	6833      	ldrmi	r3, [r6, #0]
 8007a26:	3302      	addmi	r3, #2
 8007a28:	6033      	strmi	r3, [r6, #0]
 8007a2a:	6825      	ldr	r5, [r4, #0]
 8007a2c:	f015 0506 	ands.w	r5, r5, #6
 8007a30:	d106      	bne.n	8007a40 <_printf_common+0x48>
 8007a32:	f104 0a19 	add.w	sl, r4, #25
 8007a36:	68e3      	ldr	r3, [r4, #12]
 8007a38:	6832      	ldr	r2, [r6, #0]
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	42ab      	cmp	r3, r5
 8007a3e:	dc26      	bgt.n	8007a8e <_printf_common+0x96>
 8007a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a44:	1e13      	subs	r3, r2, #0
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	bf18      	it	ne
 8007a4a:	2301      	movne	r3, #1
 8007a4c:	0692      	lsls	r2, r2, #26
 8007a4e:	d42b      	bmi.n	8007aa8 <_printf_common+0xb0>
 8007a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a54:	4649      	mov	r1, r9
 8007a56:	4638      	mov	r0, r7
 8007a58:	47c0      	blx	r8
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d01e      	beq.n	8007a9c <_printf_common+0xa4>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	68e5      	ldr	r5, [r4, #12]
 8007a62:	6832      	ldr	r2, [r6, #0]
 8007a64:	f003 0306 	and.w	r3, r3, #6
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	bf08      	it	eq
 8007a6c:	1aad      	subeq	r5, r5, r2
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	6922      	ldr	r2, [r4, #16]
 8007a72:	bf0c      	ite	eq
 8007a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a78:	2500      	movne	r5, #0
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	bfc4      	itt	gt
 8007a7e:	1a9b      	subgt	r3, r3, r2
 8007a80:	18ed      	addgt	r5, r5, r3
 8007a82:	2600      	movs	r6, #0
 8007a84:	341a      	adds	r4, #26
 8007a86:	42b5      	cmp	r5, r6
 8007a88:	d11a      	bne.n	8007ac0 <_printf_common+0xc8>
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e008      	b.n	8007aa0 <_printf_common+0xa8>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4652      	mov	r2, sl
 8007a92:	4649      	mov	r1, r9
 8007a94:	4638      	mov	r0, r7
 8007a96:	47c0      	blx	r8
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d103      	bne.n	8007aa4 <_printf_common+0xac>
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	e7c6      	b.n	8007a36 <_printf_common+0x3e>
 8007aa8:	18e1      	adds	r1, r4, r3
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	2030      	movs	r0, #48	; 0x30
 8007aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ab2:	4422      	add	r2, r4
 8007ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007abc:	3302      	adds	r3, #2
 8007abe:	e7c7      	b.n	8007a50 <_printf_common+0x58>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	47c0      	blx	r8
 8007aca:	3001      	adds	r0, #1
 8007acc:	d0e6      	beq.n	8007a9c <_printf_common+0xa4>
 8007ace:	3601      	adds	r6, #1
 8007ad0:	e7d9      	b.n	8007a86 <_printf_common+0x8e>
	...

08007ad4 <_printf_i>:
 8007ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad8:	7e0f      	ldrb	r7, [r1, #24]
 8007ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007adc:	2f78      	cmp	r7, #120	; 0x78
 8007ade:	4691      	mov	r9, r2
 8007ae0:	4680      	mov	r8, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	469a      	mov	sl, r3
 8007ae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aea:	d807      	bhi.n	8007afc <_printf_i+0x28>
 8007aec:	2f62      	cmp	r7, #98	; 0x62
 8007aee:	d80a      	bhi.n	8007b06 <_printf_i+0x32>
 8007af0:	2f00      	cmp	r7, #0
 8007af2:	f000 80d8 	beq.w	8007ca6 <_printf_i+0x1d2>
 8007af6:	2f58      	cmp	r7, #88	; 0x58
 8007af8:	f000 80a3 	beq.w	8007c42 <_printf_i+0x16e>
 8007afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b04:	e03a      	b.n	8007b7c <_printf_i+0xa8>
 8007b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b0a:	2b15      	cmp	r3, #21
 8007b0c:	d8f6      	bhi.n	8007afc <_printf_i+0x28>
 8007b0e:	a101      	add	r1, pc, #4	; (adr r1, 8007b14 <_printf_i+0x40>)
 8007b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b14:	08007b6d 	.word	0x08007b6d
 8007b18:	08007b81 	.word	0x08007b81
 8007b1c:	08007afd 	.word	0x08007afd
 8007b20:	08007afd 	.word	0x08007afd
 8007b24:	08007afd 	.word	0x08007afd
 8007b28:	08007afd 	.word	0x08007afd
 8007b2c:	08007b81 	.word	0x08007b81
 8007b30:	08007afd 	.word	0x08007afd
 8007b34:	08007afd 	.word	0x08007afd
 8007b38:	08007afd 	.word	0x08007afd
 8007b3c:	08007afd 	.word	0x08007afd
 8007b40:	08007c8d 	.word	0x08007c8d
 8007b44:	08007bb1 	.word	0x08007bb1
 8007b48:	08007c6f 	.word	0x08007c6f
 8007b4c:	08007afd 	.word	0x08007afd
 8007b50:	08007afd 	.word	0x08007afd
 8007b54:	08007caf 	.word	0x08007caf
 8007b58:	08007afd 	.word	0x08007afd
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007afd 	.word	0x08007afd
 8007b64:	08007afd 	.word	0x08007afd
 8007b68:	08007c77 	.word	0x08007c77
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	1d1a      	adds	r2, r3, #4
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	602a      	str	r2, [r5, #0]
 8007b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0a3      	b.n	8007cc8 <_printf_i+0x1f4>
 8007b80:	6820      	ldr	r0, [r4, #0]
 8007b82:	6829      	ldr	r1, [r5, #0]
 8007b84:	0606      	lsls	r6, r0, #24
 8007b86:	f101 0304 	add.w	r3, r1, #4
 8007b8a:	d50a      	bpl.n	8007ba2 <_printf_i+0xce>
 8007b8c:	680e      	ldr	r6, [r1, #0]
 8007b8e:	602b      	str	r3, [r5, #0]
 8007b90:	2e00      	cmp	r6, #0
 8007b92:	da03      	bge.n	8007b9c <_printf_i+0xc8>
 8007b94:	232d      	movs	r3, #45	; 0x2d
 8007b96:	4276      	negs	r6, r6
 8007b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b9c:	485e      	ldr	r0, [pc, #376]	; (8007d18 <_printf_i+0x244>)
 8007b9e:	230a      	movs	r3, #10
 8007ba0:	e019      	b.n	8007bd6 <_printf_i+0x102>
 8007ba2:	680e      	ldr	r6, [r1, #0]
 8007ba4:	602b      	str	r3, [r5, #0]
 8007ba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007baa:	bf18      	it	ne
 8007bac:	b236      	sxthne	r6, r6
 8007bae:	e7ef      	b.n	8007b90 <_printf_i+0xbc>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	1d19      	adds	r1, r3, #4
 8007bb6:	6029      	str	r1, [r5, #0]
 8007bb8:	0601      	lsls	r1, r0, #24
 8007bba:	d501      	bpl.n	8007bc0 <_printf_i+0xec>
 8007bbc:	681e      	ldr	r6, [r3, #0]
 8007bbe:	e002      	b.n	8007bc6 <_printf_i+0xf2>
 8007bc0:	0646      	lsls	r6, r0, #25
 8007bc2:	d5fb      	bpl.n	8007bbc <_printf_i+0xe8>
 8007bc4:	881e      	ldrh	r6, [r3, #0]
 8007bc6:	4854      	ldr	r0, [pc, #336]	; (8007d18 <_printf_i+0x244>)
 8007bc8:	2f6f      	cmp	r7, #111	; 0x6f
 8007bca:	bf0c      	ite	eq
 8007bcc:	2308      	moveq	r3, #8
 8007bce:	230a      	movne	r3, #10
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bd6:	6865      	ldr	r5, [r4, #4]
 8007bd8:	60a5      	str	r5, [r4, #8]
 8007bda:	2d00      	cmp	r5, #0
 8007bdc:	bfa2      	ittt	ge
 8007bde:	6821      	ldrge	r1, [r4, #0]
 8007be0:	f021 0104 	bicge.w	r1, r1, #4
 8007be4:	6021      	strge	r1, [r4, #0]
 8007be6:	b90e      	cbnz	r6, 8007bec <_printf_i+0x118>
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	d04d      	beq.n	8007c88 <_printf_i+0x1b4>
 8007bec:	4615      	mov	r5, r2
 8007bee:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bf2:	fb03 6711 	mls	r7, r3, r1, r6
 8007bf6:	5dc7      	ldrb	r7, [r0, r7]
 8007bf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bfc:	4637      	mov	r7, r6
 8007bfe:	42bb      	cmp	r3, r7
 8007c00:	460e      	mov	r6, r1
 8007c02:	d9f4      	bls.n	8007bee <_printf_i+0x11a>
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d10b      	bne.n	8007c20 <_printf_i+0x14c>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	07de      	lsls	r6, r3, #31
 8007c0c:	d508      	bpl.n	8007c20 <_printf_i+0x14c>
 8007c0e:	6923      	ldr	r3, [r4, #16]
 8007c10:	6861      	ldr	r1, [r4, #4]
 8007c12:	4299      	cmp	r1, r3
 8007c14:	bfde      	ittt	le
 8007c16:	2330      	movle	r3, #48	; 0x30
 8007c18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c20:	1b52      	subs	r2, r2, r5
 8007c22:	6122      	str	r2, [r4, #16]
 8007c24:	f8cd a000 	str.w	sl, [sp]
 8007c28:	464b      	mov	r3, r9
 8007c2a:	aa03      	add	r2, sp, #12
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7ff fee2 	bl	80079f8 <_printf_common>
 8007c34:	3001      	adds	r0, #1
 8007c36:	d14c      	bne.n	8007cd2 <_printf_i+0x1fe>
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	b004      	add	sp, #16
 8007c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c42:	4835      	ldr	r0, [pc, #212]	; (8007d18 <_printf_i+0x244>)
 8007c44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c48:	6829      	ldr	r1, [r5, #0]
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c50:	6029      	str	r1, [r5, #0]
 8007c52:	061d      	lsls	r5, r3, #24
 8007c54:	d514      	bpl.n	8007c80 <_printf_i+0x1ac>
 8007c56:	07df      	lsls	r7, r3, #31
 8007c58:	bf44      	itt	mi
 8007c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c5e:	6023      	strmi	r3, [r4, #0]
 8007c60:	b91e      	cbnz	r6, 8007c6a <_printf_i+0x196>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	f023 0320 	bic.w	r3, r3, #32
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	2310      	movs	r3, #16
 8007c6c:	e7b0      	b.n	8007bd0 <_printf_i+0xfc>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	f043 0320 	orr.w	r3, r3, #32
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	2378      	movs	r3, #120	; 0x78
 8007c78:	4828      	ldr	r0, [pc, #160]	; (8007d1c <_printf_i+0x248>)
 8007c7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c7e:	e7e3      	b.n	8007c48 <_printf_i+0x174>
 8007c80:	0659      	lsls	r1, r3, #25
 8007c82:	bf48      	it	mi
 8007c84:	b2b6      	uxthmi	r6, r6
 8007c86:	e7e6      	b.n	8007c56 <_printf_i+0x182>
 8007c88:	4615      	mov	r5, r2
 8007c8a:	e7bb      	b.n	8007c04 <_printf_i+0x130>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	6826      	ldr	r6, [r4, #0]
 8007c90:	6961      	ldr	r1, [r4, #20]
 8007c92:	1d18      	adds	r0, r3, #4
 8007c94:	6028      	str	r0, [r5, #0]
 8007c96:	0635      	lsls	r5, r6, #24
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	d501      	bpl.n	8007ca0 <_printf_i+0x1cc>
 8007c9c:	6019      	str	r1, [r3, #0]
 8007c9e:	e002      	b.n	8007ca6 <_printf_i+0x1d2>
 8007ca0:	0670      	lsls	r0, r6, #25
 8007ca2:	d5fb      	bpl.n	8007c9c <_printf_i+0x1c8>
 8007ca4:	8019      	strh	r1, [r3, #0]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	4615      	mov	r5, r2
 8007cac:	e7ba      	b.n	8007c24 <_printf_i+0x150>
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	1d1a      	adds	r2, r3, #4
 8007cb2:	602a      	str	r2, [r5, #0]
 8007cb4:	681d      	ldr	r5, [r3, #0]
 8007cb6:	6862      	ldr	r2, [r4, #4]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f7f8 fa98 	bl	80001f0 <memchr>
 8007cc0:	b108      	cbz	r0, 8007cc6 <_printf_i+0x1f2>
 8007cc2:	1b40      	subs	r0, r0, r5
 8007cc4:	6060      	str	r0, [r4, #4]
 8007cc6:	6863      	ldr	r3, [r4, #4]
 8007cc8:	6123      	str	r3, [r4, #16]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd0:	e7a8      	b.n	8007c24 <_printf_i+0x150>
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	4640      	mov	r0, r8
 8007cda:	47d0      	blx	sl
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d0ab      	beq.n	8007c38 <_printf_i+0x164>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	079b      	lsls	r3, r3, #30
 8007ce4:	d413      	bmi.n	8007d0e <_printf_i+0x23a>
 8007ce6:	68e0      	ldr	r0, [r4, #12]
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	4298      	cmp	r0, r3
 8007cec:	bfb8      	it	lt
 8007cee:	4618      	movlt	r0, r3
 8007cf0:	e7a4      	b.n	8007c3c <_printf_i+0x168>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	47d0      	blx	sl
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d09b      	beq.n	8007c38 <_printf_i+0x164>
 8007d00:	3501      	adds	r5, #1
 8007d02:	68e3      	ldr	r3, [r4, #12]
 8007d04:	9903      	ldr	r1, [sp, #12]
 8007d06:	1a5b      	subs	r3, r3, r1
 8007d08:	42ab      	cmp	r3, r5
 8007d0a:	dcf2      	bgt.n	8007cf2 <_printf_i+0x21e>
 8007d0c:	e7eb      	b.n	8007ce6 <_printf_i+0x212>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	f104 0619 	add.w	r6, r4, #25
 8007d14:	e7f5      	b.n	8007d02 <_printf_i+0x22e>
 8007d16:	bf00      	nop
 8007d18:	0800a396 	.word	0x0800a396
 8007d1c:	0800a3a7 	.word	0x0800a3a7

08007d20 <siprintf>:
 8007d20:	b40e      	push	{r1, r2, r3}
 8007d22:	b500      	push	{lr}
 8007d24:	b09c      	sub	sp, #112	; 0x70
 8007d26:	ab1d      	add	r3, sp, #116	; 0x74
 8007d28:	9002      	str	r0, [sp, #8]
 8007d2a:	9006      	str	r0, [sp, #24]
 8007d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d30:	4809      	ldr	r0, [pc, #36]	; (8007d58 <siprintf+0x38>)
 8007d32:	9107      	str	r1, [sp, #28]
 8007d34:	9104      	str	r1, [sp, #16]
 8007d36:	4909      	ldr	r1, [pc, #36]	; (8007d5c <siprintf+0x3c>)
 8007d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3c:	9105      	str	r1, [sp, #20]
 8007d3e:	6800      	ldr	r0, [r0, #0]
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	a902      	add	r1, sp, #8
 8007d44:	f001 fb68 	bl	8009418 <_svfiprintf_r>
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	b01c      	add	sp, #112	; 0x70
 8007d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d54:	b003      	add	sp, #12
 8007d56:	4770      	bx	lr
 8007d58:	20000114 	.word	0x20000114
 8007d5c:	ffff0208 	.word	0xffff0208

08007d60 <quorem>:
 8007d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	6903      	ldr	r3, [r0, #16]
 8007d66:	690c      	ldr	r4, [r1, #16]
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	f2c0 8081 	blt.w	8007e72 <quorem+0x112>
 8007d70:	3c01      	subs	r4, #1
 8007d72:	f101 0814 	add.w	r8, r1, #20
 8007d76:	f100 0514 	add.w	r5, r0, #20
 8007d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d7e:	9301      	str	r3, [sp, #4]
 8007d80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d98:	d331      	bcc.n	8007dfe <quorem+0x9e>
 8007d9a:	f04f 0e00 	mov.w	lr, #0
 8007d9e:	4640      	mov	r0, r8
 8007da0:	46ac      	mov	ip, r5
 8007da2:	46f2      	mov	sl, lr
 8007da4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007da8:	b293      	uxth	r3, r2
 8007daa:	fb06 e303 	mla	r3, r6, r3, lr
 8007dae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	ebaa 0303 	sub.w	r3, sl, r3
 8007db8:	f8dc a000 	ldr.w	sl, [ip]
 8007dbc:	0c12      	lsrs	r2, r2, #16
 8007dbe:	fa13 f38a 	uxtah	r3, r3, sl
 8007dc2:	fb06 e202 	mla	r2, r6, r2, lr
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ddc:	4581      	cmp	r9, r0
 8007dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de2:	f84c 3b04 	str.w	r3, [ip], #4
 8007de6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dea:	d2db      	bcs.n	8007da4 <quorem+0x44>
 8007dec:	f855 300b 	ldr.w	r3, [r5, fp]
 8007df0:	b92b      	cbnz	r3, 8007dfe <quorem+0x9e>
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	3b04      	subs	r3, #4
 8007df6:	429d      	cmp	r5, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	d32e      	bcc.n	8007e5a <quorem+0xfa>
 8007dfc:	613c      	str	r4, [r7, #16]
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f001 f8b6 	bl	8008f70 <__mcmp>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	db24      	blt.n	8007e52 <quorem+0xf2>
 8007e08:	3601      	adds	r6, #1
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f04f 0c00 	mov.w	ip, #0
 8007e10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e14:	f8d0 e000 	ldr.w	lr, [r0]
 8007e18:	b293      	uxth	r3, r2
 8007e1a:	ebac 0303 	sub.w	r3, ip, r3
 8007e1e:	0c12      	lsrs	r2, r2, #16
 8007e20:	fa13 f38e 	uxtah	r3, r3, lr
 8007e24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e32:	45c1      	cmp	r9, r8
 8007e34:	f840 3b04 	str.w	r3, [r0], #4
 8007e38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e3c:	d2e8      	bcs.n	8007e10 <quorem+0xb0>
 8007e3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e46:	b922      	cbnz	r2, 8007e52 <quorem+0xf2>
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	429d      	cmp	r5, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	d30a      	bcc.n	8007e66 <quorem+0x106>
 8007e50:	613c      	str	r4, [r7, #16]
 8007e52:	4630      	mov	r0, r6
 8007e54:	b003      	add	sp, #12
 8007e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	d1cc      	bne.n	8007dfc <quorem+0x9c>
 8007e62:	3c01      	subs	r4, #1
 8007e64:	e7c7      	b.n	8007df6 <quorem+0x96>
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	3b04      	subs	r3, #4
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	d1f0      	bne.n	8007e50 <quorem+0xf0>
 8007e6e:	3c01      	subs	r4, #1
 8007e70:	e7eb      	b.n	8007e4a <quorem+0xea>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e7ee      	b.n	8007e54 <quorem+0xf4>
	...

08007e78 <_dtoa_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	ed2d 8b04 	vpush	{d8-d9}
 8007e80:	ec57 6b10 	vmov	r6, r7, d0
 8007e84:	b093      	sub	sp, #76	; 0x4c
 8007e86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e8c:	9106      	str	r1, [sp, #24]
 8007e8e:	ee10 aa10 	vmov	sl, s0
 8007e92:	4604      	mov	r4, r0
 8007e94:	9209      	str	r2, [sp, #36]	; 0x24
 8007e96:	930c      	str	r3, [sp, #48]	; 0x30
 8007e98:	46bb      	mov	fp, r7
 8007e9a:	b975      	cbnz	r5, 8007eba <_dtoa_r+0x42>
 8007e9c:	2010      	movs	r0, #16
 8007e9e:	f000 fddd 	bl	8008a5c <malloc>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ea6:	b920      	cbnz	r0, 8007eb2 <_dtoa_r+0x3a>
 8007ea8:	4ba7      	ldr	r3, [pc, #668]	; (8008148 <_dtoa_r+0x2d0>)
 8007eaa:	21ea      	movs	r1, #234	; 0xea
 8007eac:	48a7      	ldr	r0, [pc, #668]	; (800814c <_dtoa_r+0x2d4>)
 8007eae:	f001 fbc3 	bl	8009638 <__assert_func>
 8007eb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007eb6:	6005      	str	r5, [r0, #0]
 8007eb8:	60c5      	str	r5, [r0, #12]
 8007eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ebc:	6819      	ldr	r1, [r3, #0]
 8007ebe:	b151      	cbz	r1, 8007ed6 <_dtoa_r+0x5e>
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	604a      	str	r2, [r1, #4]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	4093      	lsls	r3, r2
 8007ec8:	608b      	str	r3, [r1, #8]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 fe0e 	bl	8008aec <_Bfree>
 8007ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	1e3b      	subs	r3, r7, #0
 8007ed8:	bfaa      	itet	ge
 8007eda:	2300      	movge	r3, #0
 8007edc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ee0:	f8c8 3000 	strge.w	r3, [r8]
 8007ee4:	4b9a      	ldr	r3, [pc, #616]	; (8008150 <_dtoa_r+0x2d8>)
 8007ee6:	bfbc      	itt	lt
 8007ee8:	2201      	movlt	r2, #1
 8007eea:	f8c8 2000 	strlt.w	r2, [r8]
 8007eee:	ea33 030b 	bics.w	r3, r3, fp
 8007ef2:	d11b      	bne.n	8007f2c <_dtoa_r+0xb4>
 8007ef4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f00:	4333      	orrs	r3, r6
 8007f02:	f000 8592 	beq.w	8008a2a <_dtoa_r+0xbb2>
 8007f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f08:	b963      	cbnz	r3, 8007f24 <_dtoa_r+0xac>
 8007f0a:	4b92      	ldr	r3, [pc, #584]	; (8008154 <_dtoa_r+0x2dc>)
 8007f0c:	e022      	b.n	8007f54 <_dtoa_r+0xdc>
 8007f0e:	4b92      	ldr	r3, [pc, #584]	; (8008158 <_dtoa_r+0x2e0>)
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	3308      	adds	r3, #8
 8007f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	9801      	ldr	r0, [sp, #4]
 8007f1a:	b013      	add	sp, #76	; 0x4c
 8007f1c:	ecbd 8b04 	vpop	{d8-d9}
 8007f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f24:	4b8b      	ldr	r3, [pc, #556]	; (8008154 <_dtoa_r+0x2dc>)
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	3303      	adds	r3, #3
 8007f2a:	e7f3      	b.n	8007f14 <_dtoa_r+0x9c>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4650      	mov	r0, sl
 8007f32:	4659      	mov	r1, fp
 8007f34:	f7f8 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f38:	ec4b ab19 	vmov	d9, sl, fp
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	b158      	cbz	r0, 8007f58 <_dtoa_r+0xe0>
 8007f40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f42:	2301      	movs	r3, #1
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 856b 	beq.w	8008a24 <_dtoa_r+0xbac>
 8007f4e:	4883      	ldr	r0, [pc, #524]	; (800815c <_dtoa_r+0x2e4>)
 8007f50:	6018      	str	r0, [r3, #0]
 8007f52:	1e43      	subs	r3, r0, #1
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	e7df      	b.n	8007f18 <_dtoa_r+0xa0>
 8007f58:	ec4b ab10 	vmov	d0, sl, fp
 8007f5c:	aa10      	add	r2, sp, #64	; 0x40
 8007f5e:	a911      	add	r1, sp, #68	; 0x44
 8007f60:	4620      	mov	r0, r4
 8007f62:	f001 f8ab 	bl	80090bc <__d2b>
 8007f66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f6a:	ee08 0a10 	vmov	s16, r0
 8007f6e:	2d00      	cmp	r5, #0
 8007f70:	f000 8084 	beq.w	800807c <_dtoa_r+0x204>
 8007f74:	ee19 3a90 	vmov	r3, s19
 8007f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f80:	4656      	mov	r6, sl
 8007f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f8e:	4b74      	ldr	r3, [pc, #464]	; (8008160 <_dtoa_r+0x2e8>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	4639      	mov	r1, r7
 8007f96:	f7f8 f97f 	bl	8000298 <__aeabi_dsub>
 8007f9a:	a365      	add	r3, pc, #404	; (adr r3, 8008130 <_dtoa_r+0x2b8>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 fb32 	bl	8000608 <__aeabi_dmul>
 8007fa4:	a364      	add	r3, pc, #400	; (adr r3, 8008138 <_dtoa_r+0x2c0>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f977 	bl	800029c <__adddf3>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	460f      	mov	r7, r1
 8007fb4:	f7f8 fabe 	bl	8000534 <__aeabi_i2d>
 8007fb8:	a361      	add	r3, pc, #388	; (adr r3, 8008140 <_dtoa_r+0x2c8>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 fb23 	bl	8000608 <__aeabi_dmul>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 f967 	bl	800029c <__adddf3>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	f7f8 fdc9 	bl	8000b68 <__aeabi_d2iz>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	9000      	str	r0, [sp, #0]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 fd84 	bl	8000aec <__aeabi_dcmplt>
 8007fe4:	b150      	cbz	r0, 8007ffc <_dtoa_r+0x184>
 8007fe6:	9800      	ldr	r0, [sp, #0]
 8007fe8:	f7f8 faa4 	bl	8000534 <__aeabi_i2d>
 8007fec:	4632      	mov	r2, r6
 8007fee:	463b      	mov	r3, r7
 8007ff0:	f7f8 fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ff4:	b910      	cbnz	r0, 8007ffc <_dtoa_r+0x184>
 8007ff6:	9b00      	ldr	r3, [sp, #0]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	9b00      	ldr	r3, [sp, #0]
 8007ffe:	2b16      	cmp	r3, #22
 8008000:	d85a      	bhi.n	80080b8 <_dtoa_r+0x240>
 8008002:	9a00      	ldr	r2, [sp, #0]
 8008004:	4b57      	ldr	r3, [pc, #348]	; (8008164 <_dtoa_r+0x2ec>)
 8008006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	ec51 0b19 	vmov	r0, r1, d9
 8008012:	f7f8 fd6b 	bl	8000aec <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	d050      	beq.n	80080bc <_dtoa_r+0x244>
 800801a:	9b00      	ldr	r3, [sp, #0]
 800801c:	3b01      	subs	r3, #1
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2300      	movs	r3, #0
 8008022:	930b      	str	r3, [sp, #44]	; 0x2c
 8008024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008026:	1b5d      	subs	r5, r3, r5
 8008028:	1e6b      	subs	r3, r5, #1
 800802a:	9305      	str	r3, [sp, #20]
 800802c:	bf45      	ittet	mi
 800802e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008032:	9304      	strmi	r3, [sp, #16]
 8008034:	2300      	movpl	r3, #0
 8008036:	2300      	movmi	r3, #0
 8008038:	bf4c      	ite	mi
 800803a:	9305      	strmi	r3, [sp, #20]
 800803c:	9304      	strpl	r3, [sp, #16]
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	db3d      	blt.n	80080c0 <_dtoa_r+0x248>
 8008044:	9b05      	ldr	r3, [sp, #20]
 8008046:	9a00      	ldr	r2, [sp, #0]
 8008048:	920a      	str	r2, [sp, #40]	; 0x28
 800804a:	4413      	add	r3, r2
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	2300      	movs	r3, #0
 8008050:	9307      	str	r3, [sp, #28]
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	2b09      	cmp	r3, #9
 8008056:	f200 8089 	bhi.w	800816c <_dtoa_r+0x2f4>
 800805a:	2b05      	cmp	r3, #5
 800805c:	bfc4      	itt	gt
 800805e:	3b04      	subgt	r3, #4
 8008060:	9306      	strgt	r3, [sp, #24]
 8008062:	9b06      	ldr	r3, [sp, #24]
 8008064:	f1a3 0302 	sub.w	r3, r3, #2
 8008068:	bfcc      	ite	gt
 800806a:	2500      	movgt	r5, #0
 800806c:	2501      	movle	r5, #1
 800806e:	2b03      	cmp	r3, #3
 8008070:	f200 8087 	bhi.w	8008182 <_dtoa_r+0x30a>
 8008074:	e8df f003 	tbb	[pc, r3]
 8008078:	59383a2d 	.word	0x59383a2d
 800807c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008080:	441d      	add	r5, r3
 8008082:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008086:	2b20      	cmp	r3, #32
 8008088:	bfc1      	itttt	gt
 800808a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800808e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008092:	fa0b f303 	lslgt.w	r3, fp, r3
 8008096:	fa26 f000 	lsrgt.w	r0, r6, r0
 800809a:	bfda      	itte	le
 800809c:	f1c3 0320 	rsble	r3, r3, #32
 80080a0:	fa06 f003 	lslle.w	r0, r6, r3
 80080a4:	4318      	orrgt	r0, r3
 80080a6:	f7f8 fa35 	bl	8000514 <__aeabi_ui2d>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4606      	mov	r6, r0
 80080ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080b2:	3d01      	subs	r5, #1
 80080b4:	930e      	str	r3, [sp, #56]	; 0x38
 80080b6:	e76a      	b.n	8007f8e <_dtoa_r+0x116>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e7b2      	b.n	8008022 <_dtoa_r+0x1aa>
 80080bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80080be:	e7b1      	b.n	8008024 <_dtoa_r+0x1ac>
 80080c0:	9b04      	ldr	r3, [sp, #16]
 80080c2:	9a00      	ldr	r2, [sp, #0]
 80080c4:	1a9b      	subs	r3, r3, r2
 80080c6:	9304      	str	r3, [sp, #16]
 80080c8:	4253      	negs	r3, r2
 80080ca:	9307      	str	r3, [sp, #28]
 80080cc:	2300      	movs	r3, #0
 80080ce:	930a      	str	r3, [sp, #40]	; 0x28
 80080d0:	e7bf      	b.n	8008052 <_dtoa_r+0x1da>
 80080d2:	2300      	movs	r3, #0
 80080d4:	9308      	str	r3, [sp, #32]
 80080d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc55      	bgt.n	8008188 <_dtoa_r+0x310>
 80080dc:	2301      	movs	r3, #1
 80080de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080e2:	461a      	mov	r2, r3
 80080e4:	9209      	str	r2, [sp, #36]	; 0x24
 80080e6:	e00c      	b.n	8008102 <_dtoa_r+0x28a>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e7f3      	b.n	80080d4 <_dtoa_r+0x25c>
 80080ec:	2300      	movs	r3, #0
 80080ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080f0:	9308      	str	r3, [sp, #32]
 80080f2:	9b00      	ldr	r3, [sp, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	3301      	adds	r3, #1
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	9303      	str	r3, [sp, #12]
 80080fe:	bfb8      	it	lt
 8008100:	2301      	movlt	r3, #1
 8008102:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008104:	2200      	movs	r2, #0
 8008106:	6042      	str	r2, [r0, #4]
 8008108:	2204      	movs	r2, #4
 800810a:	f102 0614 	add.w	r6, r2, #20
 800810e:	429e      	cmp	r6, r3
 8008110:	6841      	ldr	r1, [r0, #4]
 8008112:	d93d      	bls.n	8008190 <_dtoa_r+0x318>
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fca9 	bl	8008a6c <_Balloc>
 800811a:	9001      	str	r0, [sp, #4]
 800811c:	2800      	cmp	r0, #0
 800811e:	d13b      	bne.n	8008198 <_dtoa_r+0x320>
 8008120:	4b11      	ldr	r3, [pc, #68]	; (8008168 <_dtoa_r+0x2f0>)
 8008122:	4602      	mov	r2, r0
 8008124:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008128:	e6c0      	b.n	8007eac <_dtoa_r+0x34>
 800812a:	2301      	movs	r3, #1
 800812c:	e7df      	b.n	80080ee <_dtoa_r+0x276>
 800812e:	bf00      	nop
 8008130:	636f4361 	.word	0x636f4361
 8008134:	3fd287a7 	.word	0x3fd287a7
 8008138:	8b60c8b3 	.word	0x8b60c8b3
 800813c:	3fc68a28 	.word	0x3fc68a28
 8008140:	509f79fb 	.word	0x509f79fb
 8008144:	3fd34413 	.word	0x3fd34413
 8008148:	0800a3c5 	.word	0x0800a3c5
 800814c:	0800a3dc 	.word	0x0800a3dc
 8008150:	7ff00000 	.word	0x7ff00000
 8008154:	0800a3c1 	.word	0x0800a3c1
 8008158:	0800a3b8 	.word	0x0800a3b8
 800815c:	0800a395 	.word	0x0800a395
 8008160:	3ff80000 	.word	0x3ff80000
 8008164:	0800a4d0 	.word	0x0800a4d0
 8008168:	0800a437 	.word	0x0800a437
 800816c:	2501      	movs	r5, #1
 800816e:	2300      	movs	r3, #0
 8008170:	9306      	str	r3, [sp, #24]
 8008172:	9508      	str	r5, [sp, #32]
 8008174:	f04f 33ff 	mov.w	r3, #4294967295
 8008178:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	2312      	movs	r3, #18
 8008180:	e7b0      	b.n	80080e4 <_dtoa_r+0x26c>
 8008182:	2301      	movs	r3, #1
 8008184:	9308      	str	r3, [sp, #32]
 8008186:	e7f5      	b.n	8008174 <_dtoa_r+0x2fc>
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800818e:	e7b8      	b.n	8008102 <_dtoa_r+0x28a>
 8008190:	3101      	adds	r1, #1
 8008192:	6041      	str	r1, [r0, #4]
 8008194:	0052      	lsls	r2, r2, #1
 8008196:	e7b8      	b.n	800810a <_dtoa_r+0x292>
 8008198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800819a:	9a01      	ldr	r2, [sp, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	2b0e      	cmp	r3, #14
 80081a2:	f200 809d 	bhi.w	80082e0 <_dtoa_r+0x468>
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	f000 809a 	beq.w	80082e0 <_dtoa_r+0x468>
 80081ac:	9b00      	ldr	r3, [sp, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dd32      	ble.n	8008218 <_dtoa_r+0x3a0>
 80081b2:	4ab7      	ldr	r2, [pc, #732]	; (8008490 <_dtoa_r+0x618>)
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	05d8      	lsls	r0, r3, #23
 80081c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80081c8:	d516      	bpl.n	80081f8 <_dtoa_r+0x380>
 80081ca:	4bb2      	ldr	r3, [pc, #712]	; (8008494 <_dtoa_r+0x61c>)
 80081cc:	ec51 0b19 	vmov	r0, r1, d9
 80081d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081d4:	f7f8 fb42 	bl	800085c <__aeabi_ddiv>
 80081d8:	f007 070f 	and.w	r7, r7, #15
 80081dc:	4682      	mov	sl, r0
 80081de:	468b      	mov	fp, r1
 80081e0:	2503      	movs	r5, #3
 80081e2:	4eac      	ldr	r6, [pc, #688]	; (8008494 <_dtoa_r+0x61c>)
 80081e4:	b957      	cbnz	r7, 80081fc <_dtoa_r+0x384>
 80081e6:	4642      	mov	r2, r8
 80081e8:	464b      	mov	r3, r9
 80081ea:	4650      	mov	r0, sl
 80081ec:	4659      	mov	r1, fp
 80081ee:	f7f8 fb35 	bl	800085c <__aeabi_ddiv>
 80081f2:	4682      	mov	sl, r0
 80081f4:	468b      	mov	fp, r1
 80081f6:	e028      	b.n	800824a <_dtoa_r+0x3d2>
 80081f8:	2502      	movs	r5, #2
 80081fa:	e7f2      	b.n	80081e2 <_dtoa_r+0x36a>
 80081fc:	07f9      	lsls	r1, r7, #31
 80081fe:	d508      	bpl.n	8008212 <_dtoa_r+0x39a>
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008208:	f7f8 f9fe 	bl	8000608 <__aeabi_dmul>
 800820c:	3501      	adds	r5, #1
 800820e:	4680      	mov	r8, r0
 8008210:	4689      	mov	r9, r1
 8008212:	107f      	asrs	r7, r7, #1
 8008214:	3608      	adds	r6, #8
 8008216:	e7e5      	b.n	80081e4 <_dtoa_r+0x36c>
 8008218:	f000 809b 	beq.w	8008352 <_dtoa_r+0x4da>
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	4f9d      	ldr	r7, [pc, #628]	; (8008494 <_dtoa_r+0x61c>)
 8008220:	425e      	negs	r6, r3
 8008222:	4b9b      	ldr	r3, [pc, #620]	; (8008490 <_dtoa_r+0x618>)
 8008224:	f006 020f 	and.w	r2, r6, #15
 8008228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	ec51 0b19 	vmov	r0, r1, d9
 8008234:	f7f8 f9e8 	bl	8000608 <__aeabi_dmul>
 8008238:	1136      	asrs	r6, r6, #4
 800823a:	4682      	mov	sl, r0
 800823c:	468b      	mov	fp, r1
 800823e:	2300      	movs	r3, #0
 8008240:	2502      	movs	r5, #2
 8008242:	2e00      	cmp	r6, #0
 8008244:	d17a      	bne.n	800833c <_dtoa_r+0x4c4>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1d3      	bne.n	80081f2 <_dtoa_r+0x37a>
 800824a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8082 	beq.w	8008356 <_dtoa_r+0x4de>
 8008252:	4b91      	ldr	r3, [pc, #580]	; (8008498 <_dtoa_r+0x620>)
 8008254:	2200      	movs	r2, #0
 8008256:	4650      	mov	r0, sl
 8008258:	4659      	mov	r1, fp
 800825a:	f7f8 fc47 	bl	8000aec <__aeabi_dcmplt>
 800825e:	2800      	cmp	r0, #0
 8008260:	d079      	beq.n	8008356 <_dtoa_r+0x4de>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d076      	beq.n	8008356 <_dtoa_r+0x4de>
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	dd36      	ble.n	80082dc <_dtoa_r+0x464>
 800826e:	9b00      	ldr	r3, [sp, #0]
 8008270:	4650      	mov	r0, sl
 8008272:	4659      	mov	r1, fp
 8008274:	1e5f      	subs	r7, r3, #1
 8008276:	2200      	movs	r2, #0
 8008278:	4b88      	ldr	r3, [pc, #544]	; (800849c <_dtoa_r+0x624>)
 800827a:	f7f8 f9c5 	bl	8000608 <__aeabi_dmul>
 800827e:	9e02      	ldr	r6, [sp, #8]
 8008280:	4682      	mov	sl, r0
 8008282:	468b      	mov	fp, r1
 8008284:	3501      	adds	r5, #1
 8008286:	4628      	mov	r0, r5
 8008288:	f7f8 f954 	bl	8000534 <__aeabi_i2d>
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	f7f8 f9ba 	bl	8000608 <__aeabi_dmul>
 8008294:	4b82      	ldr	r3, [pc, #520]	; (80084a0 <_dtoa_r+0x628>)
 8008296:	2200      	movs	r2, #0
 8008298:	f7f8 f800 	bl	800029c <__adddf3>
 800829c:	46d0      	mov	r8, sl
 800829e:	46d9      	mov	r9, fp
 80082a0:	4682      	mov	sl, r0
 80082a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d158      	bne.n	800835c <_dtoa_r+0x4e4>
 80082aa:	4b7e      	ldr	r3, [pc, #504]	; (80084a4 <_dtoa_r+0x62c>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	4640      	mov	r0, r8
 80082b0:	4649      	mov	r1, r9
 80082b2:	f7f7 fff1 	bl	8000298 <__aeabi_dsub>
 80082b6:	4652      	mov	r2, sl
 80082b8:	465b      	mov	r3, fp
 80082ba:	4680      	mov	r8, r0
 80082bc:	4689      	mov	r9, r1
 80082be:	f7f8 fc33 	bl	8000b28 <__aeabi_dcmpgt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f040 8295 	bne.w	80087f2 <_dtoa_r+0x97a>
 80082c8:	4652      	mov	r2, sl
 80082ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80082ce:	4640      	mov	r0, r8
 80082d0:	4649      	mov	r1, r9
 80082d2:	f7f8 fc0b 	bl	8000aec <__aeabi_dcmplt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f040 8289 	bne.w	80087ee <_dtoa_r+0x976>
 80082dc:	ec5b ab19 	vmov	sl, fp, d9
 80082e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f2c0 8148 	blt.w	8008578 <_dtoa_r+0x700>
 80082e8:	9a00      	ldr	r2, [sp, #0]
 80082ea:	2a0e      	cmp	r2, #14
 80082ec:	f300 8144 	bgt.w	8008578 <_dtoa_r+0x700>
 80082f0:	4b67      	ldr	r3, [pc, #412]	; (8008490 <_dtoa_r+0x618>)
 80082f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f280 80d5 	bge.w	80084ac <_dtoa_r+0x634>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f300 80d1 	bgt.w	80084ac <_dtoa_r+0x634>
 800830a:	f040 826f 	bne.w	80087ec <_dtoa_r+0x974>
 800830e:	4b65      	ldr	r3, [pc, #404]	; (80084a4 <_dtoa_r+0x62c>)
 8008310:	2200      	movs	r2, #0
 8008312:	4640      	mov	r0, r8
 8008314:	4649      	mov	r1, r9
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	4652      	mov	r2, sl
 800831c:	465b      	mov	r3, fp
 800831e:	f7f8 fbf9 	bl	8000b14 <__aeabi_dcmpge>
 8008322:	9e03      	ldr	r6, [sp, #12]
 8008324:	4637      	mov	r7, r6
 8008326:	2800      	cmp	r0, #0
 8008328:	f040 8245 	bne.w	80087b6 <_dtoa_r+0x93e>
 800832c:	9d01      	ldr	r5, [sp, #4]
 800832e:	2331      	movs	r3, #49	; 0x31
 8008330:	f805 3b01 	strb.w	r3, [r5], #1
 8008334:	9b00      	ldr	r3, [sp, #0]
 8008336:	3301      	adds	r3, #1
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	e240      	b.n	80087be <_dtoa_r+0x946>
 800833c:	07f2      	lsls	r2, r6, #31
 800833e:	d505      	bpl.n	800834c <_dtoa_r+0x4d4>
 8008340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008344:	f7f8 f960 	bl	8000608 <__aeabi_dmul>
 8008348:	3501      	adds	r5, #1
 800834a:	2301      	movs	r3, #1
 800834c:	1076      	asrs	r6, r6, #1
 800834e:	3708      	adds	r7, #8
 8008350:	e777      	b.n	8008242 <_dtoa_r+0x3ca>
 8008352:	2502      	movs	r5, #2
 8008354:	e779      	b.n	800824a <_dtoa_r+0x3d2>
 8008356:	9f00      	ldr	r7, [sp, #0]
 8008358:	9e03      	ldr	r6, [sp, #12]
 800835a:	e794      	b.n	8008286 <_dtoa_r+0x40e>
 800835c:	9901      	ldr	r1, [sp, #4]
 800835e:	4b4c      	ldr	r3, [pc, #304]	; (8008490 <_dtoa_r+0x618>)
 8008360:	4431      	add	r1, r6
 8008362:	910d      	str	r1, [sp, #52]	; 0x34
 8008364:	9908      	ldr	r1, [sp, #32]
 8008366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800836a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800836e:	2900      	cmp	r1, #0
 8008370:	d043      	beq.n	80083fa <_dtoa_r+0x582>
 8008372:	494d      	ldr	r1, [pc, #308]	; (80084a8 <_dtoa_r+0x630>)
 8008374:	2000      	movs	r0, #0
 8008376:	f7f8 fa71 	bl	800085c <__aeabi_ddiv>
 800837a:	4652      	mov	r2, sl
 800837c:	465b      	mov	r3, fp
 800837e:	f7f7 ff8b 	bl	8000298 <__aeabi_dsub>
 8008382:	9d01      	ldr	r5, [sp, #4]
 8008384:	4682      	mov	sl, r0
 8008386:	468b      	mov	fp, r1
 8008388:	4649      	mov	r1, r9
 800838a:	4640      	mov	r0, r8
 800838c:	f7f8 fbec 	bl	8000b68 <__aeabi_d2iz>
 8008390:	4606      	mov	r6, r0
 8008392:	f7f8 f8cf 	bl	8000534 <__aeabi_i2d>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f7 ff7b 	bl	8000298 <__aeabi_dsub>
 80083a2:	3630      	adds	r6, #48	; 0x30
 80083a4:	f805 6b01 	strb.w	r6, [r5], #1
 80083a8:	4652      	mov	r2, sl
 80083aa:	465b      	mov	r3, fp
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	f7f8 fb9c 	bl	8000aec <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d163      	bne.n	8008480 <_dtoa_r+0x608>
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	4936      	ldr	r1, [pc, #216]	; (8008498 <_dtoa_r+0x620>)
 80083be:	2000      	movs	r0, #0
 80083c0:	f7f7 ff6a 	bl	8000298 <__aeabi_dsub>
 80083c4:	4652      	mov	r2, sl
 80083c6:	465b      	mov	r3, fp
 80083c8:	f7f8 fb90 	bl	8000aec <__aeabi_dcmplt>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f040 80b5 	bne.w	800853c <_dtoa_r+0x6c4>
 80083d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083d4:	429d      	cmp	r5, r3
 80083d6:	d081      	beq.n	80082dc <_dtoa_r+0x464>
 80083d8:	4b30      	ldr	r3, [pc, #192]	; (800849c <_dtoa_r+0x624>)
 80083da:	2200      	movs	r2, #0
 80083dc:	4650      	mov	r0, sl
 80083de:	4659      	mov	r1, fp
 80083e0:	f7f8 f912 	bl	8000608 <__aeabi_dmul>
 80083e4:	4b2d      	ldr	r3, [pc, #180]	; (800849c <_dtoa_r+0x624>)
 80083e6:	4682      	mov	sl, r0
 80083e8:	468b      	mov	fp, r1
 80083ea:	4640      	mov	r0, r8
 80083ec:	4649      	mov	r1, r9
 80083ee:	2200      	movs	r2, #0
 80083f0:	f7f8 f90a 	bl	8000608 <__aeabi_dmul>
 80083f4:	4680      	mov	r8, r0
 80083f6:	4689      	mov	r9, r1
 80083f8:	e7c6      	b.n	8008388 <_dtoa_r+0x510>
 80083fa:	4650      	mov	r0, sl
 80083fc:	4659      	mov	r1, fp
 80083fe:	f7f8 f903 	bl	8000608 <__aeabi_dmul>
 8008402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008404:	9d01      	ldr	r5, [sp, #4]
 8008406:	930f      	str	r3, [sp, #60]	; 0x3c
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	4649      	mov	r1, r9
 800840e:	4640      	mov	r0, r8
 8008410:	f7f8 fbaa 	bl	8000b68 <__aeabi_d2iz>
 8008414:	4606      	mov	r6, r0
 8008416:	f7f8 f88d 	bl	8000534 <__aeabi_i2d>
 800841a:	3630      	adds	r6, #48	; 0x30
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4640      	mov	r0, r8
 8008422:	4649      	mov	r1, r9
 8008424:	f7f7 ff38 	bl	8000298 <__aeabi_dsub>
 8008428:	f805 6b01 	strb.w	r6, [r5], #1
 800842c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800842e:	429d      	cmp	r5, r3
 8008430:	4680      	mov	r8, r0
 8008432:	4689      	mov	r9, r1
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	d124      	bne.n	8008484 <_dtoa_r+0x60c>
 800843a:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <_dtoa_r+0x630>)
 800843c:	4650      	mov	r0, sl
 800843e:	4659      	mov	r1, fp
 8008440:	f7f7 ff2c 	bl	800029c <__adddf3>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f8 fb6c 	bl	8000b28 <__aeabi_dcmpgt>
 8008450:	2800      	cmp	r0, #0
 8008452:	d173      	bne.n	800853c <_dtoa_r+0x6c4>
 8008454:	4652      	mov	r2, sl
 8008456:	465b      	mov	r3, fp
 8008458:	4913      	ldr	r1, [pc, #76]	; (80084a8 <_dtoa_r+0x630>)
 800845a:	2000      	movs	r0, #0
 800845c:	f7f7 ff1c 	bl	8000298 <__aeabi_dsub>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f7f8 fb40 	bl	8000aec <__aeabi_dcmplt>
 800846c:	2800      	cmp	r0, #0
 800846e:	f43f af35 	beq.w	80082dc <_dtoa_r+0x464>
 8008472:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008474:	1e6b      	subs	r3, r5, #1
 8008476:	930f      	str	r3, [sp, #60]	; 0x3c
 8008478:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800847c:	2b30      	cmp	r3, #48	; 0x30
 800847e:	d0f8      	beq.n	8008472 <_dtoa_r+0x5fa>
 8008480:	9700      	str	r7, [sp, #0]
 8008482:	e049      	b.n	8008518 <_dtoa_r+0x6a0>
 8008484:	4b05      	ldr	r3, [pc, #20]	; (800849c <_dtoa_r+0x624>)
 8008486:	f7f8 f8bf 	bl	8000608 <__aeabi_dmul>
 800848a:	4680      	mov	r8, r0
 800848c:	4689      	mov	r9, r1
 800848e:	e7bd      	b.n	800840c <_dtoa_r+0x594>
 8008490:	0800a4d0 	.word	0x0800a4d0
 8008494:	0800a4a8 	.word	0x0800a4a8
 8008498:	3ff00000 	.word	0x3ff00000
 800849c:	40240000 	.word	0x40240000
 80084a0:	401c0000 	.word	0x401c0000
 80084a4:	40140000 	.word	0x40140000
 80084a8:	3fe00000 	.word	0x3fe00000
 80084ac:	9d01      	ldr	r5, [sp, #4]
 80084ae:	4656      	mov	r6, sl
 80084b0:	465f      	mov	r7, fp
 80084b2:	4642      	mov	r2, r8
 80084b4:	464b      	mov	r3, r9
 80084b6:	4630      	mov	r0, r6
 80084b8:	4639      	mov	r1, r7
 80084ba:	f7f8 f9cf 	bl	800085c <__aeabi_ddiv>
 80084be:	f7f8 fb53 	bl	8000b68 <__aeabi_d2iz>
 80084c2:	4682      	mov	sl, r0
 80084c4:	f7f8 f836 	bl	8000534 <__aeabi_i2d>
 80084c8:	4642      	mov	r2, r8
 80084ca:	464b      	mov	r3, r9
 80084cc:	f7f8 f89c 	bl	8000608 <__aeabi_dmul>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4630      	mov	r0, r6
 80084d6:	4639      	mov	r1, r7
 80084d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80084dc:	f7f7 fedc 	bl	8000298 <__aeabi_dsub>
 80084e0:	f805 6b01 	strb.w	r6, [r5], #1
 80084e4:	9e01      	ldr	r6, [sp, #4]
 80084e6:	9f03      	ldr	r7, [sp, #12]
 80084e8:	1bae      	subs	r6, r5, r6
 80084ea:	42b7      	cmp	r7, r6
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	d135      	bne.n	800855e <_dtoa_r+0x6e6>
 80084f2:	f7f7 fed3 	bl	800029c <__adddf3>
 80084f6:	4642      	mov	r2, r8
 80084f8:	464b      	mov	r3, r9
 80084fa:	4606      	mov	r6, r0
 80084fc:	460f      	mov	r7, r1
 80084fe:	f7f8 fb13 	bl	8000b28 <__aeabi_dcmpgt>
 8008502:	b9d0      	cbnz	r0, 800853a <_dtoa_r+0x6c2>
 8008504:	4642      	mov	r2, r8
 8008506:	464b      	mov	r3, r9
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f8 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008510:	b110      	cbz	r0, 8008518 <_dtoa_r+0x6a0>
 8008512:	f01a 0f01 	tst.w	sl, #1
 8008516:	d110      	bne.n	800853a <_dtoa_r+0x6c2>
 8008518:	4620      	mov	r0, r4
 800851a:	ee18 1a10 	vmov	r1, s16
 800851e:	f000 fae5 	bl	8008aec <_Bfree>
 8008522:	2300      	movs	r3, #0
 8008524:	9800      	ldr	r0, [sp, #0]
 8008526:	702b      	strb	r3, [r5, #0]
 8008528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800852a:	3001      	adds	r0, #1
 800852c:	6018      	str	r0, [r3, #0]
 800852e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008530:	2b00      	cmp	r3, #0
 8008532:	f43f acf1 	beq.w	8007f18 <_dtoa_r+0xa0>
 8008536:	601d      	str	r5, [r3, #0]
 8008538:	e4ee      	b.n	8007f18 <_dtoa_r+0xa0>
 800853a:	9f00      	ldr	r7, [sp, #0]
 800853c:	462b      	mov	r3, r5
 800853e:	461d      	mov	r5, r3
 8008540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008544:	2a39      	cmp	r2, #57	; 0x39
 8008546:	d106      	bne.n	8008556 <_dtoa_r+0x6de>
 8008548:	9a01      	ldr	r2, [sp, #4]
 800854a:	429a      	cmp	r2, r3
 800854c:	d1f7      	bne.n	800853e <_dtoa_r+0x6c6>
 800854e:	9901      	ldr	r1, [sp, #4]
 8008550:	2230      	movs	r2, #48	; 0x30
 8008552:	3701      	adds	r7, #1
 8008554:	700a      	strb	r2, [r1, #0]
 8008556:	781a      	ldrb	r2, [r3, #0]
 8008558:	3201      	adds	r2, #1
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e790      	b.n	8008480 <_dtoa_r+0x608>
 800855e:	4ba6      	ldr	r3, [pc, #664]	; (80087f8 <_dtoa_r+0x980>)
 8008560:	2200      	movs	r2, #0
 8008562:	f7f8 f851 	bl	8000608 <__aeabi_dmul>
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	4606      	mov	r6, r0
 800856c:	460f      	mov	r7, r1
 800856e:	f7f8 fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008572:	2800      	cmp	r0, #0
 8008574:	d09d      	beq.n	80084b2 <_dtoa_r+0x63a>
 8008576:	e7cf      	b.n	8008518 <_dtoa_r+0x6a0>
 8008578:	9a08      	ldr	r2, [sp, #32]
 800857a:	2a00      	cmp	r2, #0
 800857c:	f000 80d7 	beq.w	800872e <_dtoa_r+0x8b6>
 8008580:	9a06      	ldr	r2, [sp, #24]
 8008582:	2a01      	cmp	r2, #1
 8008584:	f300 80ba 	bgt.w	80086fc <_dtoa_r+0x884>
 8008588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800858a:	2a00      	cmp	r2, #0
 800858c:	f000 80b2 	beq.w	80086f4 <_dtoa_r+0x87c>
 8008590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008594:	9e07      	ldr	r6, [sp, #28]
 8008596:	9d04      	ldr	r5, [sp, #16]
 8008598:	9a04      	ldr	r2, [sp, #16]
 800859a:	441a      	add	r2, r3
 800859c:	9204      	str	r2, [sp, #16]
 800859e:	9a05      	ldr	r2, [sp, #20]
 80085a0:	2101      	movs	r1, #1
 80085a2:	441a      	add	r2, r3
 80085a4:	4620      	mov	r0, r4
 80085a6:	9205      	str	r2, [sp, #20]
 80085a8:	f000 fb58 	bl	8008c5c <__i2b>
 80085ac:	4607      	mov	r7, r0
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	dd0c      	ble.n	80085cc <_dtoa_r+0x754>
 80085b2:	9b05      	ldr	r3, [sp, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd09      	ble.n	80085cc <_dtoa_r+0x754>
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	9a04      	ldr	r2, [sp, #16]
 80085bc:	bfa8      	it	ge
 80085be:	462b      	movge	r3, r5
 80085c0:	1ad2      	subs	r2, r2, r3
 80085c2:	9204      	str	r2, [sp, #16]
 80085c4:	9a05      	ldr	r2, [sp, #20]
 80085c6:	1aed      	subs	r5, r5, r3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	b31b      	cbz	r3, 8008618 <_dtoa_r+0x7a0>
 80085d0:	9b08      	ldr	r3, [sp, #32]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80af 	beq.w	8008736 <_dtoa_r+0x8be>
 80085d8:	2e00      	cmp	r6, #0
 80085da:	dd13      	ble.n	8008604 <_dtoa_r+0x78c>
 80085dc:	4639      	mov	r1, r7
 80085de:	4632      	mov	r2, r6
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fbfb 	bl	8008ddc <__pow5mult>
 80085e6:	ee18 2a10 	vmov	r2, s16
 80085ea:	4601      	mov	r1, r0
 80085ec:	4607      	mov	r7, r0
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 fb4a 	bl	8008c88 <__multiply>
 80085f4:	ee18 1a10 	vmov	r1, s16
 80085f8:	4680      	mov	r8, r0
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fa76 	bl	8008aec <_Bfree>
 8008600:	ee08 8a10 	vmov	s16, r8
 8008604:	9b07      	ldr	r3, [sp, #28]
 8008606:	1b9a      	subs	r2, r3, r6
 8008608:	d006      	beq.n	8008618 <_dtoa_r+0x7a0>
 800860a:	ee18 1a10 	vmov	r1, s16
 800860e:	4620      	mov	r0, r4
 8008610:	f000 fbe4 	bl	8008ddc <__pow5mult>
 8008614:	ee08 0a10 	vmov	s16, r0
 8008618:	2101      	movs	r1, #1
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fb1e 	bl	8008c5c <__i2b>
 8008620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	4606      	mov	r6, r0
 8008626:	f340 8088 	ble.w	800873a <_dtoa_r+0x8c2>
 800862a:	461a      	mov	r2, r3
 800862c:	4601      	mov	r1, r0
 800862e:	4620      	mov	r0, r4
 8008630:	f000 fbd4 	bl	8008ddc <__pow5mult>
 8008634:	9b06      	ldr	r3, [sp, #24]
 8008636:	2b01      	cmp	r3, #1
 8008638:	4606      	mov	r6, r0
 800863a:	f340 8081 	ble.w	8008740 <_dtoa_r+0x8c8>
 800863e:	f04f 0800 	mov.w	r8, #0
 8008642:	6933      	ldr	r3, [r6, #16]
 8008644:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008648:	6918      	ldr	r0, [r3, #16]
 800864a:	f000 fab7 	bl	8008bbc <__hi0bits>
 800864e:	f1c0 0020 	rsb	r0, r0, #32
 8008652:	9b05      	ldr	r3, [sp, #20]
 8008654:	4418      	add	r0, r3
 8008656:	f010 001f 	ands.w	r0, r0, #31
 800865a:	f000 8092 	beq.w	8008782 <_dtoa_r+0x90a>
 800865e:	f1c0 0320 	rsb	r3, r0, #32
 8008662:	2b04      	cmp	r3, #4
 8008664:	f340 808a 	ble.w	800877c <_dtoa_r+0x904>
 8008668:	f1c0 001c 	rsb	r0, r0, #28
 800866c:	9b04      	ldr	r3, [sp, #16]
 800866e:	4403      	add	r3, r0
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	4403      	add	r3, r0
 8008676:	4405      	add	r5, r0
 8008678:	9305      	str	r3, [sp, #20]
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd07      	ble.n	8008690 <_dtoa_r+0x818>
 8008680:	ee18 1a10 	vmov	r1, s16
 8008684:	461a      	mov	r2, r3
 8008686:	4620      	mov	r0, r4
 8008688:	f000 fc02 	bl	8008e90 <__lshift>
 800868c:	ee08 0a10 	vmov	s16, r0
 8008690:	9b05      	ldr	r3, [sp, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	dd05      	ble.n	80086a2 <_dtoa_r+0x82a>
 8008696:	4631      	mov	r1, r6
 8008698:	461a      	mov	r2, r3
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fbf8 	bl	8008e90 <__lshift>
 80086a0:	4606      	mov	r6, r0
 80086a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d06e      	beq.n	8008786 <_dtoa_r+0x90e>
 80086a8:	ee18 0a10 	vmov	r0, s16
 80086ac:	4631      	mov	r1, r6
 80086ae:	f000 fc5f 	bl	8008f70 <__mcmp>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	da67      	bge.n	8008786 <_dtoa_r+0x90e>
 80086b6:	9b00      	ldr	r3, [sp, #0]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	ee18 1a10 	vmov	r1, s16
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	220a      	movs	r2, #10
 80086c2:	2300      	movs	r3, #0
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fa33 	bl	8008b30 <__multadd>
 80086ca:	9b08      	ldr	r3, [sp, #32]
 80086cc:	ee08 0a10 	vmov	s16, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 81b1 	beq.w	8008a38 <_dtoa_r+0xbc0>
 80086d6:	2300      	movs	r3, #0
 80086d8:	4639      	mov	r1, r7
 80086da:	220a      	movs	r2, #10
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fa27 	bl	8008b30 <__multadd>
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	4607      	mov	r7, r0
 80086e8:	f300 808e 	bgt.w	8008808 <_dtoa_r+0x990>
 80086ec:	9b06      	ldr	r3, [sp, #24]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	dc51      	bgt.n	8008796 <_dtoa_r+0x91e>
 80086f2:	e089      	b.n	8008808 <_dtoa_r+0x990>
 80086f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086fa:	e74b      	b.n	8008594 <_dtoa_r+0x71c>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	1e5e      	subs	r6, r3, #1
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	42b3      	cmp	r3, r6
 8008704:	bfbf      	itttt	lt
 8008706:	9b07      	ldrlt	r3, [sp, #28]
 8008708:	9607      	strlt	r6, [sp, #28]
 800870a:	1af2      	sublt	r2, r6, r3
 800870c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800870e:	bfb6      	itet	lt
 8008710:	189b      	addlt	r3, r3, r2
 8008712:	1b9e      	subge	r6, r3, r6
 8008714:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	bfb8      	it	lt
 800871a:	2600      	movlt	r6, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfb7      	itett	lt
 8008720:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008724:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008728:	1a9d      	sublt	r5, r3, r2
 800872a:	2300      	movlt	r3, #0
 800872c:	e734      	b.n	8008598 <_dtoa_r+0x720>
 800872e:	9e07      	ldr	r6, [sp, #28]
 8008730:	9d04      	ldr	r5, [sp, #16]
 8008732:	9f08      	ldr	r7, [sp, #32]
 8008734:	e73b      	b.n	80085ae <_dtoa_r+0x736>
 8008736:	9a07      	ldr	r2, [sp, #28]
 8008738:	e767      	b.n	800860a <_dtoa_r+0x792>
 800873a:	9b06      	ldr	r3, [sp, #24]
 800873c:	2b01      	cmp	r3, #1
 800873e:	dc18      	bgt.n	8008772 <_dtoa_r+0x8fa>
 8008740:	f1ba 0f00 	cmp.w	sl, #0
 8008744:	d115      	bne.n	8008772 <_dtoa_r+0x8fa>
 8008746:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800874a:	b993      	cbnz	r3, 8008772 <_dtoa_r+0x8fa>
 800874c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008750:	0d1b      	lsrs	r3, r3, #20
 8008752:	051b      	lsls	r3, r3, #20
 8008754:	b183      	cbz	r3, 8008778 <_dtoa_r+0x900>
 8008756:	9b04      	ldr	r3, [sp, #16]
 8008758:	3301      	adds	r3, #1
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	3301      	adds	r3, #1
 8008760:	9305      	str	r3, [sp, #20]
 8008762:	f04f 0801 	mov.w	r8, #1
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	2b00      	cmp	r3, #0
 800876a:	f47f af6a 	bne.w	8008642 <_dtoa_r+0x7ca>
 800876e:	2001      	movs	r0, #1
 8008770:	e76f      	b.n	8008652 <_dtoa_r+0x7da>
 8008772:	f04f 0800 	mov.w	r8, #0
 8008776:	e7f6      	b.n	8008766 <_dtoa_r+0x8ee>
 8008778:	4698      	mov	r8, r3
 800877a:	e7f4      	b.n	8008766 <_dtoa_r+0x8ee>
 800877c:	f43f af7d 	beq.w	800867a <_dtoa_r+0x802>
 8008780:	4618      	mov	r0, r3
 8008782:	301c      	adds	r0, #28
 8008784:	e772      	b.n	800866c <_dtoa_r+0x7f4>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	dc37      	bgt.n	80087fc <_dtoa_r+0x984>
 800878c:	9b06      	ldr	r3, [sp, #24]
 800878e:	2b02      	cmp	r3, #2
 8008790:	dd34      	ble.n	80087fc <_dtoa_r+0x984>
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	9302      	str	r3, [sp, #8]
 8008796:	9b02      	ldr	r3, [sp, #8]
 8008798:	b96b      	cbnz	r3, 80087b6 <_dtoa_r+0x93e>
 800879a:	4631      	mov	r1, r6
 800879c:	2205      	movs	r2, #5
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 f9c6 	bl	8008b30 <__multadd>
 80087a4:	4601      	mov	r1, r0
 80087a6:	4606      	mov	r6, r0
 80087a8:	ee18 0a10 	vmov	r0, s16
 80087ac:	f000 fbe0 	bl	8008f70 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	f73f adbb 	bgt.w	800832c <_dtoa_r+0x4b4>
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	9d01      	ldr	r5, [sp, #4]
 80087ba:	43db      	mvns	r3, r3
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	f04f 0800 	mov.w	r8, #0
 80087c2:	4631      	mov	r1, r6
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 f991 	bl	8008aec <_Bfree>
 80087ca:	2f00      	cmp	r7, #0
 80087cc:	f43f aea4 	beq.w	8008518 <_dtoa_r+0x6a0>
 80087d0:	f1b8 0f00 	cmp.w	r8, #0
 80087d4:	d005      	beq.n	80087e2 <_dtoa_r+0x96a>
 80087d6:	45b8      	cmp	r8, r7
 80087d8:	d003      	beq.n	80087e2 <_dtoa_r+0x96a>
 80087da:	4641      	mov	r1, r8
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 f985 	bl	8008aec <_Bfree>
 80087e2:	4639      	mov	r1, r7
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 f981 	bl	8008aec <_Bfree>
 80087ea:	e695      	b.n	8008518 <_dtoa_r+0x6a0>
 80087ec:	2600      	movs	r6, #0
 80087ee:	4637      	mov	r7, r6
 80087f0:	e7e1      	b.n	80087b6 <_dtoa_r+0x93e>
 80087f2:	9700      	str	r7, [sp, #0]
 80087f4:	4637      	mov	r7, r6
 80087f6:	e599      	b.n	800832c <_dtoa_r+0x4b4>
 80087f8:	40240000 	.word	0x40240000
 80087fc:	9b08      	ldr	r3, [sp, #32]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 80ca 	beq.w	8008998 <_dtoa_r+0xb20>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	9302      	str	r3, [sp, #8]
 8008808:	2d00      	cmp	r5, #0
 800880a:	dd05      	ble.n	8008818 <_dtoa_r+0x9a0>
 800880c:	4639      	mov	r1, r7
 800880e:	462a      	mov	r2, r5
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fb3d 	bl	8008e90 <__lshift>
 8008816:	4607      	mov	r7, r0
 8008818:	f1b8 0f00 	cmp.w	r8, #0
 800881c:	d05b      	beq.n	80088d6 <_dtoa_r+0xa5e>
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4620      	mov	r0, r4
 8008822:	f000 f923 	bl	8008a6c <_Balloc>
 8008826:	4605      	mov	r5, r0
 8008828:	b928      	cbnz	r0, 8008836 <_dtoa_r+0x9be>
 800882a:	4b87      	ldr	r3, [pc, #540]	; (8008a48 <_dtoa_r+0xbd0>)
 800882c:	4602      	mov	r2, r0
 800882e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008832:	f7ff bb3b 	b.w	8007eac <_dtoa_r+0x34>
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	3202      	adds	r2, #2
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	f107 010c 	add.w	r1, r7, #12
 8008840:	300c      	adds	r0, #12
 8008842:	f7fe fded 	bl	8007420 <memcpy>
 8008846:	2201      	movs	r2, #1
 8008848:	4629      	mov	r1, r5
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fb20 	bl	8008e90 <__lshift>
 8008850:	9b01      	ldr	r3, [sp, #4]
 8008852:	f103 0901 	add.w	r9, r3, #1
 8008856:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800885a:	4413      	add	r3, r2
 800885c:	9305      	str	r3, [sp, #20]
 800885e:	f00a 0301 	and.w	r3, sl, #1
 8008862:	46b8      	mov	r8, r7
 8008864:	9304      	str	r3, [sp, #16]
 8008866:	4607      	mov	r7, r0
 8008868:	4631      	mov	r1, r6
 800886a:	ee18 0a10 	vmov	r0, s16
 800886e:	f7ff fa77 	bl	8007d60 <quorem>
 8008872:	4641      	mov	r1, r8
 8008874:	9002      	str	r0, [sp, #8]
 8008876:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800887a:	ee18 0a10 	vmov	r0, s16
 800887e:	f000 fb77 	bl	8008f70 <__mcmp>
 8008882:	463a      	mov	r2, r7
 8008884:	9003      	str	r0, [sp, #12]
 8008886:	4631      	mov	r1, r6
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fb8d 	bl	8008fa8 <__mdiff>
 800888e:	68c2      	ldr	r2, [r0, #12]
 8008890:	f109 3bff 	add.w	fp, r9, #4294967295
 8008894:	4605      	mov	r5, r0
 8008896:	bb02      	cbnz	r2, 80088da <_dtoa_r+0xa62>
 8008898:	4601      	mov	r1, r0
 800889a:	ee18 0a10 	vmov	r0, s16
 800889e:	f000 fb67 	bl	8008f70 <__mcmp>
 80088a2:	4602      	mov	r2, r0
 80088a4:	4629      	mov	r1, r5
 80088a6:	4620      	mov	r0, r4
 80088a8:	9207      	str	r2, [sp, #28]
 80088aa:	f000 f91f 	bl	8008aec <_Bfree>
 80088ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80088b2:	ea43 0102 	orr.w	r1, r3, r2
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	430b      	orrs	r3, r1
 80088ba:	464d      	mov	r5, r9
 80088bc:	d10f      	bne.n	80088de <_dtoa_r+0xa66>
 80088be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088c2:	d02a      	beq.n	800891a <_dtoa_r+0xaa2>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dd02      	ble.n	80088d0 <_dtoa_r+0xa58>
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80088d0:	f88b a000 	strb.w	sl, [fp]
 80088d4:	e775      	b.n	80087c2 <_dtoa_r+0x94a>
 80088d6:	4638      	mov	r0, r7
 80088d8:	e7ba      	b.n	8008850 <_dtoa_r+0x9d8>
 80088da:	2201      	movs	r2, #1
 80088dc:	e7e2      	b.n	80088a4 <_dtoa_r+0xa2c>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	db04      	blt.n	80088ee <_dtoa_r+0xa76>
 80088e4:	9906      	ldr	r1, [sp, #24]
 80088e6:	430b      	orrs	r3, r1
 80088e8:	9904      	ldr	r1, [sp, #16]
 80088ea:	430b      	orrs	r3, r1
 80088ec:	d122      	bne.n	8008934 <_dtoa_r+0xabc>
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	ddee      	ble.n	80088d0 <_dtoa_r+0xa58>
 80088f2:	ee18 1a10 	vmov	r1, s16
 80088f6:	2201      	movs	r2, #1
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fac9 	bl	8008e90 <__lshift>
 80088fe:	4631      	mov	r1, r6
 8008900:	ee08 0a10 	vmov	s16, r0
 8008904:	f000 fb34 	bl	8008f70 <__mcmp>
 8008908:	2800      	cmp	r0, #0
 800890a:	dc03      	bgt.n	8008914 <_dtoa_r+0xa9c>
 800890c:	d1e0      	bne.n	80088d0 <_dtoa_r+0xa58>
 800890e:	f01a 0f01 	tst.w	sl, #1
 8008912:	d0dd      	beq.n	80088d0 <_dtoa_r+0xa58>
 8008914:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008918:	d1d7      	bne.n	80088ca <_dtoa_r+0xa52>
 800891a:	2339      	movs	r3, #57	; 0x39
 800891c:	f88b 3000 	strb.w	r3, [fp]
 8008920:	462b      	mov	r3, r5
 8008922:	461d      	mov	r5, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800892a:	2a39      	cmp	r2, #57	; 0x39
 800892c:	d071      	beq.n	8008a12 <_dtoa_r+0xb9a>
 800892e:	3201      	adds	r2, #1
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	e746      	b.n	80087c2 <_dtoa_r+0x94a>
 8008934:	2a00      	cmp	r2, #0
 8008936:	dd07      	ble.n	8008948 <_dtoa_r+0xad0>
 8008938:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800893c:	d0ed      	beq.n	800891a <_dtoa_r+0xaa2>
 800893e:	f10a 0301 	add.w	r3, sl, #1
 8008942:	f88b 3000 	strb.w	r3, [fp]
 8008946:	e73c      	b.n	80087c2 <_dtoa_r+0x94a>
 8008948:	9b05      	ldr	r3, [sp, #20]
 800894a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800894e:	4599      	cmp	r9, r3
 8008950:	d047      	beq.n	80089e2 <_dtoa_r+0xb6a>
 8008952:	ee18 1a10 	vmov	r1, s16
 8008956:	2300      	movs	r3, #0
 8008958:	220a      	movs	r2, #10
 800895a:	4620      	mov	r0, r4
 800895c:	f000 f8e8 	bl	8008b30 <__multadd>
 8008960:	45b8      	cmp	r8, r7
 8008962:	ee08 0a10 	vmov	s16, r0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	f04f 020a 	mov.w	r2, #10
 800896e:	4641      	mov	r1, r8
 8008970:	4620      	mov	r0, r4
 8008972:	d106      	bne.n	8008982 <_dtoa_r+0xb0a>
 8008974:	f000 f8dc 	bl	8008b30 <__multadd>
 8008978:	4680      	mov	r8, r0
 800897a:	4607      	mov	r7, r0
 800897c:	f109 0901 	add.w	r9, r9, #1
 8008980:	e772      	b.n	8008868 <_dtoa_r+0x9f0>
 8008982:	f000 f8d5 	bl	8008b30 <__multadd>
 8008986:	4639      	mov	r1, r7
 8008988:	4680      	mov	r8, r0
 800898a:	2300      	movs	r3, #0
 800898c:	220a      	movs	r2, #10
 800898e:	4620      	mov	r0, r4
 8008990:	f000 f8ce 	bl	8008b30 <__multadd>
 8008994:	4607      	mov	r7, r0
 8008996:	e7f1      	b.n	800897c <_dtoa_r+0xb04>
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	9d01      	ldr	r5, [sp, #4]
 800899e:	ee18 0a10 	vmov	r0, s16
 80089a2:	4631      	mov	r1, r6
 80089a4:	f7ff f9dc 	bl	8007d60 <quorem>
 80089a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089ac:	9b01      	ldr	r3, [sp, #4]
 80089ae:	f805 ab01 	strb.w	sl, [r5], #1
 80089b2:	1aea      	subs	r2, r5, r3
 80089b4:	9b02      	ldr	r3, [sp, #8]
 80089b6:	4293      	cmp	r3, r2
 80089b8:	dd09      	ble.n	80089ce <_dtoa_r+0xb56>
 80089ba:	ee18 1a10 	vmov	r1, s16
 80089be:	2300      	movs	r3, #0
 80089c0:	220a      	movs	r2, #10
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f8b4 	bl	8008b30 <__multadd>
 80089c8:	ee08 0a10 	vmov	s16, r0
 80089cc:	e7e7      	b.n	800899e <_dtoa_r+0xb26>
 80089ce:	9b02      	ldr	r3, [sp, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfc8      	it	gt
 80089d4:	461d      	movgt	r5, r3
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	bfd8      	it	le
 80089da:	2501      	movle	r5, #1
 80089dc:	441d      	add	r5, r3
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	ee18 1a10 	vmov	r1, s16
 80089e6:	2201      	movs	r2, #1
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 fa51 	bl	8008e90 <__lshift>
 80089ee:	4631      	mov	r1, r6
 80089f0:	ee08 0a10 	vmov	s16, r0
 80089f4:	f000 fabc 	bl	8008f70 <__mcmp>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dc91      	bgt.n	8008920 <_dtoa_r+0xaa8>
 80089fc:	d102      	bne.n	8008a04 <_dtoa_r+0xb8c>
 80089fe:	f01a 0f01 	tst.w	sl, #1
 8008a02:	d18d      	bne.n	8008920 <_dtoa_r+0xaa8>
 8008a04:	462b      	mov	r3, r5
 8008a06:	461d      	mov	r5, r3
 8008a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a0c:	2a30      	cmp	r2, #48	; 0x30
 8008a0e:	d0fa      	beq.n	8008a06 <_dtoa_r+0xb8e>
 8008a10:	e6d7      	b.n	80087c2 <_dtoa_r+0x94a>
 8008a12:	9a01      	ldr	r2, [sp, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d184      	bne.n	8008922 <_dtoa_r+0xaaa>
 8008a18:	9b00      	ldr	r3, [sp, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	2331      	movs	r3, #49	; 0x31
 8008a20:	7013      	strb	r3, [r2, #0]
 8008a22:	e6ce      	b.n	80087c2 <_dtoa_r+0x94a>
 8008a24:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <_dtoa_r+0xbd4>)
 8008a26:	f7ff ba95 	b.w	8007f54 <_dtoa_r+0xdc>
 8008a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f47f aa6e 	bne.w	8007f0e <_dtoa_r+0x96>
 8008a32:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <_dtoa_r+0xbd8>)
 8008a34:	f7ff ba8e 	b.w	8007f54 <_dtoa_r+0xdc>
 8008a38:	9b02      	ldr	r3, [sp, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dcae      	bgt.n	800899c <_dtoa_r+0xb24>
 8008a3e:	9b06      	ldr	r3, [sp, #24]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	f73f aea8 	bgt.w	8008796 <_dtoa_r+0x91e>
 8008a46:	e7a9      	b.n	800899c <_dtoa_r+0xb24>
 8008a48:	0800a437 	.word	0x0800a437
 8008a4c:	0800a394 	.word	0x0800a394
 8008a50:	0800a3b8 	.word	0x0800a3b8

08008a54 <_localeconv_r>:
 8008a54:	4800      	ldr	r0, [pc, #0]	; (8008a58 <_localeconv_r+0x4>)
 8008a56:	4770      	bx	lr
 8008a58:	20000268 	.word	0x20000268

08008a5c <malloc>:
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <malloc+0xc>)
 8008a5e:	4601      	mov	r1, r0
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	f000 bc09 	b.w	8009278 <_malloc_r>
 8008a66:	bf00      	nop
 8008a68:	20000114 	.word	0x20000114

08008a6c <_Balloc>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a70:	4604      	mov	r4, r0
 8008a72:	460d      	mov	r5, r1
 8008a74:	b976      	cbnz	r6, 8008a94 <_Balloc+0x28>
 8008a76:	2010      	movs	r0, #16
 8008a78:	f7ff fff0 	bl	8008a5c <malloc>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	6260      	str	r0, [r4, #36]	; 0x24
 8008a80:	b920      	cbnz	r0, 8008a8c <_Balloc+0x20>
 8008a82:	4b18      	ldr	r3, [pc, #96]	; (8008ae4 <_Balloc+0x78>)
 8008a84:	4818      	ldr	r0, [pc, #96]	; (8008ae8 <_Balloc+0x7c>)
 8008a86:	2166      	movs	r1, #102	; 0x66
 8008a88:	f000 fdd6 	bl	8009638 <__assert_func>
 8008a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a90:	6006      	str	r6, [r0, #0]
 8008a92:	60c6      	str	r6, [r0, #12]
 8008a94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a96:	68f3      	ldr	r3, [r6, #12]
 8008a98:	b183      	cbz	r3, 8008abc <_Balloc+0x50>
 8008a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008aa2:	b9b8      	cbnz	r0, 8008ad4 <_Balloc+0x68>
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8008aaa:	1d72      	adds	r2, r6, #5
 8008aac:	0092      	lsls	r2, r2, #2
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fb60 	bl	8009174 <_calloc_r>
 8008ab4:	b160      	cbz	r0, 8008ad0 <_Balloc+0x64>
 8008ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aba:	e00e      	b.n	8008ada <_Balloc+0x6e>
 8008abc:	2221      	movs	r2, #33	; 0x21
 8008abe:	2104      	movs	r1, #4
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fb57 	bl	8009174 <_calloc_r>
 8008ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac8:	60f0      	str	r0, [r6, #12]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e4      	bne.n	8008a9a <_Balloc+0x2e>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	6802      	ldr	r2, [r0, #0]
 8008ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ada:	2300      	movs	r3, #0
 8008adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ae0:	e7f7      	b.n	8008ad2 <_Balloc+0x66>
 8008ae2:	bf00      	nop
 8008ae4:	0800a3c5 	.word	0x0800a3c5
 8008ae8:	0800a448 	.word	0x0800a448

08008aec <_Bfree>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008af0:	4605      	mov	r5, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	b976      	cbnz	r6, 8008b14 <_Bfree+0x28>
 8008af6:	2010      	movs	r0, #16
 8008af8:	f7ff ffb0 	bl	8008a5c <malloc>
 8008afc:	4602      	mov	r2, r0
 8008afe:	6268      	str	r0, [r5, #36]	; 0x24
 8008b00:	b920      	cbnz	r0, 8008b0c <_Bfree+0x20>
 8008b02:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <_Bfree+0x3c>)
 8008b04:	4809      	ldr	r0, [pc, #36]	; (8008b2c <_Bfree+0x40>)
 8008b06:	218a      	movs	r1, #138	; 0x8a
 8008b08:	f000 fd96 	bl	8009638 <__assert_func>
 8008b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b10:	6006      	str	r6, [r0, #0]
 8008b12:	60c6      	str	r6, [r0, #12]
 8008b14:	b13c      	cbz	r4, 8008b26 <_Bfree+0x3a>
 8008b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b18:	6862      	ldr	r2, [r4, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b20:	6021      	str	r1, [r4, #0]
 8008b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	0800a3c5 	.word	0x0800a3c5
 8008b2c:	0800a448 	.word	0x0800a448

08008b30 <__multadd>:
 8008b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b34:	690d      	ldr	r5, [r1, #16]
 8008b36:	4607      	mov	r7, r0
 8008b38:	460c      	mov	r4, r1
 8008b3a:	461e      	mov	r6, r3
 8008b3c:	f101 0c14 	add.w	ip, r1, #20
 8008b40:	2000      	movs	r0, #0
 8008b42:	f8dc 3000 	ldr.w	r3, [ip]
 8008b46:	b299      	uxth	r1, r3
 8008b48:	fb02 6101 	mla	r1, r2, r1, r6
 8008b4c:	0c1e      	lsrs	r6, r3, #16
 8008b4e:	0c0b      	lsrs	r3, r1, #16
 8008b50:	fb02 3306 	mla	r3, r2, r6, r3
 8008b54:	b289      	uxth	r1, r1
 8008b56:	3001      	adds	r0, #1
 8008b58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b5c:	4285      	cmp	r5, r0
 8008b5e:	f84c 1b04 	str.w	r1, [ip], #4
 8008b62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b66:	dcec      	bgt.n	8008b42 <__multadd+0x12>
 8008b68:	b30e      	cbz	r6, 8008bae <__multadd+0x7e>
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	42ab      	cmp	r3, r5
 8008b6e:	dc19      	bgt.n	8008ba4 <__multadd+0x74>
 8008b70:	6861      	ldr	r1, [r4, #4]
 8008b72:	4638      	mov	r0, r7
 8008b74:	3101      	adds	r1, #1
 8008b76:	f7ff ff79 	bl	8008a6c <_Balloc>
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	b928      	cbnz	r0, 8008b8a <__multadd+0x5a>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <__multadd+0x84>)
 8008b82:	480d      	ldr	r0, [pc, #52]	; (8008bb8 <__multadd+0x88>)
 8008b84:	21b5      	movs	r1, #181	; 0xb5
 8008b86:	f000 fd57 	bl	8009638 <__assert_func>
 8008b8a:	6922      	ldr	r2, [r4, #16]
 8008b8c:	3202      	adds	r2, #2
 8008b8e:	f104 010c 	add.w	r1, r4, #12
 8008b92:	0092      	lsls	r2, r2, #2
 8008b94:	300c      	adds	r0, #12
 8008b96:	f7fe fc43 	bl	8007420 <memcpy>
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	f7ff ffa5 	bl	8008aec <_Bfree>
 8008ba2:	4644      	mov	r4, r8
 8008ba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ba8:	3501      	adds	r5, #1
 8008baa:	615e      	str	r6, [r3, #20]
 8008bac:	6125      	str	r5, [r4, #16]
 8008bae:	4620      	mov	r0, r4
 8008bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb4:	0800a437 	.word	0x0800a437
 8008bb8:	0800a448 	.word	0x0800a448

08008bbc <__hi0bits>:
 8008bbc:	0c03      	lsrs	r3, r0, #16
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	b9d3      	cbnz	r3, 8008bf8 <__hi0bits+0x3c>
 8008bc2:	0400      	lsls	r0, r0, #16
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bca:	bf04      	itt	eq
 8008bcc:	0200      	lsleq	r0, r0, #8
 8008bce:	3308      	addeq	r3, #8
 8008bd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bd4:	bf04      	itt	eq
 8008bd6:	0100      	lsleq	r0, r0, #4
 8008bd8:	3304      	addeq	r3, #4
 8008bda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bde:	bf04      	itt	eq
 8008be0:	0080      	lsleq	r0, r0, #2
 8008be2:	3302      	addeq	r3, #2
 8008be4:	2800      	cmp	r0, #0
 8008be6:	db05      	blt.n	8008bf4 <__hi0bits+0x38>
 8008be8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bec:	f103 0301 	add.w	r3, r3, #1
 8008bf0:	bf08      	it	eq
 8008bf2:	2320      	moveq	r3, #32
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	4770      	bx	lr
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e7e4      	b.n	8008bc6 <__hi0bits+0xa>

08008bfc <__lo0bits>:
 8008bfc:	6803      	ldr	r3, [r0, #0]
 8008bfe:	f013 0207 	ands.w	r2, r3, #7
 8008c02:	4601      	mov	r1, r0
 8008c04:	d00b      	beq.n	8008c1e <__lo0bits+0x22>
 8008c06:	07da      	lsls	r2, r3, #31
 8008c08:	d423      	bmi.n	8008c52 <__lo0bits+0x56>
 8008c0a:	0798      	lsls	r0, r3, #30
 8008c0c:	bf49      	itett	mi
 8008c0e:	085b      	lsrmi	r3, r3, #1
 8008c10:	089b      	lsrpl	r3, r3, #2
 8008c12:	2001      	movmi	r0, #1
 8008c14:	600b      	strmi	r3, [r1, #0]
 8008c16:	bf5c      	itt	pl
 8008c18:	600b      	strpl	r3, [r1, #0]
 8008c1a:	2002      	movpl	r0, #2
 8008c1c:	4770      	bx	lr
 8008c1e:	b298      	uxth	r0, r3
 8008c20:	b9a8      	cbnz	r0, 8008c4e <__lo0bits+0x52>
 8008c22:	0c1b      	lsrs	r3, r3, #16
 8008c24:	2010      	movs	r0, #16
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	b90a      	cbnz	r2, 8008c2e <__lo0bits+0x32>
 8008c2a:	3008      	adds	r0, #8
 8008c2c:	0a1b      	lsrs	r3, r3, #8
 8008c2e:	071a      	lsls	r2, r3, #28
 8008c30:	bf04      	itt	eq
 8008c32:	091b      	lsreq	r3, r3, #4
 8008c34:	3004      	addeq	r0, #4
 8008c36:	079a      	lsls	r2, r3, #30
 8008c38:	bf04      	itt	eq
 8008c3a:	089b      	lsreq	r3, r3, #2
 8008c3c:	3002      	addeq	r0, #2
 8008c3e:	07da      	lsls	r2, r3, #31
 8008c40:	d403      	bmi.n	8008c4a <__lo0bits+0x4e>
 8008c42:	085b      	lsrs	r3, r3, #1
 8008c44:	f100 0001 	add.w	r0, r0, #1
 8008c48:	d005      	beq.n	8008c56 <__lo0bits+0x5a>
 8008c4a:	600b      	str	r3, [r1, #0]
 8008c4c:	4770      	bx	lr
 8008c4e:	4610      	mov	r0, r2
 8008c50:	e7e9      	b.n	8008c26 <__lo0bits+0x2a>
 8008c52:	2000      	movs	r0, #0
 8008c54:	4770      	bx	lr
 8008c56:	2020      	movs	r0, #32
 8008c58:	4770      	bx	lr
	...

08008c5c <__i2b>:
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	460c      	mov	r4, r1
 8008c60:	2101      	movs	r1, #1
 8008c62:	f7ff ff03 	bl	8008a6c <_Balloc>
 8008c66:	4602      	mov	r2, r0
 8008c68:	b928      	cbnz	r0, 8008c76 <__i2b+0x1a>
 8008c6a:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <__i2b+0x24>)
 8008c6c:	4805      	ldr	r0, [pc, #20]	; (8008c84 <__i2b+0x28>)
 8008c6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c72:	f000 fce1 	bl	8009638 <__assert_func>
 8008c76:	2301      	movs	r3, #1
 8008c78:	6144      	str	r4, [r0, #20]
 8008c7a:	6103      	str	r3, [r0, #16]
 8008c7c:	bd10      	pop	{r4, pc}
 8008c7e:	bf00      	nop
 8008c80:	0800a437 	.word	0x0800a437
 8008c84:	0800a448 	.word	0x0800a448

08008c88 <__multiply>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	4691      	mov	r9, r2
 8008c8e:	690a      	ldr	r2, [r1, #16]
 8008c90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	bfb8      	it	lt
 8008c98:	460b      	movlt	r3, r1
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	bfbc      	itt	lt
 8008c9e:	464c      	movlt	r4, r9
 8008ca0:	4699      	movlt	r9, r3
 8008ca2:	6927      	ldr	r7, [r4, #16]
 8008ca4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	6861      	ldr	r1, [r4, #4]
 8008cac:	eb07 060a 	add.w	r6, r7, sl
 8008cb0:	42b3      	cmp	r3, r6
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	bfb8      	it	lt
 8008cb6:	3101      	addlt	r1, #1
 8008cb8:	f7ff fed8 	bl	8008a6c <_Balloc>
 8008cbc:	b930      	cbnz	r0, 8008ccc <__multiply+0x44>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	4b44      	ldr	r3, [pc, #272]	; (8008dd4 <__multiply+0x14c>)
 8008cc2:	4845      	ldr	r0, [pc, #276]	; (8008dd8 <__multiply+0x150>)
 8008cc4:	f240 115d 	movw	r1, #349	; 0x15d
 8008cc8:	f000 fcb6 	bl	8009638 <__assert_func>
 8008ccc:	f100 0514 	add.w	r5, r0, #20
 8008cd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	4543      	cmp	r3, r8
 8008cda:	d321      	bcc.n	8008d20 <__multiply+0x98>
 8008cdc:	f104 0314 	add.w	r3, r4, #20
 8008ce0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ce4:	f109 0314 	add.w	r3, r9, #20
 8008ce8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cec:	9202      	str	r2, [sp, #8]
 8008cee:	1b3a      	subs	r2, r7, r4
 8008cf0:	3a15      	subs	r2, #21
 8008cf2:	f022 0203 	bic.w	r2, r2, #3
 8008cf6:	3204      	adds	r2, #4
 8008cf8:	f104 0115 	add.w	r1, r4, #21
 8008cfc:	428f      	cmp	r7, r1
 8008cfe:	bf38      	it	cc
 8008d00:	2204      	movcc	r2, #4
 8008d02:	9201      	str	r2, [sp, #4]
 8008d04:	9a02      	ldr	r2, [sp, #8]
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d80c      	bhi.n	8008d26 <__multiply+0x9e>
 8008d0c:	2e00      	cmp	r6, #0
 8008d0e:	dd03      	ble.n	8008d18 <__multiply+0x90>
 8008d10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d05a      	beq.n	8008dce <__multiply+0x146>
 8008d18:	6106      	str	r6, [r0, #16]
 8008d1a:	b005      	add	sp, #20
 8008d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d20:	f843 2b04 	str.w	r2, [r3], #4
 8008d24:	e7d8      	b.n	8008cd8 <__multiply+0x50>
 8008d26:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d2a:	f1ba 0f00 	cmp.w	sl, #0
 8008d2e:	d024      	beq.n	8008d7a <__multiply+0xf2>
 8008d30:	f104 0e14 	add.w	lr, r4, #20
 8008d34:	46a9      	mov	r9, r5
 8008d36:	f04f 0c00 	mov.w	ip, #0
 8008d3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d3e:	f8d9 1000 	ldr.w	r1, [r9]
 8008d42:	fa1f fb82 	uxth.w	fp, r2
 8008d46:	b289      	uxth	r1, r1
 8008d48:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d50:	f8d9 2000 	ldr.w	r2, [r9]
 8008d54:	4461      	add	r1, ip
 8008d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d62:	b289      	uxth	r1, r1
 8008d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d68:	4577      	cmp	r7, lr
 8008d6a:	f849 1b04 	str.w	r1, [r9], #4
 8008d6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d72:	d8e2      	bhi.n	8008d3a <__multiply+0xb2>
 8008d74:	9a01      	ldr	r2, [sp, #4]
 8008d76:	f845 c002 	str.w	ip, [r5, r2]
 8008d7a:	9a03      	ldr	r2, [sp, #12]
 8008d7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d80:	3304      	adds	r3, #4
 8008d82:	f1b9 0f00 	cmp.w	r9, #0
 8008d86:	d020      	beq.n	8008dca <__multiply+0x142>
 8008d88:	6829      	ldr	r1, [r5, #0]
 8008d8a:	f104 0c14 	add.w	ip, r4, #20
 8008d8e:	46ae      	mov	lr, r5
 8008d90:	f04f 0a00 	mov.w	sl, #0
 8008d94:	f8bc b000 	ldrh.w	fp, [ip]
 8008d98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d9c:	fb09 220b 	mla	r2, r9, fp, r2
 8008da0:	4492      	add	sl, r2
 8008da2:	b289      	uxth	r1, r1
 8008da4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008da8:	f84e 1b04 	str.w	r1, [lr], #4
 8008dac:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008db0:	f8be 1000 	ldrh.w	r1, [lr]
 8008db4:	0c12      	lsrs	r2, r2, #16
 8008db6:	fb09 1102 	mla	r1, r9, r2, r1
 8008dba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008dbe:	4567      	cmp	r7, ip
 8008dc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dc4:	d8e6      	bhi.n	8008d94 <__multiply+0x10c>
 8008dc6:	9a01      	ldr	r2, [sp, #4]
 8008dc8:	50a9      	str	r1, [r5, r2]
 8008dca:	3504      	adds	r5, #4
 8008dcc:	e79a      	b.n	8008d04 <__multiply+0x7c>
 8008dce:	3e01      	subs	r6, #1
 8008dd0:	e79c      	b.n	8008d0c <__multiply+0x84>
 8008dd2:	bf00      	nop
 8008dd4:	0800a437 	.word	0x0800a437
 8008dd8:	0800a448 	.word	0x0800a448

08008ddc <__pow5mult>:
 8008ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de0:	4615      	mov	r5, r2
 8008de2:	f012 0203 	ands.w	r2, r2, #3
 8008de6:	4606      	mov	r6, r0
 8008de8:	460f      	mov	r7, r1
 8008dea:	d007      	beq.n	8008dfc <__pow5mult+0x20>
 8008dec:	4c25      	ldr	r4, [pc, #148]	; (8008e84 <__pow5mult+0xa8>)
 8008dee:	3a01      	subs	r2, #1
 8008df0:	2300      	movs	r3, #0
 8008df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008df6:	f7ff fe9b 	bl	8008b30 <__multadd>
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	10ad      	asrs	r5, r5, #2
 8008dfe:	d03d      	beq.n	8008e7c <__pow5mult+0xa0>
 8008e00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e02:	b97c      	cbnz	r4, 8008e24 <__pow5mult+0x48>
 8008e04:	2010      	movs	r0, #16
 8008e06:	f7ff fe29 	bl	8008a5c <malloc>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	6270      	str	r0, [r6, #36]	; 0x24
 8008e0e:	b928      	cbnz	r0, 8008e1c <__pow5mult+0x40>
 8008e10:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <__pow5mult+0xac>)
 8008e12:	481e      	ldr	r0, [pc, #120]	; (8008e8c <__pow5mult+0xb0>)
 8008e14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e18:	f000 fc0e 	bl	8009638 <__assert_func>
 8008e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e20:	6004      	str	r4, [r0, #0]
 8008e22:	60c4      	str	r4, [r0, #12]
 8008e24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e2c:	b94c      	cbnz	r4, 8008e42 <__pow5mult+0x66>
 8008e2e:	f240 2171 	movw	r1, #625	; 0x271
 8008e32:	4630      	mov	r0, r6
 8008e34:	f7ff ff12 	bl	8008c5c <__i2b>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e3e:	4604      	mov	r4, r0
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	f04f 0900 	mov.w	r9, #0
 8008e46:	07eb      	lsls	r3, r5, #31
 8008e48:	d50a      	bpl.n	8008e60 <__pow5mult+0x84>
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7ff ff1a 	bl	8008c88 <__multiply>
 8008e54:	4639      	mov	r1, r7
 8008e56:	4680      	mov	r8, r0
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f7ff fe47 	bl	8008aec <_Bfree>
 8008e5e:	4647      	mov	r7, r8
 8008e60:	106d      	asrs	r5, r5, #1
 8008e62:	d00b      	beq.n	8008e7c <__pow5mult+0xa0>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	b938      	cbnz	r0, 8008e78 <__pow5mult+0x9c>
 8008e68:	4622      	mov	r2, r4
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff ff0b 	bl	8008c88 <__multiply>
 8008e72:	6020      	str	r0, [r4, #0]
 8008e74:	f8c0 9000 	str.w	r9, [r0]
 8008e78:	4604      	mov	r4, r0
 8008e7a:	e7e4      	b.n	8008e46 <__pow5mult+0x6a>
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e82:	bf00      	nop
 8008e84:	0800a598 	.word	0x0800a598
 8008e88:	0800a3c5 	.word	0x0800a3c5
 8008e8c:	0800a448 	.word	0x0800a448

08008e90 <__lshift>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	460c      	mov	r4, r1
 8008e96:	6849      	ldr	r1, [r1, #4]
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e9e:	68a3      	ldr	r3, [r4, #8]
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	4691      	mov	r9, r2
 8008ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ea8:	f108 0601 	add.w	r6, r8, #1
 8008eac:	42b3      	cmp	r3, r6
 8008eae:	db0b      	blt.n	8008ec8 <__lshift+0x38>
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f7ff fddb 	bl	8008a6c <_Balloc>
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	b948      	cbnz	r0, 8008ece <__lshift+0x3e>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4b2a      	ldr	r3, [pc, #168]	; (8008f68 <__lshift+0xd8>)
 8008ebe:	482b      	ldr	r0, [pc, #172]	; (8008f6c <__lshift+0xdc>)
 8008ec0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ec4:	f000 fbb8 	bl	8009638 <__assert_func>
 8008ec8:	3101      	adds	r1, #1
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	e7ee      	b.n	8008eac <__lshift+0x1c>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f100 0114 	add.w	r1, r0, #20
 8008ed4:	f100 0210 	add.w	r2, r0, #16
 8008ed8:	4618      	mov	r0, r3
 8008eda:	4553      	cmp	r3, sl
 8008edc:	db37      	blt.n	8008f4e <__lshift+0xbe>
 8008ede:	6920      	ldr	r0, [r4, #16]
 8008ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ee4:	f104 0314 	add.w	r3, r4, #20
 8008ee8:	f019 091f 	ands.w	r9, r9, #31
 8008eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ef0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ef4:	d02f      	beq.n	8008f56 <__lshift+0xc6>
 8008ef6:	f1c9 0e20 	rsb	lr, r9, #32
 8008efa:	468a      	mov	sl, r1
 8008efc:	f04f 0c00 	mov.w	ip, #0
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	fa02 f209 	lsl.w	r2, r2, r9
 8008f06:	ea42 020c 	orr.w	r2, r2, ip
 8008f0a:	f84a 2b04 	str.w	r2, [sl], #4
 8008f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f12:	4298      	cmp	r0, r3
 8008f14:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f18:	d8f2      	bhi.n	8008f00 <__lshift+0x70>
 8008f1a:	1b03      	subs	r3, r0, r4
 8008f1c:	3b15      	subs	r3, #21
 8008f1e:	f023 0303 	bic.w	r3, r3, #3
 8008f22:	3304      	adds	r3, #4
 8008f24:	f104 0215 	add.w	r2, r4, #21
 8008f28:	4290      	cmp	r0, r2
 8008f2a:	bf38      	it	cc
 8008f2c:	2304      	movcc	r3, #4
 8008f2e:	f841 c003 	str.w	ip, [r1, r3]
 8008f32:	f1bc 0f00 	cmp.w	ip, #0
 8008f36:	d001      	beq.n	8008f3c <__lshift+0xac>
 8008f38:	f108 0602 	add.w	r6, r8, #2
 8008f3c:	3e01      	subs	r6, #1
 8008f3e:	4638      	mov	r0, r7
 8008f40:	612e      	str	r6, [r5, #16]
 8008f42:	4621      	mov	r1, r4
 8008f44:	f7ff fdd2 	bl	8008aec <_Bfree>
 8008f48:	4628      	mov	r0, r5
 8008f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f52:	3301      	adds	r3, #1
 8008f54:	e7c1      	b.n	8008eda <__lshift+0x4a>
 8008f56:	3904      	subs	r1, #4
 8008f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f60:	4298      	cmp	r0, r3
 8008f62:	d8f9      	bhi.n	8008f58 <__lshift+0xc8>
 8008f64:	e7ea      	b.n	8008f3c <__lshift+0xac>
 8008f66:	bf00      	nop
 8008f68:	0800a437 	.word	0x0800a437
 8008f6c:	0800a448 	.word	0x0800a448

08008f70 <__mcmp>:
 8008f70:	b530      	push	{r4, r5, lr}
 8008f72:	6902      	ldr	r2, [r0, #16]
 8008f74:	690c      	ldr	r4, [r1, #16]
 8008f76:	1b12      	subs	r2, r2, r4
 8008f78:	d10e      	bne.n	8008f98 <__mcmp+0x28>
 8008f7a:	f100 0314 	add.w	r3, r0, #20
 8008f7e:	3114      	adds	r1, #20
 8008f80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f90:	42a5      	cmp	r5, r4
 8008f92:	d003      	beq.n	8008f9c <__mcmp+0x2c>
 8008f94:	d305      	bcc.n	8008fa2 <__mcmp+0x32>
 8008f96:	2201      	movs	r2, #1
 8008f98:	4610      	mov	r0, r2
 8008f9a:	bd30      	pop	{r4, r5, pc}
 8008f9c:	4283      	cmp	r3, r0
 8008f9e:	d3f3      	bcc.n	8008f88 <__mcmp+0x18>
 8008fa0:	e7fa      	b.n	8008f98 <__mcmp+0x28>
 8008fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa6:	e7f7      	b.n	8008f98 <__mcmp+0x28>

08008fa8 <__mdiff>:
 8008fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	460c      	mov	r4, r1
 8008fae:	4606      	mov	r6, r0
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	4690      	mov	r8, r2
 8008fb6:	f7ff ffdb 	bl	8008f70 <__mcmp>
 8008fba:	1e05      	subs	r5, r0, #0
 8008fbc:	d110      	bne.n	8008fe0 <__mdiff+0x38>
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7ff fd53 	bl	8008a6c <_Balloc>
 8008fc6:	b930      	cbnz	r0, 8008fd6 <__mdiff+0x2e>
 8008fc8:	4b3a      	ldr	r3, [pc, #232]	; (80090b4 <__mdiff+0x10c>)
 8008fca:	4602      	mov	r2, r0
 8008fcc:	f240 2132 	movw	r1, #562	; 0x232
 8008fd0:	4839      	ldr	r0, [pc, #228]	; (80090b8 <__mdiff+0x110>)
 8008fd2:	f000 fb31 	bl	8009638 <__assert_func>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	bfa4      	itt	ge
 8008fe2:	4643      	movge	r3, r8
 8008fe4:	46a0      	movge	r8, r4
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fec:	bfa6      	itte	ge
 8008fee:	461c      	movge	r4, r3
 8008ff0:	2500      	movge	r5, #0
 8008ff2:	2501      	movlt	r5, #1
 8008ff4:	f7ff fd3a 	bl	8008a6c <_Balloc>
 8008ff8:	b920      	cbnz	r0, 8009004 <__mdiff+0x5c>
 8008ffa:	4b2e      	ldr	r3, [pc, #184]	; (80090b4 <__mdiff+0x10c>)
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009002:	e7e5      	b.n	8008fd0 <__mdiff+0x28>
 8009004:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009008:	6926      	ldr	r6, [r4, #16]
 800900a:	60c5      	str	r5, [r0, #12]
 800900c:	f104 0914 	add.w	r9, r4, #20
 8009010:	f108 0514 	add.w	r5, r8, #20
 8009014:	f100 0e14 	add.w	lr, r0, #20
 8009018:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800901c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009020:	f108 0210 	add.w	r2, r8, #16
 8009024:	46f2      	mov	sl, lr
 8009026:	2100      	movs	r1, #0
 8009028:	f859 3b04 	ldr.w	r3, [r9], #4
 800902c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009030:	fa1f f883 	uxth.w	r8, r3
 8009034:	fa11 f18b 	uxtah	r1, r1, fp
 8009038:	0c1b      	lsrs	r3, r3, #16
 800903a:	eba1 0808 	sub.w	r8, r1, r8
 800903e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009042:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009046:	fa1f f888 	uxth.w	r8, r8
 800904a:	1419      	asrs	r1, r3, #16
 800904c:	454e      	cmp	r6, r9
 800904e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009052:	f84a 3b04 	str.w	r3, [sl], #4
 8009056:	d8e7      	bhi.n	8009028 <__mdiff+0x80>
 8009058:	1b33      	subs	r3, r6, r4
 800905a:	3b15      	subs	r3, #21
 800905c:	f023 0303 	bic.w	r3, r3, #3
 8009060:	3304      	adds	r3, #4
 8009062:	3415      	adds	r4, #21
 8009064:	42a6      	cmp	r6, r4
 8009066:	bf38      	it	cc
 8009068:	2304      	movcc	r3, #4
 800906a:	441d      	add	r5, r3
 800906c:	4473      	add	r3, lr
 800906e:	469e      	mov	lr, r3
 8009070:	462e      	mov	r6, r5
 8009072:	4566      	cmp	r6, ip
 8009074:	d30e      	bcc.n	8009094 <__mdiff+0xec>
 8009076:	f10c 0203 	add.w	r2, ip, #3
 800907a:	1b52      	subs	r2, r2, r5
 800907c:	f022 0203 	bic.w	r2, r2, #3
 8009080:	3d03      	subs	r5, #3
 8009082:	45ac      	cmp	ip, r5
 8009084:	bf38      	it	cc
 8009086:	2200      	movcc	r2, #0
 8009088:	441a      	add	r2, r3
 800908a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800908e:	b17b      	cbz	r3, 80090b0 <__mdiff+0x108>
 8009090:	6107      	str	r7, [r0, #16]
 8009092:	e7a3      	b.n	8008fdc <__mdiff+0x34>
 8009094:	f856 8b04 	ldr.w	r8, [r6], #4
 8009098:	fa11 f288 	uxtah	r2, r1, r8
 800909c:	1414      	asrs	r4, r2, #16
 800909e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090a2:	b292      	uxth	r2, r2
 80090a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80090a8:	f84e 2b04 	str.w	r2, [lr], #4
 80090ac:	1421      	asrs	r1, r4, #16
 80090ae:	e7e0      	b.n	8009072 <__mdiff+0xca>
 80090b0:	3f01      	subs	r7, #1
 80090b2:	e7ea      	b.n	800908a <__mdiff+0xe2>
 80090b4:	0800a437 	.word	0x0800a437
 80090b8:	0800a448 	.word	0x0800a448

080090bc <__d2b>:
 80090bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090c0:	4689      	mov	r9, r1
 80090c2:	2101      	movs	r1, #1
 80090c4:	ec57 6b10 	vmov	r6, r7, d0
 80090c8:	4690      	mov	r8, r2
 80090ca:	f7ff fccf 	bl	8008a6c <_Balloc>
 80090ce:	4604      	mov	r4, r0
 80090d0:	b930      	cbnz	r0, 80090e0 <__d2b+0x24>
 80090d2:	4602      	mov	r2, r0
 80090d4:	4b25      	ldr	r3, [pc, #148]	; (800916c <__d2b+0xb0>)
 80090d6:	4826      	ldr	r0, [pc, #152]	; (8009170 <__d2b+0xb4>)
 80090d8:	f240 310a 	movw	r1, #778	; 0x30a
 80090dc:	f000 faac 	bl	8009638 <__assert_func>
 80090e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80090e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090e8:	bb35      	cbnz	r5, 8009138 <__d2b+0x7c>
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	d028      	beq.n	8009142 <__d2b+0x86>
 80090f0:	4668      	mov	r0, sp
 80090f2:	9600      	str	r6, [sp, #0]
 80090f4:	f7ff fd82 	bl	8008bfc <__lo0bits>
 80090f8:	9900      	ldr	r1, [sp, #0]
 80090fa:	b300      	cbz	r0, 800913e <__d2b+0x82>
 80090fc:	9a01      	ldr	r2, [sp, #4]
 80090fe:	f1c0 0320 	rsb	r3, r0, #32
 8009102:	fa02 f303 	lsl.w	r3, r2, r3
 8009106:	430b      	orrs	r3, r1
 8009108:	40c2      	lsrs	r2, r0
 800910a:	6163      	str	r3, [r4, #20]
 800910c:	9201      	str	r2, [sp, #4]
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	61a3      	str	r3, [r4, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	bf14      	ite	ne
 8009116:	2202      	movne	r2, #2
 8009118:	2201      	moveq	r2, #1
 800911a:	6122      	str	r2, [r4, #16]
 800911c:	b1d5      	cbz	r5, 8009154 <__d2b+0x98>
 800911e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009122:	4405      	add	r5, r0
 8009124:	f8c9 5000 	str.w	r5, [r9]
 8009128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800912c:	f8c8 0000 	str.w	r0, [r8]
 8009130:	4620      	mov	r0, r4
 8009132:	b003      	add	sp, #12
 8009134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800913c:	e7d5      	b.n	80090ea <__d2b+0x2e>
 800913e:	6161      	str	r1, [r4, #20]
 8009140:	e7e5      	b.n	800910e <__d2b+0x52>
 8009142:	a801      	add	r0, sp, #4
 8009144:	f7ff fd5a 	bl	8008bfc <__lo0bits>
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	6163      	str	r3, [r4, #20]
 800914c:	2201      	movs	r2, #1
 800914e:	6122      	str	r2, [r4, #16]
 8009150:	3020      	adds	r0, #32
 8009152:	e7e3      	b.n	800911c <__d2b+0x60>
 8009154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800915c:	f8c9 0000 	str.w	r0, [r9]
 8009160:	6918      	ldr	r0, [r3, #16]
 8009162:	f7ff fd2b 	bl	8008bbc <__hi0bits>
 8009166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800916a:	e7df      	b.n	800912c <__d2b+0x70>
 800916c:	0800a437 	.word	0x0800a437
 8009170:	0800a448 	.word	0x0800a448

08009174 <_calloc_r>:
 8009174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009176:	fba1 2402 	umull	r2, r4, r1, r2
 800917a:	b94c      	cbnz	r4, 8009190 <_calloc_r+0x1c>
 800917c:	4611      	mov	r1, r2
 800917e:	9201      	str	r2, [sp, #4]
 8009180:	f000 f87a 	bl	8009278 <_malloc_r>
 8009184:	9a01      	ldr	r2, [sp, #4]
 8009186:	4605      	mov	r5, r0
 8009188:	b930      	cbnz	r0, 8009198 <_calloc_r+0x24>
 800918a:	4628      	mov	r0, r5
 800918c:	b003      	add	sp, #12
 800918e:	bd30      	pop	{r4, r5, pc}
 8009190:	220c      	movs	r2, #12
 8009192:	6002      	str	r2, [r0, #0]
 8009194:	2500      	movs	r5, #0
 8009196:	e7f8      	b.n	800918a <_calloc_r+0x16>
 8009198:	4621      	mov	r1, r4
 800919a:	f7fe f94f 	bl	800743c <memset>
 800919e:	e7f4      	b.n	800918a <_calloc_r+0x16>

080091a0 <_free_r>:
 80091a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091a2:	2900      	cmp	r1, #0
 80091a4:	d044      	beq.n	8009230 <_free_r+0x90>
 80091a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091aa:	9001      	str	r0, [sp, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f1a1 0404 	sub.w	r4, r1, #4
 80091b2:	bfb8      	it	lt
 80091b4:	18e4      	addlt	r4, r4, r3
 80091b6:	f000 fa9b 	bl	80096f0 <__malloc_lock>
 80091ba:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <_free_r+0x94>)
 80091bc:	9801      	ldr	r0, [sp, #4]
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	b933      	cbnz	r3, 80091d0 <_free_r+0x30>
 80091c2:	6063      	str	r3, [r4, #4]
 80091c4:	6014      	str	r4, [r2, #0]
 80091c6:	b003      	add	sp, #12
 80091c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091cc:	f000 ba96 	b.w	80096fc <__malloc_unlock>
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	d908      	bls.n	80091e6 <_free_r+0x46>
 80091d4:	6825      	ldr	r5, [r4, #0]
 80091d6:	1961      	adds	r1, r4, r5
 80091d8:	428b      	cmp	r3, r1
 80091da:	bf01      	itttt	eq
 80091dc:	6819      	ldreq	r1, [r3, #0]
 80091de:	685b      	ldreq	r3, [r3, #4]
 80091e0:	1949      	addeq	r1, r1, r5
 80091e2:	6021      	streq	r1, [r4, #0]
 80091e4:	e7ed      	b.n	80091c2 <_free_r+0x22>
 80091e6:	461a      	mov	r2, r3
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	b10b      	cbz	r3, 80091f0 <_free_r+0x50>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d9fa      	bls.n	80091e6 <_free_r+0x46>
 80091f0:	6811      	ldr	r1, [r2, #0]
 80091f2:	1855      	adds	r5, r2, r1
 80091f4:	42a5      	cmp	r5, r4
 80091f6:	d10b      	bne.n	8009210 <_free_r+0x70>
 80091f8:	6824      	ldr	r4, [r4, #0]
 80091fa:	4421      	add	r1, r4
 80091fc:	1854      	adds	r4, r2, r1
 80091fe:	42a3      	cmp	r3, r4
 8009200:	6011      	str	r1, [r2, #0]
 8009202:	d1e0      	bne.n	80091c6 <_free_r+0x26>
 8009204:	681c      	ldr	r4, [r3, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	6053      	str	r3, [r2, #4]
 800920a:	4421      	add	r1, r4
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	e7da      	b.n	80091c6 <_free_r+0x26>
 8009210:	d902      	bls.n	8009218 <_free_r+0x78>
 8009212:	230c      	movs	r3, #12
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	e7d6      	b.n	80091c6 <_free_r+0x26>
 8009218:	6825      	ldr	r5, [r4, #0]
 800921a:	1961      	adds	r1, r4, r5
 800921c:	428b      	cmp	r3, r1
 800921e:	bf04      	itt	eq
 8009220:	6819      	ldreq	r1, [r3, #0]
 8009222:	685b      	ldreq	r3, [r3, #4]
 8009224:	6063      	str	r3, [r4, #4]
 8009226:	bf04      	itt	eq
 8009228:	1949      	addeq	r1, r1, r5
 800922a:	6021      	streq	r1, [r4, #0]
 800922c:	6054      	str	r4, [r2, #4]
 800922e:	e7ca      	b.n	80091c6 <_free_r+0x26>
 8009230:	b003      	add	sp, #12
 8009232:	bd30      	pop	{r4, r5, pc}
 8009234:	20007d9c 	.word	0x20007d9c

08009238 <sbrk_aligned>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	4e0e      	ldr	r6, [pc, #56]	; (8009274 <sbrk_aligned+0x3c>)
 800923c:	460c      	mov	r4, r1
 800923e:	6831      	ldr	r1, [r6, #0]
 8009240:	4605      	mov	r5, r0
 8009242:	b911      	cbnz	r1, 800924a <sbrk_aligned+0x12>
 8009244:	f000 f9e8 	bl	8009618 <_sbrk_r>
 8009248:	6030      	str	r0, [r6, #0]
 800924a:	4621      	mov	r1, r4
 800924c:	4628      	mov	r0, r5
 800924e:	f000 f9e3 	bl	8009618 <_sbrk_r>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d00a      	beq.n	800926c <sbrk_aligned+0x34>
 8009256:	1cc4      	adds	r4, r0, #3
 8009258:	f024 0403 	bic.w	r4, r4, #3
 800925c:	42a0      	cmp	r0, r4
 800925e:	d007      	beq.n	8009270 <sbrk_aligned+0x38>
 8009260:	1a21      	subs	r1, r4, r0
 8009262:	4628      	mov	r0, r5
 8009264:	f000 f9d8 	bl	8009618 <_sbrk_r>
 8009268:	3001      	adds	r0, #1
 800926a:	d101      	bne.n	8009270 <sbrk_aligned+0x38>
 800926c:	f04f 34ff 	mov.w	r4, #4294967295
 8009270:	4620      	mov	r0, r4
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	20007da0 	.word	0x20007da0

08009278 <_malloc_r>:
 8009278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927c:	1ccd      	adds	r5, r1, #3
 800927e:	f025 0503 	bic.w	r5, r5, #3
 8009282:	3508      	adds	r5, #8
 8009284:	2d0c      	cmp	r5, #12
 8009286:	bf38      	it	cc
 8009288:	250c      	movcc	r5, #12
 800928a:	2d00      	cmp	r5, #0
 800928c:	4607      	mov	r7, r0
 800928e:	db01      	blt.n	8009294 <_malloc_r+0x1c>
 8009290:	42a9      	cmp	r1, r5
 8009292:	d905      	bls.n	80092a0 <_malloc_r+0x28>
 8009294:	230c      	movs	r3, #12
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	2600      	movs	r6, #0
 800929a:	4630      	mov	r0, r6
 800929c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a0:	4e2e      	ldr	r6, [pc, #184]	; (800935c <_malloc_r+0xe4>)
 80092a2:	f000 fa25 	bl	80096f0 <__malloc_lock>
 80092a6:	6833      	ldr	r3, [r6, #0]
 80092a8:	461c      	mov	r4, r3
 80092aa:	bb34      	cbnz	r4, 80092fa <_malloc_r+0x82>
 80092ac:	4629      	mov	r1, r5
 80092ae:	4638      	mov	r0, r7
 80092b0:	f7ff ffc2 	bl	8009238 <sbrk_aligned>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	4604      	mov	r4, r0
 80092b8:	d14d      	bne.n	8009356 <_malloc_r+0xde>
 80092ba:	6834      	ldr	r4, [r6, #0]
 80092bc:	4626      	mov	r6, r4
 80092be:	2e00      	cmp	r6, #0
 80092c0:	d140      	bne.n	8009344 <_malloc_r+0xcc>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	4631      	mov	r1, r6
 80092c6:	4638      	mov	r0, r7
 80092c8:	eb04 0803 	add.w	r8, r4, r3
 80092cc:	f000 f9a4 	bl	8009618 <_sbrk_r>
 80092d0:	4580      	cmp	r8, r0
 80092d2:	d13a      	bne.n	800934a <_malloc_r+0xd2>
 80092d4:	6821      	ldr	r1, [r4, #0]
 80092d6:	3503      	adds	r5, #3
 80092d8:	1a6d      	subs	r5, r5, r1
 80092da:	f025 0503 	bic.w	r5, r5, #3
 80092de:	3508      	adds	r5, #8
 80092e0:	2d0c      	cmp	r5, #12
 80092e2:	bf38      	it	cc
 80092e4:	250c      	movcc	r5, #12
 80092e6:	4629      	mov	r1, r5
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ffa5 	bl	8009238 <sbrk_aligned>
 80092ee:	3001      	adds	r0, #1
 80092f0:	d02b      	beq.n	800934a <_malloc_r+0xd2>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	442b      	add	r3, r5
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	e00e      	b.n	8009318 <_malloc_r+0xa0>
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	1b52      	subs	r2, r2, r5
 80092fe:	d41e      	bmi.n	800933e <_malloc_r+0xc6>
 8009300:	2a0b      	cmp	r2, #11
 8009302:	d916      	bls.n	8009332 <_malloc_r+0xba>
 8009304:	1961      	adds	r1, r4, r5
 8009306:	42a3      	cmp	r3, r4
 8009308:	6025      	str	r5, [r4, #0]
 800930a:	bf18      	it	ne
 800930c:	6059      	strne	r1, [r3, #4]
 800930e:	6863      	ldr	r3, [r4, #4]
 8009310:	bf08      	it	eq
 8009312:	6031      	streq	r1, [r6, #0]
 8009314:	5162      	str	r2, [r4, r5]
 8009316:	604b      	str	r3, [r1, #4]
 8009318:	4638      	mov	r0, r7
 800931a:	f104 060b 	add.w	r6, r4, #11
 800931e:	f000 f9ed 	bl	80096fc <__malloc_unlock>
 8009322:	f026 0607 	bic.w	r6, r6, #7
 8009326:	1d23      	adds	r3, r4, #4
 8009328:	1af2      	subs	r2, r6, r3
 800932a:	d0b6      	beq.n	800929a <_malloc_r+0x22>
 800932c:	1b9b      	subs	r3, r3, r6
 800932e:	50a3      	str	r3, [r4, r2]
 8009330:	e7b3      	b.n	800929a <_malloc_r+0x22>
 8009332:	6862      	ldr	r2, [r4, #4]
 8009334:	42a3      	cmp	r3, r4
 8009336:	bf0c      	ite	eq
 8009338:	6032      	streq	r2, [r6, #0]
 800933a:	605a      	strne	r2, [r3, #4]
 800933c:	e7ec      	b.n	8009318 <_malloc_r+0xa0>
 800933e:	4623      	mov	r3, r4
 8009340:	6864      	ldr	r4, [r4, #4]
 8009342:	e7b2      	b.n	80092aa <_malloc_r+0x32>
 8009344:	4634      	mov	r4, r6
 8009346:	6876      	ldr	r6, [r6, #4]
 8009348:	e7b9      	b.n	80092be <_malloc_r+0x46>
 800934a:	230c      	movs	r3, #12
 800934c:	603b      	str	r3, [r7, #0]
 800934e:	4638      	mov	r0, r7
 8009350:	f000 f9d4 	bl	80096fc <__malloc_unlock>
 8009354:	e7a1      	b.n	800929a <_malloc_r+0x22>
 8009356:	6025      	str	r5, [r4, #0]
 8009358:	e7de      	b.n	8009318 <_malloc_r+0xa0>
 800935a:	bf00      	nop
 800935c:	20007d9c 	.word	0x20007d9c

08009360 <__ssputs_r>:
 8009360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009364:	688e      	ldr	r6, [r1, #8]
 8009366:	429e      	cmp	r6, r3
 8009368:	4682      	mov	sl, r0
 800936a:	460c      	mov	r4, r1
 800936c:	4690      	mov	r8, r2
 800936e:	461f      	mov	r7, r3
 8009370:	d838      	bhi.n	80093e4 <__ssputs_r+0x84>
 8009372:	898a      	ldrh	r2, [r1, #12]
 8009374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009378:	d032      	beq.n	80093e0 <__ssputs_r+0x80>
 800937a:	6825      	ldr	r5, [r4, #0]
 800937c:	6909      	ldr	r1, [r1, #16]
 800937e:	eba5 0901 	sub.w	r9, r5, r1
 8009382:	6965      	ldr	r5, [r4, #20]
 8009384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800938c:	3301      	adds	r3, #1
 800938e:	444b      	add	r3, r9
 8009390:	106d      	asrs	r5, r5, #1
 8009392:	429d      	cmp	r5, r3
 8009394:	bf38      	it	cc
 8009396:	461d      	movcc	r5, r3
 8009398:	0553      	lsls	r3, r2, #21
 800939a:	d531      	bpl.n	8009400 <__ssputs_r+0xa0>
 800939c:	4629      	mov	r1, r5
 800939e:	f7ff ff6b 	bl	8009278 <_malloc_r>
 80093a2:	4606      	mov	r6, r0
 80093a4:	b950      	cbnz	r0, 80093bc <__ssputs_r+0x5c>
 80093a6:	230c      	movs	r3, #12
 80093a8:	f8ca 3000 	str.w	r3, [sl]
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093bc:	6921      	ldr	r1, [r4, #16]
 80093be:	464a      	mov	r2, r9
 80093c0:	f7fe f82e 	bl	8007420 <memcpy>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	6126      	str	r6, [r4, #16]
 80093d2:	6165      	str	r5, [r4, #20]
 80093d4:	444e      	add	r6, r9
 80093d6:	eba5 0509 	sub.w	r5, r5, r9
 80093da:	6026      	str	r6, [r4, #0]
 80093dc:	60a5      	str	r5, [r4, #8]
 80093de:	463e      	mov	r6, r7
 80093e0:	42be      	cmp	r6, r7
 80093e2:	d900      	bls.n	80093e6 <__ssputs_r+0x86>
 80093e4:	463e      	mov	r6, r7
 80093e6:	6820      	ldr	r0, [r4, #0]
 80093e8:	4632      	mov	r2, r6
 80093ea:	4641      	mov	r1, r8
 80093ec:	f000 f966 	bl	80096bc <memmove>
 80093f0:	68a3      	ldr	r3, [r4, #8]
 80093f2:	1b9b      	subs	r3, r3, r6
 80093f4:	60a3      	str	r3, [r4, #8]
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	4433      	add	r3, r6
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	2000      	movs	r0, #0
 80093fe:	e7db      	b.n	80093b8 <__ssputs_r+0x58>
 8009400:	462a      	mov	r2, r5
 8009402:	f000 f981 	bl	8009708 <_realloc_r>
 8009406:	4606      	mov	r6, r0
 8009408:	2800      	cmp	r0, #0
 800940a:	d1e1      	bne.n	80093d0 <__ssputs_r+0x70>
 800940c:	6921      	ldr	r1, [r4, #16]
 800940e:	4650      	mov	r0, sl
 8009410:	f7ff fec6 	bl	80091a0 <_free_r>
 8009414:	e7c7      	b.n	80093a6 <__ssputs_r+0x46>
	...

08009418 <_svfiprintf_r>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	4698      	mov	r8, r3
 800941e:	898b      	ldrh	r3, [r1, #12]
 8009420:	061b      	lsls	r3, r3, #24
 8009422:	b09d      	sub	sp, #116	; 0x74
 8009424:	4607      	mov	r7, r0
 8009426:	460d      	mov	r5, r1
 8009428:	4614      	mov	r4, r2
 800942a:	d50e      	bpl.n	800944a <_svfiprintf_r+0x32>
 800942c:	690b      	ldr	r3, [r1, #16]
 800942e:	b963      	cbnz	r3, 800944a <_svfiprintf_r+0x32>
 8009430:	2140      	movs	r1, #64	; 0x40
 8009432:	f7ff ff21 	bl	8009278 <_malloc_r>
 8009436:	6028      	str	r0, [r5, #0]
 8009438:	6128      	str	r0, [r5, #16]
 800943a:	b920      	cbnz	r0, 8009446 <_svfiprintf_r+0x2e>
 800943c:	230c      	movs	r3, #12
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	e0d1      	b.n	80095ea <_svfiprintf_r+0x1d2>
 8009446:	2340      	movs	r3, #64	; 0x40
 8009448:	616b      	str	r3, [r5, #20]
 800944a:	2300      	movs	r3, #0
 800944c:	9309      	str	r3, [sp, #36]	; 0x24
 800944e:	2320      	movs	r3, #32
 8009450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009454:	f8cd 800c 	str.w	r8, [sp, #12]
 8009458:	2330      	movs	r3, #48	; 0x30
 800945a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009604 <_svfiprintf_r+0x1ec>
 800945e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009462:	f04f 0901 	mov.w	r9, #1
 8009466:	4623      	mov	r3, r4
 8009468:	469a      	mov	sl, r3
 800946a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800946e:	b10a      	cbz	r2, 8009474 <_svfiprintf_r+0x5c>
 8009470:	2a25      	cmp	r2, #37	; 0x25
 8009472:	d1f9      	bne.n	8009468 <_svfiprintf_r+0x50>
 8009474:	ebba 0b04 	subs.w	fp, sl, r4
 8009478:	d00b      	beq.n	8009492 <_svfiprintf_r+0x7a>
 800947a:	465b      	mov	r3, fp
 800947c:	4622      	mov	r2, r4
 800947e:	4629      	mov	r1, r5
 8009480:	4638      	mov	r0, r7
 8009482:	f7ff ff6d 	bl	8009360 <__ssputs_r>
 8009486:	3001      	adds	r0, #1
 8009488:	f000 80aa 	beq.w	80095e0 <_svfiprintf_r+0x1c8>
 800948c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800948e:	445a      	add	r2, fp
 8009490:	9209      	str	r2, [sp, #36]	; 0x24
 8009492:	f89a 3000 	ldrb.w	r3, [sl]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 80a2 	beq.w	80095e0 <_svfiprintf_r+0x1c8>
 800949c:	2300      	movs	r3, #0
 800949e:	f04f 32ff 	mov.w	r2, #4294967295
 80094a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094a6:	f10a 0a01 	add.w	sl, sl, #1
 80094aa:	9304      	str	r3, [sp, #16]
 80094ac:	9307      	str	r3, [sp, #28]
 80094ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094b2:	931a      	str	r3, [sp, #104]	; 0x68
 80094b4:	4654      	mov	r4, sl
 80094b6:	2205      	movs	r2, #5
 80094b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094bc:	4851      	ldr	r0, [pc, #324]	; (8009604 <_svfiprintf_r+0x1ec>)
 80094be:	f7f6 fe97 	bl	80001f0 <memchr>
 80094c2:	9a04      	ldr	r2, [sp, #16]
 80094c4:	b9d8      	cbnz	r0, 80094fe <_svfiprintf_r+0xe6>
 80094c6:	06d0      	lsls	r0, r2, #27
 80094c8:	bf44      	itt	mi
 80094ca:	2320      	movmi	r3, #32
 80094cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094d0:	0711      	lsls	r1, r2, #28
 80094d2:	bf44      	itt	mi
 80094d4:	232b      	movmi	r3, #43	; 0x2b
 80094d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094da:	f89a 3000 	ldrb.w	r3, [sl]
 80094de:	2b2a      	cmp	r3, #42	; 0x2a
 80094e0:	d015      	beq.n	800950e <_svfiprintf_r+0xf6>
 80094e2:	9a07      	ldr	r2, [sp, #28]
 80094e4:	4654      	mov	r4, sl
 80094e6:	2000      	movs	r0, #0
 80094e8:	f04f 0c0a 	mov.w	ip, #10
 80094ec:	4621      	mov	r1, r4
 80094ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094f2:	3b30      	subs	r3, #48	; 0x30
 80094f4:	2b09      	cmp	r3, #9
 80094f6:	d94e      	bls.n	8009596 <_svfiprintf_r+0x17e>
 80094f8:	b1b0      	cbz	r0, 8009528 <_svfiprintf_r+0x110>
 80094fa:	9207      	str	r2, [sp, #28]
 80094fc:	e014      	b.n	8009528 <_svfiprintf_r+0x110>
 80094fe:	eba0 0308 	sub.w	r3, r0, r8
 8009502:	fa09 f303 	lsl.w	r3, r9, r3
 8009506:	4313      	orrs	r3, r2
 8009508:	9304      	str	r3, [sp, #16]
 800950a:	46a2      	mov	sl, r4
 800950c:	e7d2      	b.n	80094b4 <_svfiprintf_r+0x9c>
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	1d19      	adds	r1, r3, #4
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	9103      	str	r1, [sp, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	bfbb      	ittet	lt
 800951a:	425b      	neglt	r3, r3
 800951c:	f042 0202 	orrlt.w	r2, r2, #2
 8009520:	9307      	strge	r3, [sp, #28]
 8009522:	9307      	strlt	r3, [sp, #28]
 8009524:	bfb8      	it	lt
 8009526:	9204      	strlt	r2, [sp, #16]
 8009528:	7823      	ldrb	r3, [r4, #0]
 800952a:	2b2e      	cmp	r3, #46	; 0x2e
 800952c:	d10c      	bne.n	8009548 <_svfiprintf_r+0x130>
 800952e:	7863      	ldrb	r3, [r4, #1]
 8009530:	2b2a      	cmp	r3, #42	; 0x2a
 8009532:	d135      	bne.n	80095a0 <_svfiprintf_r+0x188>
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	1d1a      	adds	r2, r3, #4
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	9203      	str	r2, [sp, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	bfb8      	it	lt
 8009540:	f04f 33ff 	movlt.w	r3, #4294967295
 8009544:	3402      	adds	r4, #2
 8009546:	9305      	str	r3, [sp, #20]
 8009548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009614 <_svfiprintf_r+0x1fc>
 800954c:	7821      	ldrb	r1, [r4, #0]
 800954e:	2203      	movs	r2, #3
 8009550:	4650      	mov	r0, sl
 8009552:	f7f6 fe4d 	bl	80001f0 <memchr>
 8009556:	b140      	cbz	r0, 800956a <_svfiprintf_r+0x152>
 8009558:	2340      	movs	r3, #64	; 0x40
 800955a:	eba0 000a 	sub.w	r0, r0, sl
 800955e:	fa03 f000 	lsl.w	r0, r3, r0
 8009562:	9b04      	ldr	r3, [sp, #16]
 8009564:	4303      	orrs	r3, r0
 8009566:	3401      	adds	r4, #1
 8009568:	9304      	str	r3, [sp, #16]
 800956a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956e:	4826      	ldr	r0, [pc, #152]	; (8009608 <_svfiprintf_r+0x1f0>)
 8009570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009574:	2206      	movs	r2, #6
 8009576:	f7f6 fe3b 	bl	80001f0 <memchr>
 800957a:	2800      	cmp	r0, #0
 800957c:	d038      	beq.n	80095f0 <_svfiprintf_r+0x1d8>
 800957e:	4b23      	ldr	r3, [pc, #140]	; (800960c <_svfiprintf_r+0x1f4>)
 8009580:	bb1b      	cbnz	r3, 80095ca <_svfiprintf_r+0x1b2>
 8009582:	9b03      	ldr	r3, [sp, #12]
 8009584:	3307      	adds	r3, #7
 8009586:	f023 0307 	bic.w	r3, r3, #7
 800958a:	3308      	adds	r3, #8
 800958c:	9303      	str	r3, [sp, #12]
 800958e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009590:	4433      	add	r3, r6
 8009592:	9309      	str	r3, [sp, #36]	; 0x24
 8009594:	e767      	b.n	8009466 <_svfiprintf_r+0x4e>
 8009596:	fb0c 3202 	mla	r2, ip, r2, r3
 800959a:	460c      	mov	r4, r1
 800959c:	2001      	movs	r0, #1
 800959e:	e7a5      	b.n	80094ec <_svfiprintf_r+0xd4>
 80095a0:	2300      	movs	r3, #0
 80095a2:	3401      	adds	r4, #1
 80095a4:	9305      	str	r3, [sp, #20]
 80095a6:	4619      	mov	r1, r3
 80095a8:	f04f 0c0a 	mov.w	ip, #10
 80095ac:	4620      	mov	r0, r4
 80095ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095b2:	3a30      	subs	r2, #48	; 0x30
 80095b4:	2a09      	cmp	r2, #9
 80095b6:	d903      	bls.n	80095c0 <_svfiprintf_r+0x1a8>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0c5      	beq.n	8009548 <_svfiprintf_r+0x130>
 80095bc:	9105      	str	r1, [sp, #20]
 80095be:	e7c3      	b.n	8009548 <_svfiprintf_r+0x130>
 80095c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80095c4:	4604      	mov	r4, r0
 80095c6:	2301      	movs	r3, #1
 80095c8:	e7f0      	b.n	80095ac <_svfiprintf_r+0x194>
 80095ca:	ab03      	add	r3, sp, #12
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	462a      	mov	r2, r5
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <_svfiprintf_r+0x1f8>)
 80095d2:	a904      	add	r1, sp, #16
 80095d4:	4638      	mov	r0, r7
 80095d6:	f7fd ffd9 	bl	800758c <_printf_float>
 80095da:	1c42      	adds	r2, r0, #1
 80095dc:	4606      	mov	r6, r0
 80095de:	d1d6      	bne.n	800958e <_svfiprintf_r+0x176>
 80095e0:	89ab      	ldrh	r3, [r5, #12]
 80095e2:	065b      	lsls	r3, r3, #25
 80095e4:	f53f af2c 	bmi.w	8009440 <_svfiprintf_r+0x28>
 80095e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095ea:	b01d      	add	sp, #116	; 0x74
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	ab03      	add	r3, sp, #12
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	462a      	mov	r2, r5
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <_svfiprintf_r+0x1f8>)
 80095f8:	a904      	add	r1, sp, #16
 80095fa:	4638      	mov	r0, r7
 80095fc:	f7fe fa6a 	bl	8007ad4 <_printf_i>
 8009600:	e7eb      	b.n	80095da <_svfiprintf_r+0x1c2>
 8009602:	bf00      	nop
 8009604:	0800a5a4 	.word	0x0800a5a4
 8009608:	0800a5ae 	.word	0x0800a5ae
 800960c:	0800758d 	.word	0x0800758d
 8009610:	08009361 	.word	0x08009361
 8009614:	0800a5aa 	.word	0x0800a5aa

08009618 <_sbrk_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d06      	ldr	r5, [pc, #24]	; (8009634 <_sbrk_r+0x1c>)
 800961c:	2300      	movs	r3, #0
 800961e:	4604      	mov	r4, r0
 8009620:	4608      	mov	r0, r1
 8009622:	602b      	str	r3, [r5, #0]
 8009624:	f7f9 fbd4 	bl	8002dd0 <_sbrk>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d102      	bne.n	8009632 <_sbrk_r+0x1a>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	b103      	cbz	r3, 8009632 <_sbrk_r+0x1a>
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	20007da4 	.word	0x20007da4

08009638 <__assert_func>:
 8009638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800963a:	4614      	mov	r4, r2
 800963c:	461a      	mov	r2, r3
 800963e:	4b09      	ldr	r3, [pc, #36]	; (8009664 <__assert_func+0x2c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4605      	mov	r5, r0
 8009644:	68d8      	ldr	r0, [r3, #12]
 8009646:	b14c      	cbz	r4, 800965c <__assert_func+0x24>
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <__assert_func+0x30>)
 800964a:	9100      	str	r1, [sp, #0]
 800964c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009650:	4906      	ldr	r1, [pc, #24]	; (800966c <__assert_func+0x34>)
 8009652:	462b      	mov	r3, r5
 8009654:	f000 f80e 	bl	8009674 <fiprintf>
 8009658:	f000 faac 	bl	8009bb4 <abort>
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <__assert_func+0x38>)
 800965e:	461c      	mov	r4, r3
 8009660:	e7f3      	b.n	800964a <__assert_func+0x12>
 8009662:	bf00      	nop
 8009664:	20000114 	.word	0x20000114
 8009668:	0800a5b5 	.word	0x0800a5b5
 800966c:	0800a5c2 	.word	0x0800a5c2
 8009670:	0800a5f0 	.word	0x0800a5f0

08009674 <fiprintf>:
 8009674:	b40e      	push	{r1, r2, r3}
 8009676:	b503      	push	{r0, r1, lr}
 8009678:	4601      	mov	r1, r0
 800967a:	ab03      	add	r3, sp, #12
 800967c:	4805      	ldr	r0, [pc, #20]	; (8009694 <fiprintf+0x20>)
 800967e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009682:	6800      	ldr	r0, [r0, #0]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	f000 f897 	bl	80097b8 <_vfiprintf_r>
 800968a:	b002      	add	sp, #8
 800968c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009690:	b003      	add	sp, #12
 8009692:	4770      	bx	lr
 8009694:	20000114 	.word	0x20000114

08009698 <__ascii_mbtowc>:
 8009698:	b082      	sub	sp, #8
 800969a:	b901      	cbnz	r1, 800969e <__ascii_mbtowc+0x6>
 800969c:	a901      	add	r1, sp, #4
 800969e:	b142      	cbz	r2, 80096b2 <__ascii_mbtowc+0x1a>
 80096a0:	b14b      	cbz	r3, 80096b6 <__ascii_mbtowc+0x1e>
 80096a2:	7813      	ldrb	r3, [r2, #0]
 80096a4:	600b      	str	r3, [r1, #0]
 80096a6:	7812      	ldrb	r2, [r2, #0]
 80096a8:	1e10      	subs	r0, r2, #0
 80096aa:	bf18      	it	ne
 80096ac:	2001      	movne	r0, #1
 80096ae:	b002      	add	sp, #8
 80096b0:	4770      	bx	lr
 80096b2:	4610      	mov	r0, r2
 80096b4:	e7fb      	b.n	80096ae <__ascii_mbtowc+0x16>
 80096b6:	f06f 0001 	mvn.w	r0, #1
 80096ba:	e7f8      	b.n	80096ae <__ascii_mbtowc+0x16>

080096bc <memmove>:
 80096bc:	4288      	cmp	r0, r1
 80096be:	b510      	push	{r4, lr}
 80096c0:	eb01 0402 	add.w	r4, r1, r2
 80096c4:	d902      	bls.n	80096cc <memmove+0x10>
 80096c6:	4284      	cmp	r4, r0
 80096c8:	4623      	mov	r3, r4
 80096ca:	d807      	bhi.n	80096dc <memmove+0x20>
 80096cc:	1e43      	subs	r3, r0, #1
 80096ce:	42a1      	cmp	r1, r4
 80096d0:	d008      	beq.n	80096e4 <memmove+0x28>
 80096d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096da:	e7f8      	b.n	80096ce <memmove+0x12>
 80096dc:	4402      	add	r2, r0
 80096de:	4601      	mov	r1, r0
 80096e0:	428a      	cmp	r2, r1
 80096e2:	d100      	bne.n	80096e6 <memmove+0x2a>
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ee:	e7f7      	b.n	80096e0 <memmove+0x24>

080096f0 <__malloc_lock>:
 80096f0:	4801      	ldr	r0, [pc, #4]	; (80096f8 <__malloc_lock+0x8>)
 80096f2:	f000 bc1f 	b.w	8009f34 <__retarget_lock_acquire_recursive>
 80096f6:	bf00      	nop
 80096f8:	20007da8 	.word	0x20007da8

080096fc <__malloc_unlock>:
 80096fc:	4801      	ldr	r0, [pc, #4]	; (8009704 <__malloc_unlock+0x8>)
 80096fe:	f000 bc1a 	b.w	8009f36 <__retarget_lock_release_recursive>
 8009702:	bf00      	nop
 8009704:	20007da8 	.word	0x20007da8

08009708 <_realloc_r>:
 8009708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970c:	4680      	mov	r8, r0
 800970e:	4614      	mov	r4, r2
 8009710:	460e      	mov	r6, r1
 8009712:	b921      	cbnz	r1, 800971e <_realloc_r+0x16>
 8009714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	4611      	mov	r1, r2
 800971a:	f7ff bdad 	b.w	8009278 <_malloc_r>
 800971e:	b92a      	cbnz	r2, 800972c <_realloc_r+0x24>
 8009720:	f7ff fd3e 	bl	80091a0 <_free_r>
 8009724:	4625      	mov	r5, r4
 8009726:	4628      	mov	r0, r5
 8009728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972c:	f000 fc6a 	bl	800a004 <_malloc_usable_size_r>
 8009730:	4284      	cmp	r4, r0
 8009732:	4607      	mov	r7, r0
 8009734:	d802      	bhi.n	800973c <_realloc_r+0x34>
 8009736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800973a:	d812      	bhi.n	8009762 <_realloc_r+0x5a>
 800973c:	4621      	mov	r1, r4
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff fd9a 	bl	8009278 <_malloc_r>
 8009744:	4605      	mov	r5, r0
 8009746:	2800      	cmp	r0, #0
 8009748:	d0ed      	beq.n	8009726 <_realloc_r+0x1e>
 800974a:	42bc      	cmp	r4, r7
 800974c:	4622      	mov	r2, r4
 800974e:	4631      	mov	r1, r6
 8009750:	bf28      	it	cs
 8009752:	463a      	movcs	r2, r7
 8009754:	f7fd fe64 	bl	8007420 <memcpy>
 8009758:	4631      	mov	r1, r6
 800975a:	4640      	mov	r0, r8
 800975c:	f7ff fd20 	bl	80091a0 <_free_r>
 8009760:	e7e1      	b.n	8009726 <_realloc_r+0x1e>
 8009762:	4635      	mov	r5, r6
 8009764:	e7df      	b.n	8009726 <_realloc_r+0x1e>

08009766 <__sfputc_r>:
 8009766:	6893      	ldr	r3, [r2, #8]
 8009768:	3b01      	subs	r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	b410      	push	{r4}
 800976e:	6093      	str	r3, [r2, #8]
 8009770:	da08      	bge.n	8009784 <__sfputc_r+0x1e>
 8009772:	6994      	ldr	r4, [r2, #24]
 8009774:	42a3      	cmp	r3, r4
 8009776:	db01      	blt.n	800977c <__sfputc_r+0x16>
 8009778:	290a      	cmp	r1, #10
 800977a:	d103      	bne.n	8009784 <__sfputc_r+0x1e>
 800977c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009780:	f000 b94a 	b.w	8009a18 <__swbuf_r>
 8009784:	6813      	ldr	r3, [r2, #0]
 8009786:	1c58      	adds	r0, r3, #1
 8009788:	6010      	str	r0, [r2, #0]
 800978a:	7019      	strb	r1, [r3, #0]
 800978c:	4608      	mov	r0, r1
 800978e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009792:	4770      	bx	lr

08009794 <__sfputs_r>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	4606      	mov	r6, r0
 8009798:	460f      	mov	r7, r1
 800979a:	4614      	mov	r4, r2
 800979c:	18d5      	adds	r5, r2, r3
 800979e:	42ac      	cmp	r4, r5
 80097a0:	d101      	bne.n	80097a6 <__sfputs_r+0x12>
 80097a2:	2000      	movs	r0, #0
 80097a4:	e007      	b.n	80097b6 <__sfputs_r+0x22>
 80097a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097aa:	463a      	mov	r2, r7
 80097ac:	4630      	mov	r0, r6
 80097ae:	f7ff ffda 	bl	8009766 <__sfputc_r>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d1f3      	bne.n	800979e <__sfputs_r+0xa>
 80097b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097b8 <_vfiprintf_r>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	460d      	mov	r5, r1
 80097be:	b09d      	sub	sp, #116	; 0x74
 80097c0:	4614      	mov	r4, r2
 80097c2:	4698      	mov	r8, r3
 80097c4:	4606      	mov	r6, r0
 80097c6:	b118      	cbz	r0, 80097d0 <_vfiprintf_r+0x18>
 80097c8:	6983      	ldr	r3, [r0, #24]
 80097ca:	b90b      	cbnz	r3, 80097d0 <_vfiprintf_r+0x18>
 80097cc:	f000 fb14 	bl	8009df8 <__sinit>
 80097d0:	4b89      	ldr	r3, [pc, #548]	; (80099f8 <_vfiprintf_r+0x240>)
 80097d2:	429d      	cmp	r5, r3
 80097d4:	d11b      	bne.n	800980e <_vfiprintf_r+0x56>
 80097d6:	6875      	ldr	r5, [r6, #4]
 80097d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097da:	07d9      	lsls	r1, r3, #31
 80097dc:	d405      	bmi.n	80097ea <_vfiprintf_r+0x32>
 80097de:	89ab      	ldrh	r3, [r5, #12]
 80097e0:	059a      	lsls	r2, r3, #22
 80097e2:	d402      	bmi.n	80097ea <_vfiprintf_r+0x32>
 80097e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e6:	f000 fba5 	bl	8009f34 <__retarget_lock_acquire_recursive>
 80097ea:	89ab      	ldrh	r3, [r5, #12]
 80097ec:	071b      	lsls	r3, r3, #28
 80097ee:	d501      	bpl.n	80097f4 <_vfiprintf_r+0x3c>
 80097f0:	692b      	ldr	r3, [r5, #16]
 80097f2:	b9eb      	cbnz	r3, 8009830 <_vfiprintf_r+0x78>
 80097f4:	4629      	mov	r1, r5
 80097f6:	4630      	mov	r0, r6
 80097f8:	f000 f96e 	bl	8009ad8 <__swsetup_r>
 80097fc:	b1c0      	cbz	r0, 8009830 <_vfiprintf_r+0x78>
 80097fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009800:	07dc      	lsls	r4, r3, #31
 8009802:	d50e      	bpl.n	8009822 <_vfiprintf_r+0x6a>
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	b01d      	add	sp, #116	; 0x74
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	4b7b      	ldr	r3, [pc, #492]	; (80099fc <_vfiprintf_r+0x244>)
 8009810:	429d      	cmp	r5, r3
 8009812:	d101      	bne.n	8009818 <_vfiprintf_r+0x60>
 8009814:	68b5      	ldr	r5, [r6, #8]
 8009816:	e7df      	b.n	80097d8 <_vfiprintf_r+0x20>
 8009818:	4b79      	ldr	r3, [pc, #484]	; (8009a00 <_vfiprintf_r+0x248>)
 800981a:	429d      	cmp	r5, r3
 800981c:	bf08      	it	eq
 800981e:	68f5      	ldreq	r5, [r6, #12]
 8009820:	e7da      	b.n	80097d8 <_vfiprintf_r+0x20>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	0598      	lsls	r0, r3, #22
 8009826:	d4ed      	bmi.n	8009804 <_vfiprintf_r+0x4c>
 8009828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982a:	f000 fb84 	bl	8009f36 <__retarget_lock_release_recursive>
 800982e:	e7e9      	b.n	8009804 <_vfiprintf_r+0x4c>
 8009830:	2300      	movs	r3, #0
 8009832:	9309      	str	r3, [sp, #36]	; 0x24
 8009834:	2320      	movs	r3, #32
 8009836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800983a:	f8cd 800c 	str.w	r8, [sp, #12]
 800983e:	2330      	movs	r3, #48	; 0x30
 8009840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a04 <_vfiprintf_r+0x24c>
 8009844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009848:	f04f 0901 	mov.w	r9, #1
 800984c:	4623      	mov	r3, r4
 800984e:	469a      	mov	sl, r3
 8009850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009854:	b10a      	cbz	r2, 800985a <_vfiprintf_r+0xa2>
 8009856:	2a25      	cmp	r2, #37	; 0x25
 8009858:	d1f9      	bne.n	800984e <_vfiprintf_r+0x96>
 800985a:	ebba 0b04 	subs.w	fp, sl, r4
 800985e:	d00b      	beq.n	8009878 <_vfiprintf_r+0xc0>
 8009860:	465b      	mov	r3, fp
 8009862:	4622      	mov	r2, r4
 8009864:	4629      	mov	r1, r5
 8009866:	4630      	mov	r0, r6
 8009868:	f7ff ff94 	bl	8009794 <__sfputs_r>
 800986c:	3001      	adds	r0, #1
 800986e:	f000 80aa 	beq.w	80099c6 <_vfiprintf_r+0x20e>
 8009872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009874:	445a      	add	r2, fp
 8009876:	9209      	str	r2, [sp, #36]	; 0x24
 8009878:	f89a 3000 	ldrb.w	r3, [sl]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 80a2 	beq.w	80099c6 <_vfiprintf_r+0x20e>
 8009882:	2300      	movs	r3, #0
 8009884:	f04f 32ff 	mov.w	r2, #4294967295
 8009888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988c:	f10a 0a01 	add.w	sl, sl, #1
 8009890:	9304      	str	r3, [sp, #16]
 8009892:	9307      	str	r3, [sp, #28]
 8009894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009898:	931a      	str	r3, [sp, #104]	; 0x68
 800989a:	4654      	mov	r4, sl
 800989c:	2205      	movs	r2, #5
 800989e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a2:	4858      	ldr	r0, [pc, #352]	; (8009a04 <_vfiprintf_r+0x24c>)
 80098a4:	f7f6 fca4 	bl	80001f0 <memchr>
 80098a8:	9a04      	ldr	r2, [sp, #16]
 80098aa:	b9d8      	cbnz	r0, 80098e4 <_vfiprintf_r+0x12c>
 80098ac:	06d1      	lsls	r1, r2, #27
 80098ae:	bf44      	itt	mi
 80098b0:	2320      	movmi	r3, #32
 80098b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b6:	0713      	lsls	r3, r2, #28
 80098b8:	bf44      	itt	mi
 80098ba:	232b      	movmi	r3, #43	; 0x2b
 80098bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c0:	f89a 3000 	ldrb.w	r3, [sl]
 80098c4:	2b2a      	cmp	r3, #42	; 0x2a
 80098c6:	d015      	beq.n	80098f4 <_vfiprintf_r+0x13c>
 80098c8:	9a07      	ldr	r2, [sp, #28]
 80098ca:	4654      	mov	r4, sl
 80098cc:	2000      	movs	r0, #0
 80098ce:	f04f 0c0a 	mov.w	ip, #10
 80098d2:	4621      	mov	r1, r4
 80098d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098d8:	3b30      	subs	r3, #48	; 0x30
 80098da:	2b09      	cmp	r3, #9
 80098dc:	d94e      	bls.n	800997c <_vfiprintf_r+0x1c4>
 80098de:	b1b0      	cbz	r0, 800990e <_vfiprintf_r+0x156>
 80098e0:	9207      	str	r2, [sp, #28]
 80098e2:	e014      	b.n	800990e <_vfiprintf_r+0x156>
 80098e4:	eba0 0308 	sub.w	r3, r0, r8
 80098e8:	fa09 f303 	lsl.w	r3, r9, r3
 80098ec:	4313      	orrs	r3, r2
 80098ee:	9304      	str	r3, [sp, #16]
 80098f0:	46a2      	mov	sl, r4
 80098f2:	e7d2      	b.n	800989a <_vfiprintf_r+0xe2>
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	1d19      	adds	r1, r3, #4
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	9103      	str	r1, [sp, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bfbb      	ittet	lt
 8009900:	425b      	neglt	r3, r3
 8009902:	f042 0202 	orrlt.w	r2, r2, #2
 8009906:	9307      	strge	r3, [sp, #28]
 8009908:	9307      	strlt	r3, [sp, #28]
 800990a:	bfb8      	it	lt
 800990c:	9204      	strlt	r2, [sp, #16]
 800990e:	7823      	ldrb	r3, [r4, #0]
 8009910:	2b2e      	cmp	r3, #46	; 0x2e
 8009912:	d10c      	bne.n	800992e <_vfiprintf_r+0x176>
 8009914:	7863      	ldrb	r3, [r4, #1]
 8009916:	2b2a      	cmp	r3, #42	; 0x2a
 8009918:	d135      	bne.n	8009986 <_vfiprintf_r+0x1ce>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	1d1a      	adds	r2, r3, #4
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	9203      	str	r2, [sp, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	bfb8      	it	lt
 8009926:	f04f 33ff 	movlt.w	r3, #4294967295
 800992a:	3402      	adds	r4, #2
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a14 <_vfiprintf_r+0x25c>
 8009932:	7821      	ldrb	r1, [r4, #0]
 8009934:	2203      	movs	r2, #3
 8009936:	4650      	mov	r0, sl
 8009938:	f7f6 fc5a 	bl	80001f0 <memchr>
 800993c:	b140      	cbz	r0, 8009950 <_vfiprintf_r+0x198>
 800993e:	2340      	movs	r3, #64	; 0x40
 8009940:	eba0 000a 	sub.w	r0, r0, sl
 8009944:	fa03 f000 	lsl.w	r0, r3, r0
 8009948:	9b04      	ldr	r3, [sp, #16]
 800994a:	4303      	orrs	r3, r0
 800994c:	3401      	adds	r4, #1
 800994e:	9304      	str	r3, [sp, #16]
 8009950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009954:	482c      	ldr	r0, [pc, #176]	; (8009a08 <_vfiprintf_r+0x250>)
 8009956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800995a:	2206      	movs	r2, #6
 800995c:	f7f6 fc48 	bl	80001f0 <memchr>
 8009960:	2800      	cmp	r0, #0
 8009962:	d03f      	beq.n	80099e4 <_vfiprintf_r+0x22c>
 8009964:	4b29      	ldr	r3, [pc, #164]	; (8009a0c <_vfiprintf_r+0x254>)
 8009966:	bb1b      	cbnz	r3, 80099b0 <_vfiprintf_r+0x1f8>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	3307      	adds	r3, #7
 800996c:	f023 0307 	bic.w	r3, r3, #7
 8009970:	3308      	adds	r3, #8
 8009972:	9303      	str	r3, [sp, #12]
 8009974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009976:	443b      	add	r3, r7
 8009978:	9309      	str	r3, [sp, #36]	; 0x24
 800997a:	e767      	b.n	800984c <_vfiprintf_r+0x94>
 800997c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009980:	460c      	mov	r4, r1
 8009982:	2001      	movs	r0, #1
 8009984:	e7a5      	b.n	80098d2 <_vfiprintf_r+0x11a>
 8009986:	2300      	movs	r3, #0
 8009988:	3401      	adds	r4, #1
 800998a:	9305      	str	r3, [sp, #20]
 800998c:	4619      	mov	r1, r3
 800998e:	f04f 0c0a 	mov.w	ip, #10
 8009992:	4620      	mov	r0, r4
 8009994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009998:	3a30      	subs	r2, #48	; 0x30
 800999a:	2a09      	cmp	r2, #9
 800999c:	d903      	bls.n	80099a6 <_vfiprintf_r+0x1ee>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0c5      	beq.n	800992e <_vfiprintf_r+0x176>
 80099a2:	9105      	str	r1, [sp, #20]
 80099a4:	e7c3      	b.n	800992e <_vfiprintf_r+0x176>
 80099a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099aa:	4604      	mov	r4, r0
 80099ac:	2301      	movs	r3, #1
 80099ae:	e7f0      	b.n	8009992 <_vfiprintf_r+0x1da>
 80099b0:	ab03      	add	r3, sp, #12
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	462a      	mov	r2, r5
 80099b6:	4b16      	ldr	r3, [pc, #88]	; (8009a10 <_vfiprintf_r+0x258>)
 80099b8:	a904      	add	r1, sp, #16
 80099ba:	4630      	mov	r0, r6
 80099bc:	f7fd fde6 	bl	800758c <_printf_float>
 80099c0:	4607      	mov	r7, r0
 80099c2:	1c78      	adds	r0, r7, #1
 80099c4:	d1d6      	bne.n	8009974 <_vfiprintf_r+0x1bc>
 80099c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c8:	07d9      	lsls	r1, r3, #31
 80099ca:	d405      	bmi.n	80099d8 <_vfiprintf_r+0x220>
 80099cc:	89ab      	ldrh	r3, [r5, #12]
 80099ce:	059a      	lsls	r2, r3, #22
 80099d0:	d402      	bmi.n	80099d8 <_vfiprintf_r+0x220>
 80099d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099d4:	f000 faaf 	bl	8009f36 <__retarget_lock_release_recursive>
 80099d8:	89ab      	ldrh	r3, [r5, #12]
 80099da:	065b      	lsls	r3, r3, #25
 80099dc:	f53f af12 	bmi.w	8009804 <_vfiprintf_r+0x4c>
 80099e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099e2:	e711      	b.n	8009808 <_vfiprintf_r+0x50>
 80099e4:	ab03      	add	r3, sp, #12
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	462a      	mov	r2, r5
 80099ea:	4b09      	ldr	r3, [pc, #36]	; (8009a10 <_vfiprintf_r+0x258>)
 80099ec:	a904      	add	r1, sp, #16
 80099ee:	4630      	mov	r0, r6
 80099f0:	f7fe f870 	bl	8007ad4 <_printf_i>
 80099f4:	e7e4      	b.n	80099c0 <_vfiprintf_r+0x208>
 80099f6:	bf00      	nop
 80099f8:	0800a71c 	.word	0x0800a71c
 80099fc:	0800a73c 	.word	0x0800a73c
 8009a00:	0800a6fc 	.word	0x0800a6fc
 8009a04:	0800a5a4 	.word	0x0800a5a4
 8009a08:	0800a5ae 	.word	0x0800a5ae
 8009a0c:	0800758d 	.word	0x0800758d
 8009a10:	08009795 	.word	0x08009795
 8009a14:	0800a5aa 	.word	0x0800a5aa

08009a18 <__swbuf_r>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	460e      	mov	r6, r1
 8009a1c:	4614      	mov	r4, r2
 8009a1e:	4605      	mov	r5, r0
 8009a20:	b118      	cbz	r0, 8009a2a <__swbuf_r+0x12>
 8009a22:	6983      	ldr	r3, [r0, #24]
 8009a24:	b90b      	cbnz	r3, 8009a2a <__swbuf_r+0x12>
 8009a26:	f000 f9e7 	bl	8009df8 <__sinit>
 8009a2a:	4b21      	ldr	r3, [pc, #132]	; (8009ab0 <__swbuf_r+0x98>)
 8009a2c:	429c      	cmp	r4, r3
 8009a2e:	d12b      	bne.n	8009a88 <__swbuf_r+0x70>
 8009a30:	686c      	ldr	r4, [r5, #4]
 8009a32:	69a3      	ldr	r3, [r4, #24]
 8009a34:	60a3      	str	r3, [r4, #8]
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	071a      	lsls	r2, r3, #28
 8009a3a:	d52f      	bpl.n	8009a9c <__swbuf_r+0x84>
 8009a3c:	6923      	ldr	r3, [r4, #16]
 8009a3e:	b36b      	cbz	r3, 8009a9c <__swbuf_r+0x84>
 8009a40:	6923      	ldr	r3, [r4, #16]
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	1ac0      	subs	r0, r0, r3
 8009a46:	6963      	ldr	r3, [r4, #20]
 8009a48:	b2f6      	uxtb	r6, r6
 8009a4a:	4283      	cmp	r3, r0
 8009a4c:	4637      	mov	r7, r6
 8009a4e:	dc04      	bgt.n	8009a5a <__swbuf_r+0x42>
 8009a50:	4621      	mov	r1, r4
 8009a52:	4628      	mov	r0, r5
 8009a54:	f000 f93c 	bl	8009cd0 <_fflush_r>
 8009a58:	bb30      	cbnz	r0, 8009aa8 <__swbuf_r+0x90>
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	60a3      	str	r3, [r4, #8]
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	6022      	str	r2, [r4, #0]
 8009a66:	701e      	strb	r6, [r3, #0]
 8009a68:	6963      	ldr	r3, [r4, #20]
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	4283      	cmp	r3, r0
 8009a6e:	d004      	beq.n	8009a7a <__swbuf_r+0x62>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	07db      	lsls	r3, r3, #31
 8009a74:	d506      	bpl.n	8009a84 <__swbuf_r+0x6c>
 8009a76:	2e0a      	cmp	r6, #10
 8009a78:	d104      	bne.n	8009a84 <__swbuf_r+0x6c>
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f000 f927 	bl	8009cd0 <_fflush_r>
 8009a82:	b988      	cbnz	r0, 8009aa8 <__swbuf_r+0x90>
 8009a84:	4638      	mov	r0, r7
 8009a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a88:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <__swbuf_r+0x9c>)
 8009a8a:	429c      	cmp	r4, r3
 8009a8c:	d101      	bne.n	8009a92 <__swbuf_r+0x7a>
 8009a8e:	68ac      	ldr	r4, [r5, #8]
 8009a90:	e7cf      	b.n	8009a32 <__swbuf_r+0x1a>
 8009a92:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <__swbuf_r+0xa0>)
 8009a94:	429c      	cmp	r4, r3
 8009a96:	bf08      	it	eq
 8009a98:	68ec      	ldreq	r4, [r5, #12]
 8009a9a:	e7ca      	b.n	8009a32 <__swbuf_r+0x1a>
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 f81a 	bl	8009ad8 <__swsetup_r>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d0cb      	beq.n	8009a40 <__swbuf_r+0x28>
 8009aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8009aac:	e7ea      	b.n	8009a84 <__swbuf_r+0x6c>
 8009aae:	bf00      	nop
 8009ab0:	0800a71c 	.word	0x0800a71c
 8009ab4:	0800a73c 	.word	0x0800a73c
 8009ab8:	0800a6fc 	.word	0x0800a6fc

08009abc <__ascii_wctomb>:
 8009abc:	b149      	cbz	r1, 8009ad2 <__ascii_wctomb+0x16>
 8009abe:	2aff      	cmp	r2, #255	; 0xff
 8009ac0:	bf85      	ittet	hi
 8009ac2:	238a      	movhi	r3, #138	; 0x8a
 8009ac4:	6003      	strhi	r3, [r0, #0]
 8009ac6:	700a      	strbls	r2, [r1, #0]
 8009ac8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009acc:	bf98      	it	ls
 8009ace:	2001      	movls	r0, #1
 8009ad0:	4770      	bx	lr
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	4770      	bx	lr
	...

08009ad8 <__swsetup_r>:
 8009ad8:	4b32      	ldr	r3, [pc, #200]	; (8009ba4 <__swsetup_r+0xcc>)
 8009ada:	b570      	push	{r4, r5, r6, lr}
 8009adc:	681d      	ldr	r5, [r3, #0]
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	b125      	cbz	r5, 8009aee <__swsetup_r+0x16>
 8009ae4:	69ab      	ldr	r3, [r5, #24]
 8009ae6:	b913      	cbnz	r3, 8009aee <__swsetup_r+0x16>
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f000 f985 	bl	8009df8 <__sinit>
 8009aee:	4b2e      	ldr	r3, [pc, #184]	; (8009ba8 <__swsetup_r+0xd0>)
 8009af0:	429c      	cmp	r4, r3
 8009af2:	d10f      	bne.n	8009b14 <__swsetup_r+0x3c>
 8009af4:	686c      	ldr	r4, [r5, #4]
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009afc:	0719      	lsls	r1, r3, #28
 8009afe:	d42c      	bmi.n	8009b5a <__swsetup_r+0x82>
 8009b00:	06dd      	lsls	r5, r3, #27
 8009b02:	d411      	bmi.n	8009b28 <__swsetup_r+0x50>
 8009b04:	2309      	movs	r3, #9
 8009b06:	6033      	str	r3, [r6, #0]
 8009b08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b0c:	81a3      	strh	r3, [r4, #12]
 8009b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b12:	e03e      	b.n	8009b92 <__swsetup_r+0xba>
 8009b14:	4b25      	ldr	r3, [pc, #148]	; (8009bac <__swsetup_r+0xd4>)
 8009b16:	429c      	cmp	r4, r3
 8009b18:	d101      	bne.n	8009b1e <__swsetup_r+0x46>
 8009b1a:	68ac      	ldr	r4, [r5, #8]
 8009b1c:	e7eb      	b.n	8009af6 <__swsetup_r+0x1e>
 8009b1e:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <__swsetup_r+0xd8>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	bf08      	it	eq
 8009b24:	68ec      	ldreq	r4, [r5, #12]
 8009b26:	e7e6      	b.n	8009af6 <__swsetup_r+0x1e>
 8009b28:	0758      	lsls	r0, r3, #29
 8009b2a:	d512      	bpl.n	8009b52 <__swsetup_r+0x7a>
 8009b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b2e:	b141      	cbz	r1, 8009b42 <__swsetup_r+0x6a>
 8009b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b34:	4299      	cmp	r1, r3
 8009b36:	d002      	beq.n	8009b3e <__swsetup_r+0x66>
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f7ff fb31 	bl	80091a0 <_free_r>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	6363      	str	r3, [r4, #52]	; 0x34
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6063      	str	r3, [r4, #4]
 8009b4e:	6923      	ldr	r3, [r4, #16]
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	f043 0308 	orr.w	r3, r3, #8
 8009b58:	81a3      	strh	r3, [r4, #12]
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	b94b      	cbnz	r3, 8009b72 <__swsetup_r+0x9a>
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b68:	d003      	beq.n	8009b72 <__swsetup_r+0x9a>
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f000 fa09 	bl	8009f84 <__smakebuf_r>
 8009b72:	89a0      	ldrh	r0, [r4, #12]
 8009b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b78:	f010 0301 	ands.w	r3, r0, #1
 8009b7c:	d00a      	beq.n	8009b94 <__swsetup_r+0xbc>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60a3      	str	r3, [r4, #8]
 8009b82:	6963      	ldr	r3, [r4, #20]
 8009b84:	425b      	negs	r3, r3
 8009b86:	61a3      	str	r3, [r4, #24]
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	b943      	cbnz	r3, 8009b9e <__swsetup_r+0xc6>
 8009b8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b90:	d1ba      	bne.n	8009b08 <__swsetup_r+0x30>
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	0781      	lsls	r1, r0, #30
 8009b96:	bf58      	it	pl
 8009b98:	6963      	ldrpl	r3, [r4, #20]
 8009b9a:	60a3      	str	r3, [r4, #8]
 8009b9c:	e7f4      	b.n	8009b88 <__swsetup_r+0xb0>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	e7f7      	b.n	8009b92 <__swsetup_r+0xba>
 8009ba2:	bf00      	nop
 8009ba4:	20000114 	.word	0x20000114
 8009ba8:	0800a71c 	.word	0x0800a71c
 8009bac:	0800a73c 	.word	0x0800a73c
 8009bb0:	0800a6fc 	.word	0x0800a6fc

08009bb4 <abort>:
 8009bb4:	b508      	push	{r3, lr}
 8009bb6:	2006      	movs	r0, #6
 8009bb8:	f000 fa54 	bl	800a064 <raise>
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f7f9 f88f 	bl	8002ce0 <_exit>
	...

08009bc4 <__sflush_r>:
 8009bc4:	898a      	ldrh	r2, [r1, #12]
 8009bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bca:	4605      	mov	r5, r0
 8009bcc:	0710      	lsls	r0, r2, #28
 8009bce:	460c      	mov	r4, r1
 8009bd0:	d458      	bmi.n	8009c84 <__sflush_r+0xc0>
 8009bd2:	684b      	ldr	r3, [r1, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dc05      	bgt.n	8009be4 <__sflush_r+0x20>
 8009bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dc02      	bgt.n	8009be4 <__sflush_r+0x20>
 8009bde:	2000      	movs	r0, #0
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	d0f9      	beq.n	8009bde <__sflush_r+0x1a>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bf0:	682f      	ldr	r7, [r5, #0]
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	d032      	beq.n	8009c5c <__sflush_r+0x98>
 8009bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	075a      	lsls	r2, r3, #29
 8009bfc:	d505      	bpl.n	8009c0a <__sflush_r+0x46>
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	1ac0      	subs	r0, r0, r3
 8009c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c04:	b10b      	cbz	r3, 8009c0a <__sflush_r+0x46>
 8009c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c08:	1ac0      	subs	r0, r0, r3
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c10:	6a21      	ldr	r1, [r4, #32]
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b0      	blx	r6
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	d106      	bne.n	8009c2a <__sflush_r+0x66>
 8009c1c:	6829      	ldr	r1, [r5, #0]
 8009c1e:	291d      	cmp	r1, #29
 8009c20:	d82c      	bhi.n	8009c7c <__sflush_r+0xb8>
 8009c22:	4a2a      	ldr	r2, [pc, #168]	; (8009ccc <__sflush_r+0x108>)
 8009c24:	40ca      	lsrs	r2, r1
 8009c26:	07d6      	lsls	r6, r2, #31
 8009c28:	d528      	bpl.n	8009c7c <__sflush_r+0xb8>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	6062      	str	r2, [r4, #4]
 8009c2e:	04d9      	lsls	r1, r3, #19
 8009c30:	6922      	ldr	r2, [r4, #16]
 8009c32:	6022      	str	r2, [r4, #0]
 8009c34:	d504      	bpl.n	8009c40 <__sflush_r+0x7c>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	d101      	bne.n	8009c3e <__sflush_r+0x7a>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	b903      	cbnz	r3, 8009c40 <__sflush_r+0x7c>
 8009c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c42:	602f      	str	r7, [r5, #0]
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d0ca      	beq.n	8009bde <__sflush_r+0x1a>
 8009c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d002      	beq.n	8009c56 <__sflush_r+0x92>
 8009c50:	4628      	mov	r0, r5
 8009c52:	f7ff faa5 	bl	80091a0 <_free_r>
 8009c56:	2000      	movs	r0, #0
 8009c58:	6360      	str	r0, [r4, #52]	; 0x34
 8009c5a:	e7c1      	b.n	8009be0 <__sflush_r+0x1c>
 8009c5c:	6a21      	ldr	r1, [r4, #32]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4628      	mov	r0, r5
 8009c62:	47b0      	blx	r6
 8009c64:	1c41      	adds	r1, r0, #1
 8009c66:	d1c7      	bne.n	8009bf8 <__sflush_r+0x34>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0c4      	beq.n	8009bf8 <__sflush_r+0x34>
 8009c6e:	2b1d      	cmp	r3, #29
 8009c70:	d001      	beq.n	8009c76 <__sflush_r+0xb2>
 8009c72:	2b16      	cmp	r3, #22
 8009c74:	d101      	bne.n	8009c7a <__sflush_r+0xb6>
 8009c76:	602f      	str	r7, [r5, #0]
 8009c78:	e7b1      	b.n	8009bde <__sflush_r+0x1a>
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	e7ad      	b.n	8009be0 <__sflush_r+0x1c>
 8009c84:	690f      	ldr	r7, [r1, #16]
 8009c86:	2f00      	cmp	r7, #0
 8009c88:	d0a9      	beq.n	8009bde <__sflush_r+0x1a>
 8009c8a:	0793      	lsls	r3, r2, #30
 8009c8c:	680e      	ldr	r6, [r1, #0]
 8009c8e:	bf08      	it	eq
 8009c90:	694b      	ldreq	r3, [r1, #20]
 8009c92:	600f      	str	r7, [r1, #0]
 8009c94:	bf18      	it	ne
 8009c96:	2300      	movne	r3, #0
 8009c98:	eba6 0807 	sub.w	r8, r6, r7
 8009c9c:	608b      	str	r3, [r1, #8]
 8009c9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ca2:	dd9c      	ble.n	8009bde <__sflush_r+0x1a>
 8009ca4:	6a21      	ldr	r1, [r4, #32]
 8009ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ca8:	4643      	mov	r3, r8
 8009caa:	463a      	mov	r2, r7
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b0      	blx	r6
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	dc06      	bgt.n	8009cc2 <__sflush_r+0xfe>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	e78e      	b.n	8009be0 <__sflush_r+0x1c>
 8009cc2:	4407      	add	r7, r0
 8009cc4:	eba8 0800 	sub.w	r8, r8, r0
 8009cc8:	e7e9      	b.n	8009c9e <__sflush_r+0xda>
 8009cca:	bf00      	nop
 8009ccc:	20400001 	.word	0x20400001

08009cd0 <_fflush_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	690b      	ldr	r3, [r1, #16]
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	b913      	cbnz	r3, 8009ce0 <_fflush_r+0x10>
 8009cda:	2500      	movs	r5, #0
 8009cdc:	4628      	mov	r0, r5
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	b118      	cbz	r0, 8009cea <_fflush_r+0x1a>
 8009ce2:	6983      	ldr	r3, [r0, #24]
 8009ce4:	b90b      	cbnz	r3, 8009cea <_fflush_r+0x1a>
 8009ce6:	f000 f887 	bl	8009df8 <__sinit>
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <_fflush_r+0x6c>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d11b      	bne.n	8009d28 <_fflush_r+0x58>
 8009cf0:	686c      	ldr	r4, [r5, #4]
 8009cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0ef      	beq.n	8009cda <_fflush_r+0xa>
 8009cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cfc:	07d0      	lsls	r0, r2, #31
 8009cfe:	d404      	bmi.n	8009d0a <_fflush_r+0x3a>
 8009d00:	0599      	lsls	r1, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_fflush_r+0x3a>
 8009d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d06:	f000 f915 	bl	8009f34 <__retarget_lock_acquire_recursive>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f7ff ff59 	bl	8009bc4 <__sflush_r>
 8009d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d14:	07da      	lsls	r2, r3, #31
 8009d16:	4605      	mov	r5, r0
 8009d18:	d4e0      	bmi.n	8009cdc <_fflush_r+0xc>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	059b      	lsls	r3, r3, #22
 8009d1e:	d4dd      	bmi.n	8009cdc <_fflush_r+0xc>
 8009d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d22:	f000 f908 	bl	8009f36 <__retarget_lock_release_recursive>
 8009d26:	e7d9      	b.n	8009cdc <_fflush_r+0xc>
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <_fflush_r+0x70>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d101      	bne.n	8009d32 <_fflush_r+0x62>
 8009d2e:	68ac      	ldr	r4, [r5, #8]
 8009d30:	e7df      	b.n	8009cf2 <_fflush_r+0x22>
 8009d32:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <_fflush_r+0x74>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	bf08      	it	eq
 8009d38:	68ec      	ldreq	r4, [r5, #12]
 8009d3a:	e7da      	b.n	8009cf2 <_fflush_r+0x22>
 8009d3c:	0800a71c 	.word	0x0800a71c
 8009d40:	0800a73c 	.word	0x0800a73c
 8009d44:	0800a6fc 	.word	0x0800a6fc

08009d48 <std>:
 8009d48:	2300      	movs	r3, #0
 8009d4a:	b510      	push	{r4, lr}
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d56:	6083      	str	r3, [r0, #8]
 8009d58:	8181      	strh	r1, [r0, #12]
 8009d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d5c:	81c2      	strh	r2, [r0, #14]
 8009d5e:	6183      	str	r3, [r0, #24]
 8009d60:	4619      	mov	r1, r3
 8009d62:	2208      	movs	r2, #8
 8009d64:	305c      	adds	r0, #92	; 0x5c
 8009d66:	f7fd fb69 	bl	800743c <memset>
 8009d6a:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <std+0x38>)
 8009d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009d6e:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <std+0x3c>)
 8009d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <std+0x40>)
 8009d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d76:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <std+0x44>)
 8009d78:	6224      	str	r4, [r4, #32]
 8009d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	bf00      	nop
 8009d80:	0800a09d 	.word	0x0800a09d
 8009d84:	0800a0bf 	.word	0x0800a0bf
 8009d88:	0800a0f7 	.word	0x0800a0f7
 8009d8c:	0800a11b 	.word	0x0800a11b

08009d90 <_cleanup_r>:
 8009d90:	4901      	ldr	r1, [pc, #4]	; (8009d98 <_cleanup_r+0x8>)
 8009d92:	f000 b8af 	b.w	8009ef4 <_fwalk_reent>
 8009d96:	bf00      	nop
 8009d98:	08009cd1 	.word	0x08009cd1

08009d9c <__sfmoreglue>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	2268      	movs	r2, #104	; 0x68
 8009da0:	1e4d      	subs	r5, r1, #1
 8009da2:	4355      	muls	r5, r2
 8009da4:	460e      	mov	r6, r1
 8009da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009daa:	f7ff fa65 	bl	8009278 <_malloc_r>
 8009dae:	4604      	mov	r4, r0
 8009db0:	b140      	cbz	r0, 8009dc4 <__sfmoreglue+0x28>
 8009db2:	2100      	movs	r1, #0
 8009db4:	e9c0 1600 	strd	r1, r6, [r0]
 8009db8:	300c      	adds	r0, #12
 8009dba:	60a0      	str	r0, [r4, #8]
 8009dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dc0:	f7fd fb3c 	bl	800743c <memset>
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}

08009dc8 <__sfp_lock_acquire>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	; (8009dd0 <__sfp_lock_acquire+0x8>)
 8009dca:	f000 b8b3 	b.w	8009f34 <__retarget_lock_acquire_recursive>
 8009dce:	bf00      	nop
 8009dd0:	20007da9 	.word	0x20007da9

08009dd4 <__sfp_lock_release>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	; (8009ddc <__sfp_lock_release+0x8>)
 8009dd6:	f000 b8ae 	b.w	8009f36 <__retarget_lock_release_recursive>
 8009dda:	bf00      	nop
 8009ddc:	20007da9 	.word	0x20007da9

08009de0 <__sinit_lock_acquire>:
 8009de0:	4801      	ldr	r0, [pc, #4]	; (8009de8 <__sinit_lock_acquire+0x8>)
 8009de2:	f000 b8a7 	b.w	8009f34 <__retarget_lock_acquire_recursive>
 8009de6:	bf00      	nop
 8009de8:	20007daa 	.word	0x20007daa

08009dec <__sinit_lock_release>:
 8009dec:	4801      	ldr	r0, [pc, #4]	; (8009df4 <__sinit_lock_release+0x8>)
 8009dee:	f000 b8a2 	b.w	8009f36 <__retarget_lock_release_recursive>
 8009df2:	bf00      	nop
 8009df4:	20007daa 	.word	0x20007daa

08009df8 <__sinit>:
 8009df8:	b510      	push	{r4, lr}
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	f7ff fff0 	bl	8009de0 <__sinit_lock_acquire>
 8009e00:	69a3      	ldr	r3, [r4, #24]
 8009e02:	b11b      	cbz	r3, 8009e0c <__sinit+0x14>
 8009e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e08:	f7ff bff0 	b.w	8009dec <__sinit_lock_release>
 8009e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e10:	6523      	str	r3, [r4, #80]	; 0x50
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <__sinit+0x68>)
 8009e14:	4a13      	ldr	r2, [pc, #76]	; (8009e64 <__sinit+0x6c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	bf04      	itt	eq
 8009e1e:	2301      	moveq	r3, #1
 8009e20:	61a3      	streq	r3, [r4, #24]
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 f820 	bl	8009e68 <__sfp>
 8009e28:	6060      	str	r0, [r4, #4]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 f81c 	bl	8009e68 <__sfp>
 8009e30:	60a0      	str	r0, [r4, #8]
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 f818 	bl	8009e68 <__sfp>
 8009e38:	2200      	movs	r2, #0
 8009e3a:	60e0      	str	r0, [r4, #12]
 8009e3c:	2104      	movs	r1, #4
 8009e3e:	6860      	ldr	r0, [r4, #4]
 8009e40:	f7ff ff82 	bl	8009d48 <std>
 8009e44:	68a0      	ldr	r0, [r4, #8]
 8009e46:	2201      	movs	r2, #1
 8009e48:	2109      	movs	r1, #9
 8009e4a:	f7ff ff7d 	bl	8009d48 <std>
 8009e4e:	68e0      	ldr	r0, [r4, #12]
 8009e50:	2202      	movs	r2, #2
 8009e52:	2112      	movs	r1, #18
 8009e54:	f7ff ff78 	bl	8009d48 <std>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	61a3      	str	r3, [r4, #24]
 8009e5c:	e7d2      	b.n	8009e04 <__sinit+0xc>
 8009e5e:	bf00      	nop
 8009e60:	0800a380 	.word	0x0800a380
 8009e64:	08009d91 	.word	0x08009d91

08009e68 <__sfp>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	4607      	mov	r7, r0
 8009e6c:	f7ff ffac 	bl	8009dc8 <__sfp_lock_acquire>
 8009e70:	4b1e      	ldr	r3, [pc, #120]	; (8009eec <__sfp+0x84>)
 8009e72:	681e      	ldr	r6, [r3, #0]
 8009e74:	69b3      	ldr	r3, [r6, #24]
 8009e76:	b913      	cbnz	r3, 8009e7e <__sfp+0x16>
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f7ff ffbd 	bl	8009df8 <__sinit>
 8009e7e:	3648      	adds	r6, #72	; 0x48
 8009e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	d503      	bpl.n	8009e90 <__sfp+0x28>
 8009e88:	6833      	ldr	r3, [r6, #0]
 8009e8a:	b30b      	cbz	r3, 8009ed0 <__sfp+0x68>
 8009e8c:	6836      	ldr	r6, [r6, #0]
 8009e8e:	e7f7      	b.n	8009e80 <__sfp+0x18>
 8009e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e94:	b9d5      	cbnz	r5, 8009ecc <__sfp+0x64>
 8009e96:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <__sfp+0x88>)
 8009e98:	60e3      	str	r3, [r4, #12]
 8009e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8009ea0:	f000 f847 	bl	8009f32 <__retarget_lock_init_recursive>
 8009ea4:	f7ff ff96 	bl	8009dd4 <__sfp_lock_release>
 8009ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009eb0:	6025      	str	r5, [r4, #0]
 8009eb2:	61a5      	str	r5, [r4, #24]
 8009eb4:	2208      	movs	r2, #8
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ebc:	f7fd fabe 	bl	800743c <memset>
 8009ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ec8:	4620      	mov	r0, r4
 8009eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ecc:	3468      	adds	r4, #104	; 0x68
 8009ece:	e7d9      	b.n	8009e84 <__sfp+0x1c>
 8009ed0:	2104      	movs	r1, #4
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	f7ff ff62 	bl	8009d9c <__sfmoreglue>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	6030      	str	r0, [r6, #0]
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d1d5      	bne.n	8009e8c <__sfp+0x24>
 8009ee0:	f7ff ff78 	bl	8009dd4 <__sfp_lock_release>
 8009ee4:	230c      	movs	r3, #12
 8009ee6:	603b      	str	r3, [r7, #0]
 8009ee8:	e7ee      	b.n	8009ec8 <__sfp+0x60>
 8009eea:	bf00      	nop
 8009eec:	0800a380 	.word	0x0800a380
 8009ef0:	ffff0001 	.word	0xffff0001

08009ef4 <_fwalk_reent>:
 8009ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef8:	4606      	mov	r6, r0
 8009efa:	4688      	mov	r8, r1
 8009efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f00:	2700      	movs	r7, #0
 8009f02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f06:	f1b9 0901 	subs.w	r9, r9, #1
 8009f0a:	d505      	bpl.n	8009f18 <_fwalk_reent+0x24>
 8009f0c:	6824      	ldr	r4, [r4, #0]
 8009f0e:	2c00      	cmp	r4, #0
 8009f10:	d1f7      	bne.n	8009f02 <_fwalk_reent+0xe>
 8009f12:	4638      	mov	r0, r7
 8009f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f18:	89ab      	ldrh	r3, [r5, #12]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d907      	bls.n	8009f2e <_fwalk_reent+0x3a>
 8009f1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f22:	3301      	adds	r3, #1
 8009f24:	d003      	beq.n	8009f2e <_fwalk_reent+0x3a>
 8009f26:	4629      	mov	r1, r5
 8009f28:	4630      	mov	r0, r6
 8009f2a:	47c0      	blx	r8
 8009f2c:	4307      	orrs	r7, r0
 8009f2e:	3568      	adds	r5, #104	; 0x68
 8009f30:	e7e9      	b.n	8009f06 <_fwalk_reent+0x12>

08009f32 <__retarget_lock_init_recursive>:
 8009f32:	4770      	bx	lr

08009f34 <__retarget_lock_acquire_recursive>:
 8009f34:	4770      	bx	lr

08009f36 <__retarget_lock_release_recursive>:
 8009f36:	4770      	bx	lr

08009f38 <__swhatbuf_r>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	460e      	mov	r6, r1
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	2900      	cmp	r1, #0
 8009f42:	b096      	sub	sp, #88	; 0x58
 8009f44:	4614      	mov	r4, r2
 8009f46:	461d      	mov	r5, r3
 8009f48:	da08      	bge.n	8009f5c <__swhatbuf_r+0x24>
 8009f4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	602a      	str	r2, [r5, #0]
 8009f52:	061a      	lsls	r2, r3, #24
 8009f54:	d410      	bmi.n	8009f78 <__swhatbuf_r+0x40>
 8009f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f5a:	e00e      	b.n	8009f7a <__swhatbuf_r+0x42>
 8009f5c:	466a      	mov	r2, sp
 8009f5e:	f000 f903 	bl	800a168 <_fstat_r>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	dbf1      	blt.n	8009f4a <__swhatbuf_r+0x12>
 8009f66:	9a01      	ldr	r2, [sp, #4]
 8009f68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f70:	425a      	negs	r2, r3
 8009f72:	415a      	adcs	r2, r3
 8009f74:	602a      	str	r2, [r5, #0]
 8009f76:	e7ee      	b.n	8009f56 <__swhatbuf_r+0x1e>
 8009f78:	2340      	movs	r3, #64	; 0x40
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	b016      	add	sp, #88	; 0x58
 8009f80:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f84 <__smakebuf_r>:
 8009f84:	898b      	ldrh	r3, [r1, #12]
 8009f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f88:	079d      	lsls	r5, r3, #30
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	d507      	bpl.n	8009fa0 <__smakebuf_r+0x1c>
 8009f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	6123      	str	r3, [r4, #16]
 8009f98:	2301      	movs	r3, #1
 8009f9a:	6163      	str	r3, [r4, #20]
 8009f9c:	b002      	add	sp, #8
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	ab01      	add	r3, sp, #4
 8009fa2:	466a      	mov	r2, sp
 8009fa4:	f7ff ffc8 	bl	8009f38 <__swhatbuf_r>
 8009fa8:	9900      	ldr	r1, [sp, #0]
 8009faa:	4605      	mov	r5, r0
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7ff f963 	bl	8009278 <_malloc_r>
 8009fb2:	b948      	cbnz	r0, 8009fc8 <__smakebuf_r+0x44>
 8009fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb8:	059a      	lsls	r2, r3, #22
 8009fba:	d4ef      	bmi.n	8009f9c <__smakebuf_r+0x18>
 8009fbc:	f023 0303 	bic.w	r3, r3, #3
 8009fc0:	f043 0302 	orr.w	r3, r3, #2
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	e7e3      	b.n	8009f90 <__smakebuf_r+0xc>
 8009fc8:	4b0d      	ldr	r3, [pc, #52]	; (800a000 <__smakebuf_r+0x7c>)
 8009fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	6020      	str	r0, [r4, #0]
 8009fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd4:	81a3      	strh	r3, [r4, #12]
 8009fd6:	9b00      	ldr	r3, [sp, #0]
 8009fd8:	6163      	str	r3, [r4, #20]
 8009fda:	9b01      	ldr	r3, [sp, #4]
 8009fdc:	6120      	str	r0, [r4, #16]
 8009fde:	b15b      	cbz	r3, 8009ff8 <__smakebuf_r+0x74>
 8009fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f000 f8d1 	bl	800a18c <_isatty_r>
 8009fea:	b128      	cbz	r0, 8009ff8 <__smakebuf_r+0x74>
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	f023 0303 	bic.w	r3, r3, #3
 8009ff2:	f043 0301 	orr.w	r3, r3, #1
 8009ff6:	81a3      	strh	r3, [r4, #12]
 8009ff8:	89a0      	ldrh	r0, [r4, #12]
 8009ffa:	4305      	orrs	r5, r0
 8009ffc:	81a5      	strh	r5, [r4, #12]
 8009ffe:	e7cd      	b.n	8009f9c <__smakebuf_r+0x18>
 800a000:	08009d91 	.word	0x08009d91

0800a004 <_malloc_usable_size_r>:
 800a004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a008:	1f18      	subs	r0, r3, #4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	bfbc      	itt	lt
 800a00e:	580b      	ldrlt	r3, [r1, r0]
 800a010:	18c0      	addlt	r0, r0, r3
 800a012:	4770      	bx	lr

0800a014 <_raise_r>:
 800a014:	291f      	cmp	r1, #31
 800a016:	b538      	push	{r3, r4, r5, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	460d      	mov	r5, r1
 800a01c:	d904      	bls.n	800a028 <_raise_r+0x14>
 800a01e:	2316      	movs	r3, #22
 800a020:	6003      	str	r3, [r0, #0]
 800a022:	f04f 30ff 	mov.w	r0, #4294967295
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a02a:	b112      	cbz	r2, 800a032 <_raise_r+0x1e>
 800a02c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a030:	b94b      	cbnz	r3, 800a046 <_raise_r+0x32>
 800a032:	4620      	mov	r0, r4
 800a034:	f000 f830 	bl	800a098 <_getpid_r>
 800a038:	462a      	mov	r2, r5
 800a03a:	4601      	mov	r1, r0
 800a03c:	4620      	mov	r0, r4
 800a03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a042:	f000 b817 	b.w	800a074 <_kill_r>
 800a046:	2b01      	cmp	r3, #1
 800a048:	d00a      	beq.n	800a060 <_raise_r+0x4c>
 800a04a:	1c59      	adds	r1, r3, #1
 800a04c:	d103      	bne.n	800a056 <_raise_r+0x42>
 800a04e:	2316      	movs	r3, #22
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	2001      	movs	r0, #1
 800a054:	e7e7      	b.n	800a026 <_raise_r+0x12>
 800a056:	2400      	movs	r4, #0
 800a058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a05c:	4628      	mov	r0, r5
 800a05e:	4798      	blx	r3
 800a060:	2000      	movs	r0, #0
 800a062:	e7e0      	b.n	800a026 <_raise_r+0x12>

0800a064 <raise>:
 800a064:	4b02      	ldr	r3, [pc, #8]	; (800a070 <raise+0xc>)
 800a066:	4601      	mov	r1, r0
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	f7ff bfd3 	b.w	800a014 <_raise_r>
 800a06e:	bf00      	nop
 800a070:	20000114 	.word	0x20000114

0800a074 <_kill_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d07      	ldr	r5, [pc, #28]	; (800a094 <_kill_r+0x20>)
 800a078:	2300      	movs	r3, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	4611      	mov	r1, r2
 800a080:	602b      	str	r3, [r5, #0]
 800a082:	f7f8 fe1d 	bl	8002cc0 <_kill>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d102      	bne.n	800a090 <_kill_r+0x1c>
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	b103      	cbz	r3, 800a090 <_kill_r+0x1c>
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	20007da4 	.word	0x20007da4

0800a098 <_getpid_r>:
 800a098:	f7f8 be0a 	b.w	8002cb0 <_getpid>

0800a09c <__sread>:
 800a09c:	b510      	push	{r4, lr}
 800a09e:	460c      	mov	r4, r1
 800a0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a4:	f000 f894 	bl	800a1d0 <_read_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	bfab      	itete	ge
 800a0ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a0b0:	181b      	addge	r3, r3, r0
 800a0b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0b6:	bfac      	ite	ge
 800a0b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0ba:	81a3      	strhlt	r3, [r4, #12]
 800a0bc:	bd10      	pop	{r4, pc}

0800a0be <__swrite>:
 800a0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c2:	461f      	mov	r7, r3
 800a0c4:	898b      	ldrh	r3, [r1, #12]
 800a0c6:	05db      	lsls	r3, r3, #23
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	4616      	mov	r6, r2
 800a0ce:	d505      	bpl.n	800a0dc <__swrite+0x1e>
 800a0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f000 f868 	bl	800a1ac <_lseek_r>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f2:	f000 b817 	b.w	800a124 <_write_r>

0800a0f6 <__sseek>:
 800a0f6:	b510      	push	{r4, lr}
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fe:	f000 f855 	bl	800a1ac <_lseek_r>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	bf15      	itete	ne
 800a108:	6560      	strne	r0, [r4, #84]	; 0x54
 800a10a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a10e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a112:	81a3      	strheq	r3, [r4, #12]
 800a114:	bf18      	it	ne
 800a116:	81a3      	strhne	r3, [r4, #12]
 800a118:	bd10      	pop	{r4, pc}

0800a11a <__sclose>:
 800a11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11e:	f000 b813 	b.w	800a148 <_close_r>
	...

0800a124 <_write_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4d07      	ldr	r5, [pc, #28]	; (800a144 <_write_r+0x20>)
 800a128:	4604      	mov	r4, r0
 800a12a:	4608      	mov	r0, r1
 800a12c:	4611      	mov	r1, r2
 800a12e:	2200      	movs	r2, #0
 800a130:	602a      	str	r2, [r5, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	f7f8 fdfb 	bl	8002d2e <_write>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_write_r+0x1e>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_write_r+0x1e>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	20007da4 	.word	0x20007da4

0800a148 <_close_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4d06      	ldr	r5, [pc, #24]	; (800a164 <_close_r+0x1c>)
 800a14c:	2300      	movs	r3, #0
 800a14e:	4604      	mov	r4, r0
 800a150:	4608      	mov	r0, r1
 800a152:	602b      	str	r3, [r5, #0]
 800a154:	f7f8 fe07 	bl	8002d66 <_close>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d102      	bne.n	800a162 <_close_r+0x1a>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	b103      	cbz	r3, 800a162 <_close_r+0x1a>
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	20007da4 	.word	0x20007da4

0800a168 <_fstat_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4d07      	ldr	r5, [pc, #28]	; (800a188 <_fstat_r+0x20>)
 800a16c:	2300      	movs	r3, #0
 800a16e:	4604      	mov	r4, r0
 800a170:	4608      	mov	r0, r1
 800a172:	4611      	mov	r1, r2
 800a174:	602b      	str	r3, [r5, #0]
 800a176:	f7f8 fe02 	bl	8002d7e <_fstat>
 800a17a:	1c43      	adds	r3, r0, #1
 800a17c:	d102      	bne.n	800a184 <_fstat_r+0x1c>
 800a17e:	682b      	ldr	r3, [r5, #0]
 800a180:	b103      	cbz	r3, 800a184 <_fstat_r+0x1c>
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	bd38      	pop	{r3, r4, r5, pc}
 800a186:	bf00      	nop
 800a188:	20007da4 	.word	0x20007da4

0800a18c <_isatty_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	4d06      	ldr	r5, [pc, #24]	; (800a1a8 <_isatty_r+0x1c>)
 800a190:	2300      	movs	r3, #0
 800a192:	4604      	mov	r4, r0
 800a194:	4608      	mov	r0, r1
 800a196:	602b      	str	r3, [r5, #0]
 800a198:	f7f8 fe01 	bl	8002d9e <_isatty>
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d102      	bne.n	800a1a6 <_isatty_r+0x1a>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	b103      	cbz	r3, 800a1a6 <_isatty_r+0x1a>
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	20007da4 	.word	0x20007da4

0800a1ac <_lseek_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4d07      	ldr	r5, [pc, #28]	; (800a1cc <_lseek_r+0x20>)
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	4608      	mov	r0, r1
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	602a      	str	r2, [r5, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f7f8 fdfa 	bl	8002db4 <_lseek>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d102      	bne.n	800a1ca <_lseek_r+0x1e>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	b103      	cbz	r3, 800a1ca <_lseek_r+0x1e>
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	20007da4 	.word	0x20007da4

0800a1d0 <_read_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d07      	ldr	r5, [pc, #28]	; (800a1f0 <_read_r+0x20>)
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	4611      	mov	r1, r2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	602a      	str	r2, [r5, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f7f8 fd88 	bl	8002cf4 <_read>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_read_r+0x1e>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_read_r+0x1e>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	20007da4 	.word	0x20007da4

0800a1f4 <_init>:
 800a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f6:	bf00      	nop
 800a1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fa:	bc08      	pop	{r3}
 800a1fc:	469e      	mov	lr, r3
 800a1fe:	4770      	bx	lr

0800a200 <_fini>:
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a202:	bf00      	nop
 800a204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a206:	bc08      	pop	{r3}
 800a208:	469e      	mov	lr, r3
 800a20a:	4770      	bx	lr
