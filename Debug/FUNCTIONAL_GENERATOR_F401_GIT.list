
FUNCTIONAL_GENERATOR_F401_GIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b01c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800b1c0  0800b1c0  0001b1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b71c  0800b71c  000205b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b71c  0800b71c  0001b71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b724  0800b724  000205b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b724  0800b724  0001b724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b728  0800b728  0001b728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b4  20000000  0800b72c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b30  200005b4  0800bce0  000205b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200080e4  0800bce0  000280e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e4d  00000000  00000000  000205e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003796  00000000  00000000  00036431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00039bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6e4  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017517  00000000  00000000  0005690c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988d2  00000000  00000000  0006de23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001066f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b4  00000000  00000000  00106748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005b4 	.word	0x200005b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1a4 	.word	0x0800b1a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005b8 	.word	0x200005b8
 80001dc:	0800b1a4 	.word	0x0800b1a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <DAC_stop>:
static uint16_t *sign_pointer = NULL;	/*	Указатель на массив со значениями выбранного сигнала	*/
static uint32_t array_size = 0;
static bool dma_started = false;

void DAC_stop()
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	TIM1->DIER &=  ~TIM_DIER_UDE;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <DAC_stop+0x28>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <DAC_stop+0x28>)
 8000fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000faa:	60d3      	str	r3, [r2, #12]
	TIM1->CR1 &= ~TIM_CR1_CEN;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <DAC_stop+0x28>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <DAC_stop+0x28>)
 8000fb2:	f023 0301 	bic.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <DAC_start>:
void DAC_start(signal_t signal, float freq)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
 8000fd4:	71fb      	strb	r3, [r7, #7]
	if( signal == SAW || signal == REVERSE_SAW ) /* Для обычной и обратной пилы настройки одинаковые	*/
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d002      	beq.n	8000fe2 <DAC_start+0x1a>
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d118      	bne.n	8001014 <DAC_start+0x4c>
	{
		one_dac_tick = (1000 / freq) / (51);
 8000fe2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80010f4 <DAC_start+0x12c>
 8000fe6:	edd7 7a00 	vldr	s15, [r7]
 8000fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fee:	eddf 6a42 	vldr	s13, [pc, #264]	; 80010f8 <DAC_start+0x130>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	4b41      	ldr	r3, [pc, #260]	; (80010fc <DAC_start+0x134>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
		sign_pointer = (signal == SAW) ? saw_sign : revSaw_sign;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d101      	bne.n	8001006 <DAC_start+0x3e>
 8001002:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <DAC_start+0x138>)
 8001004:	e000      	b.n	8001008 <DAC_start+0x40>
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <DAC_start+0x13c>)
 8001008:	4a3f      	ldr	r2, [pc, #252]	; (8001108 <DAC_start+0x140>)
 800100a:	6013      	str	r3, [r2, #0]
		array_size = sizeof(saw_sign) / sizeof(uint16_t);
 800100c:	4b3f      	ldr	r3, [pc, #252]	; (800110c <DAC_start+0x144>)
 800100e:	2233      	movs	r2, #51	; 0x33
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e02d      	b.n	8001070 <DAC_start+0xa8>
	}
	else if(signal == TRIANGLE)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d113      	bne.n	8001042 <DAC_start+0x7a>
	{
		/*	Частота таймера базовая будет 64 Мгц. Предделитель допустим всегда 1. Шаг ЦАПа 5
			51*2 = 102 ступенек если выбрать шаг 5. Вычислили тик ЦАПа в мкс чтобы настроить на него таймер. 	*/
		one_dac_tick = (1000 / freq) / (102);
 800101a:	eddf 6a36 	vldr	s13, [pc, #216]	; 80010f4 <DAC_start+0x12c>
 800101e:	edd7 7a00 	vldr	s15, [r7]
 8001022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001026:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001110 <DAC_start+0x148>
 800102a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <DAC_start+0x134>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
		sign_pointer = triangle_sign;
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <DAC_start+0x140>)
 8001036:	4a37      	ldr	r2, [pc, #220]	; (8001114 <DAC_start+0x14c>)
 8001038:	601a      	str	r2, [r3, #0]
		array_size = sizeof(triangle_sign) / sizeof(uint16_t);
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <DAC_start+0x144>)
 800103c:	2266      	movs	r2, #102	; 0x66
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e016      	b.n	8001070 <DAC_start+0xa8>
	}
	else if( signal == SIN )
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d113      	bne.n	8001070 <DAC_start+0xa8>
	{
		one_dac_tick = (1000 / freq) / (256);
 8001048:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80010f4 <DAC_start+0x12c>
 800104c:	edd7 7a00 	vldr	s15, [r7]
 8001050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001054:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001118 <DAC_start+0x150>
 8001058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <DAC_start+0x134>)
 800105e:	edc3 7a00 	vstr	s15, [r3]
		sign_pointer = sin_tab;
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <DAC_start+0x140>)
 8001064:	4a2d      	ldr	r2, [pc, #180]	; (800111c <DAC_start+0x154>)
 8001066:	601a      	str	r2, [r3, #0]
		array_size = sizeof(sin_tab) / sizeof(uint16_t);
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <DAC_start+0x144>)
 800106a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106e:	601a      	str	r2, [r3, #0]
	}
	tim3_counter_period = one_dac_tick / 0.015625;
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <DAC_start+0x134>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa6f 	bl	8000558 <__aeabi_f2d>
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <DAC_start+0x158>)
 8001080:	f7ff fbec 	bl	800085c <__aeabi_ddiv>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fd94 	bl	8000bb8 <__aeabi_d2uiz>
 8001090:	4603      	mov	r3, r0
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <DAC_start+0x15c>)
 8001096:	801a      	strh	r2, [r3, #0]
	TIM1->PSC = 0;
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <DAC_start+0x160>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = tim3_counter_period;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <DAC_start+0x15c>)
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <DAC_start+0x160>)
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CNT = 0;
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <DAC_start+0x160>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

	if( !dma_started ) 	/*	Запуск ДМА должен происходить только один раз	*/
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <DAC_start+0x164>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f083 0301 	eor.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00c      	beq.n	80010d4 <DAC_start+0x10c>
	{
		HAL_DMA_Start_IT( htim1.hdma[TIM_DMA_ID_UPDATE], (uint32_t)sign_pointer, (uint32_t)&GPIOB->ODR, array_size );
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <DAC_start+0x168>)
 80010bc:	6a18      	ldr	r0, [r3, #32]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <DAC_start+0x140>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <DAC_start+0x144>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <DAC_start+0x16c>)
 80010ca:	f002 fc27 	bl	800391c <HAL_DMA_Start_IT>
		dma_started = true;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <DAC_start+0x164>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
	}
	TIM1->DIER |=  TIM_DIER_UDE;	/* Разрешаем таймеру триггерить ДМА	*/
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <DAC_start+0x160>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <DAC_start+0x160>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	60d3      	str	r3, [r2, #12]
	TIM1->CR1 |= TIM_CR1_CEN;		/* Разрешаем таймеру работать	*/
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <DAC_start+0x160>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <DAC_start+0x160>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	447a0000 	.word	0x447a0000
 80010f8:	424c0000 	.word	0x424c0000
 80010fc:	200005d0 	.word	0x200005d0
 8001100:	20000200 	.word	0x20000200
 8001104:	20000268 	.word	0x20000268
 8001108:	200005d8 	.word	0x200005d8
 800110c:	200005dc 	.word	0x200005dc
 8001110:	42cc0000 	.word	0x42cc0000
 8001114:	200002d0 	.word	0x200002d0
 8001118:	43800000 	.word	0x43800000
 800111c:	20000000 	.word	0x20000000
 8001120:	3f900000 	.word	0x3f900000
 8001124:	200005d4 	.word	0x200005d4
 8001128:	40010000 	.word	0x40010000
 800112c:	200005e0 	.word	0x200005e0
 8001130:	20000894 	.word	0x20000894
 8001134:	40020414 	.word	0x40020414

08001138 <MAX7219_write>:
#include "MAX7219.h"

static max7219_init_t *MAX7219_Handler;	

static HAL_StatusTypeDef MAX7219_write(uint8_t reg, uint8_t data)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef result;
	uint8_t value[2];
	value[0] = reg;
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	733b      	strb	r3, [r7, #12]
	value[1] = data;
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);	// Строб --\__		
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	480c      	ldr	r0, [pc, #48]	; (8001188 <MAX7219_write+0x50>)
 8001158:	f003 f83e 	bl	80041d8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi1, value, 2, 1000);	
 800115c:	f107 010c 	add.w	r1, r7, #12
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	2202      	movs	r2, #2
 8001166:	4809      	ldr	r0, [pc, #36]	; (800118c <MAX7219_write+0x54>)
 8001168:	f003 fd81 	bl	8004c6e <HAL_SPI_Transmit>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);		// Строб __/
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001176:	4804      	ldr	r0, [pc, #16]	; (8001188 <MAX7219_write+0x50>)
 8001178:	f003 f82e 	bl	80041d8 <HAL_GPIO_WritePin>
	return result;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000
 800118c:	2000083c 	.word	0x2000083c

08001190 <MAX7219_setDecode>:
//---------------------------------------------------------
static HAL_StatusTypeDef MAX7219_setDecode(uint8_t mode)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	if(MAX7219_Handler->decode_mode != mode)	
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MAX7219_setDecode+0x38>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	7b1b      	ldrb	r3, [r3, #12]
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d00a      	beq.n	80011bc <MAX7219_setDecode+0x2c>
	{
		MAX7219_Handler->decode_mode = mode;		/* Присовим новый режим, чтобы его потом отслеживать	*/
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MAX7219_setDecode+0x38>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	731a      	strb	r2, [r3, #12]
		return ( MAX7219_write(MAX7219_DECODE_MODE_REG, mode) );	
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4619      	mov	r1, r3
 80011b2:	2009      	movs	r0, #9
 80011b4:	f7ff ffc0 	bl	8001138 <MAX7219_write>
 80011b8:	4603      	mov	r3, r0
 80011ba:	e000      	b.n	80011be <MAX7219_setDecode+0x2e>
	}
	return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200005e4 	.word	0x200005e4

080011cc <MAX7219_convertSymbol>:
void MAX7219_sendDigit(uint8_t seg, uint8_t digit)
{
	MAX7219_write(seg, digit);
}
//---------------------------------------------------------
static char MAX7219_convertSymbol(char symbol) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	switch(symbol) {
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b5a      	cmp	r3, #90	; 0x5a
 80011da:	f200 8117 	bhi.w	800140c <MAX7219_convertSymbol+0x240>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <MAX7219_convertSymbol+0x18>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	08001351 	.word	0x08001351
 80011e8:	08001355 	.word	0x08001355
 80011ec:	08001359 	.word	0x08001359
 80011f0:	0800135d 	.word	0x0800135d
 80011f4:	08001361 	.word	0x08001361
 80011f8:	08001365 	.word	0x08001365
 80011fc:	08001369 	.word	0x08001369
 8001200:	0800136d 	.word	0x0800136d
 8001204:	08001371 	.word	0x08001371
 8001208:	08001375 	.word	0x08001375
 800120c:	0800140d 	.word	0x0800140d
 8001210:	0800140d 	.word	0x0800140d
 8001214:	0800140d 	.word	0x0800140d
 8001218:	0800140d 	.word	0x0800140d
 800121c:	0800140d 	.word	0x0800140d
 8001220:	0800140d 	.word	0x0800140d
 8001224:	0800140d 	.word	0x0800140d
 8001228:	0800140d 	.word	0x0800140d
 800122c:	0800140d 	.word	0x0800140d
 8001230:	0800140d 	.word	0x0800140d
 8001234:	0800140d 	.word	0x0800140d
 8001238:	0800140d 	.word	0x0800140d
 800123c:	0800140d 	.word	0x0800140d
 8001240:	0800140d 	.word	0x0800140d
 8001244:	0800140d 	.word	0x0800140d
 8001248:	0800140d 	.word	0x0800140d
 800124c:	0800140d 	.word	0x0800140d
 8001250:	0800140d 	.word	0x0800140d
 8001254:	0800140d 	.word	0x0800140d
 8001258:	0800140d 	.word	0x0800140d
 800125c:	0800140d 	.word	0x0800140d
 8001260:	0800140d 	.word	0x0800140d
 8001264:	0800140d 	.word	0x0800140d
 8001268:	0800140d 	.word	0x0800140d
 800126c:	0800140d 	.word	0x0800140d
 8001270:	0800140d 	.word	0x0800140d
 8001274:	0800140d 	.word	0x0800140d
 8001278:	0800140d 	.word	0x0800140d
 800127c:	0800140d 	.word	0x0800140d
 8001280:	0800140d 	.word	0x0800140d
 8001284:	0800140d 	.word	0x0800140d
 8001288:	0800140d 	.word	0x0800140d
 800128c:	0800140d 	.word	0x0800140d
 8001290:	0800140d 	.word	0x0800140d
 8001294:	0800140d 	.word	0x0800140d
 8001298:	08001409 	.word	0x08001409
 800129c:	0800140d 	.word	0x0800140d
 80012a0:	0800140d 	.word	0x0800140d
 80012a4:	08001379 	.word	0x08001379
 80012a8:	0800137d 	.word	0x0800137d
 80012ac:	08001381 	.word	0x08001381
 80012b0:	08001385 	.word	0x08001385
 80012b4:	08001389 	.word	0x08001389
 80012b8:	0800138d 	.word	0x0800138d
 80012bc:	08001391 	.word	0x08001391
 80012c0:	08001395 	.word	0x08001395
 80012c4:	08001399 	.word	0x08001399
 80012c8:	0800139d 	.word	0x0800139d
 80012cc:	0800140d 	.word	0x0800140d
 80012d0:	0800140d 	.word	0x0800140d
 80012d4:	0800140d 	.word	0x0800140d
 80012d8:	0800140d 	.word	0x0800140d
 80012dc:	0800140d 	.word	0x0800140d
 80012e0:	0800140d 	.word	0x0800140d
 80012e4:	0800140d 	.word	0x0800140d
 80012e8:	080013a1 	.word	0x080013a1
 80012ec:	080013a5 	.word	0x080013a5
 80012f0:	080013a9 	.word	0x080013a9
 80012f4:	080013ad 	.word	0x080013ad
 80012f8:	080013b1 	.word	0x080013b1
 80012fc:	080013b5 	.word	0x080013b5
 8001300:	080013b9 	.word	0x080013b9
 8001304:	080013bd 	.word	0x080013bd
 8001308:	080013c1 	.word	0x080013c1
 800130c:	080013c5 	.word	0x080013c5
 8001310:	080013c9 	.word	0x080013c9
 8001314:	080013cd 	.word	0x080013cd
 8001318:	080013d1 	.word	0x080013d1
 800131c:	080013d5 	.word	0x080013d5
 8001320:	080013d9 	.word	0x080013d9
 8001324:	080013dd 	.word	0x080013dd
 8001328:	080013e1 	.word	0x080013e1
 800132c:	080013e5 	.word	0x080013e5
 8001330:	080013e9 	.word	0x080013e9
 8001334:	080013ed 	.word	0x080013ed
 8001338:	080013f1 	.word	0x080013f1
 800133c:	080013f5 	.word	0x080013f5
 8001340:	080013f9 	.word	0x080013f9
 8001344:	080013fd 	.word	0x080013fd
 8001348:	08001401 	.word	0x08001401
 800134c:	08001405 	.word	0x08001405
		case 0: return _0;
 8001350:	237e      	movs	r3, #126	; 0x7e
 8001352:	e05c      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 1: return _1;
 8001354:	2330      	movs	r3, #48	; 0x30
 8001356:	e05a      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 2: return _2;
 8001358:	236d      	movs	r3, #109	; 0x6d
 800135a:	e058      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 3: return _3;
 800135c:	2379      	movs	r3, #121	; 0x79
 800135e:	e056      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 4: return _4;
 8001360:	2333      	movs	r3, #51	; 0x33
 8001362:	e054      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 5: return _5;
 8001364:	235b      	movs	r3, #91	; 0x5b
 8001366:	e052      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 6: return _6;
 8001368:	235f      	movs	r3, #95	; 0x5f
 800136a:	e050      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 7: return _7;
 800136c:	2370      	movs	r3, #112	; 0x70
 800136e:	e04e      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 8: return _8;
 8001370:	237f      	movs	r3, #127	; 0x7f
 8001372:	e04c      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 9: return _9;
 8001374:	237b      	movs	r3, #123	; 0x7b
 8001376:	e04a      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '0': return _0;
 8001378:	237e      	movs	r3, #126	; 0x7e
 800137a:	e048      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '1': return _1;
 800137c:	2330      	movs	r3, #48	; 0x30
 800137e:	e046      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '2': return _2;
 8001380:	236d      	movs	r3, #109	; 0x6d
 8001382:	e044      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '3': return _3;
 8001384:	2379      	movs	r3, #121	; 0x79
 8001386:	e042      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '4': return _4;
 8001388:	2333      	movs	r3, #51	; 0x33
 800138a:	e040      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '5': return _5;
 800138c:	235b      	movs	r3, #91	; 0x5b
 800138e:	e03e      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '6': return _6;
 8001390:	235f      	movs	r3, #95	; 0x5f
 8001392:	e03c      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '7': return _7;
 8001394:	2370      	movs	r3, #112	; 0x70
 8001396:	e03a      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '8': return _8;
 8001398:	237f      	movs	r3, #127	; 0x7f
 800139a:	e038      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '9': return _9;
 800139c:	237b      	movs	r3, #123	; 0x7b
 800139e:	e036      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'A': return _A;
 80013a0:	2377      	movs	r3, #119	; 0x77
 80013a2:	e034      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'B': return _B;
 80013a4:	231f      	movs	r3, #31
 80013a6:	e032      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'C': return _C;
 80013a8:	234e      	movs	r3, #78	; 0x4e
 80013aa:	e030      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'D': return _D;
 80013ac:	233d      	movs	r3, #61	; 0x3d
 80013ae:	e02e      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'E': return _E;
 80013b0:	234f      	movs	r3, #79	; 0x4f
 80013b2:	e02c      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'F': return _F;
 80013b4:	2347      	movs	r3, #71	; 0x47
 80013b6:	e02a      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'G': return _G;
 80013b8:	235e      	movs	r3, #94	; 0x5e
 80013ba:	e028      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'H': return _H;
 80013bc:	2337      	movs	r3, #55	; 0x37
 80013be:	e026      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'I': return _I;
 80013c0:	2330      	movs	r3, #48	; 0x30
 80013c2:	e024      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'J': return _J;
 80013c4:	233c      	movs	r3, #60	; 0x3c
 80013c6:	e022      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'K': return _K;
 80013c8:	232f      	movs	r3, #47	; 0x2f
 80013ca:	e020      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'L': return _L;
 80013cc:	230e      	movs	r3, #14
 80013ce:	e01e      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'M': return _M;
 80013d0:	2355      	movs	r3, #85	; 0x55
 80013d2:	e01c      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'N': return _N;
 80013d4:	2315      	movs	r3, #21
 80013d6:	e01a      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'O': return _O;
 80013d8:	231d      	movs	r3, #29
 80013da:	e018      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'P': return _P;
 80013dc:	2367      	movs	r3, #103	; 0x67
 80013de:	e016      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'Q': return _Q;
 80013e0:	2373      	movs	r3, #115	; 0x73
 80013e2:	e014      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'R': return _R;
 80013e4:	2305      	movs	r3, #5
 80013e6:	e012      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'S': return _S;
 80013e8:	235b      	movs	r3, #91	; 0x5b
 80013ea:	e010      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'T': return _T;
 80013ec:	230f      	movs	r3, #15
 80013ee:	e00e      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'U': return _U;
 80013f0:	233e      	movs	r3, #62	; 0x3e
 80013f2:	e00c      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'V': return _V;
 80013f4:	231c      	movs	r3, #28
 80013f6:	e00a      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'W': return _W;
 80013f8:	235c      	movs	r3, #92	; 0x5c
 80013fa:	e008      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'X': return _X;
 80013fc:	2349      	movs	r3, #73	; 0x49
 80013fe:	e006      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'Y': return _Y;
 8001400:	233b      	movs	r3, #59	; 0x3b
 8001402:	e004      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case 'Z': return _Z;
 8001404:	236d      	movs	r3, #109	; 0x6d
 8001406:	e002      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		case '-': return _MINUS;
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <MAX7219_convertSymbol+0x242>
		break;
		default: return 0;
 800140c:	2300      	movs	r3, #0
	}
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <MAX7219_sendOneChar>:
//---------------------------------------------------------
void MAX7219_sendOneChar(uint8_t seg, char c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	460a      	mov	r2, r1
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	4613      	mov	r3, r2
 800142a:	71bb      	strb	r3, [r7, #6]
	MAX7219_write(seg, MAX7219_convertSymbol( c ));			
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fecc 	bl	80011cc <MAX7219_convertSymbol>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe7b 	bl	8001138 <MAX7219_write>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <MAX7219_sendOffsetString>:
//---------------------------------------------------------
void MAX7219_sendOffsetString(uint8_t offset, char *str)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	6039      	str	r1, [r7, #0]
 8001454:	71fb      	strb	r3, [r7, #7]
	int seg_iter = MAX7219_SEGMENTS_AMOUNT;		
 8001456:	2308      	movs	r3, #8
 8001458:	60fb      	str	r3, [r7, #12]

	if (strlen(str) > 8) return;
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f7fe fec0 	bl	80001e0 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	2b08      	cmp	r3, #8
 8001464:	d822      	bhi.n	80014ac <MAX7219_sendOffsetString+0x62>
	MAX7219_setDecode(MAX7219_NO_DECODE);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff fe92 	bl	8001190 <MAX7219_setDecode>
	for(uint8_t i = 0; str[i] != '\0'; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	72fb      	strb	r3, [r7, #11]
 8001470:	e015      	b.n	800149e <MAX7219_sendOffsetString+0x54>
	{
		if((seg_iter - offset) == 0) break;		/* Чтобы случайно не записать в другой регистр	*/
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	429a      	cmp	r2, r3
 8001478:	d01a      	beq.n	80014b0 <MAX7219_sendOffsetString+0x66>
		MAX7219_sendOneChar( (seg_iter - offset), str[i] );
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	7afb      	ldrb	r3, [r7, #11]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff ffc5 	bl	800141c <MAX7219_sendOneChar>
		seg_iter--;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3b01      	subs	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; str[i] != '\0'; i++)
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	3301      	adds	r3, #1
 800149c:	72fb      	strb	r3, [r7, #11]
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1e3      	bne.n	8001472 <MAX7219_sendOffsetString+0x28>
 80014aa:	e002      	b.n	80014b2 <MAX7219_sendOffsetString+0x68>
	if (strlen(str) > 8) return;
 80014ac:	bf00      	nop
 80014ae:	e000      	b.n	80014b2 <MAX7219_sendOffsetString+0x68>
		if((seg_iter - offset) == 0) break;		/* Чтобы случайно не записать в другой регистр	*/
 80014b0:	bf00      	nop
	}
}
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <MAX7219_sendString>:
//---------------------------------------------------------
void MAX7219_sendString(char *str)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int seg_iter = 8;							
 80014c0:	2308      	movs	r3, #8
 80014c2:	60fb      	str	r3, [r7, #12]
	if (strlen(str) > 8) return;				/* Проверка на валидность строки (не более 8 символов)	*/
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7fe fe8b 	bl	80001e0 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d81b      	bhi.n	8001508 <MAX7219_sendString+0x50>
	MAX7219_setDecode(MAX7219_NO_DECODE);		
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fe5d 	bl	8001190 <MAX7219_setDecode>
	for(uint8_t i = 0; str[i] != '\0'; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	72fb      	strb	r3, [r7, #11]
 80014da:	e00e      	b.n	80014fa <MAX7219_sendString+0x42>
	{
		MAX7219_sendOneChar( seg_iter, str[i]);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	b2d8      	uxtb	r0, r3
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff ff97 	bl	800141c <MAX7219_sendOneChar>
		seg_iter--;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; str[i] != '\0'; i++)
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3301      	adds	r3, #1
 80014f8:	72fb      	strb	r3, [r7, #11]
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ea      	bne.n	80014dc <MAX7219_sendString+0x24>
 8001506:	e000      	b.n	800150a <MAX7219_sendString+0x52>
	if (strlen(str) > 8) return;				/* Проверка на валидность строки (не более 8 символов)	*/
 8001508:	bf00      	nop
	}
}
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <MAX7219_sendFloatNumber>:
{
	MAX7219_sendString("Error");
}
//---------------------------------------------------------
uint8_t MAX7219_sendFloatNumber(float number)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0a01 	vstr	s0, [r7, #4]
	int seg_iter = MAX7219_SEGMENTS_AMOUNT;
 800151a:	2308      	movs	r3, #8
 800151c:	617b      	str	r3, [r7, #20]
	char str[9];
	sprintf(str, "%.1f", number);	// Завернули в строку
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff f81a 	bl	8000558 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	f107 0008 	add.w	r0, r7, #8
 800152c:	4926      	ldr	r1, [pc, #152]	; (80015c8 <MAX7219_sendFloatNumber+0xb8>)
 800152e:	f007 fbcf 	bl	8008cd0 <siprintf>

	for(uint8_t i = 0; str[i] != '\0'; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	74fb      	strb	r3, [r7, #19]
 8001536:	e034      	b.n	80015a2 <MAX7219_sendFloatNumber+0x92>
	{
		if( str[i+1] == '.') {
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	3301      	adds	r3, #1
 800153c:	3318      	adds	r3, #24
 800153e:	443b      	add	r3, r7
 8001540:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001544:	2b2e      	cmp	r3, #46	; 0x2e
 8001546:	d112      	bne.n	800156e <MAX7219_sendFloatNumber+0x5e>
			MAX7219_write( seg_iter, MAX7219_convertSymbol( str[i] ) | POINT );	/* Добавим 0х80 чтобы вывести в тот же сегмент точку	*/
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	b2dc      	uxtb	r4, r3
 800154c:	7cfb      	ldrb	r3, [r7, #19]
 800154e:	3318      	adds	r3, #24
 8001550:	443b      	add	r3, r7
 8001552:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe38 	bl	80011cc <MAX7219_convertSymbol>
 800155c:	4603      	mov	r3, r0
 800155e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4619      	mov	r1, r3
 8001566:	4620      	mov	r0, r4
 8001568:	f7ff fde6 	bl	8001138 <MAX7219_write>
 800156c:	e011      	b.n	8001592 <MAX7219_sendFloatNumber+0x82>
		}
		else if(str[i] == '.') {
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	3318      	adds	r3, #24
 8001572:	443b      	add	r3, r7
 8001574:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001578:	2b2e      	cmp	r3, #46	; 0x2e
 800157a:	d00e      	beq.n	800159a <MAX7219_sendFloatNumber+0x8a>
			continue;
		}
		else {
			MAX7219_sendOneChar( seg_iter, str[i] );
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	7cfb      	ldrb	r3, [r7, #19]
 8001582:	3318      	adds	r3, #24
 8001584:	443b      	add	r3, r7
 8001586:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f7ff ff45 	bl	800141c <MAX7219_sendOneChar>
		}
		seg_iter--;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3b01      	subs	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e000      	b.n	800159c <MAX7219_sendFloatNumber+0x8c>
			continue;
 800159a:	bf00      	nop
	for(uint8_t i = 0; str[i] != '\0'; i++)
 800159c:	7cfb      	ldrb	r3, [r7, #19]
 800159e:	3301      	adds	r3, #1
 80015a0:	74fb      	strb	r3, [r7, #19]
 80015a2:	7cfb      	ldrb	r3, [r7, #19]
 80015a4:	3318      	adds	r3, #24
 80015a6:	443b      	add	r3, r7
 80015a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1c3      	bne.n	8001538 <MAX7219_sendFloatNumber+0x28>
	}
	return (strlen(str));
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fe13 	bl	80001e0 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b2db      	uxtb	r3, r3
	/* Возврат величины нужен для того, чтобы знать смещение и приписать размерность числу (205.5 Hz к примеру).
	  	  Используется для функции MAX7219_sendOffsetString() */
}
 80015be:	4618      	mov	r0, r3
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800b1c8 	.word	0x0800b1c8

080015cc <MAX7219_sendDuty>:
		}
	}
}
//---------------------------------------------------------
uint8_t MAX7219_sendDuty(float duty)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t offset;
	offset = MAX7219_sendFloatNumber(duty);
 80015d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80015da:	f7ff ff99 	bl	8001510 <MAX7219_sendFloatNumber>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
	return offset;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <MAX7219_sendFreq>:
//---------------------------------------------------------
uint8_t MAX7219_sendFreq(float freq)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t offset;
	offset = MAX7219_sendFloatNumber(freq);
 80015f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80015fa:	f7ff ff89 	bl	8001510 <MAX7219_sendFloatNumber>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
	MAX7219_sendOffsetString(offset, "KHZ");
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4904      	ldr	r1, [pc, #16]	; (8001618 <MAX7219_sendFreq+0x2c>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff1f 	bl	800144a <MAX7219_sendOffsetString>
	return offset;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	0800b1d0 	.word	0x0800b1d0

0800161c <MAX7219_clearOneSegment>:
//---------------------------------------------------------
void MAX7219_clearOneSegment(uint8_t seg)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	MAX7219_sendOffsetString(seg, " ");
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4903      	ldr	r1, [pc, #12]	; (8001638 <MAX7219_clearOneSegment+0x1c>)
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff0d 	bl	800144a <MAX7219_sendOffsetString>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	0800b1d4 	.word	0x0800b1d4

0800163c <MAX7219_clearAll>:
void MAX7219_blinkOneSegment(uint8_t seg)
{

}
void MAX7219_clearAll()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	for (uint8_t i = MAX7219_SEGMENT_0; i <= MAX7219_SEGMENT_7; i++)
 8001642:	2301      	movs	r3, #1
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	e007      	b.n	8001658 <MAX7219_clearAll+0x1c>
	{
 		MAX7219_write(i, 0);
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fd73 	bl	8001138 <MAX7219_write>
	for (uint8_t i = MAX7219_SEGMENT_0; i <= MAX7219_SEGMENT_7; i++)
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	3301      	adds	r3, #1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d9f4      	bls.n	8001648 <MAX7219_clearAll+0xc>
	}
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <MAX7219_init>:
//---------------------------------------------------------
HAL_StatusTypeDef MAX7219_init(max7219_init_t *cfg)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	MAX7219_Handler = cfg;
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MAX7219_init+0x54>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
	MAX7219_write(MAX7219_DECODE_MODE_REG, MAX7219_Handler->decode_mode);
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MAX7219_init+0x54>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	7b1b      	ldrb	r3, [r3, #12]
 800167c:	4619      	mov	r1, r3
 800167e:	2009      	movs	r0, #9
 8001680:	f7ff fd5a 	bl	8001138 <MAX7219_write>
	MAX7219_write(MAX7219_INTENSITY_REG, MAX7219_Handler->indicator_intensity);
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <MAX7219_init+0x54>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	7b5b      	ldrb	r3, [r3, #13]
 800168a:	4619      	mov	r1, r3
 800168c:	200a      	movs	r0, #10
 800168e:	f7ff fd53 	bl	8001138 <MAX7219_write>
	MAX7219_write(MAX7219_SCAN_LIMIT_REG, MAX7219_Handler->digits_quantity);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MAX7219_init+0x54>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	7b9b      	ldrb	r3, [r3, #14]
 8001698:	4619      	mov	r1, r3
 800169a:	200b      	movs	r0, #11
 800169c:	f7ff fd4c 	bl	8001138 <MAX7219_write>
	result = MAX7219_write(MAX7219_MODE_REG, MAX7219_NORMAL_MODE);
 80016a0:	2101      	movs	r1, #1
 80016a2:	200c      	movs	r0, #12
 80016a4:	f7ff fd48 	bl	8001138 <MAX7219_write>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]
	MAX7219_clearAll();		
 80016ac:	f7ff ffc6 	bl	800163c <MAX7219_clearAll>
	return result;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200005e4 	.word	0x200005e4

080016c0 <PWM_start>:
#include "PWM.h"

void PWM_start(float freq, float duty)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ca:	edc7 0a00 	vstr	s1, [r7]
	/*	PSC = 1  всегда. Таймер 5 на 32 бита для того чтобы можно было делать сверхнизкие частоты	*/
	uint32_t tim4_counter_period = 64000 / freq;	
 80016ce:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001730 <PWM_start+0x70>
 80016d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80016d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016de:	ee17 3a90 	vmov	r3, s15
 80016e2:	60fb      	str	r3, [r7, #12]
	uint32_t tim4_ccr_val = (tim4_counter_period * duty) / 100; 
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016ee:	edd7 7a00 	vldr	s15, [r7]
 80016f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001734 <PWM_start+0x74>
 80016fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001702:	ee17 3a90 	vmov	r3, s15
 8001706:	60bb      	str	r3, [r7, #8]
	TIM5->PSC = 0;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <PWM_start+0x78>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->CNT = 0;
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <PWM_start+0x78>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->ARR = tim4_counter_period;
 8001714:	4a08      	ldr	r2, [pc, #32]	; (8001738 <PWM_start+0x78>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM5->CCR1 = tim4_ccr_val;
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <PWM_start+0x78>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001720:	2100      	movs	r1, #0
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <PWM_start+0x7c>)
 8001724:	f003 fde4 	bl	80052f0 <HAL_TIM_PWM_Start>
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	477a0000 	.word	0x477a0000
 8001734:	42c80000 	.word	0x42c80000
 8001738:	40000c00 	.word	0x40000c00
 800173c:	200008dc 	.word	0x200008dc

08001740 <PWM_stop>:
void PWM_stop()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	TIM5->CNT = 0;
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <PWM_stop+0x18>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 800174a:	2100      	movs	r1, #0
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <PWM_stop+0x1c>)
 800174e:	f003 fe7f 	bl	8005450 <HAL_TIM_PWM_Stop>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40000c00 	.word	0x40000c00
 800175c:	200008dc 	.word	0x200008dc

08001760 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <vApplicationGetIdleTaskMemory+0x2c>)
 8001770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <vApplicationGetIdleTaskMemory+0x30>)
 8001776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200005e8 	.word	0x200005e8
 8001790:	2000063c 	.word	0x2000063c

08001794 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*	Колбек для первичной обработки нажатия клавиатуры	*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	button_exti = GPIO_Pin;
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	8013      	strh	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim9);
 80017a4:	480d      	ldr	r0, [pc, #52]	; (80017dc <HAL_GPIO_EXTI_Callback+0x48>)
 80017a6:	f003 fcb9 	bl	800511c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(BUTTON_DOWN_EXTI_IRQn);
 80017aa:	2028      	movs	r0, #40	; 0x28
 80017ac:	f001 fffa 	bl	80037a4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BUTTON_UP_EXTI_IRQn);
 80017b0:	2017      	movs	r0, #23
 80017b2:	f001 fff7 	bl	80037a4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BUTTON_LEFT_EXTI_IRQn);
 80017b6:	2007      	movs	r0, #7
 80017b8:	f001 fff4 	bl	80037a4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BUTTON_RIGHT_EXTI_IRQn);
 80017bc:	2008      	movs	r0, #8
 80017be:	f001 fff1 	bl	80037a4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BUTTON_RETURN_EXTI_IRQn);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f001 ffee 	bl	80037a4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BUTTON_OK_EXTI_IRQn);
 80017c8:	2009      	movs	r0, #9
 80017ca:	f001 ffeb 	bl	80037a4 <HAL_NVIC_DisableIRQ>
	/*	Запустили таймер на отсчёт 100 мс для защиты от дребезга.	*/
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200009ea 	.word	0x200009ea
 80017dc:	20000924 	.word	0x20000924

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b0ac      	sub	sp, #176	; 0xb0
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e6:	f001 fe95 	bl	8003514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 f8cf 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f000 fa8d 	bl	8001d0c <MX_GPIO_Init>
  MX_DMA_Init();
 80017f2:	f000 fa6b 	bl	8001ccc <MX_DMA_Init>
  MX_SPI1_Init();
 80017f6:	f000 f933 	bl	8001a60 <MX_SPI1_Init>
  MX_TIM9_Init();
 80017fa:	f000 fa2d 	bl	8001c58 <MX_TIM9_Init>
  MX_TIM5_Init();
 80017fe:	f000 f9b5 	bl	8001b6c <MX_TIM5_Init>
  MX_TIM1_Init();
 8001802:	f000 f963 	bl	8001acc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  max7219_init_t cfg = {
 8001806:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <main+0x164>)
 8001808:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800180c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		  .indicator_intensity = MAX7219_INTENSITY_25_OF_32,
  		  .digits_quantity = MAX7219_DISPLAY_0_TO_7,
		  .CS_PORT = SPI_CS_GPIO_Port,
  		  .CS_PIN = SPI_CS_Pin
    };
  MAX7219_init(&cfg);
 8001812:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff26 	bl	8001668 <MAX7219_init>
  MAX7219_clearAll();
 800181c:	f7ff ff0e 	bl	800163c <MAX7219_clearAll>
  MAX7219_sendString("SET MODE");
 8001820:	4849      	ldr	r0, [pc, #292]	; (8001948 <main+0x168>)
 8001822:	f7ff fe49 	bl	80014b8 <MAX7219_sendString>

  xButtonQueue = xQueueCreate(10, sizeof(uint16_t));
 8001826:	2200      	movs	r2, #0
 8001828:	2102      	movs	r1, #2
 800182a:	200a      	movs	r0, #10
 800182c:	f004 feb8 	bl	80065a0 <xQueueGenericCreate>
 8001830:	4603      	mov	r3, r0
 8001832:	4a46      	ldr	r2, [pc, #280]	; (800194c <main+0x16c>)
 8001834:	6013      	str	r3, [r2, #0]
  xDisplayStringQueue = xQueueCreate(10, sizeof(char[9]));
 8001836:	2200      	movs	r2, #0
 8001838:	2109      	movs	r1, #9
 800183a:	200a      	movs	r0, #10
 800183c:	f004 feb0 	bl	80065a0 <xQueueGenericCreate>
 8001840:	4603      	mov	r3, r0
 8001842:	4a43      	ldr	r2, [pc, #268]	; (8001950 <main+0x170>)
 8001844:	6013      	str	r3, [r2, #0]
  xDisplayFreqQueue = xQueueCreate(10, sizeof(float));
 8001846:	2200      	movs	r2, #0
 8001848:	2104      	movs	r1, #4
 800184a:	200a      	movs	r0, #10
 800184c:	f004 fea8 	bl	80065a0 <xQueueGenericCreate>
 8001850:	4603      	mov	r3, r0
 8001852:	4a40      	ldr	r2, [pc, #256]	; (8001954 <main+0x174>)
 8001854:	6013      	str	r3, [r2, #0]
  xDisplayDutyQueue = xQueueCreate(10, sizeof(float));
 8001856:	2200      	movs	r2, #0
 8001858:	2104      	movs	r1, #4
 800185a:	200a      	movs	r0, #10
 800185c:	f004 fea0 	bl	80065a0 <xQueueGenericCreate>
 8001860:	4603      	mov	r3, r0
 8001862:	4a3d      	ldr	r2, [pc, #244]	; (8001958 <main+0x178>)
 8001864:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 10, 20);
 8001866:	4b3d      	ldr	r3, [pc, #244]	; (800195c <main+0x17c>)
 8001868:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800186c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001872:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fcd4 	bl	8006226 <osMessageCreate>
 800187e:	4603      	mov	r3, r0
 8001880:	4a37      	ldr	r2, [pc, #220]	; (8001960 <main+0x180>)
 8001882:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001884:	4b37      	ldr	r3, [pc, #220]	; (8001964 <main+0x184>)
 8001886:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800188a:	461d      	mov	r5, r3
 800188c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001890:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001898:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fc61 	bl	8006166 <osThreadCreate>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a30      	ldr	r2, [pc, #192]	; (8001968 <main+0x188>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, buttonTask, osPriorityNormal, 0, 1024);
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <main+0x18c>)
 80018ac:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80018b0:	461d      	mov	r5, r3
 80018b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80018be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fc4e 	bl	8006166 <osThreadCreate>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a28      	ldr	r2, [pc, #160]	; (8001970 <main+0x190>)
 80018ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, displayTask, osPriorityBelowNormal, 0, 1024);
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <main+0x194>)
 80018d2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80018d6:	461d      	mov	r5, r3
 80018d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80018e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fc3b 	bl	8006166 <osThreadCreate>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a21      	ldr	r2, [pc, #132]	; (8001978 <main+0x198>)
 80018f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, dacTask, osPriorityAboveNormal, 0, 1024);
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <main+0x19c>)
 80018f8:	f107 0420 	add.w	r4, r7, #32
 80018fc:	461d      	mov	r5, r3
 80018fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001902:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fc28 	bl	8006166 <osThreadCreate>
 8001916:	4603      	mov	r3, r0
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <main+0x1a0>)
 800191a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, pwmTask, osPriorityAboveNormal, 0, 1024);
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <main+0x1a4>)
 800191e:	1d3c      	adds	r4, r7, #4
 8001920:	461d      	mov	r5, r3
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800192a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f004 fc17 	bl	8006166 <osThreadCreate>
 8001938:	4603      	mov	r3, r0
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <main+0x1a8>)
 800193c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800193e:	f004 fc0b 	bl	8006158 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001942:	e7fe      	b.n	8001942 <main+0x162>
 8001944:	0800b220 	.word	0x0800b220
 8001948:	0800b214 	.word	0x0800b214
 800194c:	200009f0 	.word	0x200009f0
 8001950:	200009f4 	.word	0x200009f4
 8001954:	200009f8 	.word	0x200009f8
 8001958:	200009fc 	.word	0x200009fc
 800195c:	0800b230 	.word	0x0800b230
 8001960:	200009e0 	.word	0x200009e0
 8001964:	0800b240 	.word	0x0800b240
 8001968:	200009cc 	.word	0x200009cc
 800196c:	0800b25c 	.word	0x0800b25c
 8001970:	200009d0 	.word	0x200009d0
 8001974:	0800b278 	.word	0x0800b278
 8001978:	200009d4 	.word	0x200009d4
 800197c:	0800b294 	.word	0x0800b294
 8001980:	200009d8 	.word	0x200009d8
 8001984:	0800b2b0 	.word	0x0800b2b0
 8001988:	200009dc 	.word	0x200009dc

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b094      	sub	sp, #80	; 0x50
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2230      	movs	r2, #48	; 0x30
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f006 fd26 	bl	80083ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <SystemClock_Config+0xcc>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <SystemClock_Config+0xcc>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	; 0x40
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <SystemClock_Config+0xcc>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <SystemClock_Config+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d8:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <SystemClock_Config+0xd0>)
 80019da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <SystemClock_Config+0xd0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ec:	2301      	movs	r3, #1
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f6:	2302      	movs	r3, #2
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a00:	2319      	movs	r3, #25
 8001a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a10:	f107 0320 	add.w	r3, r7, #32
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 fc2b 	bl	8004270 <HAL_RCC_OscConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a20:	f001 fa48 	bl	8002eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a24:	230f      	movs	r3, #15
 8001a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2102      	movs	r1, #2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fe8d 	bl	8004760 <HAL_RCC_ClockConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a4c:	f001 fa32 	bl	8002eb4 <Error_Handler>
  }
}
 8001a50:	bf00      	nop
 8001a52:	3750      	adds	r7, #80	; 0x50
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000

08001a60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <MX_SPI1_Init+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a94:	2208      	movs	r2, #8
 8001a96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001aac:	220a      	movs	r2, #10
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_SPI1_Init+0x64>)
 8001ab2:	f003 f853 	bl	8004b5c <HAL_SPI_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001abc:	f001 f9fa 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000083c 	.word	0x2000083c
 8001ac8:	40013000 	.word	0x40013000

08001acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001aea:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <MX_TIM1_Init+0x9c>)
 8001aec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b14:	4813      	ldr	r0, [pc, #76]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b16:	f003 fab1 	bl	800507c <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b20:	f001 f9c8 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b32:	f003 febb 	bl	80058ac <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b3c:	f001 f9ba 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b4e:	f004 fa69 	bl	8006024 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b58:	f001 f9ac 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000894 	.word	0x20000894
 8001b68:	40010000 	.word	0x40010000

08001b6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
 8001b98:	615a      	str	r2, [r3, #20]
 8001b9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	; (8001c54 <MX_TIM5_Init+0xe8>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bc2:	4823      	ldr	r0, [pc, #140]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001bc4:	f003 fa5a 	bl	800507c <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001bce:	f001 f971 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481c      	ldr	r0, [pc, #112]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001be0:	f003 fe64 	bl	80058ac <HAL_TIM_ConfigClockSource>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001bea:	f001 f963 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bee:	4818      	ldr	r0, [pc, #96]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001bf0:	f003 fb25 	bl	800523e <HAL_TIM_PWM_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001bfa:	f001 f95b 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c06:	f107 0320 	add.w	r3, r7, #32
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4810      	ldr	r0, [pc, #64]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001c0e:	f004 fa09 	bl	8006024 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001c18:	f001 f94c 	bl	8002eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1c:	2360      	movs	r3, #96	; 0x60
 8001c1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4807      	ldr	r0, [pc, #28]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001c34:	f003 fd78 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001c3e:	f001 f939 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <MX_TIM5_Init+0xe4>)
 8001c44:	f001 fa40 	bl	80030c8 <HAL_TIM_MspPostInit>

}
 8001c48:	bf00      	nop
 8001c4a:	3738      	adds	r7, #56	; 0x38
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200008dc 	.word	0x200008dc
 8001c54:	40000c00 	.word	0x40000c00

08001c58 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <MX_TIM9_Init+0x70>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 639;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c72:	f240 227f 	movw	r2, #639	; 0x27f
 8001c76:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c80:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c84:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001c92:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c94:	f003 f9f2 	bl	800507c <HAL_TIM_Base_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001c9e:	f001 f909 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001cae:	f003 fdfd 	bl	80058ac <HAL_TIM_ConfigClockSource>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001cb8:	f001 f8fc 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000924 	.word	0x20000924
 8001cc8:	40014000 	.word	0x40014000

08001ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_DMA_Init+0x3c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <MX_DMA_Init+0x3c>)
 8001cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_DMA_Init+0x3c>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	2044      	movs	r0, #68	; 0x44
 8001cf4:	f001 fd2c 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001cf8:	2044      	movs	r0, #68	; 0x44
 8001cfa:	f001 fd45 	bl	8003788 <HAL_NVIC_EnableIRQ>

}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b5a      	ldr	r3, [pc, #360]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a59      	ldr	r2, [pc, #356]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b45      	ldr	r3, [pc, #276]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a44      	ldr	r2, [pc, #272]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <MX_GPIO_Init+0x184>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d98:	483e      	ldr	r0, [pc, #248]	; (8001e94 <MX_GPIO_Init+0x188>)
 8001d9a:	f002 fa1d 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC_D0_Pin|DAC_D1_Pin|DAC_D2_Pin|DAC_D3_Pin
 8001d9e:	2200      	movs	r2, #0
 8001da0:	21ff      	movs	r1, #255	; 0xff
 8001da2:	483d      	ldr	r0, [pc, #244]	; (8001e98 <MX_GPIO_Init+0x18c>)
 8001da4:	f002 fa18 	bl	80041d8 <HAL_GPIO_WritePin>
                          |DAC_D4_Pin|DAC_D5_Pin|DAC_D6_Pin|DAC_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dae:	483b      	ldr	r0, [pc, #236]	; (8001e9c <MX_GPIO_Init+0x190>)
 8001db0:	f002 fa12 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4831      	ldr	r0, [pc, #196]	; (8001e94 <MX_GPIO_Init+0x188>)
 8001dce:	f002 f867 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_LEFT_Pin BUTTON_RIGHT_Pin BUTTON_OK_Pin BUTTON_RETURN_Pin
                           BUTTON_UP_Pin BUTTON_DOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin|BUTTON_OK_Pin|BUTTON_RETURN_Pin
 8001dd2:	f240 631e 	movw	r3, #1566	; 0x61e
 8001dd6:	617b      	str	r3, [r7, #20]
                          |BUTTON_UP_Pin|BUTTON_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dd8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	482c      	ldr	r0, [pc, #176]	; (8001e9c <MX_GPIO_Init+0x190>)
 8001dea:	f002 f859 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC_D0_Pin DAC_D1_Pin DAC_D2_Pin DAC_D3_Pin
                           DAC_D4_Pin DAC_D5_Pin DAC_D6_Pin DAC_D7_Pin */
  GPIO_InitStruct.Pin = DAC_D0_Pin|DAC_D1_Pin|DAC_D2_Pin|DAC_D3_Pin
 8001dee:	23ff      	movs	r3, #255	; 0xff
 8001df0:	617b      	str	r3, [r7, #20]
                          |DAC_D4_Pin|DAC_D5_Pin|DAC_D6_Pin|DAC_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4824      	ldr	r0, [pc, #144]	; (8001e98 <MX_GPIO_Init+0x18c>)
 8001e06:	f002 f84b 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	481e      	ldr	r0, [pc, #120]	; (8001e9c <MX_GPIO_Init+0x190>)
 8001e24:	f002 f83c 	bl	8003ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2105      	movs	r1, #5
 8001e2c:	2007      	movs	r0, #7
 8001e2e:	f001 fc8f 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e32:	2007      	movs	r0, #7
 8001e34:	f001 fca8 	bl	8003788 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2105      	movs	r1, #5
 8001e3c:	2008      	movs	r0, #8
 8001e3e:	f001 fc87 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e42:	2008      	movs	r0, #8
 8001e44:	f001 fca0 	bl	8003788 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2105      	movs	r1, #5
 8001e4c:	2009      	movs	r0, #9
 8001e4e:	f001 fc7f 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e52:	2009      	movs	r0, #9
 8001e54:	f001 fc98 	bl	8003788 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2105      	movs	r1, #5
 8001e5c:	200a      	movs	r0, #10
 8001e5e:	f001 fc77 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e62:	200a      	movs	r0, #10
 8001e64:	f001 fc90 	bl	8003788 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2105      	movs	r1, #5
 8001e6c:	2017      	movs	r0, #23
 8001e6e:	f001 fc6f 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e72:	2017      	movs	r0, #23
 8001e74:	f001 fc88 	bl	8003788 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2105      	movs	r1, #5
 8001e7c:	2028      	movs	r0, #40	; 0x28
 8001e7e:	f001 fc67 	bl	8003750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e82:	2028      	movs	r0, #40	; 0x28
 8001e84:	f001 fc80 	bl	8003788 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e88:	bf00      	nop
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f004 f9a8 	bl	80061fe <osDelay>
 8001eae:	e7fb      	b.n	8001ea8 <StartDefaultTask+0x8>

08001eb0 <buttonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_buttonTask */
void buttonTask(void const * argument)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonTask */
	uint16_t button_num;
	float freq_buff = 1.0f;
 8001eb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ebc:	61bb      	str	r3, [r7, #24]
	char str_buff[9] = {};
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	711a      	strb	r2, [r3, #4]
	uint8_t mode = PWM_MODE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
	for(;;)
	{
		button_num = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	83bb      	strh	r3, [r7, #28]
		xQueueReceive(xButtonQueue, &button_num, 100 / portTICK_RATE_MS);
 8001ed4:	4ba6      	ldr	r3, [pc, #664]	; (8002170 <buttonTask+0x2c0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f107 011c 	add.w	r1, r7, #28
 8001edc:	2264      	movs	r2, #100	; 0x64
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fd52 	bl	8006988 <xQueueReceive>
		switch(button_num)
 8001ee4:	8bbb      	ldrh	r3, [r7, #28]
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eea:	f000 8330 	beq.w	800254e <buttonTask+0x69e>
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	f300 85ba 	bgt.w	8002a6a <buttonTask+0xbba>
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	dc28      	bgt.n	8001f4c <buttonTask+0x9c>
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	f2c0 85b5 	blt.w	8002a6a <buttonTask+0xbba>
 8001f00:	3b02      	subs	r3, #2
 8001f02:	2b0e      	cmp	r3, #14
 8001f04:	f200 85b1 	bhi.w	8002a6a <buttonTask+0xbba>
 8001f08:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <buttonTask+0x60>)
 8001f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0e:	bf00      	nop
 8001f10:	08001f59 	.word	0x08001f59
 8001f14:	08002a6b 	.word	0x08002a6b
 8001f18:	08002067 	.word	0x08002067
 8001f1c:	08002a6b 	.word	0x08002a6b
 8001f20:	08002a6b 	.word	0x08002a6b
 8001f24:	08002a6b 	.word	0x08002a6b
 8001f28:	0800282b 	.word	0x0800282b
 8001f2c:	08002a6b 	.word	0x08002a6b
 8001f30:	08002a6b 	.word	0x08002a6b
 8001f34:	08002a6b 	.word	0x08002a6b
 8001f38:	08002a6b 	.word	0x08002a6b
 8001f3c:	08002a6b 	.word	0x08002a6b
 8001f40:	08002a6b 	.word	0x08002a6b
 8001f44:	08002a6b 	.word	0x08002a6b
 8001f48:	08002a17 	.word	0x08002a17
 8001f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f50:	f000 8132 	beq.w	80021b8 <buttonTask+0x308>
 8001f54:	f000 bd89 	b.w	8002a6a <buttonTask+0xbba>
		{
			case BUTTON_LEFT_Pin:
				if( set_mode_stage )
 8001f58:	4b86      	ldr	r3, [pc, #536]	; (8002174 <buttonTask+0x2c4>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01a      	beq.n	8001f96 <buttonTask+0xe6>
				{
					sprintf(str_buff, "%s", (mode == PWM_MODE)? "DAC MODE" : "PWM MODE");
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <buttonTask+0xba>
 8001f66:	4a84      	ldr	r2, [pc, #528]	; (8002178 <buttonTask+0x2c8>)
 8001f68:	e000      	b.n	8001f6c <buttonTask+0xbc>
 8001f6a:	4a84      	ldr	r2, [pc, #528]	; (800217c <buttonTask+0x2cc>)
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4983      	ldr	r1, [pc, #524]	; (8002180 <buttonTask+0x2d0>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f006 feac 	bl	8008cd0 <siprintf>
					mode = (mode == PWM_MODE)? DAC_MODE : PWM_MODE;
 8001f78:	7ffb      	ldrb	r3, [r7, #31]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	77fb      	strb	r3, [r7, #31]
					xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <buttonTask+0x2d4>)
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	f107 010c 	add.w	r1, r7, #12
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2232      	movs	r2, #50	; 0x32
 8001f92:	f004 fb5f 	bl	8006654 <xQueueGenericSend>
				}
				if( set_signal_stage )
 8001f96:	4b7c      	ldr	r3, [pc, #496]	; (8002188 <buttonTask+0x2d8>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d022      	beq.n	8001fe4 <buttonTask+0x134>
				{
					sign++;
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	; (800218c <buttonTask+0x2dc>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b79      	ldr	r3, [pc, #484]	; (800218c <buttonTask+0x2dc>)
 8001fa8:	701a      	strb	r2, [r3, #0]
					if( sign > REVERSE_SAW )  sign = TRIANGLE;
 8001faa:	4b78      	ldr	r3, [pc, #480]	; (800218c <buttonTask+0x2dc>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d902      	bls.n	8001fb8 <buttonTask+0x108>
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <buttonTask+0x2dc>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "%s", signal_msg[sign - 1]);
 8001fb8:	4b74      	ldr	r3, [pc, #464]	; (800218c <buttonTask+0x2dc>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a72      	ldr	r2, [pc, #456]	; (8002190 <buttonTask+0x2e0>)
 8001fc6:	441a      	add	r2, r3
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	496c      	ldr	r1, [pc, #432]	; (8002180 <buttonTask+0x2d0>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f006 fe7e 	bl	8008cd0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <buttonTask+0x2d4>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	f107 010c 	add.w	r1, r7, #12
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2232      	movs	r2, #50	; 0x32
 8001fe0:	f004 fb38 	bl	8006654 <xQueueGenericSend>
				}
				if( set_freq_stage )
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <buttonTask+0x2e4>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01f      	beq.n	800202c <buttonTask+0x17c>
				{
					digit_position++;
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <buttonTask+0x2e8>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <buttonTask+0x2e8>)
 8001ff6:	701a      	strb	r2, [r3, #0]
					if( digit_position > digits_amount ) digit_position = POINT_TENS;
 8001ff8:	4b67      	ldr	r3, [pc, #412]	; (8002198 <buttonTask+0x2e8>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b67      	ldr	r3, [pc, #412]	; (800219c <buttonTask+0x2ec>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d902      	bls.n	800200a <buttonTask+0x15a>
 8002004:	4b64      	ldr	r3, [pc, #400]	; (8002198 <buttonTask+0x2e8>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
					/*	Если достигли старшего разряда то возвращаемся к младшему	*/
					freq_buff = (mode == PWM_MODE)? freq_pwm : freq_dac;
 800200a:	7ffb      	ldrb	r3, [r7, #31]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <buttonTask+0x166>
 8002010:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <buttonTask+0x2f0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	e001      	b.n	800201a <buttonTask+0x16a>
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <buttonTask+0x2f4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	61bb      	str	r3, [r7, #24]
					xQueueSendToBack(xDisplayFreqQueue, &freq_buff, 50 / portTICK_RATE_MS);
 800201c:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <buttonTask+0x2f8>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	f107 0118 	add.w	r1, r7, #24
 8002024:	2300      	movs	r3, #0
 8002026:	2232      	movs	r2, #50	; 0x32
 8002028:	f004 fb14 	bl	8006654 <xQueueGenericSend>
				}
				if( set_duty_stage )
 800202c:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <buttonTask+0x2fc>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8511 	beq.w	8002a58 <buttonTask+0xba8>
				{
					digit_position++;
 8002036:	4b58      	ldr	r3, [pc, #352]	; (8002198 <buttonTask+0x2e8>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b56      	ldr	r3, [pc, #344]	; (8002198 <buttonTask+0x2e8>)
 8002040:	701a      	strb	r2, [r3, #0]
					if( digit_position > digits_amount ) digit_position = POINT_TENS;
 8002042:	4b55      	ldr	r3, [pc, #340]	; (8002198 <buttonTask+0x2e8>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b55      	ldr	r3, [pc, #340]	; (800219c <buttonTask+0x2ec>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d902      	bls.n	8002054 <buttonTask+0x1a4>
 800204e:	4b52      	ldr	r3, [pc, #328]	; (8002198 <buttonTask+0x2e8>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(xDisplayDutyQueue, &duty, 50 / portTICK_RATE_MS);
 8002054:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <buttonTask+0x300>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	2300      	movs	r3, #0
 800205a:	2232      	movs	r2, #50	; 0x32
 800205c:	4955      	ldr	r1, [pc, #340]	; (80021b4 <buttonTask+0x304>)
 800205e:	f004 faf9 	bl	8006654 <xQueueGenericSend>
				}
				break;
 8002062:	f000 bcf9 	b.w	8002a58 <buttonTask+0xba8>

			case BUTTON_RIGHT_Pin:
				if( set_mode_stage )	// Если мы на выборе режима то мы должны его выбрать
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <buttonTask+0x2c4>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d01a      	beq.n	80020a4 <buttonTask+0x1f4>
				{
					sprintf(str_buff, "%s", (mode == PWM_MODE)? "DAC MODE" : "PWM MODE");
 800206e:	7ffb      	ldrb	r3, [r7, #31]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <buttonTask+0x1c8>
 8002074:	4a40      	ldr	r2, [pc, #256]	; (8002178 <buttonTask+0x2c8>)
 8002076:	e000      	b.n	800207a <buttonTask+0x1ca>
 8002078:	4a40      	ldr	r2, [pc, #256]	; (800217c <buttonTask+0x2cc>)
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	4940      	ldr	r1, [pc, #256]	; (8002180 <buttonTask+0x2d0>)
 8002080:	4618      	mov	r0, r3
 8002082:	f006 fe25 	bl	8008cd0 <siprintf>
					mode = (mode == PWM_MODE)? DAC_MODE : PWM_MODE;
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	77fb      	strb	r3, [r7, #31]
					xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 8002094:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <buttonTask+0x2d4>)
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	f107 010c 	add.w	r1, r7, #12
 800209c:	2300      	movs	r3, #0
 800209e:	2232      	movs	r2, #50	; 0x32
 80020a0:	f004 fad8 	bl	8006654 <xQueueGenericSend>
				}
				if( set_signal_stage )
 80020a4:	4b38      	ldr	r3, [pc, #224]	; (8002188 <buttonTask+0x2d8>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d022      	beq.n	80020f2 <buttonTask+0x242>
				{
					sign--;
 80020ac:	4b37      	ldr	r3, [pc, #220]	; (800218c <buttonTask+0x2dc>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <buttonTask+0x2dc>)
 80020b6:	701a      	strb	r2, [r3, #0]
					if( sign < TRIANGLE )  sign = REVERSE_SAW;
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <buttonTask+0x2dc>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <buttonTask+0x216>
 80020c0:	4b32      	ldr	r3, [pc, #200]	; (800218c <buttonTask+0x2dc>)
 80020c2:	2204      	movs	r2, #4
 80020c4:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "%s", signal_msg[sign - 1]);
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <buttonTask+0x2dc>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	1e5a      	subs	r2, r3, #1
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	4a2f      	ldr	r2, [pc, #188]	; (8002190 <buttonTask+0x2e0>)
 80020d4:	441a      	add	r2, r3
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4929      	ldr	r1, [pc, #164]	; (8002180 <buttonTask+0x2d0>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f006 fdf7 	bl	8008cd0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <buttonTask+0x2d4>)
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	f107 010c 	add.w	r1, r7, #12
 80020ea:	2300      	movs	r3, #0
 80020ec:	2232      	movs	r2, #50	; 0x32
 80020ee:	f004 fab1 	bl	8006654 <xQueueGenericSend>
				}
				if( set_freq_stage )
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <buttonTask+0x2e4>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01e      	beq.n	8002138 <buttonTask+0x288>
				{
					digit_position--;
 80020fa:	4b27      	ldr	r3, [pc, #156]	; (8002198 <buttonTask+0x2e8>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	3b01      	subs	r3, #1
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <buttonTask+0x2e8>)
 8002104:	701a      	strb	r2, [r3, #0]
					if( digit_position < POINT_TENS)	digit_position = digits_amount;
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <buttonTask+0x2e8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <buttonTask+0x266>
 800210e:	4b23      	ldr	r3, [pc, #140]	; (800219c <buttonTask+0x2ec>)
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <buttonTask+0x2e8>)
 8002114:	701a      	strb	r2, [r3, #0]
					/*	Если мы с самого краю справа, то нужно переместиться на самый старший разряд слева */
					freq_buff = (mode == PWM_MODE)? freq_pwm : freq_dac;
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <buttonTask+0x272>
 800211c:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <buttonTask+0x2f0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e001      	b.n	8002126 <buttonTask+0x276>
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <buttonTask+0x2f4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61bb      	str	r3, [r7, #24]
					xQueueSendToBack(xDisplayFreqQueue, &freq_buff, 50 / portTICK_RATE_MS);
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <buttonTask+0x2f8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	f107 0118 	add.w	r1, r7, #24
 8002130:	2300      	movs	r3, #0
 8002132:	2232      	movs	r2, #50	; 0x32
 8002134:	f004 fa8e 	bl	8006654 <xQueueGenericSend>
				}
				if( set_duty_stage )
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <buttonTask+0x2fc>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 848d 	beq.w	8002a5c <buttonTask+0xbac>
				{
					digit_position--;
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <buttonTask+0x2e8>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	3b01      	subs	r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <buttonTask+0x2e8>)
 800214c:	701a      	strb	r2, [r3, #0]
					if( digit_position < POINT_TENS)	digit_position = digits_amount;
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <buttonTask+0x2e8>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <buttonTask+0x2ae>
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <buttonTask+0x2ec>)
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <buttonTask+0x2e8>)
 800215c:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(xDisplayDutyQueue, &duty, 50 / portTICK_RATE_MS);
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <buttonTask+0x300>)
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	2300      	movs	r3, #0
 8002164:	2232      	movs	r2, #50	; 0x32
 8002166:	4913      	ldr	r1, [pc, #76]	; (80021b4 <buttonTask+0x304>)
 8002168:	f004 fa74 	bl	8006654 <xQueueGenericSend>
				}
				break;
 800216c:	f000 bc76 	b.w	8002a5c <buttonTask+0xbac>
 8002170:	200009f0 	.word	0x200009f0
 8002174:	200009e4 	.word	0x200009e4
 8002178:	0800b2cc 	.word	0x0800b2cc
 800217c:	0800b2d8 	.word	0x0800b2d8
 8002180:	0800b2e4 	.word	0x0800b2e4
 8002184:	200009f4 	.word	0x200009f4
 8002188:	200009e5 	.word	0x200009e5
 800218c:	200003ac 	.word	0x200003ac
 8002190:	200003b0 	.word	0x200003b0
 8002194:	200009e6 	.word	0x200009e6
 8002198:	2000039d 	.word	0x2000039d
 800219c:	2000039e 	.word	0x2000039e
 80021a0:	200003a4 	.word	0x200003a4
 80021a4:	200003a0 	.word	0x200003a0
 80021a8:	200009f8 	.word	0x200009f8
 80021ac:	200009e7 	.word	0x200009e7
 80021b0:	200009fc 	.word	0x200009fc
 80021b4:	200003a8 	.word	0x200003a8

			case BUTTON_UP_Pin:
				if( set_freq_stage )
 80021b8:	4ba9      	ldr	r3, [pc, #676]	; (8002460 <buttonTask+0x5b0>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8128 	beq.w	8002412 <buttonTask+0x562>
				{
					if( mode == PWM_MODE)
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 8092 	bne.w	80022ee <buttonTask+0x43e>
					{
						freq_pwm += (digit_position == POINT_TENS) ? 0.1 : 0;
 80021ca:	4ba6      	ldr	r3, [pc, #664]	; (8002464 <buttonTask+0x5b4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9c2 	bl	8000558 <__aeabi_f2d>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	49a3      	ldr	r1, [pc, #652]	; (8002468 <buttonTask+0x5b8>)
 80021da:	7809      	ldrb	r1, [r1, #0]
 80021dc:	2901      	cmp	r1, #1
 80021de:	d103      	bne.n	80021e8 <buttonTask+0x338>
 80021e0:	a197      	add	r1, pc, #604	; (adr r1, 8002440 <buttonTask+0x590>)
 80021e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021e6:	e003      	b.n	80021f0 <buttonTask+0x340>
 80021e8:	f04f 0000 	mov.w	r0, #0
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f7fe f854 	bl	800029c <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fcfc 	bl	8000bf8 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	4a98      	ldr	r2, [pc, #608]	; (8002464 <buttonTask+0x5b4>)
 8002204:	6013      	str	r3, [r2, #0]
						freq_pwm += (digit_position == UNITS) ? 1 : 0;
 8002206:	4b98      	ldr	r3, [pc, #608]	; (8002468 <buttonTask+0x5b8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d102      	bne.n	8002214 <buttonTask+0x364>
 800220e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002212:	e001      	b.n	8002218 <buttonTask+0x368>
 8002214:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800246c <buttonTask+0x5bc>
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <buttonTask+0x5b4>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	4b90      	ldr	r3, [pc, #576]	; (8002464 <buttonTask+0x5b4>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
						freq_pwm += (digit_position == TENS) ? 10 : 0;
 8002228:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <buttonTask+0x5b8>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d102      	bne.n	8002236 <buttonTask+0x386>
 8002230:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002234:	e001      	b.n	800223a <buttonTask+0x38a>
 8002236:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800246c <buttonTask+0x5bc>
 800223a:	4b8a      	ldr	r3, [pc, #552]	; (8002464 <buttonTask+0x5b4>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002244:	4b87      	ldr	r3, [pc, #540]	; (8002464 <buttonTask+0x5b4>)
 8002246:	edc3 7a00 	vstr	s15, [r3]
						freq_pwm += (digit_position == HUNDREDS) ? 100 : 0;
 800224a:	4b87      	ldr	r3, [pc, #540]	; (8002468 <buttonTask+0x5b8>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d102      	bne.n	8002258 <buttonTask+0x3a8>
 8002252:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002470 <buttonTask+0x5c0>
 8002256:	e001      	b.n	800225c <buttonTask+0x3ac>
 8002258:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800246c <buttonTask+0x5bc>
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <buttonTask+0x5b4>)
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002266:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <buttonTask+0x5b4>)
 8002268:	edc3 7a00 	vstr	s15, [r3]
						/*	В зависимости от того, на каком разряде мы остановились, будем прибавлять величину на
						 	 1 нужного нам разряда, будь то десятые, еидинцы или десятки */
						if( freq_pwm > 9.9 && freq_pwm < 100 )	digits_amount = TENS;
 800226c:	4b7d      	ldr	r3, [pc, #500]	; (8002464 <buttonTask+0x5b4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f971 	bl	8000558 <__aeabi_f2d>
 8002276:	a374      	add	r3, pc, #464	; (adr r3, 8002448 <buttonTask+0x598>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe fc54 	bl	8000b28 <__aeabi_dcmpgt>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <buttonTask+0x3f0>
 8002286:	4b77      	ldr	r3, [pc, #476]	; (8002464 <buttonTask+0x5b4>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002470 <buttonTask+0x5c0>
 8002290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002298:	d502      	bpl.n	80022a0 <buttonTask+0x3f0>
 800229a:	4b76      	ldr	r3, [pc, #472]	; (8002474 <buttonTask+0x5c4>)
 800229c:	2203      	movs	r2, #3
 800229e:	701a      	strb	r2, [r3, #0]
						if( freq_pwm > 99.9 )					digits_amount = HUNDREDS;
 80022a0:	4b70      	ldr	r3, [pc, #448]	; (8002464 <buttonTask+0x5b4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f957 	bl	8000558 <__aeabi_f2d>
 80022aa:	a369      	add	r3, pc, #420	; (adr r3, 8002450 <buttonTask+0x5a0>)
 80022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b0:	f7fe fc3a 	bl	8000b28 <__aeabi_dcmpgt>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <buttonTask+0x410>
 80022ba:	4b6e      	ldr	r3, [pc, #440]	; (8002474 <buttonTask+0x5c4>)
 80022bc:	2204      	movs	r2, #4
 80022be:	701a      	strb	r2, [r3, #0]
						if( freq_pwm > 999.9 )					freq_pwm = 999.9;
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <buttonTask+0x5b4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f947 	bl	8000558 <__aeabi_f2d>
 80022ca:	a363      	add	r3, pc, #396	; (adr r3, 8002458 <buttonTask+0x5a8>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe fc2a 	bl	8000b28 <__aeabi_dcmpgt>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <buttonTask+0x430>
 80022da:	4b62      	ldr	r3, [pc, #392]	; (8002464 <buttonTask+0x5b4>)
 80022dc:	4a66      	ldr	r2, [pc, #408]	; (8002478 <buttonTask+0x5c8>)
 80022de:	601a      	str	r2, [r3, #0]
						xQueueSendToBack(xDisplayFreqQueue, &freq_pwm, 50 / portTICK_RATE_MS);
 80022e0:	4b66      	ldr	r3, [pc, #408]	; (800247c <buttonTask+0x5cc>)
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	2300      	movs	r3, #0
 80022e6:	2232      	movs	r2, #50	; 0x32
 80022e8:	495e      	ldr	r1, [pc, #376]	; (8002464 <buttonTask+0x5b4>)
 80022ea:	f004 f9b3 	bl	8006654 <xQueueGenericSend>
					}
					if( mode == DAC_MODE )
 80022ee:	7ffb      	ldrb	r3, [r7, #31]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	f040 808e 	bne.w	8002412 <buttonTask+0x562>
					{
						freq_dac += (digit_position == POINT_TENS) ? 0.1 : 0;
 80022f6:	4b62      	ldr	r3, [pc, #392]	; (8002480 <buttonTask+0x5d0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f92c 	bl	8000558 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4958      	ldr	r1, [pc, #352]	; (8002468 <buttonTask+0x5b8>)
 8002306:	7809      	ldrb	r1, [r1, #0]
 8002308:	2901      	cmp	r1, #1
 800230a:	d103      	bne.n	8002314 <buttonTask+0x464>
 800230c:	a14c      	add	r1, pc, #304	; (adr r1, 8002440 <buttonTask+0x590>)
 800230e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002312:	e003      	b.n	800231c <buttonTask+0x46c>
 8002314:	f04f 0000 	mov.w	r0, #0
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	f7fd ffbe 	bl	800029c <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc66 	bl	8000bf8 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	4a54      	ldr	r2, [pc, #336]	; (8002480 <buttonTask+0x5d0>)
 8002330:	6013      	str	r3, [r2, #0]
						freq_dac += (digit_position == UNITS) ? 1 : 0;
 8002332:	4b4d      	ldr	r3, [pc, #308]	; (8002468 <buttonTask+0x5b8>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d102      	bne.n	8002340 <buttonTask+0x490>
 800233a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800233e:	e001      	b.n	8002344 <buttonTask+0x494>
 8002340:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800246c <buttonTask+0x5bc>
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <buttonTask+0x5d0>)
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <buttonTask+0x5d0>)
 8002350:	edc3 7a00 	vstr	s15, [r3]
						freq_dac +=(digit_position == TENS) ? 10 : 0;
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <buttonTask+0x5b8>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d102      	bne.n	8002362 <buttonTask+0x4b2>
 800235c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002360:	e001      	b.n	8002366 <buttonTask+0x4b6>
 8002362:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800246c <buttonTask+0x5bc>
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <buttonTask+0x5d0>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <buttonTask+0x5d0>)
 8002372:	edc3 7a00 	vstr	s15, [r3]
						if(freq_dac > 9.9)	digits_amount = TENS;
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <buttonTask+0x5d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f8ec 	bl	8000558 <__aeabi_f2d>
 8002380:	a331      	add	r3, pc, #196	; (adr r3, 8002448 <buttonTask+0x598>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fe fbcf 	bl	8000b28 <__aeabi_dcmpgt>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <buttonTask+0x4e6>
 8002390:	4b38      	ldr	r3, [pc, #224]	; (8002474 <buttonTask+0x5c4>)
 8002392:	2203      	movs	r2, #3
 8002394:	701a      	strb	r2, [r3, #0]
						if( freq_dac > 5 && sign == SIN )							freq_dac = 5.0;
 8002396:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <buttonTask+0x5d0>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80023a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	dd06      	ble.n	80023b8 <buttonTask+0x508>
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <buttonTask+0x5d4>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d102      	bne.n	80023b8 <buttonTask+0x508>
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <buttonTask+0x5d0>)
 80023b4:	4a34      	ldr	r2, [pc, #208]	; (8002488 <buttonTask+0x5d8>)
 80023b6:	601a      	str	r2, [r3, #0]
						if( freq_dac > 30 && (sign == SAW || sign == REVERSE_SAW) )	freq_dac = 30.0;
 80023b8:	4b31      	ldr	r3, [pc, #196]	; (8002480 <buttonTask+0x5d0>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80023c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	dd0a      	ble.n	80023e2 <buttonTask+0x532>
 80023cc:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <buttonTask+0x5d4>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d003      	beq.n	80023dc <buttonTask+0x52c>
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <buttonTask+0x5d4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d102      	bne.n	80023e2 <buttonTask+0x532>
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <buttonTask+0x5d0>)
 80023de:	4a2b      	ldr	r2, [pc, #172]	; (800248c <buttonTask+0x5dc>)
 80023e0:	601a      	str	r2, [r3, #0]
						if( freq_dac > 15 && sign == TRIANGLE )						freq_dac = 15.0;
 80023e2:	4b27      	ldr	r3, [pc, #156]	; (8002480 <buttonTask+0x5d0>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80023ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	dd06      	ble.n	8002404 <buttonTask+0x554>
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <buttonTask+0x5d4>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <buttonTask+0x554>
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <buttonTask+0x5d0>)
 8002400:	4a23      	ldr	r2, [pc, #140]	; (8002490 <buttonTask+0x5e0>)
 8002402:	601a      	str	r2, [r3, #0]
						xQueueSendToBack(xDisplayFreqQueue, &freq_dac, 50 / portTICK_RATE_MS);
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <buttonTask+0x5cc>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	2232      	movs	r2, #50	; 0x32
 800240c:	491c      	ldr	r1, [pc, #112]	; (8002480 <buttonTask+0x5d0>)
 800240e:	f004 f921 	bl	8006654 <xQueueGenericSend>
					}
				}
				if( set_duty_stage )
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <buttonTask+0x5e4>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8322 	beq.w	8002a60 <buttonTask+0xbb0>
				{
					duty += (digit_position == POINT_TENS) ? 0.1 : 0;
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <buttonTask+0x5e8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f899 	bl	8000558 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	490f      	ldr	r1, [pc, #60]	; (8002468 <buttonTask+0x5b8>)
 800242c:	7809      	ldrb	r1, [r1, #0]
 800242e:	2901      	cmp	r1, #1
 8002430:	d134      	bne.n	800249c <buttonTask+0x5ec>
 8002432:	a103      	add	r1, pc, #12	; (adr r1, 8002440 <buttonTask+0x590>)
 8002434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002438:	e034      	b.n	80024a4 <buttonTask+0x5f4>
 800243a:	bf00      	nop
 800243c:	f3af 8000 	nop.w
 8002440:	9999999a 	.word	0x9999999a
 8002444:	3fb99999 	.word	0x3fb99999
 8002448:	cccccccd 	.word	0xcccccccd
 800244c:	4023cccc 	.word	0x4023cccc
 8002450:	9999999a 	.word	0x9999999a
 8002454:	4058f999 	.word	0x4058f999
 8002458:	33333333 	.word	0x33333333
 800245c:	408f3f33 	.word	0x408f3f33
 8002460:	200009e6 	.word	0x200009e6
 8002464:	200003a4 	.word	0x200003a4
 8002468:	2000039d 	.word	0x2000039d
 800246c:	00000000 	.word	0x00000000
 8002470:	42c80000 	.word	0x42c80000
 8002474:	2000039e 	.word	0x2000039e
 8002478:	4479f99a 	.word	0x4479f99a
 800247c:	200009f8 	.word	0x200009f8
 8002480:	200003a0 	.word	0x200003a0
 8002484:	200003ac 	.word	0x200003ac
 8002488:	40a00000 	.word	0x40a00000
 800248c:	41f00000 	.word	0x41f00000
 8002490:	41700000 	.word	0x41700000
 8002494:	200009e7 	.word	0x200009e7
 8002498:	200003a8 	.word	0x200003a8
 800249c:	f04f 0000 	mov.w	r0, #0
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	f7fd fefa 	bl	800029c <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fba2 	bl	8000bf8 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4ab0      	ldr	r2, [pc, #704]	; (8002778 <buttonTask+0x8c8>)
 80024b8:	6013      	str	r3, [r2, #0]
					duty += (digit_position == UNITS) ? 1 : 0;
 80024ba:	4bb0      	ldr	r3, [pc, #704]	; (800277c <buttonTask+0x8cc>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d102      	bne.n	80024c8 <buttonTask+0x618>
 80024c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024c6:	e001      	b.n	80024cc <buttonTask+0x61c>
 80024c8:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8002780 <buttonTask+0x8d0>
 80024cc:	4baa      	ldr	r3, [pc, #680]	; (8002778 <buttonTask+0x8c8>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d6:	4ba8      	ldr	r3, [pc, #672]	; (8002778 <buttonTask+0x8c8>)
 80024d8:	edc3 7a00 	vstr	s15, [r3]
					duty += (digit_position == TENS) ? 10 : 0;
 80024dc:	4ba7      	ldr	r3, [pc, #668]	; (800277c <buttonTask+0x8cc>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d102      	bne.n	80024ea <buttonTask+0x63a>
 80024e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024e8:	e001      	b.n	80024ee <buttonTask+0x63e>
 80024ea:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002780 <buttonTask+0x8d0>
 80024ee:	4ba2      	ldr	r3, [pc, #648]	; (8002778 <buttonTask+0x8c8>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f8:	4b9f      	ldr	r3, [pc, #636]	; (8002778 <buttonTask+0x8c8>)
 80024fa:	edc3 7a00 	vstr	s15, [r3]
					if(duty > 9.9)	digits_amount = TENS;
 80024fe:	4b9e      	ldr	r3, [pc, #632]	; (8002778 <buttonTask+0x8c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f828 	bl	8000558 <__aeabi_f2d>
 8002508:	a393      	add	r3, pc, #588	; (adr r3, 8002758 <buttonTask+0x8a8>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe fb0b 	bl	8000b28 <__aeabi_dcmpgt>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <buttonTask+0x66e>
 8002518:	4b9a      	ldr	r3, [pc, #616]	; (8002784 <buttonTask+0x8d4>)
 800251a:	2203      	movs	r2, #3
 800251c:	701a      	strb	r2, [r3, #0]
					if(duty > 99.9)	duty = 99.9;
 800251e:	4b96      	ldr	r3, [pc, #600]	; (8002778 <buttonTask+0x8c8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f818 	bl	8000558 <__aeabi_f2d>
 8002528:	a38d      	add	r3, pc, #564	; (adr r3, 8002760 <buttonTask+0x8b0>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fe fafb 	bl	8000b28 <__aeabi_dcmpgt>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <buttonTask+0x68e>
 8002538:	4b8f      	ldr	r3, [pc, #572]	; (8002778 <buttonTask+0x8c8>)
 800253a:	4a93      	ldr	r2, [pc, #588]	; (8002788 <buttonTask+0x8d8>)
 800253c:	601a      	str	r2, [r3, #0]
					xQueueSendToBack(xDisplayDutyQueue, &duty, 50 / portTICK_RATE_MS);
 800253e:	4b93      	ldr	r3, [pc, #588]	; (800278c <buttonTask+0x8dc>)
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	2232      	movs	r2, #50	; 0x32
 8002546:	498c      	ldr	r1, [pc, #560]	; (8002778 <buttonTask+0x8c8>)
 8002548:	f004 f884 	bl	8006654 <xQueueGenericSend>
				}
				break;
 800254c:	e288      	b.n	8002a60 <buttonTask+0xbb0>

			case BUTTON_DOWN_Pin:
				if( set_freq_stage )
 800254e:	4b90      	ldr	r3, [pc, #576]	; (8002790 <buttonTask+0x8e0>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80d4 	beq.w	8002700 <buttonTask+0x850>
				{
					if( mode == PWM_MODE)
 8002558:	7ffb      	ldrb	r3, [r7, #31]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d172      	bne.n	8002644 <buttonTask+0x794>
					{
						freq_pwm -= (digit_position == POINT_TENS) ? 0.1 : 0;
 800255e:	4b8d      	ldr	r3, [pc, #564]	; (8002794 <buttonTask+0x8e4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd fff8 	bl	8000558 <__aeabi_f2d>
 8002568:	4b84      	ldr	r3, [pc, #528]	; (800277c <buttonTask+0x8cc>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d103      	bne.n	8002578 <buttonTask+0x6c8>
 8002570:	a37d      	add	r3, pc, #500	; (adr r3, 8002768 <buttonTask+0x8b8>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	e003      	b.n	8002580 <buttonTask+0x6d0>
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	f7fd fe8a 	bl	8000298 <__aeabi_dsub>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe fb34 	bl	8000bf8 <__aeabi_d2f>
 8002590:	4603      	mov	r3, r0
 8002592:	4a80      	ldr	r2, [pc, #512]	; (8002794 <buttonTask+0x8e4>)
 8002594:	6013      	str	r3, [r2, #0]
						freq_pwm -= (digit_position == UNITS) ? 1 : 0;
 8002596:	4b7f      	ldr	r3, [pc, #508]	; (8002794 <buttonTask+0x8e4>)
 8002598:	ed93 7a00 	vldr	s14, [r3]
 800259c:	4b77      	ldr	r3, [pc, #476]	; (800277c <buttonTask+0x8cc>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d102      	bne.n	80025aa <buttonTask+0x6fa>
 80025a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80025a8:	e001      	b.n	80025ae <buttonTask+0x6fe>
 80025aa:	eddf 7a75 	vldr	s15, [pc, #468]	; 8002780 <buttonTask+0x8d0>
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	4b78      	ldr	r3, [pc, #480]	; (8002794 <buttonTask+0x8e4>)
 80025b4:	edc3 7a00 	vstr	s15, [r3]
						freq_pwm -= (digit_position == TENS) ? 10 : 0;
 80025b8:	4b76      	ldr	r3, [pc, #472]	; (8002794 <buttonTask+0x8e4>)
 80025ba:	ed93 7a00 	vldr	s14, [r3]
 80025be:	4b6f      	ldr	r3, [pc, #444]	; (800277c <buttonTask+0x8cc>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d102      	bne.n	80025cc <buttonTask+0x71c>
 80025c6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80025ca:	e001      	b.n	80025d0 <buttonTask+0x720>
 80025cc:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8002780 <buttonTask+0x8d0>
 80025d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d4:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <buttonTask+0x8e4>)
 80025d6:	edc3 7a00 	vstr	s15, [r3]
						freq_pwm -= (digit_position == HUNDREDS) ? 100 : 0;
 80025da:	4b6e      	ldr	r3, [pc, #440]	; (8002794 <buttonTask+0x8e4>)
 80025dc:	ed93 7a00 	vldr	s14, [r3]
 80025e0:	4b66      	ldr	r3, [pc, #408]	; (800277c <buttonTask+0x8cc>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d102      	bne.n	80025ee <buttonTask+0x73e>
 80025e8:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8002798 <buttonTask+0x8e8>
 80025ec:	e001      	b.n	80025f2 <buttonTask+0x742>
 80025ee:	eddf 7a64 	vldr	s15, [pc, #400]	; 8002780 <buttonTask+0x8d0>
 80025f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f6:	4b67      	ldr	r3, [pc, #412]	; (8002794 <buttonTask+0x8e4>)
 80025f8:	edc3 7a00 	vstr	s15, [r3]
						if( freq_pwm < 10 )	digits_amount = UNITS;
 80025fc:	4b65      	ldr	r3, [pc, #404]	; (8002794 <buttonTask+0x8e4>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	d502      	bpl.n	8002616 <buttonTask+0x766>
 8002610:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <buttonTask+0x8d4>)
 8002612:	2202      	movs	r2, #2
 8002614:	701a      	strb	r2, [r3, #0]
						if( freq_pwm <= 0.01 )	freq_pwm = 0.1;
 8002616:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <buttonTask+0x8e4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff9c 	bl	8000558 <__aeabi_f2d>
 8002620:	a353      	add	r3, pc, #332	; (adr r3, 8002770 <buttonTask+0x8c0>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fe fa6b 	bl	8000b00 <__aeabi_dcmple>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <buttonTask+0x786>
 8002630:	4b58      	ldr	r3, [pc, #352]	; (8002794 <buttonTask+0x8e4>)
 8002632:	4a5a      	ldr	r2, [pc, #360]	; (800279c <buttonTask+0x8ec>)
 8002634:	601a      	str	r2, [r3, #0]
						xQueueSendToBack(xDisplayFreqQueue, &freq_pwm, 50 / portTICK_RATE_MS);
 8002636:	4b5a      	ldr	r3, [pc, #360]	; (80027a0 <buttonTask+0x8f0>)
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	2300      	movs	r3, #0
 800263c:	2232      	movs	r2, #50	; 0x32
 800263e:	4955      	ldr	r1, [pc, #340]	; (8002794 <buttonTask+0x8e4>)
 8002640:	f004 f808 	bl	8006654 <xQueueGenericSend>
					}
					if( mode == DAC_MODE )
 8002644:	7ffb      	ldrb	r3, [r7, #31]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d15a      	bne.n	8002700 <buttonTask+0x850>
					{
						freq_dac -= (digit_position == POINT_TENS) ? 0.1 : 0;
 800264a:	4b56      	ldr	r3, [pc, #344]	; (80027a4 <buttonTask+0x8f4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff82 	bl	8000558 <__aeabi_f2d>
 8002654:	4b49      	ldr	r3, [pc, #292]	; (800277c <buttonTask+0x8cc>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d103      	bne.n	8002664 <buttonTask+0x7b4>
 800265c:	a342      	add	r3, pc, #264	; (adr r3, 8002768 <buttonTask+0x8b8>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	e003      	b.n	800266c <buttonTask+0x7bc>
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	f7fd fe14 	bl	8000298 <__aeabi_dsub>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fabe 	bl	8000bf8 <__aeabi_d2f>
 800267c:	4603      	mov	r3, r0
 800267e:	4a49      	ldr	r2, [pc, #292]	; (80027a4 <buttonTask+0x8f4>)
 8002680:	6013      	str	r3, [r2, #0]
						freq_dac -= (digit_position == UNITS) ? 1 : 0;
 8002682:	4b48      	ldr	r3, [pc, #288]	; (80027a4 <buttonTask+0x8f4>)
 8002684:	ed93 7a00 	vldr	s14, [r3]
 8002688:	4b3c      	ldr	r3, [pc, #240]	; (800277c <buttonTask+0x8cc>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d102      	bne.n	8002696 <buttonTask+0x7e6>
 8002690:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002694:	e001      	b.n	800269a <buttonTask+0x7ea>
 8002696:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8002780 <buttonTask+0x8d0>
 800269a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <buttonTask+0x8f4>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]
						freq_dac -= (digit_position == TENS) ? 10 : 0;
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <buttonTask+0x8f4>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <buttonTask+0x8cc>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d102      	bne.n	80026b8 <buttonTask+0x808>
 80026b2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80026b6:	e001      	b.n	80026bc <buttonTask+0x80c>
 80026b8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8002780 <buttonTask+0x8d0>
 80026bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c0:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <buttonTask+0x8f4>)
 80026c2:	edc3 7a00 	vstr	s15, [r3]
						if( freq_dac < 10 )	digits_amount = UNITS;
 80026c6:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <buttonTask+0x8f4>)
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	d502      	bpl.n	80026e0 <buttonTask+0x830>
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <buttonTask+0x8d4>)
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
						if( freq_dac <= 0.01 )	freq_dac = 0.1;
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <buttonTask+0x8f4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff37 	bl	8000558 <__aeabi_f2d>
 80026ea:	a321      	add	r3, pc, #132	; (adr r3, 8002770 <buttonTask+0x8c0>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f7fe fa06 	bl	8000b00 <__aeabi_dcmple>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <buttonTask+0x850>
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <buttonTask+0x8f4>)
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <buttonTask+0x8ec>)
 80026fe:	601a      	str	r2, [r3, #0]
					}
				}
				if( set_duty_stage )
 8002700:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <buttonTask+0x8f8>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 81ad 	beq.w	8002a64 <buttonTask+0xbb4>
				{
					duty -= (digit_position == POINT_TENS) ? 0.1 : 0;
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <buttonTask+0x8c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff22 	bl	8000558 <__aeabi_f2d>
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <buttonTask+0x8cc>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d103      	bne.n	8002724 <buttonTask+0x874>
 800271c:	a312      	add	r3, pc, #72	; (adr r3, 8002768 <buttonTask+0x8b8>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	e003      	b.n	800272c <buttonTask+0x87c>
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f7fd fdb4 	bl	8000298 <__aeabi_dsub>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe fa5e 	bl	8000bf8 <__aeabi_d2f>
 800273c:	4603      	mov	r3, r0
 800273e:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <buttonTask+0x8c8>)
 8002740:	6013      	str	r3, [r2, #0]
					duty -= (digit_position == UNITS) ? 1 : 0;
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <buttonTask+0x8c8>)
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <buttonTask+0x8cc>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d12f      	bne.n	80027b0 <buttonTask+0x900>
 8002750:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002754:	e02e      	b.n	80027b4 <buttonTask+0x904>
 8002756:	bf00      	nop
 8002758:	cccccccd 	.word	0xcccccccd
 800275c:	4023cccc 	.word	0x4023cccc
 8002760:	9999999a 	.word	0x9999999a
 8002764:	4058f999 	.word	0x4058f999
 8002768:	9999999a 	.word	0x9999999a
 800276c:	3fb99999 	.word	0x3fb99999
 8002770:	47ae147b 	.word	0x47ae147b
 8002774:	3f847ae1 	.word	0x3f847ae1
 8002778:	200003a8 	.word	0x200003a8
 800277c:	2000039d 	.word	0x2000039d
 8002780:	00000000 	.word	0x00000000
 8002784:	2000039e 	.word	0x2000039e
 8002788:	42c7cccd 	.word	0x42c7cccd
 800278c:	200009fc 	.word	0x200009fc
 8002790:	200009e6 	.word	0x200009e6
 8002794:	200003a4 	.word	0x200003a4
 8002798:	42c80000 	.word	0x42c80000
 800279c:	3dcccccd 	.word	0x3dcccccd
 80027a0:	200009f8 	.word	0x200009f8
 80027a4:	200003a0 	.word	0x200003a0
 80027a8:	200009e7 	.word	0x200009e7
 80027ac:	00000000 	.word	0x00000000
 80027b0:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 80027ac <buttonTask+0x8fc>
 80027b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b8:	4bb1      	ldr	r3, [pc, #708]	; (8002a80 <buttonTask+0xbd0>)
 80027ba:	edc3 7a00 	vstr	s15, [r3]
					duty -= (digit_position == TENS) ? 10 : 0;
 80027be:	4bb0      	ldr	r3, [pc, #704]	; (8002a80 <buttonTask+0xbd0>)
 80027c0:	ed93 7a00 	vldr	s14, [r3]
 80027c4:	4baf      	ldr	r3, [pc, #700]	; (8002a84 <buttonTask+0xbd4>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d102      	bne.n	80027d2 <buttonTask+0x922>
 80027cc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80027d0:	e001      	b.n	80027d6 <buttonTask+0x926>
 80027d2:	eddf 7aad 	vldr	s15, [pc, #692]	; 8002a88 <buttonTask+0xbd8>
 80027d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027da:	4ba9      	ldr	r3, [pc, #676]	; (8002a80 <buttonTask+0xbd0>)
 80027dc:	edc3 7a00 	vstr	s15, [r3]
					if(duty < 10)	digits_amount = UNITS;
 80027e0:	4ba7      	ldr	r3, [pc, #668]	; (8002a80 <buttonTask+0xbd0>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	d502      	bpl.n	80027fa <buttonTask+0x94a>
 80027f4:	4ba5      	ldr	r3, [pc, #660]	; (8002a8c <buttonTask+0xbdc>)
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
					if(duty <= 0.01 )	duty = 0.1;
 80027fa:	4ba1      	ldr	r3, [pc, #644]	; (8002a80 <buttonTask+0xbd0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd feaa 	bl	8000558 <__aeabi_f2d>
 8002804:	a39c      	add	r3, pc, #624	; (adr r3, 8002a78 <buttonTask+0xbc8>)
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f7fe f979 	bl	8000b00 <__aeabi_dcmple>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <buttonTask+0x96a>
 8002814:	4b9a      	ldr	r3, [pc, #616]	; (8002a80 <buttonTask+0xbd0>)
 8002816:	4a9e      	ldr	r2, [pc, #632]	; (8002a90 <buttonTask+0xbe0>)
 8002818:	601a      	str	r2, [r3, #0]
					xQueueSendToBack(xDisplayDutyQueue, &duty, 50 / portTICK_RATE_MS);
 800281a:	4b9e      	ldr	r3, [pc, #632]	; (8002a94 <buttonTask+0xbe4>)
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	2300      	movs	r3, #0
 8002820:	2232      	movs	r2, #50	; 0x32
 8002822:	4997      	ldr	r1, [pc, #604]	; (8002a80 <buttonTask+0xbd0>)
 8002824:	f003 ff16 	bl	8006654 <xQueueGenericSend>
				}
				break;
 8002828:	e11c      	b.n	8002a64 <buttonTask+0xbb4>

			case BUTTON_OK_Pin:
				if( start_stage )
 800282a:	4b9b      	ldr	r3, [pc, #620]	; (8002a98 <buttonTask+0xbe8>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d014      	beq.n	800285c <buttonTask+0x9ac>
				{
					start_stage = false;
 8002832:	4b99      	ldr	r3, [pc, #612]	; (8002a98 <buttonTask+0xbe8>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
					set_mode_stage = true;
 8002838:	4b98      	ldr	r3, [pc, #608]	; (8002a9c <buttonTask+0xbec>)
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "PWM MODE");
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	4997      	ldr	r1, [pc, #604]	; (8002aa0 <buttonTask+0xbf0>)
 8002844:	4618      	mov	r0, r3
 8002846:	f006 fa43 	bl	8008cd0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);	//
 800284a:	4b96      	ldr	r3, [pc, #600]	; (8002aa4 <buttonTask+0xbf4>)
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	f107 010c 	add.w	r1, r7, #12
 8002852:	2300      	movs	r3, #0
 8002854:	2232      	movs	r2, #50	; 0x32
 8002856:	f003 fefd 	bl	8006654 <xQueueGenericSend>
					continue;
 800285a:	e10b      	b.n	8002a74 <buttonTask+0xbc4>
				}
				if( set_mode_stage )
 800285c:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <buttonTask+0xbec>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d057      	beq.n	8002914 <buttonTask+0xa64>
				{
					set_mode_stage = false;
 8002864:	4b8d      	ldr	r3, [pc, #564]	; (8002a9c <buttonTask+0xbec>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
					if( mode == PWM_MODE)
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d122      	bne.n	80028b6 <buttonTask+0xa06>
					{
						set_signal_stage = false;
 8002870:	4b8d      	ldr	r3, [pc, #564]	; (8002aa8 <buttonTask+0xbf8>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
						digits_amount = UNITS;
 8002876:	4b85      	ldr	r3, [pc, #532]	; (8002a8c <buttonTask+0xbdc>)
 8002878:	2202      	movs	r2, #2
 800287a:	701a      	strb	r2, [r3, #0]
						set_freq_stage = true;
 800287c:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <buttonTask+0xbfc>)
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
						sprintf(str_buff, "SET FREQ");
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	498a      	ldr	r1, [pc, #552]	; (8002ab0 <buttonTask+0xc00>)
 8002888:	4618      	mov	r0, r3
 800288a:	f006 fa21 	bl	8008cd0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 800288e:	4b85      	ldr	r3, [pc, #532]	; (8002aa4 <buttonTask+0xbf4>)
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	f107 010c 	add.w	r1, r7, #12
 8002896:	2300      	movs	r3, #0
 8002898:	2232      	movs	r2, #50	; 0x32
 800289a:	f003 fedb 	bl	8006654 <xQueueGenericSend>
						vTaskDelay(2000 / portTICK_RATE_MS);
 800289e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028a2:	f004 fbf5 	bl	8007090 <vTaskDelay>
						xQueueSendToBack(xDisplayFreqQueue, &freq_pwm, 50 / portTICK_RATE_MS);
 80028a6:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <buttonTask+0xc04>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	2232      	movs	r2, #50	; 0x32
 80028ae:	4982      	ldr	r1, [pc, #520]	; (8002ab8 <buttonTask+0xc08>)
 80028b0:	f003 fed0 	bl	8006654 <xQueueGenericSend>
						continue;
 80028b4:	e0de      	b.n	8002a74 <buttonTask+0xbc4>
					}
					else if( mode == DAC_MODE)
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d12b      	bne.n	8002914 <buttonTask+0xa64>
					{
						set_signal_stage = true;
 80028bc:	4b7a      	ldr	r3, [pc, #488]	; (8002aa8 <buttonTask+0xbf8>)
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
						sprintf(str_buff, "SET SIGN");
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	497d      	ldr	r1, [pc, #500]	; (8002abc <buttonTask+0xc0c>)
 80028c8:	4618      	mov	r0, r3
 80028ca:	f006 fa01 	bl	8008cd0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 80028ce:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <buttonTask+0xbf4>)
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f107 010c 	add.w	r1, r7, #12
 80028d6:	2300      	movs	r3, #0
 80028d8:	2232      	movs	r2, #50	; 0x32
 80028da:	f003 febb 	bl	8006654 <xQueueGenericSend>
						vTaskDelay(2000 / portTICK_RATE_MS);
 80028de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028e2:	f004 fbd5 	bl	8007090 <vTaskDelay>
						sprintf(str_buff, signal_msg[sign - 1]);
 80028e6:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <buttonTask+0xc10>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	1e5a      	subs	r2, r3, #1
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	4a74      	ldr	r2, [pc, #464]	; (8002ac4 <buttonTask+0xc14>)
 80028f4:	441a      	add	r2, r3
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f006 f9e7 	bl	8008cd0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 8002902:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <buttonTask+0xbf4>)
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	f107 010c 	add.w	r1, r7, #12
 800290a:	2300      	movs	r3, #0
 800290c:	2232      	movs	r2, #50	; 0x32
 800290e:	f003 fea1 	bl	8006654 <xQueueGenericSend>
						continue;
 8002912:	e0af      	b.n	8002a74 <buttonTask+0xbc4>
					}
				}
				if( set_signal_stage )
 8002914:	4b64      	ldr	r3, [pc, #400]	; (8002aa8 <buttonTask+0xbf8>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01f      	beq.n	800295c <buttonTask+0xaac>
				{
					set_signal_stage = false;
 800291c:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <buttonTask+0xbf8>)
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
					set_freq_stage = true;
 8002922:	4b62      	ldr	r3, [pc, #392]	; (8002aac <buttonTask+0xbfc>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "SET FREQ");
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	4960      	ldr	r1, [pc, #384]	; (8002ab0 <buttonTask+0xc00>)
 800292e:	4618      	mov	r0, r3
 8002930:	f006 f9ce 	bl	8008cd0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 10 / portTICK_RATE_MS);
 8002934:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <buttonTask+0xbf4>)
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	f107 010c 	add.w	r1, r7, #12
 800293c:	2300      	movs	r3, #0
 800293e:	220a      	movs	r2, #10
 8002940:	f003 fe88 	bl	8006654 <xQueueGenericSend>
					vTaskDelay(2000 / portTICK_RATE_MS);
 8002944:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002948:	f004 fba2 	bl	8007090 <vTaskDelay>
					xQueueSendToBack(xDisplayFreqQueue, &freq_dac, 10 / portTICK_RATE_MS);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <buttonTask+0xc04>)
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	2300      	movs	r3, #0
 8002952:	220a      	movs	r2, #10
 8002954:	495c      	ldr	r1, [pc, #368]	; (8002ac8 <buttonTask+0xc18>)
 8002956:	f003 fe7d 	bl	8006654 <xQueueGenericSend>
					continue;
 800295a:	e08b      	b.n	8002a74 <buttonTask+0xbc4>
				}
				if( set_freq_stage )
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <buttonTask+0xbfc>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d03e      	beq.n	80029e2 <buttonTask+0xb32>
				{
					if( mode == PWM_MODE )
 8002964:	7ffb      	ldrb	r3, [r7, #31]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d123      	bne.n	80029b2 <buttonTask+0xb02>
					{
						digits_amount = TENS;
 800296a:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <buttonTask+0xbdc>)
 800296c:	2203      	movs	r2, #3
 800296e:	701a      	strb	r2, [r3, #0]
						sprintf(str_buff, "%s", "SET DUTY");
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	4a55      	ldr	r2, [pc, #340]	; (8002acc <buttonTask+0xc1c>)
 8002976:	4956      	ldr	r1, [pc, #344]	; (8002ad0 <buttonTask+0xc20>)
 8002978:	4618      	mov	r0, r3
 800297a:	f006 f9a9 	bl	8008cd0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <buttonTask+0xbf4>)
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	f107 010c 	add.w	r1, r7, #12
 8002986:	2300      	movs	r3, #0
 8002988:	2232      	movs	r2, #50	; 0x32
 800298a:	f003 fe63 	bl	8006654 <xQueueGenericSend>
						vTaskDelay(2000 / portTICK_RATE_MS);
 800298e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002992:	f004 fb7d 	bl	8007090 <vTaskDelay>
						xQueueSendToBack(xDisplayDutyQueue, &duty, 50 / portTICK_RATE_MS);
 8002996:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <buttonTask+0xbe4>)
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	2232      	movs	r2, #50	; 0x32
 800299e:	4938      	ldr	r1, [pc, #224]	; (8002a80 <buttonTask+0xbd0>)
 80029a0:	f003 fe58 	bl	8006654 <xQueueGenericSend>
						set_duty_stage = true;
 80029a4:	4b4b      	ldr	r3, [pc, #300]	; (8002ad4 <buttonTask+0xc24>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
						set_freq_stage = false;
 80029aa:	4b40      	ldr	r3, [pc, #256]	; (8002aac <buttonTask+0xbfc>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
						continue;
 80029b0:	e060      	b.n	8002a74 <buttonTask+0xbc4>
					}
					else
					{
						set_duty_stage = false;
 80029b2:	4b48      	ldr	r3, [pc, #288]	; (8002ad4 <buttonTask+0xc24>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
						sprintf(str_buff, "%s", "DAC RUN");
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4a46      	ldr	r2, [pc, #280]	; (8002ad8 <buttonTask+0xc28>)
 80029be:	4944      	ldr	r1, [pc, #272]	; (8002ad0 <buttonTask+0xc20>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f006 f985 	bl	8008cd0 <siprintf>
						xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <buttonTask+0xbf4>)
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f107 010c 	add.w	r1, r7, #12
 80029ce:	2300      	movs	r3, #0
 80029d0:	2232      	movs	r2, #50	; 0x32
 80029d2:	f003 fe3f 	bl	8006654 <xQueueGenericSend>
						dac_is_running = true;
 80029d6:	4b41      	ldr	r3, [pc, #260]	; (8002adc <buttonTask+0xc2c>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
					}
					set_freq_stage = false;
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <buttonTask+0xbfc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
				}
				if( set_duty_stage )
 80029e2:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <buttonTask+0xc24>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d03e      	beq.n	8002a68 <buttonTask+0xbb8>
				{
					set_duty_stage = false;
 80029ea:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <buttonTask+0xc24>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
					sprintf(str_buff, "%s", "PWM RUN");
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <buttonTask+0xc30>)
 80029f6:	4936      	ldr	r1, [pc, #216]	; (8002ad0 <buttonTask+0xc20>)
 80029f8:	4618      	mov	r0, r3
 80029fa:	f006 f969 	bl	8008cd0 <siprintf>
					xQueueSendToBack(xDisplayStringQueue, str_buff, 50 / portTICK_RATE_MS);
 80029fe:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <buttonTask+0xbf4>)
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	f107 010c 	add.w	r1, r7, #12
 8002a06:	2300      	movs	r3, #0
 8002a08:	2232      	movs	r2, #50	; 0x32
 8002a0a:	f003 fe23 	bl	8006654 <xQueueGenericSend>
					pwm_is_running = true;
 8002a0e:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <buttonTask+0xc34>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002a14:	e028      	b.n	8002a68 <buttonTask+0xbb8>

			case BUTTON_RETURN_Pin:
				set_mode_stage = false;
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <buttonTask+0xbec>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
				set_signal_stage = false;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <buttonTask+0xbf8>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
				set_duty_stage = false;
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <buttonTask+0xc24>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
				set_freq_stage = false;
 8002a28:	4b20      	ldr	r3, [pc, #128]	; (8002aac <buttonTask+0xbfc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
				start_stage = true;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <buttonTask+0xbe8>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
				mode = PWM_MODE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
				sprintf(str_buff, "%s", "SET MODE");
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <buttonTask+0xc38>)
 8002a3e:	4924      	ldr	r1, [pc, #144]	; (8002ad0 <buttonTask+0xc20>)
 8002a40:	4618      	mov	r0, r3
 8002a42:	f006 f945 	bl	8008cd0 <siprintf>
				xQueueSendToBack(xDisplayStringQueue,str_buff, 10 / portTICK_RATE_MS);
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <buttonTask+0xbf4>)
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	f107 010c 	add.w	r1, r7, #12
 8002a4e:	2300      	movs	r3, #0
 8002a50:	220a      	movs	r2, #10
 8002a52:	f003 fdff 	bl	8006654 <xQueueGenericSend>
				break;
 8002a56:	e008      	b.n	8002a6a <buttonTask+0xbba>
				break;
 8002a58:	bf00      	nop
 8002a5a:	e006      	b.n	8002a6a <buttonTask+0xbba>
				break;
 8002a5c:	bf00      	nop
 8002a5e:	e004      	b.n	8002a6a <buttonTask+0xbba>
				break;
 8002a60:	bf00      	nop
 8002a62:	e002      	b.n	8002a6a <buttonTask+0xbba>
				break;
 8002a64:	bf00      	nop
 8002a66:	e000      	b.n	8002a6a <buttonTask+0xbba>
				break;
 8002a68:	bf00      	nop
		}
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a6e:	481f      	ldr	r0, [pc, #124]	; (8002aec <buttonTask+0xc3c>)
 8002a70:	f001 fbcb 	bl	800420a <HAL_GPIO_TogglePin>
		button_num = 0;
 8002a74:	f7ff ba2c 	b.w	8001ed0 <buttonTask+0x20>
 8002a78:	47ae147b 	.word	0x47ae147b
 8002a7c:	3f847ae1 	.word	0x3f847ae1
 8002a80:	200003a8 	.word	0x200003a8
 8002a84:	2000039d 	.word	0x2000039d
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	2000039e 	.word	0x2000039e
 8002a90:	3dcccccd 	.word	0x3dcccccd
 8002a94:	200009fc 	.word	0x200009fc
 8002a98:	2000039c 	.word	0x2000039c
 8002a9c:	200009e4 	.word	0x200009e4
 8002aa0:	0800b2d8 	.word	0x0800b2d8
 8002aa4:	200009f4 	.word	0x200009f4
 8002aa8:	200009e5 	.word	0x200009e5
 8002aac:	200009e6 	.word	0x200009e6
 8002ab0:	0800b2e8 	.word	0x0800b2e8
 8002ab4:	200009f8 	.word	0x200009f8
 8002ab8:	200003a4 	.word	0x200003a4
 8002abc:	0800b2f4 	.word	0x0800b2f4
 8002ac0:	200003ac 	.word	0x200003ac
 8002ac4:	200003b0 	.word	0x200003b0
 8002ac8:	200003a0 	.word	0x200003a0
 8002acc:	0800b300 	.word	0x0800b300
 8002ad0:	0800b2e4 	.word	0x0800b2e4
 8002ad4:	200009e7 	.word	0x200009e7
 8002ad8:	0800b30c 	.word	0x0800b30c
 8002adc:	200009e8 	.word	0x200009e8
 8002ae0:	0800b314 	.word	0x0800b314
 8002ae4:	200009e9 	.word	0x200009e9
 8002ae8:	0800b214 	.word	0x0800b214
 8002aec:	40020800 	.word	0x40020800

08002af0 <displayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTask */
void displayTask(void const * argument)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayTask */
  /* Infinite loop */
	char str[9] = {};
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	f107 0318 	add.w	r3, r7, #24
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	711a      	strb	r2, [r3, #4]
	uint8_t offset;
	float freq = 0.0f;
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
	float duty = 0.0f;
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if( xQueueReceive(xDisplayStringQueue, str, 10 / portTICK_RATE_MS) == pdPASS )
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <displayTask+0x110>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f107 0114 	add.w	r1, r7, #20
 8002b1a:	220a      	movs	r2, #10
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 ff33 	bl	8006988 <xQueueReceive>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <displayTask+0x46>
		{
			MAX7219_clearAll();
 8002b28:	f7fe fd88 	bl	800163c <MAX7219_clearAll>
			MAX7219_sendString(str);
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe fcc1 	bl	80014b8 <MAX7219_sendString>
		}
		if( set_duty_stage )
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <displayTask+0x114>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d02b      	beq.n	8002b96 <displayTask+0xa6>
		{
			if( xQueueReceive(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS) != pdPASS ) continue;
 8002b3e:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <displayTask+0x118>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f107 010c 	add.w	r1, r7, #12
 8002b46:	220a      	movs	r2, #10
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 ff1d 	bl	8006988 <xQueueReceive>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d150      	bne.n	8002bf6 <displayTask+0x106>
			MAX7219_clearAll();
 8002b54:	f7fe fd72 	bl	800163c <MAX7219_clearAll>
			/*	Реализована подсветка нужного разряда при его выборе путем подсвечивания цифры на 0,3 сек	*/
			offset = MAX7219_sendDuty(duty);
 8002b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b60:	f7fe fd34 	bl	80015cc <MAX7219_sendDuty>
 8002b64:	4603      	mov	r3, r0
 8002b66:	77fb      	strb	r3, [r7, #31]
			MAX7219_clearOneSegment( offset - (1 + digit_position) );
 8002b68:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <displayTask+0x11c>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	7ffa      	ldrb	r2, [r7, #31]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fd50 	bl	800161c <MAX7219_clearOneSegment>
			vTaskDelay(300 / portTICK_RATE_MS);
 8002b7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b80:	f004 fa86 	bl	8007090 <vTaskDelay>
			MAX7219_clearAll();
 8002b84:	f7fe fd5a 	bl	800163c <MAX7219_clearAll>
			MAX7219_sendDuty(duty);
 8002b88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b90:	f7fe fd1c 	bl	80015cc <MAX7219_sendDuty>
 8002b94:	e7bd      	b.n	8002b12 <displayTask+0x22>
		}
		else if( set_freq_stage )
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <displayTask+0x120>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0b9      	beq.n	8002b12 <displayTask+0x22>
		{
			if( xQueueReceive(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS) != pdPASS) continue;
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <displayTask+0x124>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f107 0110 	add.w	r1, r7, #16
 8002ba6:	220a      	movs	r2, #10
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 feed 	bl	8006988 <xQueueReceive>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d122      	bne.n	8002bfa <displayTask+0x10a>
			MAX7219_clearAll();
 8002bb4:	f7fe fd42 	bl	800163c <MAX7219_clearAll>
			offset = MAX7219_sendFreq(freq);
 8002bb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc0:	f7fe fd14 	bl	80015ec <MAX7219_sendFreq>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	77fb      	strb	r3, [r7, #31]
			MAX7219_clearOneSegment( offset - (1 + digit_position) );
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <displayTask+0x11c>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	7ffa      	ldrb	r2, [r7, #31]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fd20 	bl	800161c <MAX7219_clearOneSegment>
			vTaskDelay(300 / portTICK_RATE_MS);
 8002bdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002be0:	f004 fa56 	bl	8007090 <vTaskDelay>
			MAX7219_clearAll();
 8002be4:	f7fe fd2a 	bl	800163c <MAX7219_clearAll>
			MAX7219_sendFreq(freq);
 8002be8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	f7fe fcfc 	bl	80015ec <MAX7219_sendFreq>
 8002bf4:	e78d      	b.n	8002b12 <displayTask+0x22>
			if( xQueueReceive(xDisplayDutyQueue, &duty, 10 / portTICK_RATE_MS) != pdPASS ) continue;
 8002bf6:	bf00      	nop
 8002bf8:	e78b      	b.n	8002b12 <displayTask+0x22>
			if( xQueueReceive(xDisplayFreqQueue, &freq, 10 / portTICK_RATE_MS) != pdPASS) continue;
 8002bfa:	bf00      	nop
		if( xQueueReceive(xDisplayStringQueue, str, 10 / portTICK_RATE_MS) == pdPASS )
 8002bfc:	e789      	b.n	8002b12 <displayTask+0x22>
 8002bfe:	bf00      	nop
 8002c00:	200009f4 	.word	0x200009f4
 8002c04:	200009e7 	.word	0x200009e7
 8002c08:	200009fc 	.word	0x200009fc
 8002c0c:	2000039d 	.word	0x2000039d
 8002c10:	200009e6 	.word	0x200009e6
 8002c14:	200009f8 	.word	0x200009f8

08002c18 <dacTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dacTask */
void dacTask(void const * argument)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dacTask */
  /* Infinite loop */
	for(;;)
	{
		if( dac_is_running && !dac_is_started )	/*	Если выставили переменную на работу ЦАПа но он ещё не работает	*/
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <dacTask+0x64>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d013      	beq.n	8002c52 <dacTask+0x3a>
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <dacTask+0x68>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <dacTask+0x3a>
		{
			DAC_start(sign, freq_dac);
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <dacTask+0x6c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <dacTask+0x70>)
 8002c3e:	edd2 7a00 	vldr	s15, [r2]
 8002c42:	eeb0 0a67 	vmov.f32	s0, s15
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe f9be 	bl	8000fc8 <DAC_start>
			dac_is_started = true;				/* 	Чтобы повторно сюда не заходить	*/
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <dacTask+0x68>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
		}
		if( !dac_is_running && dac_is_started)	/*	Если ЦАП работает была нажата кнопка RETURN */
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <dacTask+0x64>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <dacTask+0x5c>
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <dacTask+0x68>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <dacTask+0x5c>
		{
			DAC_stop();
 8002c6a:	f7fe f997 	bl	8000f9c <DAC_stop>
			dac_is_started = false;
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <dacTask+0x68>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(100 / portTICK_RATE_MS);
 8002c74:	2064      	movs	r0, #100	; 0x64
 8002c76:	f004 fa0b 	bl	8007090 <vTaskDelay>
		if( dac_is_running && !dac_is_started )	/*	Если выставили переменную на работу ЦАПа но он ещё не работает	*/
 8002c7a:	e7d1      	b.n	8002c20 <dacTask+0x8>
 8002c7c:	200009e8 	.word	0x200009e8
 8002c80:	200009ec 	.word	0x200009ec
 8002c84:	200003ac 	.word	0x200003ac
 8002c88:	200003a0 	.word	0x200003a0

08002c8c <pwmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwmTask */
void pwmTask(void const * argument)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pwmTask */
  /* Infinite loop */
	for(;;)
	{
		if( pwm_is_running && !pwm_is_started )	/*	Если выставили переменную на работу Ш�?М но он ещё не работает	*/
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <pwmTask+0x68>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d015      	beq.n	8002cca <pwmTask+0x3e>
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <pwmTask+0x6c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f083 0301 	eor.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00e      	beq.n	8002cca <pwmTask+0x3e>
		{
			PWM_start(freq_pwm, duty);
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <pwmTask+0x70>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <pwmTask+0x74>)
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
 8002cb8:	eef0 0a47 	vmov.f32	s1, s14
 8002cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc0:	f7fe fcfe 	bl	80016c0 <PWM_start>
			pwm_is_started = true;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <pwmTask+0x6c>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
		}
		if( !pwm_is_running && pwm_is_started)	/*	Если Ш�?М работает была нажата кнопка RETURN */
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <pwmTask+0x68>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f083 0301 	eor.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <pwmTask+0x60>
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <pwmTask+0x6c>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <pwmTask+0x60>
		{
			PWM_stop();
 8002ce2:	f7fe fd2d 	bl	8001740 <PWM_stop>
			pwm_is_started = false;
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <pwmTask+0x6c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(100 / portTICK_RATE_MS);
 8002cec:	2064      	movs	r0, #100	; 0x64
 8002cee:	f004 f9cf 	bl	8007090 <vTaskDelay>
		if( pwm_is_running && !pwm_is_started )	/*	Если выставили переменную на работу Ш�?М но он ещё не работает	*/
 8002cf2:	e7cf      	b.n	8002c94 <pwmTask+0x8>
 8002cf4:	200009e9 	.word	0x200009e9
 8002cf8:	200009ed 	.word	0x200009ed
 8002cfc:	200003a4 	.word	0x200003a4
 8002d00:	200003a8 	.word	0x200003a8

08002d04 <HAL_TIM_PeriodElapsedCallback>:
  * @retval None
  */

/* Колбек в котором	реализуется защита от дребезга	*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d16:	f000 fc1f 	bl	8003558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM9)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5c      	ldr	r2, [pc, #368]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	f040 80b0 	bne.w	8002e86 <HAL_TIM_PeriodElapsedCallback+0x182>
	{
		HAL_TIM_Base_Stop_IT(&htim9);
 8002d26:	485b      	ldr	r0, [pc, #364]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002d28:	f002 fa5a 	bl	80051e0 <HAL_TIM_Base_Stop_IT>
		BaseType_t high_task_awoken = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
		if( HAL_GPIO_ReadPin(GPIOA, button_exti) == GPIO_PIN_RESET )
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	4619      	mov	r1, r3
 8002d38:	4858      	ldr	r0, [pc, #352]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002d3a:	f001 fa35 	bl	80041a8 <HAL_GPIO_ReadPin>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d15c      	bne.n	8002dfe <HAL_TIM_PeriodElapsedCallback+0xfa>
		{
			uint16_t button_num = button_exti;
 8002d44:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	817b      	strh	r3, [r7, #10]
			switch(button_exti)
 8002d4c:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d56:	d039      	beq.n	8002dcc <HAL_TIM_PeriodElapsedCallback+0xc8>
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5c:	dc46      	bgt.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	dc26      	bgt.n	8002db0 <HAL_TIM_PeriodElapsedCallback+0xac>
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	db42      	blt.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
 8002d66:	3b02      	subs	r3, #2
 8002d68:	2b0e      	cmp	r3, #14
 8002d6a:	d83f      	bhi.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002db9 	.word	0x08002db9
 8002d78:	08002ded 	.word	0x08002ded
 8002d7c:	08002dbf 	.word	0x08002dbf
 8002d80:	08002ded 	.word	0x08002ded
 8002d84:	08002ded 	.word	0x08002ded
 8002d88:	08002ded 	.word	0x08002ded
 8002d8c:	08002dd5 	.word	0x08002dd5
 8002d90:	08002ded 	.word	0x08002ded
 8002d94:	08002ded 	.word	0x08002ded
 8002d98:	08002ded 	.word	0x08002ded
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002ded 	.word	0x08002ded
 8002da4:	08002ded 	.word	0x08002ded
 8002da8:	08002ded 	.word	0x08002ded
 8002dac:	08002ddb 	.word	0x08002ddb
 8002db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db4:	d006      	beq.n	8002dc4 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8002db6:	e019      	b.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
			{
				case BUTTON_LEFT_Pin:
					button_num = BUTTON_LEFT_Pin;
 8002db8:	2302      	movs	r3, #2
 8002dba:	817b      	strh	r3, [r7, #10]
					break;
 8002dbc:	e016      	b.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
				case BUTTON_RIGHT_Pin:
					button_num = BUTTON_RIGHT_Pin;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	817b      	strh	r3, [r7, #10]
					break;
 8002dc2:	e013      	b.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
				case BUTTON_UP_Pin:
					button_num = BUTTON_UP_Pin;
 8002dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc8:	817b      	strh	r3, [r7, #10]
					break;
 8002dca:	e00f      	b.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
				case BUTTON_DOWN_Pin:
					button_num = BUTTON_DOWN_Pin;
 8002dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd0:	817b      	strh	r3, [r7, #10]
					break;
 8002dd2:	e00b      	b.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
				case BUTTON_OK_Pin:
					button_num = BUTTON_OK_Pin;
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	817b      	strh	r3, [r7, #10]
					break;
 8002dd8:	e008      	b.n	8002dec <HAL_TIM_PeriodElapsedCallback+0xe8>
				case BUTTON_RETURN_Pin:
					button_num = BUTTON_RETURN_Pin;
 8002dda:	2310      	movs	r3, #16
 8002ddc:	817b      	strh	r3, [r7, #10]
					dac_is_running = false;
 8002dde:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
					pwm_is_running = false;
 8002de4:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
					break;
 8002dea:	bf00      	nop
			}
			xQueueSendToBackFromISR(xButtonQueue, &button_num, &high_task_awoken);
 8002dec:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	f107 020c 	add.w	r2, r7, #12
 8002df4:	f107 010a 	add.w	r1, r7, #10
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f003 fd29 	bl	8006850 <xQueueGenericSendFromISR>
		}
		EXTI->PR |= BUTTON_LEFT_Pin;
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6153      	str	r3, [r2, #20]
		EXTI->PR |= BUTTON_RIGHT_Pin;
 8002e0a:	4b28      	ldr	r3, [pc, #160]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4a27      	ldr	r2, [pc, #156]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	6153      	str	r3, [r2, #20]
		EXTI->PR |= BUTTON_OK_Pin;
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4a24      	ldr	r2, [pc, #144]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	6153      	str	r3, [r2, #20]
		EXTI->PR |= BUTTON_RETURN_Pin;
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e28:	f043 0310 	orr.w	r3, r3, #16
 8002e2c:	6153      	str	r3, [r2, #20]
		EXTI->PR |= BUTTON_UP_Pin;
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e38:	6153      	str	r3, [r2, #20]
		EXTI->PR |= BUTTON_DOWN_Pin;
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e44:	6153      	str	r3, [r2, #20]
		/*	Чистим флаги прерываний которые могли произойти во время задрежки таймером, чтобы не попасть в колбек
		 * 	ещё лишний раз	*/
		HAL_NVIC_EnableIRQ(BUTTON_DOWN_EXTI_IRQn);
 8002e46:	2028      	movs	r0, #40	; 0x28
 8002e48:	f000 fc9e 	bl	8003788 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(BUTTON_UP_EXTI_IRQn);
 8002e4c:	2017      	movs	r0, #23
 8002e4e:	f000 fc9b 	bl	8003788 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(BUTTON_LEFT_EXTI_IRQn);
 8002e52:	2007      	movs	r0, #7
 8002e54:	f000 fc98 	bl	8003788 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(BUTTON_RIGHT_EXTI_IRQn);
 8002e58:	2008      	movs	r0, #8
 8002e5a:	f000 fc95 	bl	8003788 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(BUTTON_RETURN_EXTI_IRQn);
 8002e5e:	200a      	movs	r0, #10
 8002e60:	f000 fc92 	bl	8003788 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(BUTTON_OK_EXTI_IRQn);
 8002e64:	2009      	movs	r0, #9
 8002e66:	f000 fc8f 	bl	8003788 <HAL_NVIC_EnableIRQ>

		if( high_task_awoken == pdTRUE )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10a      	bne.n	8002e86 <HAL_TIM_PeriodElapsedCallback+0x182>
		{
			portYIELD_FROM_ISR(high_task_awoken);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_TIM_PeriodElapsedCallback+0x182>
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	f3bf 8f6f 	isb	sy
		}
	}
  /* USER CODE END Callback 1 */
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40014000 	.word	0x40014000
 8002e94:	20000924 	.word	0x20000924
 8002e98:	200009ea 	.word	0x200009ea
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	200009e8 	.word	0x200009e8
 8002ea4:	200009e9 	.word	0x200009e9
 8002ea8:	200009f0 	.word	0x200009f0
 8002eac:	40013c00 	.word	0x40013c00
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb8:	b672      	cpsid	i
}
 8002eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <Error_Handler+0x8>
	...

08002ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_MspInit+0x54>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_MspInit+0x54>)
 8002ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_MspInit+0x54>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_MspInit+0x54>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <HAL_MspInit+0x54>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_MspInit+0x54>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	210f      	movs	r1, #15
 8002f02:	f06f 0001 	mvn.w	r0, #1
 8002f06:	f000 fc23 	bl	8003750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a19      	ldr	r2, [pc, #100]	; (8002f9c <HAL_SPI_MspInit+0x84>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d12b      	bne.n	8002f92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_SPI_MspInit+0x88>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f72:	23e0      	movs	r3, #224	; 0xe0
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f82:	2305      	movs	r3, #5
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <HAL_SPI_MspInit+0x8c>)
 8002f8e:	f000 ff87 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40013000 	.word	0x40013000
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020000 	.word	0x40020000

08002fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3e      	ldr	r2, [pc, #248]	; (80030b0 <HAL_TIM_Base_MspInit+0x108>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d147      	bne.n	800304a <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	4a3c      	ldr	r2, [pc, #240]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fca:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8002fd8:	4a38      	ldr	r2, [pc, #224]	; (80030bc <HAL_TIM_Base_MspInit+0x114>)
 8002fda:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8002fdc:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8002fde:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002fe2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe4:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fea:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8002ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8002ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ffe:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8003002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003006:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 800300a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8003012:	2200      	movs	r2, #0
 8003014:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8003018:	2200      	movs	r2, #0
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800301c:	4826      	ldr	r0, [pc, #152]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 800301e:	f000 fbcf 	bl	80037c0 <HAL_DMA_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003028:	f7ff ff44 	bl	8002eb4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8003030:	621a      	str	r2, [r3, #32]
 8003032:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <HAL_TIM_Base_MspInit+0x110>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	2105      	movs	r1, #5
 800303c:	2018      	movs	r0, #24
 800303e:	f000 fb87 	bl	8003750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003042:	2018      	movs	r0, #24
 8003044:	f000 fba0 	bl	8003788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003048:	e02e      	b.n	80030a8 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM5)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_TIM_Base_MspInit+0x118>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10e      	bne.n	8003072 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	6413      	str	r3, [r2, #64]	; 0x40
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
}
 8003070:	e01a      	b.n	80030a8 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM9)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <HAL_TIM_Base_MspInit+0x11c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d115      	bne.n	80030a8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308a:	6453      	str	r3, [r2, #68]	; 0x44
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_TIM_Base_MspInit+0x10c>)
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003098:	2200      	movs	r2, #0
 800309a:	2105      	movs	r1, #5
 800309c:	2018      	movs	r0, #24
 800309e:	f000 fb57 	bl	8003750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80030a2:	2018      	movs	r0, #24
 80030a4:	f000 fb70 	bl	8003788 <HAL_NVIC_EnableIRQ>
}
 80030a8:	bf00      	nop
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40023800 	.word	0x40023800
 80030b8:	2000096c 	.word	0x2000096c
 80030bc:	40026488 	.word	0x40026488
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40014000 	.word	0x40014000

080030c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a12      	ldr	r2, [pc, #72]	; (8003130 <HAL_TIM_MspPostInit+0x68>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d11d      	bne.n	8003126 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_TIM_MspPostInit+0x6c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a10      	ldr	r2, [pc, #64]	; (8003134 <HAL_TIM_MspPostInit+0x6c>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HAL_TIM_MspPostInit+0x6c>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003106:	2301      	movs	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003116:	2302      	movs	r3, #2
 8003118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	4619      	mov	r1, r3
 8003120:	4805      	ldr	r0, [pc, #20]	; (8003138 <HAL_TIM_MspPostInit+0x70>)
 8003122:	f000 febd 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003126:	bf00      	nop
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40000c00 	.word	0x40000c00
 8003134:	40023800 	.word	0x40023800
 8003138:	40020000 	.word	0x40020000

0800313c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	4b34      	ldr	r3, [pc, #208]	; (8003224 <HAL_InitTick+0xe8>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4a33      	ldr	r2, [pc, #204]	; (8003224 <HAL_InitTick+0xe8>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6413      	str	r3, [r2, #64]	; 0x40
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_InitTick+0xe8>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003168:	f107 0210 	add.w	r2, r7, #16
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f001 fcc0 	bl	8004af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003182:	f001 fca5 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 8003186:	6378      	str	r0, [r7, #52]	; 0x34
 8003188:	e004      	b.n	8003194 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800318a:	f001 fca1 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 800318e:	4603      	mov	r3, r0
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_InitTick+0xec>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	0c9b      	lsrs	r3, r3, #18
 800319e:	3b01      	subs	r3, #1
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_InitTick+0xf0>)
 80031a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_InitTick+0xf0>)
 80031ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031b0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_InitTick+0xf0>)
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80031b8:	4b1c      	ldr	r3, [pc, #112]	; (800322c <HAL_InitTick+0xf0>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_InitTick+0xf0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_InitTick+0xf0>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80031ca:	4818      	ldr	r0, [pc, #96]	; (800322c <HAL_InitTick+0xf0>)
 80031cc:	f001 ff56 	bl	800507c <HAL_TIM_Base_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80031d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11b      	bne.n	8003216 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80031de:	4813      	ldr	r0, [pc, #76]	; (800322c <HAL_InitTick+0xf0>)
 80031e0:	f001 ff9c 	bl	800511c <HAL_TIM_Base_Start_IT>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80031ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d111      	bne.n	8003216 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031f2:	201c      	movs	r0, #28
 80031f4:	f000 fac8 	bl	8003788 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d808      	bhi.n	8003210 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80031fe:	2200      	movs	r2, #0
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	201c      	movs	r0, #28
 8003204:	f000 faa4 	bl	8003750 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003208:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_InitTick+0xf4>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e002      	b.n	8003216 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800321a:	4618      	mov	r0, r3
 800321c:	3738      	adds	r7, #56	; 0x38
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	431bde83 	.word	0x431bde83
 800322c:	20000a00 	.word	0x20000a00
 8003230:	200003d8 	.word	0x200003d8

08003234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003238:	e7fe      	b.n	8003238 <NMI_Handler+0x4>

0800323a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
	    uint32_t pc;
	    uint32_t psr;
	  }*stack_ptr; //Указатель на текущее значение стека(SP)


	  asm(
 8003240:	f01e 0f04 	tst.w	lr, #4
 8003244:	bf0c      	ite	eq
 8003246:	f3ef 8308 	mrseq	r3, MSP
 800324a:	f3ef 8309 	mrsne	r3, PSP
 800324e:	607b      	str	r3, [r7, #4]
	      );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  continue;
 8003250:	e7fe      	b.n	8003250 <HardFault_Handler+0x16>

08003252 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003256:	e7fe      	b.n	8003256 <MemManage_Handler+0x4>

08003258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800325c:	e7fe      	b.n	800325c <BusFault_Handler+0x4>

0800325e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003262:	e7fe      	b.n	8003262 <UsageFault_Handler+0x4>

08003264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_LEFT_Pin);
 8003276:	2002      	movs	r0, #2
 8003278:	f000 ffe2 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}

08003280 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RIGHT_Pin);
 8003284:	2004      	movs	r0, #4
 8003286:	f000 ffdb 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}

0800328e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OK_Pin);
 8003292:	2008      	movs	r0, #8
 8003294:	f000 ffd4 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}

0800329c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RETURN_Pin);
 80032a0:	2010      	movs	r0, #16
 80032a2:	f000 ffcd 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}

080032aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 80032ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032b2:	f000 ffc5 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032c0:	4803      	ldr	r0, [pc, #12]	; (80032d0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80032c2:	f002 f929 	bl	8005518 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80032c6:	4803      	ldr	r0, [pc, #12]	; (80032d4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80032c8:	f002 f926 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000894 	.word	0x20000894
 80032d4:	20000924 	.word	0x20000924

080032d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <TIM2_IRQHandler+0x10>)
 80032de:	f002 f91b 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000a00 	.word	0x20000a00

080032ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 80032f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80032f4:	f000 ffa4 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <DMA2_Stream5_IRQHandler+0x10>)
 8003302:	f000 fb63 	bl	80039cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000096c 	.word	0x2000096c

08003310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return 1;
 8003314:	2301      	movs	r3, #1
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <_kill>:

int _kill(int pid, int sig)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800332a:	f005 f827 	bl	800837c <__errno>
 800332e:	4603      	mov	r3, r0
 8003330:	2216      	movs	r2, #22
 8003332:	601a      	str	r2, [r3, #0]
  return -1;
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_exit>:

void _exit (int status)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ffe7 	bl	8003320 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003352:	e7fe      	b.n	8003352 <_exit+0x12>

08003354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	e00a      	b.n	800337c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003366:	f3af 8000 	nop.w
 800336a:	4601      	mov	r1, r0
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	60ba      	str	r2, [r7, #8]
 8003372:	b2ca      	uxtb	r2, r1
 8003374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3301      	adds	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	dbf0      	blt.n	8003366 <_read+0x12>
  }

  return len;
 8003384:	687b      	ldr	r3, [r7, #4]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	e009      	b.n	80033b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	60ba      	str	r2, [r7, #8]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3301      	adds	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	dbf1      	blt.n	80033a0 <_write+0x12>
  }
  return len;
 80033bc:	687b      	ldr	r3, [r7, #4]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <_close>:

int _close(int file)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ee:	605a      	str	r2, [r3, #4]
  return 0;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <_isatty>:

int _isatty(int file)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003406:	2301      	movs	r3, #1
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <_sbrk+0x5c>)
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <_sbrk+0x60>)
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <_sbrk+0x64>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <_sbrk+0x64>)
 800344e:	4a12      	ldr	r2, [pc, #72]	; (8003498 <_sbrk+0x68>)
 8003450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <_sbrk+0x64>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	429a      	cmp	r2, r3
 800345e:	d207      	bcs.n	8003470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003460:	f004 ff8c 	bl	800837c <__errno>
 8003464:	4603      	mov	r3, r0
 8003466:	220c      	movs	r2, #12
 8003468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	e009      	b.n	8003484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <_sbrk+0x64>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <_sbrk+0x64>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	4a05      	ldr	r2, [pc, #20]	; (8003494 <_sbrk+0x64>)
 8003480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20010000 	.word	0x20010000
 8003490:	00000400 	.word	0x00000400
 8003494:	20000a48 	.word	0x20000a48
 8003498:	200080e8 	.word	0x200080e8

0800349c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <SystemInit+0x20>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <SystemInit+0x20>)
 80034a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034c4:	480d      	ldr	r0, [pc, #52]	; (80034fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034c6:	490e      	ldr	r1, [pc, #56]	; (8003500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034c8:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034cc:	e002      	b.n	80034d4 <LoopCopyDataInit>

080034ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034d2:	3304      	adds	r3, #4

080034d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d8:	d3f9      	bcc.n	80034ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034da:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034dc:	4c0b      	ldr	r4, [pc, #44]	; (800350c <LoopFillZerobss+0x26>)
  movs r3, #0
 80034de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e0:	e001      	b.n	80034e6 <LoopFillZerobss>

080034e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e4:	3204      	adds	r2, #4

080034e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e8:	d3fb      	bcc.n	80034e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034ea:	f7ff ffd7 	bl	800349c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ee:	f004 ff4b 	bl	8008388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034f2:	f7fe f975 	bl	80017e0 <main>
  bx  lr    
 80034f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003500:	200005b4 	.word	0x200005b4
  ldr r2, =_sidata
 8003504:	0800b72c 	.word	0x0800b72c
  ldr r2, =_sbss
 8003508:	200005b4 	.word	0x200005b4
  ldr r4, =_ebss
 800350c:	200080e4 	.word	0x200080e4

08003510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003510:	e7fe      	b.n	8003510 <ADC_IRQHandler>
	...

08003514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <HAL_Init+0x40>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <HAL_Init+0x40>)
 800351e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_Init+0x40>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <HAL_Init+0x40>)
 800352a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800352e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_Init+0x40>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_Init+0x40>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800353c:	2003      	movs	r0, #3
 800353e:	f000 f8fc 	bl	800373a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003542:	200f      	movs	r0, #15
 8003544:	f7ff fdfa 	bl	800313c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003548:	f7ff fcba 	bl	8002ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023c00 	.word	0x40023c00

08003558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_IncTick+0x20>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_IncTick+0x24>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4413      	add	r3, r2
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_IncTick+0x24>)
 800356a:	6013      	str	r3, [r2, #0]
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	200003dc 	.word	0x200003dc
 800357c:	20000a4c 	.word	0x20000a4c

08003580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return uwTick;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_GetTick+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000a4c 	.word	0x20000a4c

08003598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b4:	4013      	ands	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ca:	4a04      	ldr	r2, [pc, #16]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	60d3      	str	r3, [r2, #12]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <__NVIC_GetPriorityGrouping+0x18>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f003 0307 	and.w	r3, r3, #7
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	db0b      	blt.n	8003626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	4907      	ldr	r1, [pc, #28]	; (8003634 <__NVIC_EnableIRQ+0x38>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2001      	movs	r0, #1
 800361e:	fa00 f202 	lsl.w	r2, r0, r2
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000e100 	.word	0xe000e100

08003638 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db12      	blt.n	8003670 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	490a      	ldr	r1, [pc, #40]	; (800367c <__NVIC_DisableIRQ+0x44>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	3320      	adds	r3, #32
 8003660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003664:	f3bf 8f4f 	dsb	sy
}
 8003668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800366a:	f3bf 8f6f 	isb	sy
}
 800366e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100

08003680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	db0a      	blt.n	80036aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	490c      	ldr	r1, [pc, #48]	; (80036cc <__NVIC_SetPriority+0x4c>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	440b      	add	r3, r1
 80036a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a8:	e00a      	b.n	80036c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4908      	ldr	r1, [pc, #32]	; (80036d0 <__NVIC_SetPriority+0x50>)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3b04      	subs	r3, #4
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	440b      	add	r3, r1
 80036be:	761a      	strb	r2, [r3, #24]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000e100 	.word	0xe000e100
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f1c3 0307 	rsb	r3, r3, #7
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf28      	it	cs
 80036f2:	2304      	movcs	r3, #4
 80036f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d902      	bls.n	8003704 <NVIC_EncodePriority+0x30>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3b03      	subs	r3, #3
 8003702:	e000      	b.n	8003706 <NVIC_EncodePriority+0x32>
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	401a      	ands	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800371c:	f04f 31ff 	mov.w	r1, #4294967295
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43d9      	mvns	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	4313      	orrs	r3, r2
         );
}
 800372e:	4618      	mov	r0, r3
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ff28 	bl	8003598 <__NVIC_SetPriorityGrouping>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003762:	f7ff ff3d 	bl	80035e0 <__NVIC_GetPriorityGrouping>
 8003766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	6978      	ldr	r0, [r7, #20]
 800376e:	f7ff ffb1 	bl	80036d4 <NVIC_EncodePriority>
 8003772:	4602      	mov	r2, r0
 8003774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ff80 	bl	8003680 <__NVIC_SetPriority>
}
 8003780:	bf00      	nop
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff30 	bl	80035fc <__NVIC_EnableIRQ>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff40 	bl	8003638 <__NVIC_DisableIRQ>
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037cc:	f7ff fed8 	bl	8003580 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e099      	b.n	8003910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037fc:	e00f      	b.n	800381e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037fe:	f7ff febf 	bl	8003580 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b05      	cmp	r3, #5
 800380a:	d908      	bls.n	800381e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2203      	movs	r2, #3
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e078      	b.n	8003910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e8      	bne.n	80037fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4b38      	ldr	r3, [pc, #224]	; (8003918 <HAL_DMA_Init+0x158>)
 8003838:	4013      	ands	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2b04      	cmp	r3, #4
 8003876:	d107      	bne.n	8003888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	4313      	orrs	r3, r2
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d117      	bne.n	80038e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fa6f 	bl	8003da8 <DMA_CheckFifoParam>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038de:	2301      	movs	r3, #1
 80038e0:	e016      	b.n	8003910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fa26 	bl	8003d3c <DMA_CalcBaseAndBitshift>
 80038f0:	4603      	mov	r3, r0
 80038f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	223f      	movs	r2, #63	; 0x3f
 80038fa:	409a      	lsls	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	f010803f 	.word	0xf010803f

0800391c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_DMA_Start_IT+0x26>
 800393e:	2302      	movs	r3, #2
 8003940:	e040      	b.n	80039c4 <HAL_DMA_Start_IT+0xa8>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d12f      	bne.n	80039b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f9b8 	bl	8003ce0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	223f      	movs	r2, #63	; 0x3f
 8003976:	409a      	lsls	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0216 	orr.w	r2, r2, #22
 800398a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0208 	orr.w	r2, r2, #8
 80039a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e005      	b.n	80039c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039be:	2302      	movs	r3, #2
 80039c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d8:	4b8e      	ldr	r3, [pc, #568]	; (8003c14 <HAL_DMA_IRQHandler+0x248>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a8e      	ldr	r2, [pc, #568]	; (8003c18 <HAL_DMA_IRQHandler+0x24c>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0a9b      	lsrs	r3, r3, #10
 80039e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	2208      	movs	r2, #8
 80039f8:	409a      	lsls	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01a      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	2208      	movs	r2, #8
 8003a26:	409a      	lsls	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2204      	movs	r2, #4
 8003a74:	409a      	lsls	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	2204      	movs	r2, #4
 8003a92:	409a      	lsls	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f043 0204 	orr.w	r2, r3, #4
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d043      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d03c      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d018      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d024      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
 8003afa:	e01f      	b.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
 8003b0c:	e016      	b.n	8003b3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0208 	bic.w	r2, r2, #8
 8003b2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	2220      	movs	r2, #32
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 808f 	beq.w	8003c6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8087 	beq.w	8003c6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2220      	movs	r2, #32
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d136      	bne.n	8003be4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0216 	bic.w	r2, r2, #22
 8003b84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_DMA_IRQHandler+0x1da>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0208 	bic.w	r2, r2, #8
 8003bb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	223f      	movs	r2, #63	; 0x3f
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d07e      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
        }
        return;
 8003be2:	e079      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d031      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
 8003c10:	e02c      	b.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
 8003c12:	bf00      	nop
 8003c14:	200003d4 	.word	0x200003d4
 8003c18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d023      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e01e      	b.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10f      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0210 	bic.w	r2, r2, #16
 8003c4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d032      	beq.n	8003cda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2205      	movs	r2, #5
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d307      	bcc.n	8003cb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f2      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x2cc>
 8003cb2:	e000      	b.n	8003cb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e000      	b.n	8003cda <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cd8:	bf00      	nop
    }
  }
}
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d108      	bne.n	8003d20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d1e:	e007      	b.n	8003d30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	3b10      	subs	r3, #16
 8003d4c:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <DMA_CalcBaseAndBitshift+0x64>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d56:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <DMA_CalcBaseAndBitshift+0x68>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d909      	bls.n	8003d7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	1d1a      	adds	r2, r3, #4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d7c:	e007      	b.n	8003d8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	aaaaaaab 	.word	0xaaaaaaab
 8003da4:	0800b33c 	.word	0x0800b33c

08003da8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11f      	bne.n	8003e02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d856      	bhi.n	8003e76 <DMA_CheckFifoParam+0xce>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <DMA_CheckFifoParam+0x28>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003df3 	.word	0x08003df3
 8003dd8:	08003de1 	.word	0x08003de1
 8003ddc:	08003e77 	.word	0x08003e77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d046      	beq.n	8003e7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df0:	e043      	b.n	8003e7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dfa:	d140      	bne.n	8003e7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e00:	e03d      	b.n	8003e7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	d121      	bne.n	8003e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d837      	bhi.n	8003e82 <DMA_CheckFifoParam+0xda>
 8003e12:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <DMA_CheckFifoParam+0x70>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e2f 	.word	0x08003e2f
 8003e20:	08003e29 	.word	0x08003e29
 8003e24:	08003e41 	.word	0x08003e41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2c:	e030      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d025      	beq.n	8003e86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3e:	e022      	b.n	8003e86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e48:	d11f      	bne.n	8003e8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e4e:	e01c      	b.n	8003e8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d903      	bls.n	8003e5e <DMA_CheckFifoParam+0xb6>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d003      	beq.n	8003e64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e5c:	e018      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
      break;
 8003e62:	e015      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00e      	beq.n	8003e8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      break;
 8003e74:	e00b      	b.n	8003e8e <DMA_CheckFifoParam+0xe6>
      break;
 8003e76:	bf00      	nop
 8003e78:	e00a      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e008      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e006      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
      break;
 8003e82:	bf00      	nop
 8003e84:	e004      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
      break;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <DMA_CheckFifoParam+0xe8>
      break;
 8003e8e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e159      	b.n	8004170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	f040 8148 	bne.w	800416a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d005      	beq.n	8003ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d130      	bne.n	8003f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	2203      	movs	r2, #3
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f28:	2201      	movs	r2, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 0201 	and.w	r2, r3, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d017      	beq.n	8003f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d123      	bne.n	8003fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	69b9      	ldr	r1, [r7, #24]
 8003fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	2203      	movs	r2, #3
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0203 	and.w	r2, r3, #3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a2 	beq.w	800416a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b57      	ldr	r3, [pc, #348]	; (8004188 <HAL_GPIO_Init+0x2e8>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	4a56      	ldr	r2, [pc, #344]	; (8004188 <HAL_GPIO_Init+0x2e8>)
 8004030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004034:	6453      	str	r3, [r2, #68]	; 0x44
 8004036:	4b54      	ldr	r3, [pc, #336]	; (8004188 <HAL_GPIO_Init+0x2e8>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004042:	4a52      	ldr	r2, [pc, #328]	; (800418c <HAL_GPIO_Init+0x2ec>)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	220f      	movs	r2, #15
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a49      	ldr	r2, [pc, #292]	; (8004190 <HAL_GPIO_Init+0x2f0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d019      	beq.n	80040a2 <HAL_GPIO_Init+0x202>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a48      	ldr	r2, [pc, #288]	; (8004194 <HAL_GPIO_Init+0x2f4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_GPIO_Init+0x1fe>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a47      	ldr	r2, [pc, #284]	; (8004198 <HAL_GPIO_Init+0x2f8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00d      	beq.n	800409a <HAL_GPIO_Init+0x1fa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a46      	ldr	r2, [pc, #280]	; (800419c <HAL_GPIO_Init+0x2fc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <HAL_GPIO_Init+0x1f6>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a45      	ldr	r2, [pc, #276]	; (80041a0 <HAL_GPIO_Init+0x300>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_GPIO_Init+0x1f2>
 800408e:	2304      	movs	r3, #4
 8004090:	e008      	b.n	80040a4 <HAL_GPIO_Init+0x204>
 8004092:	2307      	movs	r3, #7
 8004094:	e006      	b.n	80040a4 <HAL_GPIO_Init+0x204>
 8004096:	2303      	movs	r3, #3
 8004098:	e004      	b.n	80040a4 <HAL_GPIO_Init+0x204>
 800409a:	2302      	movs	r3, #2
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_Init+0x204>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_GPIO_Init+0x204>
 80040a2:	2300      	movs	r3, #0
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	f002 0203 	and.w	r2, r2, #3
 80040aa:	0092      	lsls	r2, r2, #2
 80040ac:	4093      	lsls	r3, r2
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b4:	4935      	ldr	r1, [pc, #212]	; (800418c <HAL_GPIO_Init+0x2ec>)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	3302      	adds	r3, #2
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040c2:	4b38      	ldr	r3, [pc, #224]	; (80041a4 <HAL_GPIO_Init+0x304>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040e6:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <HAL_GPIO_Init+0x304>)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040ec:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_GPIO_Init+0x304>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004110:	4a24      	ldr	r2, [pc, #144]	; (80041a4 <HAL_GPIO_Init+0x304>)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004116:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <HAL_GPIO_Init+0x304>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800413a:	4a1a      	ldr	r2, [pc, #104]	; (80041a4 <HAL_GPIO_Init+0x304>)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <HAL_GPIO_Init+0x304>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004164:	4a0f      	ldr	r2, [pc, #60]	; (80041a4 <HAL_GPIO_Init+0x304>)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	f67f aea2 	bls.w	8003ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3724      	adds	r7, #36	; 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	40013800 	.word	0x40013800
 8004190:	40020000 	.word	0x40020000
 8004194:	40020400 	.word	0x40020400
 8004198:	40020800 	.word	0x40020800
 800419c:	40020c00 	.word	0x40020c00
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40013c00 	.word	0x40013c00

080041a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
 80041c4:	e001      	b.n	80041ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
 80041e4:	4613      	mov	r3, r2
 80041e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e8:	787b      	ldrb	r3, [r7, #1]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041f4:	e003      	b.n	80041fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	041a      	lsls	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	619a      	str	r2, [r3, #24]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800421c:	887a      	ldrh	r2, [r7, #2]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4013      	ands	r3, r2
 8004222:	041a      	lsls	r2, r3, #16
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	43d9      	mvns	r1, r3
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	400b      	ands	r3, r1
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	619a      	str	r2, [r3, #24]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004256:	4a05      	ldr	r2, [pc, #20]	; (800426c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd fa98 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40013c00 	.word	0x40013c00

08004270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e267      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d075      	beq.n	800437a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800428e:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b04      	cmp	r3, #4
 8004298:	d00c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429a:	4b85      	ldr	r3, [pc, #532]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d112      	bne.n	80042cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b82      	ldr	r3, [pc, #520]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b2:	d10b      	bne.n	80042cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	4b7e      	ldr	r3, [pc, #504]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05b      	beq.n	8004378 <HAL_RCC_OscConfig+0x108>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d157      	bne.n	8004378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e242      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d106      	bne.n	80042e4 <HAL_RCC_OscConfig+0x74>
 80042d6:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a75      	ldr	r2, [pc, #468]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e01d      	b.n	8004320 <HAL_RCC_OscConfig+0xb0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x98>
 80042ee:	4b70      	ldr	r3, [pc, #448]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a6f      	ldr	r2, [pc, #444]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80042f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b6d      	ldr	r3, [pc, #436]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6c      	ldr	r2, [pc, #432]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0xb0>
 8004308:	4b69      	ldr	r3, [pc, #420]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a68      	ldr	r2, [pc, #416]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 800430e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b66      	ldr	r3, [pc, #408]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a65      	ldr	r2, [pc, #404]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 800431a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7ff f92a 	bl	8003580 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004330:	f7ff f926 	bl	8003580 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e207      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xc0>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7ff f916 	bl	8003580 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7ff f912 	bl	8003580 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1f3      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	4b51      	ldr	r3, [pc, #324]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0xe8>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004386:	4b4a      	ldr	r3, [pc, #296]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004392:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439a:	2b08      	cmp	r3, #8
 800439c:	d11c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b44      	ldr	r3, [pc, #272]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x152>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e1c7      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4937      	ldr	r1, [pc, #220]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d6:	e03a      	b.n	800444e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e0:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <HAL_RCC_OscConfig+0x244>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7ff f8cb 	bl	8003580 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ee:	f7ff f8c7 	bl	8003580 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e1a8      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440c:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4925      	ldr	r1, [pc, #148]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]
 8004420:	e015      	b.n	800444e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_RCC_OscConfig+0x244>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7ff f8aa 	bl	8003580 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004430:	f7ff f8a6 	bl	8003580 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e187      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d036      	beq.n	80044c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d016      	beq.n	8004490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <HAL_RCC_OscConfig+0x248>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7ff f88a 	bl	8003580 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004470:	f7ff f886 	bl	8003580 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e167      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCC_OscConfig+0x240>)
 8004484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x200>
 800448e:	e01b      	b.n	80044c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_OscConfig+0x248>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004496:	f7ff f873 	bl	8003580 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	e00e      	b.n	80044bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800449e:	f7ff f86f 	bl	8003580 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d907      	bls.n	80044bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e150      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
 80044b0:	40023800 	.word	0x40023800
 80044b4:	42470000 	.word	0x42470000
 80044b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044bc:	4b88      	ldr	r3, [pc, #544]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80044be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1ea      	bne.n	800449e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8097 	beq.w	8004604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d6:	2300      	movs	r3, #0
 80044d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044da:	4b81      	ldr	r3, [pc, #516]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10f      	bne.n	8004506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	4b7d      	ldr	r3, [pc, #500]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	4a7c      	ldr	r2, [pc, #496]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80044f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f4:	6413      	str	r3, [r2, #64]	; 0x40
 80044f6:	4b7a      	ldr	r3, [pc, #488]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004502:	2301      	movs	r3, #1
 8004504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004506:	4b77      	ldr	r3, [pc, #476]	; (80046e4 <HAL_RCC_OscConfig+0x474>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d118      	bne.n	8004544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004512:	4b74      	ldr	r3, [pc, #464]	; (80046e4 <HAL_RCC_OscConfig+0x474>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a73      	ldr	r2, [pc, #460]	; (80046e4 <HAL_RCC_OscConfig+0x474>)
 8004518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800451e:	f7ff f82f 	bl	8003580 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004526:	f7ff f82b 	bl	8003580 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e10c      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	4b6a      	ldr	r3, [pc, #424]	; (80046e4 <HAL_RCC_OscConfig+0x474>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d106      	bne.n	800455a <HAL_RCC_OscConfig+0x2ea>
 800454c:	4b64      	ldr	r3, [pc, #400]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4a63      	ldr	r2, [pc, #396]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6713      	str	r3, [r2, #112]	; 0x70
 8004558:	e01c      	b.n	8004594 <HAL_RCC_OscConfig+0x324>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b05      	cmp	r3, #5
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0x30c>
 8004562:	4b5f      	ldr	r3, [pc, #380]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a5e      	ldr	r2, [pc, #376]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004568:	f043 0304 	orr.w	r3, r3, #4
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	4b5c      	ldr	r3, [pc, #368]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a5b      	ldr	r2, [pc, #364]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	6713      	str	r3, [r2, #112]	; 0x70
 800457a:	e00b      	b.n	8004594 <HAL_RCC_OscConfig+0x324>
 800457c:	4b58      	ldr	r3, [pc, #352]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4a57      	ldr	r2, [pc, #348]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	6713      	str	r3, [r2, #112]	; 0x70
 8004588:	4b55      	ldr	r3, [pc, #340]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a54      	ldr	r2, [pc, #336]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 800458e:	f023 0304 	bic.w	r3, r3, #4
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d015      	beq.n	80045c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fe fff0 	bl	8003580 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fe ffec 	bl	8003580 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0cb      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ba:	4b49      	ldr	r3, [pc, #292]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0ee      	beq.n	80045a4 <HAL_RCC_OscConfig+0x334>
 80045c6:	e014      	b.n	80045f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c8:	f7fe ffda 	bl	8003580 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ce:	e00a      	b.n	80045e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d0:	f7fe ffd6 	bl	8003580 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e0b5      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e6:	4b3e      	ldr	r3, [pc, #248]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1ee      	bne.n	80045d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d105      	bne.n	8004604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	4a38      	ldr	r2, [pc, #224]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80045fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a1 	beq.w	8004750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800460e:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b08      	cmp	r3, #8
 8004618:	d05c      	beq.n	80046d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d141      	bne.n	80046a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <HAL_RCC_OscConfig+0x478>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe ffaa 	bl	8003580 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7fe ffa6 	bl	8003580 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e087      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	085b      	lsrs	r3, r3, #1
 8004666:	3b01      	subs	r3, #1
 8004668:	041b      	lsls	r3, r3, #16
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	491b      	ldr	r1, [pc, #108]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004678:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_RCC_OscConfig+0x478>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467e:	f7fe ff7f 	bl	8003580 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004686:	f7fe ff7b 	bl	8003580 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e05c      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x416>
 80046a4:	e054      	b.n	8004750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <HAL_RCC_OscConfig+0x478>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fe ff68 	bl	8003580 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe ff64 	bl	8003580 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e045      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_RCC_OscConfig+0x470>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x444>
 80046d2:	e03d      	b.n	8004750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e038      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40007000 	.word	0x40007000
 80046e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x4ec>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d028      	beq.n	800474c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d121      	bne.n	800474c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d11a      	bne.n	800474c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800471c:	4013      	ands	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004724:	4293      	cmp	r3, r2
 8004726:	d111      	bne.n	800474c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	3b01      	subs	r3, #1
 8004736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d107      	bne.n	800474c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0cc      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90c      	bls.n	800479c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b63      	ldr	r3, [pc, #396]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0b8      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b4:	4b59      	ldr	r3, [pc, #356]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a58      	ldr	r2, [pc, #352]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a52      	ldr	r2, [pc, #328]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	494d      	ldr	r1, [pc, #308]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d044      	beq.n	8004880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d119      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e07f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d003      	beq.n	800481e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	2b03      	cmp	r3, #3
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482e:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e067      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4934      	ldr	r1, [pc, #208]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004850:	f7fe fe96 	bl	8003580 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	e00a      	b.n	800486e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004858:	f7fe fe92 	bl	8003580 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e04f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 020c 	and.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	429a      	cmp	r2, r3
 800487e:	d1eb      	bne.n	8004858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d20c      	bcs.n	80048a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e032      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4916      	ldr	r1, [pc, #88]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	490e      	ldr	r1, [pc, #56]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048e6:	f000 f821 	bl	800492c <HAL_RCC_GetSysClockFreq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	490a      	ldr	r1, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	5ccb      	ldrb	r3, [r1, r3]
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fc18 	bl	800313c <HAL_InitTick>

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023c00 	.word	0x40023c00
 800491c:	40023800 	.word	0x40023800
 8004920:	0800b324 	.word	0x0800b324
 8004924:	200003d4 	.word	0x200003d4
 8004928:	200003d8 	.word	0x200003d8

0800492c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800492c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004930:	b090      	sub	sp, #64	; 0x40
 8004932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
 8004938:	2300      	movs	r3, #0
 800493a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800493c:	2300      	movs	r3, #0
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004944:	4b59      	ldr	r3, [pc, #356]	; (8004aac <HAL_RCC_GetSysClockFreq+0x180>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b08      	cmp	r3, #8
 800494e:	d00d      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x40>
 8004950:	2b08      	cmp	r3, #8
 8004952:	f200 80a1 	bhi.w	8004a98 <HAL_RCC_GetSysClockFreq+0x16c>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x34>
 800495a:	2b04      	cmp	r3, #4
 800495c:	d003      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0x3a>
 800495e:	e09b      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004960:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004962:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004964:	e09b      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004966:	4b53      	ldr	r3, [pc, #332]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004968:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800496a:	e098      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800496c:	4b4f      	ldr	r3, [pc, #316]	; (8004aac <HAL_RCC_GetSysClockFreq+0x180>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004976:	4b4d      	ldr	r3, [pc, #308]	; (8004aac <HAL_RCC_GetSysClockFreq+0x180>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d028      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004982:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <HAL_RCC_GetSysClockFreq+0x180>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	2200      	movs	r2, #0
 800498a:	623b      	str	r3, [r7, #32]
 800498c:	627a      	str	r2, [r7, #36]	; 0x24
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004994:	2100      	movs	r1, #0
 8004996:	4b47      	ldr	r3, [pc, #284]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004998:	fb03 f201 	mul.w	r2, r3, r1
 800499c:	2300      	movs	r3, #0
 800499e:	fb00 f303 	mul.w	r3, r0, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	4a43      	ldr	r2, [pc, #268]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x188>)
 80049a6:	fba0 1202 	umull	r1, r2, r0, r2
 80049aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ac:	460a      	mov	r2, r1
 80049ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80049b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b2:	4413      	add	r3, r2
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	2200      	movs	r2, #0
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	61fa      	str	r2, [r7, #28]
 80049be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049c6:	f7fc f967 	bl	8000c98 <__aeabi_uldivmod>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4613      	mov	r3, r2
 80049d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d2:	e053      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d4:	4b35      	ldr	r3, [pc, #212]	; (8004aac <HAL_RCC_GetSysClockFreq+0x180>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	099b      	lsrs	r3, r3, #6
 80049da:	2200      	movs	r2, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	617a      	str	r2, [r7, #20]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049e6:	f04f 0b00 	mov.w	fp, #0
 80049ea:	4652      	mov	r2, sl
 80049ec:	465b      	mov	r3, fp
 80049ee:	f04f 0000 	mov.w	r0, #0
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	0159      	lsls	r1, r3, #5
 80049f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049fc:	0150      	lsls	r0, r2, #5
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	ebb2 080a 	subs.w	r8, r2, sl
 8004a06:	eb63 090b 	sbc.w	r9, r3, fp
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a1e:	ebb2 0408 	subs.w	r4, r2, r8
 8004a22:	eb63 0509 	sbc.w	r5, r3, r9
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	00eb      	lsls	r3, r5, #3
 8004a30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a34:	00e2      	lsls	r2, r4, #3
 8004a36:	4614      	mov	r4, r2
 8004a38:	461d      	mov	r5, r3
 8004a3a:	eb14 030a 	adds.w	r3, r4, sl
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	eb45 030b 	adc.w	r3, r5, fp
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a52:	4629      	mov	r1, r5
 8004a54:	028b      	lsls	r3, r1, #10
 8004a56:	4621      	mov	r1, r4
 8004a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	028a      	lsls	r2, r1, #10
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	2200      	movs	r2, #0
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	60fa      	str	r2, [r7, #12]
 8004a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a70:	f7fc f912 	bl	8000c98 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	3301      	adds	r3, #1
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a96:	e002      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3740      	adds	r7, #64	; 0x40
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	00f42400 	.word	0x00f42400
 8004ab4:	017d7840 	.word	0x017d7840

08004ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <HAL_RCC_GetHCLKFreq+0x14>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	200003d4 	.word	0x200003d4

08004ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ad4:	f7ff fff0 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	0800b334 	.word	0x0800b334

08004af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	220f      	movs	r2, #15
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0203 	and.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <HAL_RCC_GetClockConfig+0x60>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0207 	and.w	r2, r3, #7
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40023c00 	.word	0x40023c00

08004b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07b      	b.n	8004c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d108      	bne.n	8004b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7e:	d009      	beq.n	8004b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]
 8004b86:	e005      	b.n	8004b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fe f9b2 	bl	8002f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	ea42 0103 	orr.w	r1, r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	f003 0104 	and.w	r1, r3, #4
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0210 	and.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b088      	sub	sp, #32
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_SPI_Transmit+0x22>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e126      	b.n	8004ede <HAL_SPI_Transmit+0x270>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c98:	f7fe fc72 	bl	8003580 <HAL_GetTick>
 8004c9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cb2:	e10b      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Transmit+0x52>
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cc4:	e102      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	d10f      	bne.n	8004d2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d007      	beq.n	8004d4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d54:	d14b      	bne.n	8004dee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_Transmit+0xf6>
 8004d5e:	8afb      	ldrh	r3, [r7, #22]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d13e      	bne.n	8004de2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	881a      	ldrh	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	1c9a      	adds	r2, r3, #2
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d88:	e02b      	b.n	8004de2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d112      	bne.n	8004dbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dbc:	e011      	b.n	8004de2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dbe:	f7fe fbdf 	bl	8003580 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d803      	bhi.n	8004dd6 <HAL_SPI_Transmit+0x168>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d102      	bne.n	8004ddc <HAL_SPI_Transmit+0x16e>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004de0:	e074      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ce      	bne.n	8004d8a <HAL_SPI_Transmit+0x11c>
 8004dec:	e04c      	b.n	8004e88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Transmit+0x18e>
 8004df6:	8afb      	ldrh	r3, [r7, #22]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d140      	bne.n	8004e7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	330c      	adds	r3, #12
 8004e06:	7812      	ldrb	r2, [r2, #0]
 8004e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e22:	e02c      	b.n	8004e7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d113      	bne.n	8004e5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e58:	e011      	b.n	8004e7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e5a:	f7fe fb91 	bl	8003580 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d803      	bhi.n	8004e72 <HAL_SPI_Transmit+0x204>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_Transmit+0x20a>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e7c:	e026      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1cd      	bne.n	8004e24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f8b3 	bl	8004ff8 <SPI_EndRxTxTransaction>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e000      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
  }

error:
 8004eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ef8:	f7fe fb42 	bl	8003580 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f08:	f7fe fb3a 	bl	8003580 <HAL_GetTick>
 8004f0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f0e:	4b39      	ldr	r3, [pc, #228]	; (8004ff4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	015b      	lsls	r3, r3, #5
 8004f14:	0d1b      	lsrs	r3, r3, #20
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1e:	e054      	b.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d050      	beq.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f28:	f7fe fb2a 	bl	8003580 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d902      	bls.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d13d      	bne.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f56:	d111      	bne.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f60:	d004      	beq.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6a:	d107      	bne.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f84:	d10f      	bne.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e017      	b.n	8004fea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d19b      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	200003d4 	.word	0x200003d4

08004ff8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005004:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <SPI_EndRxTxTransaction+0x7c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1b      	ldr	r2, [pc, #108]	; (8005078 <SPI_EndRxTxTransaction+0x80>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0d5b      	lsrs	r3, r3, #21
 8005010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005022:	d112      	bne.n	800504a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff ff5a 	bl	8004ee8 <SPI_WaitFlagStateUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e00f      	b.n	800506a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3b01      	subs	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d0f2      	beq.n	800504a <SPI_EndRxTxTransaction+0x52>
 8005064:	e000      	b.n	8005068 <SPI_EndRxTxTransaction+0x70>
        break;
 8005066:	bf00      	nop
  }

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	200003d4 	.word	0x200003d4
 8005078:	165e9f81 	.word	0x165e9f81

0800507c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e041      	b.n	8005112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fd ff80 	bl	8002fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f000 fce6 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d001      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e044      	b.n	80051be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <HAL_TIM_Base_Start_IT+0xb0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d018      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d013      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00e      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x6c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a16      	ldr	r2, [pc, #88]	; (80051dc <HAL_TIM_Base_Start_IT+0xc0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d111      	bne.n	80051ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b06      	cmp	r3, #6
 8005198:	d010      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	e007      	b.n	80051bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40014000 	.word	0x40014000

080051e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10f      	bne.n	8005228 <HAL_TIM_Base_Stop_IT+0x48>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	f240 4344 	movw	r3, #1092	; 0x444
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <HAL_TIM_Base_Stop_IT+0x48>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0201 	bic.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e041      	b.n	80052d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f839 	bl	80052dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f000 fc05 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <HAL_TIM_PWM_Start+0x24>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e022      	b.n	800535a <HAL_TIM_PWM_Start+0x6a>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d109      	bne.n	800532e <HAL_TIM_PWM_Start+0x3e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	bf14      	ite	ne
 8005326:	2301      	movne	r3, #1
 8005328:	2300      	moveq	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e015      	b.n	800535a <HAL_TIM_PWM_Start+0x6a>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d109      	bne.n	8005348 <HAL_TIM_PWM_Start+0x58>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e008      	b.n	800535a <HAL_TIM_PWM_Start+0x6a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	bf14      	ite	ne
 8005354:	2301      	movne	r3, #1
 8005356:	2300      	moveq	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e068      	b.n	8005434 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start+0x82>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005370:	e013      	b.n	800539a <HAL_TIM_PWM_Start+0xaa>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start+0x92>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005380:	e00b      	b.n	800539a <HAL_TIM_PWM_Start+0xaa>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d104      	bne.n	8005392 <HAL_TIM_PWM_Start+0xa2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005390:	e003      	b.n	800539a <HAL_TIM_PWM_Start+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2201      	movs	r2, #1
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fe18 	bl	8005fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a23      	ldr	r2, [pc, #140]	; (800543c <HAL_TIM_PWM_Start+0x14c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d107      	bne.n	80053c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1d      	ldr	r2, [pc, #116]	; (800543c <HAL_TIM_PWM_Start+0x14c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_TIM_PWM_Start+0x10e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d013      	beq.n	80053fe <HAL_TIM_PWM_Start+0x10e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a19      	ldr	r2, [pc, #100]	; (8005440 <HAL_TIM_PWM_Start+0x150>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIM_PWM_Start+0x10e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a17      	ldr	r2, [pc, #92]	; (8005444 <HAL_TIM_PWM_Start+0x154>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_TIM_PWM_Start+0x10e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a16      	ldr	r2, [pc, #88]	; (8005448 <HAL_TIM_PWM_Start+0x158>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIM_PWM_Start+0x10e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <HAL_TIM_PWM_Start+0x15c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d111      	bne.n	8005422 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b06      	cmp	r3, #6
 800540e:	d010      	beq.n	8005432 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	e007      	b.n	8005432 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0201 	orr.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40010000 	.word	0x40010000
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40014000 	.word	0x40014000

08005450 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2200      	movs	r2, #0
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fdb8 	bl	8005fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a29      	ldr	r2, [pc, #164]	; (8005514 <HAL_TIM_PWM_Stop+0xc4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d117      	bne.n	80054a2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a1a      	ldr	r2, [r3, #32]
 8005478:	f241 1311 	movw	r3, #4369	; 0x1111
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <HAL_TIM_PWM_Stop+0x52>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	f240 4344 	movw	r3, #1092	; 0x444
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <HAL_TIM_PWM_Stop+0x52>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10f      	bne.n	80054d2 <HAL_TIM_PWM_Stop+0x82>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	f240 4344 	movw	r3, #1092	; 0x444
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d107      	bne.n	80054d2 <HAL_TIM_PWM_Stop+0x82>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_PWM_Stop+0x92>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e0:	e013      	b.n	800550a <HAL_TIM_PWM_Stop+0xba>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_PWM_Stop+0xa2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f0:	e00b      	b.n	800550a <HAL_TIM_PWM_Stop+0xba>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_PWM_Stop+0xb2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005500:	e003      	b.n	800550a <HAL_TIM_PWM_Stop+0xba>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40010000 	.word	0x40010000

08005518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d122      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d11b      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0202 	mvn.w	r2, #2
 8005544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa77 	bl	8005a4e <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa69 	bl	8005a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa7a 	bl	8005a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0204 	mvn.w	r2, #4
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa4d 	bl	8005a4e <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fa3f 	bl	8005a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa50 	bl	8005a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0208 	mvn.w	r2, #8
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa23 	bl	8005a4e <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa15 	bl	8005a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa26 	bl	8005a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9f9 	bl	8005a4e <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9eb 	bl	8005a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f9fc 	bl	8005a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0201 	mvn.w	r2, #1
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fd fb34 	bl	8002d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fd26 	bl	8006114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d10e      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d107      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f9c1 	bl	8005a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d10e      	bne.n	8005720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b20      	cmp	r3, #32
 800570e:	d107      	bne.n	8005720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0220 	mvn.w	r2, #32
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fcf0 	bl	8006100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005742:	2302      	movs	r3, #2
 8005744:	e0ae      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	f200 809f 	bhi.w	8005894 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005791 	.word	0x08005791
 8005760:	08005895 	.word	0x08005895
 8005764:	08005895 	.word	0x08005895
 8005768:	08005895 	.word	0x08005895
 800576c:	080057d1 	.word	0x080057d1
 8005770:	08005895 	.word	0x08005895
 8005774:	08005895 	.word	0x08005895
 8005778:	08005895 	.word	0x08005895
 800577c:	08005813 	.word	0x08005813
 8005780:	08005895 	.word	0x08005895
 8005784:	08005895 	.word	0x08005895
 8005788:	08005895 	.word	0x08005895
 800578c:	08005853 	.word	0x08005853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f9f8 	bl	8005b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0208 	orr.w	r2, r2, #8
 80057aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0204 	bic.w	r2, r2, #4
 80057ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
      break;
 80057ce:	e064      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fa3e 	bl	8005c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6999      	ldr	r1, [r3, #24]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	021a      	lsls	r2, r3, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	619a      	str	r2, [r3, #24]
      break;
 8005810:	e043      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fa89 	bl	8005d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0208 	orr.w	r2, r2, #8
 800582c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0204 	bic.w	r2, r2, #4
 800583c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69d9      	ldr	r1, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	61da      	str	r2, [r3, #28]
      break;
 8005850:	e023      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fad3 	bl	8005e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800586c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69d9      	ldr	r1, [r3, #28]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	021a      	lsls	r2, r3, #8
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	61da      	str	r2, [r3, #28]
      break;
 8005892:	e002      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
      break;
 8005898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e0b4      	b.n	8005a32 <HAL_TIM_ConfigClockSource+0x186>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005900:	d03e      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0xd4>
 8005902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005906:	f200 8087 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590e:	f000 8086 	beq.w	8005a1e <HAL_TIM_ConfigClockSource+0x172>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005916:	d87f      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b70      	cmp	r3, #112	; 0x70
 800591a:	d01a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0xa6>
 800591c:	2b70      	cmp	r3, #112	; 0x70
 800591e:	d87b      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b60      	cmp	r3, #96	; 0x60
 8005922:	d050      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005924:	2b60      	cmp	r3, #96	; 0x60
 8005926:	d877      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b50      	cmp	r3, #80	; 0x50
 800592a:	d03c      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0xfa>
 800592c:	2b50      	cmp	r3, #80	; 0x50
 800592e:	d873      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d058      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d86f      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b30      	cmp	r3, #48	; 0x30
 800593a:	d064      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x15a>
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d86b      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d060      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x15a>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d867      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d05c      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x15a>
 800594c:	2b10      	cmp	r3, #16
 800594e:	d05a      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x15a>
 8005950:	e062      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6899      	ldr	r1, [r3, #8]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f000 fb19 	bl	8005f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	609a      	str	r2, [r3, #8]
      break;
 800597e:	e04f      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6899      	ldr	r1, [r3, #8]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f000 fb02 	bl	8005f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a2:	609a      	str	r2, [r3, #8]
      break;
 80059a4:	e03c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f000 fa76 	bl	8005ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2150      	movs	r1, #80	; 0x50
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 facf 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 80059c4:	e02c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6859      	ldr	r1, [r3, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f000 fa95 	bl	8005f02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2160      	movs	r1, #96	; 0x60
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fabf 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 80059e4:	e01c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6859      	ldr	r1, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	461a      	mov	r2, r3
 80059f4:	f000 fa56 	bl	8005ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2140      	movs	r1, #64	; 0x40
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 faaf 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005a04:	e00c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f000 faa6 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005a16:	e003      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1c:	e000      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a34      	ldr	r2, [pc, #208]	; (8005b70 <TIM_Base_SetConfig+0xe4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_Base_SetConfig+0x38>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_Base_SetConfig+0x38>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a31      	ldr	r2, [pc, #196]	; (8005b74 <TIM_Base_SetConfig+0xe8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_Base_SetConfig+0x38>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a30      	ldr	r2, [pc, #192]	; (8005b78 <TIM_Base_SetConfig+0xec>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0x38>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a2f      	ldr	r2, [pc, #188]	; (8005b7c <TIM_Base_SetConfig+0xf0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a25      	ldr	r2, [pc, #148]	; (8005b70 <TIM_Base_SetConfig+0xe4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01b      	beq.n	8005b16 <TIM_Base_SetConfig+0x8a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d017      	beq.n	8005b16 <TIM_Base_SetConfig+0x8a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <TIM_Base_SetConfig+0xe8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <TIM_Base_SetConfig+0x8a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a21      	ldr	r2, [pc, #132]	; (8005b78 <TIM_Base_SetConfig+0xec>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_Base_SetConfig+0x8a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a20      	ldr	r2, [pc, #128]	; (8005b7c <TIM_Base_SetConfig+0xf0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_Base_SetConfig+0x8a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <TIM_Base_SetConfig+0xf4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_Base_SetConfig+0x8a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <TIM_Base_SetConfig+0xf8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_Base_SetConfig+0x8a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <TIM_Base_SetConfig+0xfc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d108      	bne.n	8005b28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <TIM_Base_SetConfig+0xe4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d103      	bne.n	8005b5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	615a      	str	r2, [r3, #20]
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40000c00 	.word	0x40000c00
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40014400 	.word	0x40014400
 8005b88:	40014800 	.word	0x40014800

08005b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0201 	bic.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0303 	bic.w	r3, r3, #3
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f023 0302 	bic.w	r3, r3, #2
 8005bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <TIM_OC1_SetConfig+0xc8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10c      	bne.n	8005c02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0308 	bic.w	r3, r3, #8
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f023 0304 	bic.w	r3, r3, #4
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a13      	ldr	r2, [pc, #76]	; (8005c54 <TIM_OC1_SetConfig+0xc8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d111      	bne.n	8005c2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	621a      	str	r2, [r3, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	40010000 	.word	0x40010000

08005c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f023 0210 	bic.w	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0320 	bic.w	r3, r3, #32
 8005ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <TIM_OC2_SetConfig+0xd4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d10d      	bne.n	8005cd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <TIM_OC2_SetConfig+0xd4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d113      	bne.n	8005d04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40010000 	.word	0x40010000

08005d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <TIM_OC3_SetConfig+0xd0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d10d      	bne.n	8005daa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a14      	ldr	r2, [pc, #80]	; (8005e00 <TIM_OC3_SetConfig+0xd0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d113      	bne.n	8005dda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000

08005e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	031b      	lsls	r3, r3, #12
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <TIM_OC4_SetConfig+0x9c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d109      	bne.n	8005e78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	019b      	lsls	r3, r3, #6
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000

08005ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0201 	bic.w	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 030a 	bic.w	r3, r3, #10
 8005ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b087      	sub	sp, #28
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0210 	bic.w	r2, r3, #16
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f043 0307 	orr.w	r3, r3, #7
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	609a      	str	r2, [r3, #8]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	021a      	lsls	r2, r3, #8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	609a      	str	r2, [r3, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2201      	movs	r2, #1
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1a      	ldr	r2, [r3, #32]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	fa01 f303 	lsl.w	r3, r1, r3
 8006010:	431a      	orrs	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006038:	2302      	movs	r3, #2
 800603a:	e050      	b.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1c      	ldr	r2, [pc, #112]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006088:	d013      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a16      	ldr	r2, [pc, #88]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10c      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40014000 	.word	0x40014000

08006100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800613a:	2b84      	cmp	r3, #132	; 0x84
 800613c:	d005      	beq.n	800614a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800613e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	3303      	adds	r3, #3
 8006148:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800614a:	68fb      	ldr	r3, [r7, #12]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800615c:	f000 ffcc 	bl	80070f8 <vTaskStartScheduler>
  
  return osOK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	bd80      	pop	{r7, pc}

08006166 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006168:	b089      	sub	sp, #36	; 0x24
 800616a:	af04      	add	r7, sp, #16
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d020      	beq.n	80061ba <osThreadCreate+0x54>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01c      	beq.n	80061ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685c      	ldr	r4, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681d      	ldr	r5, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691e      	ldr	r6, [r3, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff ffc8 	bl	8006128 <makeFreeRtosPriority>
 8006198:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061a2:	9202      	str	r2, [sp, #8]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	9100      	str	r1, [sp, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	4632      	mov	r2, r6
 80061ac:	4629      	mov	r1, r5
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 fdda 	bl	8006d68 <xTaskCreateStatic>
 80061b4:	4603      	mov	r3, r0
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	e01c      	b.n	80061f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685c      	ldr	r4, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061c6:	b29e      	uxth	r6, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff ffaa 	bl	8006128 <makeFreeRtosPriority>
 80061d4:	4602      	mov	r2, r0
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	9200      	str	r2, [sp, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	4632      	mov	r2, r6
 80061e2:	4629      	mov	r1, r5
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 fe1c 	bl	8006e22 <xTaskCreate>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <osDelay+0x16>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	e000      	b.n	8006216 <osDelay+0x18>
 8006214:	2301      	movs	r3, #1
 8006216:	4618      	mov	r0, r3
 8006218:	f000 ff3a 	bl	8007090 <vTaskDelay>
  
  return osOK;
 800621c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006226:	b590      	push	{r4, r7, lr}
 8006228:	b085      	sub	sp, #20
 800622a:	af02      	add	r7, sp, #8
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d011      	beq.n	800625c <osMessageCreate+0x36>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00d      	beq.n	800625c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2400      	movs	r4, #0
 8006252:	9400      	str	r4, [sp, #0]
 8006254:	f000 f92c 	bl	80064b0 <xQueueGenericCreateStatic>
 8006258:	4603      	mov	r3, r0
 800625a:	e008      	b.n	800626e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	4619      	mov	r1, r3
 8006268:	f000 f99a 	bl	80065a0 <xQueueGenericCreate>
 800626c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}

08006276 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f103 0208 	add.w	r2, r3, #8
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f04f 32ff 	mov.w	r2, #4294967295
 800628e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f103 0208 	add.w	r2, r3, #8
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f103 0208 	add.w	r2, r3, #8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]
}
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d103      	bne.n	8006338 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e00c      	b.n	8006352 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3308      	adds	r3, #8
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e002      	b.n	8006346 <vListInsert+0x2e>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d2f6      	bcs.n	8006340 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	601a      	str	r2, [r3, #0]
}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6892      	ldr	r2, [r2, #8]
 80063a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6852      	ldr	r2, [r2, #4]
 80063aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d103      	bne.n	80063be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	1e5a      	subs	r2, r3, #1
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800640a:	f001 fcab 	bl	8007d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	441a      	add	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	3b01      	subs	r3, #1
 800643c:	68f9      	ldr	r1, [r7, #12]
 800643e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	441a      	add	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	22ff      	movs	r2, #255	; 0xff
 800644e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	22ff      	movs	r2, #255	; 0xff
 8006456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d114      	bne.n	800648a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01a      	beq.n	800649e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3310      	adds	r3, #16
 800646c:	4618      	mov	r0, r3
 800646e:	f001 f885 	bl	800757c <xTaskRemoveFromEventList>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d012      	beq.n	800649e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <xQueueGenericReset+0xcc>)
 800647a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	e009      	b.n	800649e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3310      	adds	r3, #16
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fef1 	bl	8006276 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3324      	adds	r3, #36	; 0x24
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff feec 	bl	8006276 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800649e:	f001 fc91 	bl	8007dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064a2:	2301      	movs	r3, #1
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08e      	sub	sp, #56	; 0x38
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <xQueueGenericCreateStatic+0x52>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <xQueueGenericCreateStatic+0x56>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <xQueueGenericCreateStatic+0x58>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	623b      	str	r3, [r7, #32]
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <xQueueGenericCreateStatic+0x7e>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <xQueueGenericCreateStatic+0x82>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <xQueueGenericCreateStatic+0x84>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	61fb      	str	r3, [r7, #28]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800654e:	2348      	movs	r3, #72	; 0x48
 8006550:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b48      	cmp	r3, #72	; 0x48
 8006556:	d00a      	beq.n	800656e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	61bb      	str	r3, [r7, #24]
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800656e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00d      	beq.n	8006596 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006582:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	4613      	mov	r3, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f83f 	bl	8006614 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006598:	4618      	mov	r0, r3
 800659a:	3730      	adds	r7, #48	; 0x30
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	613b      	str	r3, [r7, #16]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	3348      	adds	r3, #72	; 0x48
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fce5 	bl	8007fa8 <pvPortMalloc>
 80065de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d011      	beq.n	800660a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3348      	adds	r3, #72	; 0x48
 80065ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065f8:	79fa      	ldrb	r2, [r7, #7]
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4613      	mov	r3, r2
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 f805 	bl	8006614 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800660a:	69bb      	ldr	r3, [r7, #24]
	}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d103      	bne.n	8006630 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e002      	b.n	8006636 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006642:	2101      	movs	r1, #1
 8006644:	69b8      	ldr	r0, [r7, #24]
 8006646:	f7ff fecb 	bl	80063e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08e      	sub	sp, #56	; 0x38
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006662:	2300      	movs	r3, #0
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xQueueGenericSend+0x32>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <xQueueGenericSend+0x40>
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <xQueueGenericSend+0x44>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <xQueueGenericSend+0x46>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <xQueueGenericSend+0x60>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d103      	bne.n	80066c2 <xQueueGenericSend+0x6e>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <xQueueGenericSend+0x72>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <xQueueGenericSend+0x74>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	623b      	str	r3, [r7, #32]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066e2:	f001 f907 	bl	80078f4 <xTaskGetSchedulerState>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <xQueueGenericSend+0x9e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <xQueueGenericSend+0xa2>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueGenericSend+0xa4>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xQueueGenericSend+0xbe>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	61fb      	str	r3, [r7, #28]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006712:	f001 fb27 	bl	8007d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	429a      	cmp	r2, r3
 8006720:	d302      	bcc.n	8006728 <xQueueGenericSend+0xd4>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d129      	bne.n	800677c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800672e:	f000 fa0b 	bl	8006b48 <prvCopyDataToQueue>
 8006732:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	d010      	beq.n	800675e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	3324      	adds	r3, #36	; 0x24
 8006740:	4618      	mov	r0, r3
 8006742:	f000 ff1b 	bl	800757c <xTaskRemoveFromEventList>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d013      	beq.n	8006774 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800674c:	4b3f      	ldr	r3, [pc, #252]	; (800684c <xQueueGenericSend+0x1f8>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	e00a      	b.n	8006774 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006764:	4b39      	ldr	r3, [pc, #228]	; (800684c <xQueueGenericSend+0x1f8>)
 8006766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006774:	f001 fb26 	bl	8007dc4 <vPortExitCritical>
				return pdPASS;
 8006778:	2301      	movs	r3, #1
 800677a:	e063      	b.n	8006844 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006782:	f001 fb1f 	bl	8007dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006786:	2300      	movs	r3, #0
 8006788:	e05c      	b.n	8006844 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ff53 	bl	8007640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800679a:	2301      	movs	r3, #1
 800679c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800679e:	f001 fb11 	bl	8007dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067a2:	f000 fd09 	bl	80071b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067a6:	f001 fadd 	bl	8007d64 <vPortEnterCritical>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d103      	bne.n	80067c0 <xQueueGenericSend+0x16c>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c6:	b25b      	sxtb	r3, r3
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d103      	bne.n	80067d6 <xQueueGenericSend+0x182>
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d6:	f001 faf5 	bl	8007dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067da:	1d3a      	adds	r2, r7, #4
 80067dc:	f107 0314 	add.w	r3, r7, #20
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 ff42 	bl	800766c <xTaskCheckForTimeOut>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d124      	bne.n	8006838 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f0:	f000 faa2 	bl	8006d38 <prvIsQueueFull>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d018      	beq.n	800682c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	3310      	adds	r3, #16
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4611      	mov	r1, r2
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fe96 	bl	8007534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800680a:	f000 fa2d 	bl	8006c68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800680e:	f000 fce1 	bl	80071d4 <xTaskResumeAll>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	f47f af7c 	bne.w	8006712 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800681a:	4b0c      	ldr	r3, [pc, #48]	; (800684c <xQueueGenericSend+0x1f8>)
 800681c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	e772      	b.n	8006712 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800682c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800682e:	f000 fa1b 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006832:	f000 fccf 	bl	80071d4 <xTaskResumeAll>
 8006836:	e76c      	b.n	8006712 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800683a:	f000 fa15 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800683e:	f000 fcc9 	bl	80071d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006842:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006844:	4618      	mov	r0, r3
 8006846:	3738      	adds	r7, #56	; 0x38
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b090      	sub	sp, #64	; 0x40
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <xQueueGenericSendFromISR+0x3c>
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <xQueueGenericSendFromISR+0x40>
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <xQueueGenericSendFromISR+0x42>
 8006890:	2300      	movs	r3, #0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068a8:	bf00      	nop
 80068aa:	e7fe      	b.n	80068aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d103      	bne.n	80068ba <xQueueGenericSendFromISR+0x6a>
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <xQueueGenericSendFromISR+0x6e>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <xQueueGenericSendFromISR+0x70>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	623b      	str	r3, [r7, #32]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068da:	f001 fb25 	bl	8007f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068de:	f3ef 8211 	mrs	r2, BASEPRI
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	429a      	cmp	r2, r3
 8006904:	d302      	bcc.n	800690c <xQueueGenericSendFromISR+0xbc>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d12f      	bne.n	800696c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006922:	f000 f911 	bl	8006b48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006926:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d112      	bne.n	8006956 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d016      	beq.n	8006966 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	3324      	adds	r3, #36	; 0x24
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fe1d 	bl	800757c <xTaskRemoveFromEventList>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00e      	beq.n	8006966 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e007      	b.n	8006966 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006956:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800695a:	3301      	adds	r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	b25a      	sxtb	r2, r3
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006966:	2301      	movs	r3, #1
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800696a:	e001      	b.n	8006970 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800696c:	2300      	movs	r3, #0
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800697a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800697c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800697e:	4618      	mov	r0, r3
 8006980:	3740      	adds	r7, #64	; 0x40
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08c      	sub	sp, #48	; 0x30
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <xQueueReceive+0x30>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	623b      	str	r3, [r7, #32]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <xQueueReceive+0x3e>
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <xQueueReceive+0x42>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <xQueueReceive+0x44>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueReceive+0x5e>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61fb      	str	r3, [r7, #28]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e6:	f000 ff85 	bl	80078f4 <xTaskGetSchedulerState>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <xQueueReceive+0x6e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <xQueueReceive+0x72>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <xQueueReceive+0x74>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <xQueueReceive+0x8e>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	61bb      	str	r3, [r7, #24]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a16:	f001 f9a5 	bl	8007d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01f      	beq.n	8006a66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a2a:	f000 f8f7 	bl	8006c1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	1e5a      	subs	r2, r3, #1
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00f      	beq.n	8006a5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	3310      	adds	r3, #16
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fd9a 	bl	800757c <xTaskRemoveFromEventList>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a4e:	4b3d      	ldr	r3, [pc, #244]	; (8006b44 <xQueueReceive+0x1bc>)
 8006a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a5e:	f001 f9b1 	bl	8007dc4 <vPortExitCritical>
				return pdPASS;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e069      	b.n	8006b3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a6c:	f001 f9aa 	bl	8007dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a70:	2300      	movs	r3, #0
 8006a72:	e062      	b.n	8006b3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a7a:	f107 0310 	add.w	r3, r7, #16
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fdde 	bl	8007640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a84:	2301      	movs	r3, #1
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a88:	f001 f99c 	bl	8007dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a8c:	f000 fb94 	bl	80071b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a90:	f001 f968 	bl	8007d64 <vPortEnterCritical>
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a9a:	b25b      	sxtb	r3, r3
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d103      	bne.n	8006aaa <xQueueReceive+0x122>
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d103      	bne.n	8006ac0 <xQueueReceive+0x138>
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac0:	f001 f980 	bl	8007dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ac4:	1d3a      	adds	r2, r7, #4
 8006ac6:	f107 0310 	add.w	r3, r7, #16
 8006aca:	4611      	mov	r1, r2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fdcd 	bl	800766c <xTaskCheckForTimeOut>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d123      	bne.n	8006b20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ada:	f000 f917 	bl	8006d0c <prvIsQueueEmpty>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d017      	beq.n	8006b14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fd21 	bl	8007534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af4:	f000 f8b8 	bl	8006c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006af8:	f000 fb6c 	bl	80071d4 <xTaskResumeAll>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d189      	bne.n	8006a16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b02:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <xQueueReceive+0x1bc>)
 8006b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	e780      	b.n	8006a16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b16:	f000 f8a7 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b1a:	f000 fb5b 	bl	80071d4 <xTaskResumeAll>
 8006b1e:	e77a      	b.n	8006a16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b22:	f000 f8a1 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b26:	f000 fb55 	bl	80071d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b2c:	f000 f8ee 	bl	8006d0c <prvIsQueueEmpty>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f43f af6f 	beq.w	8006a16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3730      	adds	r7, #48	; 0x30
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	e000ed04 	.word	0xe000ed04

08006b48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10d      	bne.n	8006b82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d14d      	bne.n	8006c0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fedc 	bl	8007930 <xTaskPriorityDisinherit>
 8006b78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	e043      	b.n	8006c0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d119      	bne.n	8006bbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6858      	ldr	r0, [r3, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	461a      	mov	r2, r3
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	f001 fc1c 	bl	80083d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	441a      	add	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d32b      	bcc.n	8006c0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e026      	b.n	8006c0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68d8      	ldr	r0, [r3, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	f001 fc02 	bl	80083d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d207      	bcs.n	8006bf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	441a      	add	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d105      	bne.n	8006c0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d018      	beq.n	8006c60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	441a      	add	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d303      	bcc.n	8006c50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68d9      	ldr	r1, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6838      	ldr	r0, [r7, #0]
 8006c5c:	f001 fbb8 	bl	80083d0 <memcpy>
	}
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c70:	f001 f878 	bl	8007d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c7c:	e011      	b.n	8006ca2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d012      	beq.n	8006cac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3324      	adds	r3, #36	; 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fc76 	bl	800757c <xTaskRemoveFromEventList>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c96:	f000 fd4b 	bl	8007730 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dce9      	bgt.n	8006c7e <prvUnlockQueue+0x16>
 8006caa:	e000      	b.n	8006cae <prvUnlockQueue+0x46>
					break;
 8006cac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	22ff      	movs	r2, #255	; 0xff
 8006cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006cb6:	f001 f885 	bl	8007dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cba:	f001 f853 	bl	8007d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cc6:	e011      	b.n	8006cec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d012      	beq.n	8006cf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3310      	adds	r3, #16
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fc51 	bl	800757c <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ce0:	f000 fd26 	bl	8007730 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dce9      	bgt.n	8006cc8 <prvUnlockQueue+0x60>
 8006cf4:	e000      	b.n	8006cf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22ff      	movs	r2, #255	; 0xff
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d00:	f001 f860 	bl	8007dc4 <vPortExitCritical>
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d14:	f001 f826 	bl	8007d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e001      	b.n	8006d2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d2a:	f001 f84b 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d40:	f001 f810 	bl	8007d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d102      	bne.n	8006d56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d50:	2301      	movs	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e001      	b.n	8006d5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d5a:	f001 f833 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08e      	sub	sp, #56	; 0x38
 8006d6c:	af04      	add	r7, sp, #16
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	623b      	str	r3, [r7, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <xTaskCreateStatic+0x46>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	61fb      	str	r3, [r7, #28]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dae:	2354      	movs	r3, #84	; 0x54
 8006db0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b54      	cmp	r3, #84	; 0x54
 8006db6:	d00a      	beq.n	8006dce <xTaskCreateStatic+0x66>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	61bb      	str	r3, [r7, #24]
}
 8006dca:	bf00      	nop
 8006dcc:	e7fe      	b.n	8006dcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006dce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01e      	beq.n	8006e14 <xTaskCreateStatic+0xac>
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01b      	beq.n	8006e14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006dee:	2300      	movs	r3, #0
 8006df0:	9303      	str	r3, [sp, #12]
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	9302      	str	r3, [sp, #8]
 8006df6:	f107 0314 	add.w	r3, r7, #20
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68b9      	ldr	r1, [r7, #8]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f850 	bl	8006eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e0e:	f000 f8d5 	bl	8006fbc <prvAddNewTaskToReadyList>
 8006e12:	e001      	b.n	8006e18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e18:	697b      	ldr	r3, [r7, #20]
	}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3728      	adds	r7, #40	; 0x28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b08c      	sub	sp, #48	; 0x30
 8006e26:	af04      	add	r7, sp, #16
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f8b6 	bl	8007fa8 <pvPortMalloc>
 8006e3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00e      	beq.n	8006e62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e44:	2054      	movs	r0, #84	; 0x54
 8006e46:	f001 f8af 	bl	8007fa8 <pvPortMalloc>
 8006e4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
 8006e58:	e005      	b.n	8006e66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e5a:	6978      	ldr	r0, [r7, #20]
 8006e5c:	f001 f970 	bl	8008140 <vPortFree>
 8006e60:	e001      	b.n	8006e66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d017      	beq.n	8006e9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e74:	88fa      	ldrh	r2, [r7, #6]
 8006e76:	2300      	movs	r3, #0
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	9302      	str	r3, [sp, #8]
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f80e 	bl	8006eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e90:	69f8      	ldr	r0, [r7, #28]
 8006e92:	f000 f893 	bl	8006fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	e002      	b.n	8006ea2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f023 0307 	bic.w	r3, r3, #7
 8006ed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	617b      	str	r3, [r7, #20]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01f      	beq.n	8006f3a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	e012      	b.n	8006f26 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	7819      	ldrb	r1, [r3, #0]
 8006f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3334      	adds	r3, #52	; 0x34
 8006f10:	460a      	mov	r2, r1
 8006f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d006      	beq.n	8006f2e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	3301      	adds	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	2b0f      	cmp	r3, #15
 8006f2a:	d9e9      	bls.n	8006f00 <prvInitialiseNewTask+0x54>
 8006f2c:	e000      	b.n	8006f30 <prvInitialiseNewTask+0x84>
			{
				break;
 8006f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f38:	e003      	b.n	8006f42 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	2b06      	cmp	r3, #6
 8006f46:	d901      	bls.n	8006f4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f48:	2306      	movs	r3, #6
 8006f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f56:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	3304      	adds	r3, #4
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff f9a7 	bl	80062b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	3318      	adds	r3, #24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff f9a2 	bl	80062b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	f1c3 0207 	rsb	r2, r3, #7
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	69b8      	ldr	r0, [r7, #24]
 8006f9c:	f000 fdb4 	bl	8007b08 <pxPortInitialiseStack>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fb2:	bf00      	nop
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fc4:	f000 fece 	bl	8007d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fc8:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	4a29      	ldr	r2, [pc, #164]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fda:	4a27      	ldr	r2, [pc, #156]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fe0:	4b24      	ldr	r3, [pc, #144]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d110      	bne.n	800700a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fe8:	f000 fbc6 	bl	8007778 <prvInitialiseTaskLists>
 8006fec:	e00d      	b.n	800700a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fee:	4b23      	ldr	r3, [pc, #140]	; (800707c <prvAddNewTaskToReadyList+0xc0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ff6:	4b20      	ldr	r3, [pc, #128]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	429a      	cmp	r2, r3
 8007002:	d802      	bhi.n	800700a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007004:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800700a:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <prvAddNewTaskToReadyList+0xc4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <prvAddNewTaskToReadyList+0xc4>)
 8007012:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2201      	movs	r2, #1
 800701a:	409a      	lsls	r2, r3
 800701c:	4b19      	ldr	r3, [pc, #100]	; (8007084 <prvAddNewTaskToReadyList+0xc8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4313      	orrs	r3, r2
 8007022:	4a18      	ldr	r2, [pc, #96]	; (8007084 <prvAddNewTaskToReadyList+0xc8>)
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a15      	ldr	r2, [pc, #84]	; (8007088 <prvAddNewTaskToReadyList+0xcc>)
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7ff f947 	bl	80062d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007042:	f000 febf 	bl	8007dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <prvAddNewTaskToReadyList+0xc0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	429a      	cmp	r2, r3
 800705a:	d207      	bcs.n	800706c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <prvAddNewTaskToReadyList+0xd0>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000b50 	.word	0x20000b50
 8007078:	20000a50 	.word	0x20000a50
 800707c:	20000b5c 	.word	0x20000b5c
 8007080:	20000b6c 	.word	0x20000b6c
 8007084:	20000b58 	.word	0x20000b58
 8007088:	20000a54 	.word	0x20000a54
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d017      	beq.n	80070d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <vTaskDelay+0x60>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <vTaskDelay+0x30>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	60bb      	str	r3, [r7, #8]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070c0:	f000 f87a 	bl	80071b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fcb8 	bl	8007a3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070cc:	f000 f882 	bl	80071d4 <xTaskResumeAll>
 80070d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d107      	bne.n	80070e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <vTaskDelay+0x64>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000b78 	.word	0x20000b78
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007106:	463a      	mov	r2, r7
 8007108:	1d39      	adds	r1, r7, #4
 800710a:	f107 0308 	add.w	r3, r7, #8
 800710e:	4618      	mov	r0, r3
 8007110:	f7fa fb26 	bl	8001760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	9202      	str	r2, [sp, #8]
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	2300      	movs	r3, #0
 8007124:	460a      	mov	r2, r1
 8007126:	491e      	ldr	r1, [pc, #120]	; (80071a0 <vTaskStartScheduler+0xa8>)
 8007128:	481e      	ldr	r0, [pc, #120]	; (80071a4 <vTaskStartScheduler+0xac>)
 800712a:	f7ff fe1d 	bl	8006d68 <xTaskCreateStatic>
 800712e:	4603      	mov	r3, r0
 8007130:	4a1d      	ldr	r2, [pc, #116]	; (80071a8 <vTaskStartScheduler+0xb0>)
 8007132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007134:	4b1c      	ldr	r3, [pc, #112]	; (80071a8 <vTaskStartScheduler+0xb0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800713c:	2301      	movs	r3, #1
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	e001      	b.n	8007146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d116      	bne.n	800717a <vTaskStartScheduler+0x82>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	613b      	str	r3, [r7, #16]
}
 800715e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007160:	4b12      	ldr	r3, [pc, #72]	; (80071ac <vTaskStartScheduler+0xb4>)
 8007162:	f04f 32ff 	mov.w	r2, #4294967295
 8007166:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007168:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <vTaskStartScheduler+0xb8>)
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <vTaskStartScheduler+0xbc>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007174:	f000 fd54 	bl	8007c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007178:	e00e      	b.n	8007198 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d10a      	bne.n	8007198 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60fb      	str	r3, [r7, #12]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vTaskStartScheduler+0x9e>
}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	0800b31c 	.word	0x0800b31c
 80071a4:	08007749 	.word	0x08007749
 80071a8:	20000b74 	.word	0x20000b74
 80071ac:	20000b70 	.word	0x20000b70
 80071b0:	20000b5c 	.word	0x20000b5c
 80071b4:	20000b54 	.word	0x20000b54

080071b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <vTaskSuspendAll+0x18>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	4a03      	ldr	r2, [pc, #12]	; (80071d0 <vTaskSuspendAll+0x18>)
 80071c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071c6:	bf00      	nop
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20000b78 	.word	0x20000b78

080071d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071e2:	4b41      	ldr	r3, [pc, #260]	; (80072e8 <xTaskResumeAll+0x114>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10a      	bne.n	8007200 <xTaskResumeAll+0x2c>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	603b      	str	r3, [r7, #0]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007200:	f000 fdb0 	bl	8007d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007204:	4b38      	ldr	r3, [pc, #224]	; (80072e8 <xTaskResumeAll+0x114>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	4a37      	ldr	r2, [pc, #220]	; (80072e8 <xTaskResumeAll+0x114>)
 800720c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800720e:	4b36      	ldr	r3, [pc, #216]	; (80072e8 <xTaskResumeAll+0x114>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d161      	bne.n	80072da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007216:	4b35      	ldr	r3, [pc, #212]	; (80072ec <xTaskResumeAll+0x118>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d05d      	beq.n	80072da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800721e:	e02e      	b.n	800727e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007220:	4b33      	ldr	r3, [pc, #204]	; (80072f0 <xTaskResumeAll+0x11c>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3318      	adds	r3, #24
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff f8ac 	bl	800638a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3304      	adds	r3, #4
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff f8a7 	bl	800638a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	2201      	movs	r2, #1
 8007242:	409a      	lsls	r2, r3
 8007244:	4b2b      	ldr	r3, [pc, #172]	; (80072f4 <xTaskResumeAll+0x120>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4313      	orrs	r3, r2
 800724a:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <xTaskResumeAll+0x120>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4a27      	ldr	r2, [pc, #156]	; (80072f8 <xTaskResumeAll+0x124>)
 800725c:	441a      	add	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7ff f833 	bl	80062d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	4b23      	ldr	r3, [pc, #140]	; (80072fc <xTaskResumeAll+0x128>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	429a      	cmp	r2, r3
 8007276:	d302      	bcc.n	800727e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007278:	4b21      	ldr	r3, [pc, #132]	; (8007300 <xTaskResumeAll+0x12c>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800727e:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <xTaskResumeAll+0x11c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1cc      	bne.n	8007220 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800728c:	f000 fb12 	bl	80078b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007290:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <xTaskResumeAll+0x130>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d010      	beq.n	80072be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800729c:	f000 f836 	bl	800730c <xTaskIncrementTick>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80072a6:	4b16      	ldr	r3, [pc, #88]	; (8007300 <xTaskResumeAll+0x12c>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f1      	bne.n	800729c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80072b8:	4b12      	ldr	r3, [pc, #72]	; (8007304 <xTaskResumeAll+0x130>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072be:	4b10      	ldr	r3, [pc, #64]	; (8007300 <xTaskResumeAll+0x12c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072ca:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <xTaskResumeAll+0x134>)
 80072cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072da:	f000 fd73 	bl	8007dc4 <vPortExitCritical>

	return xAlreadyYielded;
 80072de:	68bb      	ldr	r3, [r7, #8]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20000b78 	.word	0x20000b78
 80072ec:	20000b50 	.word	0x20000b50
 80072f0:	20000b10 	.word	0x20000b10
 80072f4:	20000b58 	.word	0x20000b58
 80072f8:	20000a54 	.word	0x20000a54
 80072fc:	20000a50 	.word	0x20000a50
 8007300:	20000b64 	.word	0x20000b64
 8007304:	20000b60 	.word	0x20000b60
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007312:	2300      	movs	r3, #0
 8007314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007316:	4b4e      	ldr	r3, [pc, #312]	; (8007450 <xTaskIncrementTick+0x144>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 808e 	bne.w	800743c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007320:	4b4c      	ldr	r3, [pc, #304]	; (8007454 <xTaskIncrementTick+0x148>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007328:	4a4a      	ldr	r2, [pc, #296]	; (8007454 <xTaskIncrementTick+0x148>)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d120      	bne.n	8007376 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007334:	4b48      	ldr	r3, [pc, #288]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <xTaskIncrementTick+0x48>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	603b      	str	r3, [r7, #0]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <xTaskIncrementTick+0x46>
 8007354:	4b40      	ldr	r3, [pc, #256]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	4b40      	ldr	r3, [pc, #256]	; (800745c <xTaskIncrementTick+0x150>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a3e      	ldr	r2, [pc, #248]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	4a3e      	ldr	r2, [pc, #248]	; (800745c <xTaskIncrementTick+0x150>)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	4b3d      	ldr	r3, [pc, #244]	; (8007460 <xTaskIncrementTick+0x154>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	4a3c      	ldr	r2, [pc, #240]	; (8007460 <xTaskIncrementTick+0x154>)
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	f000 fa9f 	bl	80078b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007376:	4b3b      	ldr	r3, [pc, #236]	; (8007464 <xTaskIncrementTick+0x158>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	429a      	cmp	r2, r3
 800737e:	d348      	bcc.n	8007412 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007380:	4b35      	ldr	r3, [pc, #212]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738a:	4b36      	ldr	r3, [pc, #216]	; (8007464 <xTaskIncrementTick+0x158>)
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	601a      	str	r2, [r3, #0]
					break;
 8007392:	e03e      	b.n	8007412 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007394:	4b30      	ldr	r3, [pc, #192]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d203      	bcs.n	80073b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073ac:	4a2d      	ldr	r2, [pc, #180]	; (8007464 <xTaskIncrementTick+0x158>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073b2:	e02e      	b.n	8007412 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe ffe6 	bl	800638a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3318      	adds	r3, #24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe ffdd 	bl	800638a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	2201      	movs	r2, #1
 80073d6:	409a      	lsls	r2, r3
 80073d8:	4b23      	ldr	r3, [pc, #140]	; (8007468 <xTaskIncrementTick+0x15c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4313      	orrs	r3, r2
 80073de:	4a22      	ldr	r2, [pc, #136]	; (8007468 <xTaskIncrementTick+0x15c>)
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a1f      	ldr	r2, [pc, #124]	; (800746c <xTaskIncrementTick+0x160>)
 80073f0:	441a      	add	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fe ff69 	bl	80062d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007402:	4b1b      	ldr	r3, [pc, #108]	; (8007470 <xTaskIncrementTick+0x164>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	429a      	cmp	r2, r3
 800740a:	d3b9      	bcc.n	8007380 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800740c:	2301      	movs	r3, #1
 800740e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007410:	e7b6      	b.n	8007380 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007412:	4b17      	ldr	r3, [pc, #92]	; (8007470 <xTaskIncrementTick+0x164>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	4914      	ldr	r1, [pc, #80]	; (800746c <xTaskIncrementTick+0x160>)
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d901      	bls.n	800742e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800742e:	4b11      	ldr	r3, [pc, #68]	; (8007474 <xTaskIncrementTick+0x168>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d007      	beq.n	8007446 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e004      	b.n	8007446 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800743c:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <xTaskIncrementTick+0x16c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	4a0d      	ldr	r2, [pc, #52]	; (8007478 <xTaskIncrementTick+0x16c>)
 8007444:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000b78 	.word	0x20000b78
 8007454:	20000b54 	.word	0x20000b54
 8007458:	20000b08 	.word	0x20000b08
 800745c:	20000b0c 	.word	0x20000b0c
 8007460:	20000b68 	.word	0x20000b68
 8007464:	20000b70 	.word	0x20000b70
 8007468:	20000b58 	.word	0x20000b58
 800746c:	20000a54 	.word	0x20000a54
 8007470:	20000a50 	.word	0x20000a50
 8007474:	20000b64 	.word	0x20000b64
 8007478:	20000b60 	.word	0x20000b60

0800747c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007482:	4b27      	ldr	r3, [pc, #156]	; (8007520 <vTaskSwitchContext+0xa4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800748a:	4b26      	ldr	r3, [pc, #152]	; (8007524 <vTaskSwitchContext+0xa8>)
 800748c:	2201      	movs	r2, #1
 800748e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007490:	e03f      	b.n	8007512 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007492:	4b24      	ldr	r3, [pc, #144]	; (8007524 <vTaskSwitchContext+0xa8>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007498:	4b23      	ldr	r3, [pc, #140]	; (8007528 <vTaskSwitchContext+0xac>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	fab3 f383 	clz	r3, r3
 80074a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074a6:	7afb      	ldrb	r3, [r7, #11]
 80074a8:	f1c3 031f 	rsb	r3, r3, #31
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	491f      	ldr	r1, [pc, #124]	; (800752c <vTaskSwitchContext+0xb0>)
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	440b      	add	r3, r1
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	607b      	str	r3, [r7, #4]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <vTaskSwitchContext+0x5a>
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4a12      	ldr	r2, [pc, #72]	; (800752c <vTaskSwitchContext+0xb0>)
 80074e4:	4413      	add	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3308      	adds	r3, #8
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d104      	bne.n	8007508 <vTaskSwitchContext+0x8c>
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	4a08      	ldr	r2, [pc, #32]	; (8007530 <vTaskSwitchContext+0xb4>)
 8007510:	6013      	str	r3, [r2, #0]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20000b78 	.word	0x20000b78
 8007524:	20000b64 	.word	0x20000b64
 8007528:	20000b58 	.word	0x20000b58
 800752c:	20000a54 	.word	0x20000a54
 8007530:	20000a50 	.word	0x20000a50

08007534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800755a:	4b07      	ldr	r3, [pc, #28]	; (8007578 <vTaskPlaceOnEventList+0x44>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3318      	adds	r3, #24
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fe fed8 	bl	8006318 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007568:	2101      	movs	r1, #1
 800756a:	6838      	ldr	r0, [r7, #0]
 800756c:	f000 fa66 	bl	8007a3c <prvAddCurrentTaskToDelayedList>
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20000a50 	.word	0x20000a50

0800757c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60fb      	str	r3, [r7, #12]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3318      	adds	r3, #24
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe feec 	bl	800638a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b2:	4b1d      	ldr	r3, [pc, #116]	; (8007628 <xTaskRemoveFromEventList+0xac>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d11c      	bne.n	80075f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	3304      	adds	r3, #4
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fee3 	bl	800638a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	2201      	movs	r2, #1
 80075ca:	409a      	lsls	r2, r3
 80075cc:	4b17      	ldr	r3, [pc, #92]	; (800762c <xTaskRemoveFromEventList+0xb0>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	4a16      	ldr	r2, [pc, #88]	; (800762c <xTaskRemoveFromEventList+0xb0>)
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a13      	ldr	r2, [pc, #76]	; (8007630 <xTaskRemoveFromEventList+0xb4>)
 80075e4:	441a      	add	r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7fe fe6f 	bl	80062d0 <vListInsertEnd>
 80075f2:	e005      	b.n	8007600 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	3318      	adds	r3, #24
 80075f8:	4619      	mov	r1, r3
 80075fa:	480e      	ldr	r0, [pc, #56]	; (8007634 <xTaskRemoveFromEventList+0xb8>)
 80075fc:	f7fe fe68 	bl	80062d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007604:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <xTaskRemoveFromEventList+0xbc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	429a      	cmp	r2, r3
 800760c:	d905      	bls.n	800761a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800760e:	2301      	movs	r3, #1
 8007610:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007612:	4b0a      	ldr	r3, [pc, #40]	; (800763c <xTaskRemoveFromEventList+0xc0>)
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e001      	b.n	800761e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800761e:	697b      	ldr	r3, [r7, #20]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20000b78 	.word	0x20000b78
 800762c:	20000b58 	.word	0x20000b58
 8007630:	20000a54 	.word	0x20000a54
 8007634:	20000b10 	.word	0x20000b10
 8007638:	20000a50 	.word	0x20000a50
 800763c:	20000b64 	.word	0x20000b64

08007640 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007648:	4b06      	ldr	r3, [pc, #24]	; (8007664 <vTaskInternalSetTimeOutState+0x24>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <vTaskInternalSetTimeOutState+0x28>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	605a      	str	r2, [r3, #4]
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	20000b68 	.word	0x20000b68
 8007668:	20000b54 	.word	0x20000b54

0800766c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	613b      	str	r3, [r7, #16]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	60fb      	str	r3, [r7, #12]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076ae:	f000 fb59 	bl	8007d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076b2:	4b1d      	ldr	r3, [pc, #116]	; (8007728 <xTaskCheckForTimeOut+0xbc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ca:	d102      	bne.n	80076d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	e023      	b.n	800771a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <xTaskCheckForTimeOut+0xc0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d007      	beq.n	80076ee <xTaskCheckForTimeOut+0x82>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d302      	bcc.n	80076ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	e015      	b.n	800771a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d20b      	bcs.n	8007710 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	1ad2      	subs	r2, r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff ff9b 	bl	8007640 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
 800770e:	e004      	b.n	800771a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800771a:	f000 fb53 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 800771e:	69fb      	ldr	r3, [r7, #28]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000b54 	.word	0x20000b54
 800772c:	20000b68 	.word	0x20000b68

08007730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007734:	4b03      	ldr	r3, [pc, #12]	; (8007744 <vTaskMissedYield+0x14>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
}
 800773a:	bf00      	nop
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20000b64 	.word	0x20000b64

08007748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007750:	f000 f852 	bl	80077f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007754:	4b06      	ldr	r3, [pc, #24]	; (8007770 <prvIdleTask+0x28>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d9f9      	bls.n	8007750 <prvIdleTask+0x8>
			{
				taskYIELD();
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <prvIdleTask+0x2c>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800776c:	e7f0      	b.n	8007750 <prvIdleTask+0x8>
 800776e:	bf00      	nop
 8007770:	20000a54 	.word	0x20000a54
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
 8007782:	e00c      	b.n	800779e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4a12      	ldr	r2, [pc, #72]	; (80077d8 <prvInitialiseTaskLists+0x60>)
 8007790:	4413      	add	r3, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fd6f 	bl	8006276 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3301      	adds	r3, #1
 800779c:	607b      	str	r3, [r7, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b06      	cmp	r3, #6
 80077a2:	d9ef      	bls.n	8007784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077a4:	480d      	ldr	r0, [pc, #52]	; (80077dc <prvInitialiseTaskLists+0x64>)
 80077a6:	f7fe fd66 	bl	8006276 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077aa:	480d      	ldr	r0, [pc, #52]	; (80077e0 <prvInitialiseTaskLists+0x68>)
 80077ac:	f7fe fd63 	bl	8006276 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077b0:	480c      	ldr	r0, [pc, #48]	; (80077e4 <prvInitialiseTaskLists+0x6c>)
 80077b2:	f7fe fd60 	bl	8006276 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077b6:	480c      	ldr	r0, [pc, #48]	; (80077e8 <prvInitialiseTaskLists+0x70>)
 80077b8:	f7fe fd5d 	bl	8006276 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077bc:	480b      	ldr	r0, [pc, #44]	; (80077ec <prvInitialiseTaskLists+0x74>)
 80077be:	f7fe fd5a 	bl	8006276 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077c2:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <prvInitialiseTaskLists+0x78>)
 80077c4:	4a05      	ldr	r2, [pc, #20]	; (80077dc <prvInitialiseTaskLists+0x64>)
 80077c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <prvInitialiseTaskLists+0x7c>)
 80077ca:	4a05      	ldr	r2, [pc, #20]	; (80077e0 <prvInitialiseTaskLists+0x68>)
 80077cc:	601a      	str	r2, [r3, #0]
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000a54 	.word	0x20000a54
 80077dc:	20000ae0 	.word	0x20000ae0
 80077e0:	20000af4 	.word	0x20000af4
 80077e4:	20000b10 	.word	0x20000b10
 80077e8:	20000b24 	.word	0x20000b24
 80077ec:	20000b3c 	.word	0x20000b3c
 80077f0:	20000b08 	.word	0x20000b08
 80077f4:	20000b0c 	.word	0x20000b0c

080077f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077fe:	e019      	b.n	8007834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007800:	f000 fab0 	bl	8007d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007804:	4b10      	ldr	r3, [pc, #64]	; (8007848 <prvCheckTasksWaitingTermination+0x50>)
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3304      	adds	r3, #4
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe fdba 	bl	800638a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007816:	4b0d      	ldr	r3, [pc, #52]	; (800784c <prvCheckTasksWaitingTermination+0x54>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3b01      	subs	r3, #1
 800781c:	4a0b      	ldr	r2, [pc, #44]	; (800784c <prvCheckTasksWaitingTermination+0x54>)
 800781e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <prvCheckTasksWaitingTermination+0x58>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3b01      	subs	r3, #1
 8007826:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <prvCheckTasksWaitingTermination+0x58>)
 8007828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800782a:	f000 facb 	bl	8007dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f810 	bl	8007854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007834:	4b06      	ldr	r3, [pc, #24]	; (8007850 <prvCheckTasksWaitingTermination+0x58>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e1      	bne.n	8007800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000b24 	.word	0x20000b24
 800784c:	20000b50 	.word	0x20000b50
 8007850:	20000b38 	.word	0x20000b38

08007854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007862:	2b00      	cmp	r3, #0
 8007864:	d108      	bne.n	8007878 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fc68 	bl	8008140 <vPortFree>
				vPortFree( pxTCB );
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fc65 	bl	8008140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007876:	e018      	b.n	80078aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800787e:	2b01      	cmp	r3, #1
 8007880:	d103      	bne.n	800788a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fc5c 	bl	8008140 <vPortFree>
	}
 8007888:	e00f      	b.n	80078aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007890:	2b02      	cmp	r3, #2
 8007892:	d00a      	beq.n	80078aa <prvDeleteTCB+0x56>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	60fb      	str	r3, [r7, #12]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <prvDeleteTCB+0x54>
	}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ba:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <prvResetNextTaskUnblockTime+0x38>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvResetNextTaskUnblockTime+0x3c>)
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078cc:	e008      	b.n	80078e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ce:	4b07      	ldr	r3, [pc, #28]	; (80078ec <prvResetNextTaskUnblockTime+0x38>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <prvResetNextTaskUnblockTime+0x3c>)
 80078de:	6013      	str	r3, [r2, #0]
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	20000b08 	.word	0x20000b08
 80078f0:	20000b70 	.word	0x20000b70

080078f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <xTaskGetSchedulerState+0x34>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007902:	2301      	movs	r3, #1
 8007904:	607b      	str	r3, [r7, #4]
 8007906:	e008      	b.n	800791a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007908:	4b08      	ldr	r3, [pc, #32]	; (800792c <xTaskGetSchedulerState+0x38>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007910:	2302      	movs	r3, #2
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	e001      	b.n	800791a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800791a:	687b      	ldr	r3, [r7, #4]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	20000b5c 	.word	0x20000b5c
 800792c:	20000b78 	.word	0x20000b78

08007930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d06e      	beq.n	8007a24 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007946:	4b3a      	ldr	r3, [pc, #232]	; (8007a30 <xTaskPriorityDisinherit+0x100>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	429a      	cmp	r2, r3
 800794e:	d00a      	beq.n	8007966 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	60bb      	str	r3, [r7, #8]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	429a      	cmp	r2, r3
 8007998:	d044      	beq.n	8007a24 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d140      	bne.n	8007a24 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fcef 	bl	800638a <uxListRemove>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d115      	bne.n	80079de <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	491f      	ldr	r1, [pc, #124]	; (8007a34 <xTaskPriorityDisinherit+0x104>)
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <xTaskPriorityDisinherit+0xae>
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	2201      	movs	r2, #1
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43da      	mvns	r2, r3
 80079d4:	4b18      	ldr	r3, [pc, #96]	; (8007a38 <xTaskPriorityDisinherit+0x108>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4013      	ands	r3, r2
 80079da:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <xTaskPriorityDisinherit+0x108>)
 80079dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	f1c3 0207 	rsb	r2, r3, #7
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	2201      	movs	r2, #1
 80079f8:	409a      	lsls	r2, r3
 80079fa:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <xTaskPriorityDisinherit+0x108>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	4a0d      	ldr	r2, [pc, #52]	; (8007a38 <xTaskPriorityDisinherit+0x108>)
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4a08      	ldr	r2, [pc, #32]	; (8007a34 <xTaskPriorityDisinherit+0x104>)
 8007a12:	441a      	add	r2, r3
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7fe fc58 	bl	80062d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a24:	697b      	ldr	r3, [r7, #20]
	}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000a50 	.word	0x20000a50
 8007a34:	20000a54 	.word	0x20000a54
 8007a38:	20000b58 	.word	0x20000b58

08007a3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a46:	4b29      	ldr	r3, [pc, #164]	; (8007aec <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a4c:	4b28      	ldr	r3, [pc, #160]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fc99 	bl	800638a <uxListRemove>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10b      	bne.n	8007a76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a5e:	4b24      	ldr	r3, [pc, #144]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	2201      	movs	r2, #1
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	43da      	mvns	r2, r3
 8007a6c:	4b21      	ldr	r3, [pc, #132]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4013      	ands	r3, r2
 8007a72:	4a20      	ldr	r2, [pc, #128]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d10a      	bne.n	8007a94 <prvAddCurrentTaskToDelayedList+0x58>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a84:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	481a      	ldr	r0, [pc, #104]	; (8007af8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a8e:	f7fe fc1f 	bl	80062d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a92:	e026      	b.n	8007ae2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d209      	bcs.n	8007ac0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aac:	4b13      	ldr	r3, [pc, #76]	; (8007afc <prvAddCurrentTaskToDelayedList+0xc0>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fe fc2d 	bl	8006318 <vListInsert>
}
 8007abe:	e010      	b.n	8007ae2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fe fc23 	bl	8006318 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ad2:	4b0c      	ldr	r3, [pc, #48]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d202      	bcs.n	8007ae2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007adc:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6013      	str	r3, [r2, #0]
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20000b54 	.word	0x20000b54
 8007af0:	20000a50 	.word	0x20000a50
 8007af4:	20000b58 	.word	0x20000b58
 8007af8:	20000b3c 	.word	0x20000b3c
 8007afc:	20000b0c 	.word	0x20000b0c
 8007b00:	20000b08 	.word	0x20000b08
 8007b04:	20000b70 	.word	0x20000b70

08007b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3b04      	subs	r3, #4
 8007b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3b04      	subs	r3, #4
 8007b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f023 0201 	bic.w	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b38:	4a0c      	ldr	r2, [pc, #48]	; (8007b6c <pxPortInitialiseStack+0x64>)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3b14      	subs	r3, #20
 8007b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3b04      	subs	r3, #4
 8007b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f06f 0202 	mvn.w	r2, #2
 8007b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3b20      	subs	r3, #32
 8007b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	08007b71 	.word	0x08007b71

08007b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvTaskExitError+0x54>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d00a      	beq.n	8007b9a <prvTaskExitError+0x2a>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvTaskExitError+0x28>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60bb      	str	r3, [r7, #8]
}
 8007bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bae:	bf00      	nop
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0fc      	beq.n	8007bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	200003e0 	.word	0x200003e0
	...

08007bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <pxCurrentTCBConst2>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	6808      	ldr	r0, [r1, #0]
 8007bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	f380 8809 	msr	PSP, r0
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	4770      	bx	lr
 8007bec:	f3af 8000 	nop.w

08007bf0 <pxCurrentTCBConst2>:
 8007bf0:	20000a50 	.word	0x20000a50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bf8:	4808      	ldr	r0, [pc, #32]	; (8007c1c <prvPortStartFirstTask+0x24>)
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	6800      	ldr	r0, [r0, #0]
 8007bfe:	f380 8808 	msr	MSP, r0
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8814 	msr	CONTROL, r0
 8007c0a:	b662      	cpsie	i
 8007c0c:	b661      	cpsie	f
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	df00      	svc	0
 8007c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c1a:	bf00      	nop
 8007c1c:	e000ed08 	.word	0xe000ed08

08007c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c26:	4b46      	ldr	r3, [pc, #280]	; (8007d40 <xPortStartScheduler+0x120>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a46      	ldr	r2, [pc, #280]	; (8007d44 <xPortStartScheduler+0x124>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d10a      	bne.n	8007c46 <xPortStartScheduler+0x26>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	613b      	str	r3, [r7, #16]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c46:	4b3e      	ldr	r3, [pc, #248]	; (8007d40 <xPortStartScheduler+0x120>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a3f      	ldr	r2, [pc, #252]	; (8007d48 <xPortStartScheduler+0x128>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d10a      	bne.n	8007c66 <xPortStartScheduler+0x46>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	60fb      	str	r3, [r7, #12]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c66:	4b39      	ldr	r3, [pc, #228]	; (8007d4c <xPortStartScheduler+0x12c>)
 8007c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	22ff      	movs	r2, #255	; 0xff
 8007c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <xPortStartScheduler+0x130>)
 8007c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c8e:	4b31      	ldr	r3, [pc, #196]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c90:	2207      	movs	r2, #7
 8007c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c94:	e009      	b.n	8007caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c96:	4b2f      	ldr	r3, [pc, #188]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	4a2d      	ldr	r2, [pc, #180]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb2:	2b80      	cmp	r3, #128	; 0x80
 8007cb4:	d0ef      	beq.n	8007c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cb6:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f1c3 0307 	rsb	r3, r3, #7
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d00a      	beq.n	8007cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	60bb      	str	r3, [r7, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cd8:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <xPortStartScheduler+0x134>)
 8007ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ce2:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <xPortStartScheduler+0x134>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cea:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cf6:	4b18      	ldr	r3, [pc, #96]	; (8007d58 <xPortStartScheduler+0x138>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <xPortStartScheduler+0x138>)
 8007cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d02:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <xPortStartScheduler+0x138>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <xPortStartScheduler+0x138>)
 8007d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d0e:	f000 f8dd 	bl	8007ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d12:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <xPortStartScheduler+0x13c>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d18:	f000 f8fc 	bl	8007f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d1c:	4b10      	ldr	r3, [pc, #64]	; (8007d60 <xPortStartScheduler+0x140>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a0f      	ldr	r2, [pc, #60]	; (8007d60 <xPortStartScheduler+0x140>)
 8007d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d28:	f7ff ff66 	bl	8007bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d2c:	f7ff fba6 	bl	800747c <vTaskSwitchContext>
	prvTaskExitError();
 8007d30:	f7ff ff1e 	bl	8007b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	e000ed00 	.word	0xe000ed00
 8007d44:	410fc271 	.word	0x410fc271
 8007d48:	410fc270 	.word	0x410fc270
 8007d4c:	e000e400 	.word	0xe000e400
 8007d50:	20000b7c 	.word	0x20000b7c
 8007d54:	20000b80 	.word	0x20000b80
 8007d58:	e000ed20 	.word	0xe000ed20
 8007d5c:	200003e0 	.word	0x200003e0
 8007d60:	e000ef34 	.word	0xe000ef34

08007d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	607b      	str	r3, [r7, #4]
}
 8007d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a0d      	ldr	r2, [pc, #52]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d10f      	bne.n	8007db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d90:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <vPortEnterCritical+0x5c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	603b      	str	r3, [r7, #0]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <vPortEnterCritical+0x4a>
	}
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	200003e0 	.word	0x200003e0
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <vPortExitCritical+0x50>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <vPortExitCritical+0x24>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	607b      	str	r3, [r7, #4]
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <vPortExitCritical+0x50>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <vPortExitCritical+0x50>)
 8007df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007df2:	4b08      	ldr	r3, [pc, #32]	; (8007e14 <vPortExitCritical+0x50>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <vPortExitCritical+0x42>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	f383 8811 	msr	BASEPRI, r3
}
 8007e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	200003e0 	.word	0x200003e0
	...

08007e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e20:	f3ef 8009 	mrs	r0, PSP
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <pxCurrentTCBConst>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f01e 0f10 	tst.w	lr, #16
 8007e30:	bf08      	it	eq
 8007e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	6010      	str	r0, [r2, #0]
 8007e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e44:	f380 8811 	msr	BASEPRI, r0
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f7ff fb14 	bl	800747c <vTaskSwitchContext>
 8007e54:	f04f 0000 	mov.w	r0, #0
 8007e58:	f380 8811 	msr	BASEPRI, r0
 8007e5c:	bc09      	pop	{r0, r3}
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	6808      	ldr	r0, [r1, #0]
 8007e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e66:	f01e 0f10 	tst.w	lr, #16
 8007e6a:	bf08      	it	eq
 8007e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e70:	f380 8809 	msr	PSP, r0
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst>:
 8007e80:	20000a50 	.word	0x20000a50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ea2:	f7ff fa33 	bl	800730c <xTaskIncrementTick>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <SysTick_Handler+0x40>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f383 8811 	msr	BASEPRI, r3
}
 8007ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <vPortSetupTimerInterrupt+0x38>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007edc:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <vPortSetupTimerInterrupt+0x3c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <vPortSetupTimerInterrupt+0x40>)
 8007ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee6:	099b      	lsrs	r3, r3, #6
 8007ee8:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <vPortSetupTimerInterrupt+0x44>)
 8007eea:	3b01      	subs	r3, #1
 8007eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eee:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	e000e010 	.word	0xe000e010
 8007f04:	e000e018 	.word	0xe000e018
 8007f08:	200003d4 	.word	0x200003d4
 8007f0c:	10624dd3 	.word	0x10624dd3
 8007f10:	e000e014 	.word	0xe000e014

08007f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f24 <vPortEnableVFP+0x10>
 8007f18:	6801      	ldr	r1, [r0, #0]
 8007f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f1e:	6001      	str	r1, [r0, #0]
 8007f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f22:	bf00      	nop
 8007f24:	e000ed88 	.word	0xe000ed88

08007f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f2e:	f3ef 8305 	mrs	r3, IPSR
 8007f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d914      	bls.n	8007f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f3a:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <vPortValidateInterruptPriority+0x70>)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f44:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <vPortValidateInterruptPriority+0x74>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	7afa      	ldrb	r2, [r7, #11]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d20a      	bcs.n	8007f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <vPortValidateInterruptPriority+0x78>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <vPortValidateInterruptPriority+0x7c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d90a      	bls.n	8007f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	603b      	str	r3, [r7, #0]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <vPortValidateInterruptPriority+0x60>
	}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	e000e3f0 	.word	0xe000e3f0
 8007f9c:	20000b7c 	.word	0x20000b7c
 8007fa0:	e000ed0c 	.word	0xe000ed0c
 8007fa4:	20000b80 	.word	0x20000b80

08007fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fb4:	f7ff f900 	bl	80071b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fb8:	4b5b      	ldr	r3, [pc, #364]	; (8008128 <pvPortMalloc+0x180>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fc0:	f000 f920 	bl	8008204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fc4:	4b59      	ldr	r3, [pc, #356]	; (800812c <pvPortMalloc+0x184>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 8093 	bne.w	80080f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01d      	beq.n	8008014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fd8:	2208      	movs	r2, #8
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d014      	beq.n	8008014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f023 0307 	bic.w	r3, r3, #7
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <pvPortMalloc+0x6c>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	617b      	str	r3, [r7, #20]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d06e      	beq.n	80080f8 <pvPortMalloc+0x150>
 800801a:	4b45      	ldr	r3, [pc, #276]	; (8008130 <pvPortMalloc+0x188>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d869      	bhi.n	80080f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008024:	4b43      	ldr	r3, [pc, #268]	; (8008134 <pvPortMalloc+0x18c>)
 8008026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008028:	4b42      	ldr	r3, [pc, #264]	; (8008134 <pvPortMalloc+0x18c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800802e:	e004      	b.n	800803a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d903      	bls.n	800804c <pvPortMalloc+0xa4>
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f1      	bne.n	8008030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800804c:	4b36      	ldr	r3, [pc, #216]	; (8008128 <pvPortMalloc+0x180>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008052:	429a      	cmp	r2, r3
 8008054:	d050      	beq.n	80080f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2208      	movs	r2, #8
 800805c:	4413      	add	r3, r2
 800805e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	2308      	movs	r3, #8
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	429a      	cmp	r2, r3
 8008076:	d91f      	bls.n	80080b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <pvPortMalloc+0xf8>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	613b      	str	r3, [r7, #16]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	1ad2      	subs	r2, r2, r3
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080b2:	69b8      	ldr	r0, [r7, #24]
 80080b4:	f000 f908 	bl	80082c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080b8:	4b1d      	ldr	r3, [pc, #116]	; (8008130 <pvPortMalloc+0x188>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	4a1b      	ldr	r2, [pc, #108]	; (8008130 <pvPortMalloc+0x188>)
 80080c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080c6:	4b1a      	ldr	r3, [pc, #104]	; (8008130 <pvPortMalloc+0x188>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4b1b      	ldr	r3, [pc, #108]	; (8008138 <pvPortMalloc+0x190>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d203      	bcs.n	80080da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080d2:	4b17      	ldr	r3, [pc, #92]	; (8008130 <pvPortMalloc+0x188>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a18      	ldr	r2, [pc, #96]	; (8008138 <pvPortMalloc+0x190>)
 80080d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <pvPortMalloc+0x184>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	431a      	orrs	r2, r3
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <pvPortMalloc+0x194>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	4a11      	ldr	r2, [pc, #68]	; (800813c <pvPortMalloc+0x194>)
 80080f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080f8:	f7ff f86c 	bl	80071d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <pvPortMalloc+0x174>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60fb      	str	r3, [r7, #12]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <pvPortMalloc+0x172>
	return pvReturn;
 800811c:	69fb      	ldr	r3, [r7, #28]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3728      	adds	r7, #40	; 0x28
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	200080bc 	.word	0x200080bc
 800812c:	200080d0 	.word	0x200080d0
 8008130:	200080c0 	.word	0x200080c0
 8008134:	200080b4 	.word	0x200080b4
 8008138:	200080c4 	.word	0x200080c4
 800813c:	200080c8 	.word	0x200080c8

08008140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d04d      	beq.n	80081ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008152:	2308      	movs	r3, #8
 8008154:	425b      	negs	r3, r3
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4413      	add	r3, r2
 800815a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <vPortFree+0xb8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4013      	ands	r3, r2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <vPortFree+0x44>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	60fb      	str	r3, [r7, #12]
}
 8008180:	bf00      	nop
 8008182:	e7fe      	b.n	8008182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <vPortFree+0x62>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60bb      	str	r3, [r7, #8]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <vPortFree+0xb8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01e      	beq.n	80081ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d11a      	bne.n	80081ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <vPortFree+0xb8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	43db      	mvns	r3, r3
 80081c2:	401a      	ands	r2, r3
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081c8:	f7fe fff6 	bl	80071b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <vPortFree+0xbc>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	4a09      	ldr	r2, [pc, #36]	; (80081fc <vPortFree+0xbc>)
 80081d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f000 f874 	bl	80082c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081e0:	4b07      	ldr	r3, [pc, #28]	; (8008200 <vPortFree+0xc0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	4a06      	ldr	r2, [pc, #24]	; (8008200 <vPortFree+0xc0>)
 80081e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081ea:	f7fe fff3 	bl	80071d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081ee:	bf00      	nop
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	200080d0 	.word	0x200080d0
 80081fc:	200080c0 	.word	0x200080c0
 8008200:	200080cc 	.word	0x200080cc

08008204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800820a:	f247 5330 	movw	r3, #30000	; 0x7530
 800820e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008210:	4b27      	ldr	r3, [pc, #156]	; (80082b0 <prvHeapInit+0xac>)
 8008212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00c      	beq.n	8008238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3307      	adds	r3, #7
 8008222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0307 	bic.w	r3, r3, #7
 800822a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	4a1f      	ldr	r2, [pc, #124]	; (80082b0 <prvHeapInit+0xac>)
 8008234:	4413      	add	r3, r2
 8008236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800823c:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <prvHeapInit+0xb0>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008242:	4b1c      	ldr	r3, [pc, #112]	; (80082b4 <prvHeapInit+0xb0>)
 8008244:	2200      	movs	r2, #0
 8008246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008250:	2208      	movs	r2, #8
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0307 	bic.w	r3, r3, #7
 800825e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4a15      	ldr	r2, [pc, #84]	; (80082b8 <prvHeapInit+0xb4>)
 8008264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <prvHeapInit+0xb4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800826e:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <prvHeapInit+0xb4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <prvHeapInit+0xb4>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <prvHeapInit+0xb8>)
 8008292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	4a09      	ldr	r2, [pc, #36]	; (80082c0 <prvHeapInit+0xbc>)
 800829a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800829c:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <prvHeapInit+0xc0>)
 800829e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	20000b84 	.word	0x20000b84
 80082b4:	200080b4 	.word	0x200080b4
 80082b8:	200080bc 	.word	0x200080bc
 80082bc:	200080c4 	.word	0x200080c4
 80082c0:	200080c0 	.word	0x200080c0
 80082c4:	200080d0 	.word	0x200080d0

080082c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082d0:	4b28      	ldr	r3, [pc, #160]	; (8008374 <prvInsertBlockIntoFreeList+0xac>)
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e002      	b.n	80082dc <prvInsertBlockIntoFreeList+0x14>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d8f7      	bhi.n	80082d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d108      	bne.n	800830a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	441a      	add	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	441a      	add	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d118      	bne.n	8008350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <prvInsertBlockIntoFreeList+0xb0>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d00d      	beq.n	8008346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	441a      	add	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e008      	b.n	8008358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008346:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <prvInsertBlockIntoFreeList+0xb0>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e003      	b.n	8008358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	429a      	cmp	r2, r3
 800835e:	d002      	beq.n	8008366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	200080b4 	.word	0x200080b4
 8008378:	200080bc 	.word	0x200080bc

0800837c <__errno>:
 800837c:	4b01      	ldr	r3, [pc, #4]	; (8008384 <__errno+0x8>)
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	200003e4 	.word	0x200003e4

08008388 <__libc_init_array>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	4d0d      	ldr	r5, [pc, #52]	; (80083c0 <__libc_init_array+0x38>)
 800838c:	4c0d      	ldr	r4, [pc, #52]	; (80083c4 <__libc_init_array+0x3c>)
 800838e:	1b64      	subs	r4, r4, r5
 8008390:	10a4      	asrs	r4, r4, #2
 8008392:	2600      	movs	r6, #0
 8008394:	42a6      	cmp	r6, r4
 8008396:	d109      	bne.n	80083ac <__libc_init_array+0x24>
 8008398:	4d0b      	ldr	r5, [pc, #44]	; (80083c8 <__libc_init_array+0x40>)
 800839a:	4c0c      	ldr	r4, [pc, #48]	; (80083cc <__libc_init_array+0x44>)
 800839c:	f002 ff02 	bl	800b1a4 <_init>
 80083a0:	1b64      	subs	r4, r4, r5
 80083a2:	10a4      	asrs	r4, r4, #2
 80083a4:	2600      	movs	r6, #0
 80083a6:	42a6      	cmp	r6, r4
 80083a8:	d105      	bne.n	80083b6 <__libc_init_array+0x2e>
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b0:	4798      	blx	r3
 80083b2:	3601      	adds	r6, #1
 80083b4:	e7ee      	b.n	8008394 <__libc_init_array+0xc>
 80083b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ba:	4798      	blx	r3
 80083bc:	3601      	adds	r6, #1
 80083be:	e7f2      	b.n	80083a6 <__libc_init_array+0x1e>
 80083c0:	0800b724 	.word	0x0800b724
 80083c4:	0800b724 	.word	0x0800b724
 80083c8:	0800b724 	.word	0x0800b724
 80083cc:	0800b728 	.word	0x0800b728

080083d0 <memcpy>:
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d8:	d100      	bne.n	80083dc <memcpy+0xc>
 80083da:	4770      	bx	lr
 80083dc:	b510      	push	{r4, lr}
 80083de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e6:	4291      	cmp	r1, r2
 80083e8:	d1f9      	bne.n	80083de <memcpy+0xe>
 80083ea:	bd10      	pop	{r4, pc}

080083ec <memset>:
 80083ec:	4402      	add	r2, r0
 80083ee:	4603      	mov	r3, r0
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d100      	bne.n	80083f6 <memset+0xa>
 80083f4:	4770      	bx	lr
 80083f6:	f803 1b01 	strb.w	r1, [r3], #1
 80083fa:	e7f9      	b.n	80083f0 <memset+0x4>

080083fc <__cvt>:
 80083fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	ec55 4b10 	vmov	r4, r5, d0
 8008404:	2d00      	cmp	r5, #0
 8008406:	460e      	mov	r6, r1
 8008408:	4619      	mov	r1, r3
 800840a:	462b      	mov	r3, r5
 800840c:	bfbb      	ittet	lt
 800840e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008412:	461d      	movlt	r5, r3
 8008414:	2300      	movge	r3, #0
 8008416:	232d      	movlt	r3, #45	; 0x2d
 8008418:	700b      	strb	r3, [r1, #0]
 800841a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800841c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008420:	4691      	mov	r9, r2
 8008422:	f023 0820 	bic.w	r8, r3, #32
 8008426:	bfbc      	itt	lt
 8008428:	4622      	movlt	r2, r4
 800842a:	4614      	movlt	r4, r2
 800842c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008430:	d005      	beq.n	800843e <__cvt+0x42>
 8008432:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008436:	d100      	bne.n	800843a <__cvt+0x3e>
 8008438:	3601      	adds	r6, #1
 800843a:	2102      	movs	r1, #2
 800843c:	e000      	b.n	8008440 <__cvt+0x44>
 800843e:	2103      	movs	r1, #3
 8008440:	ab03      	add	r3, sp, #12
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	ab02      	add	r3, sp, #8
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	ec45 4b10 	vmov	d0, r4, r5
 800844c:	4653      	mov	r3, sl
 800844e:	4632      	mov	r2, r6
 8008450:	f000 fcea 	bl	8008e28 <_dtoa_r>
 8008454:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008458:	4607      	mov	r7, r0
 800845a:	d102      	bne.n	8008462 <__cvt+0x66>
 800845c:	f019 0f01 	tst.w	r9, #1
 8008460:	d022      	beq.n	80084a8 <__cvt+0xac>
 8008462:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008466:	eb07 0906 	add.w	r9, r7, r6
 800846a:	d110      	bne.n	800848e <__cvt+0x92>
 800846c:	783b      	ldrb	r3, [r7, #0]
 800846e:	2b30      	cmp	r3, #48	; 0x30
 8008470:	d10a      	bne.n	8008488 <__cvt+0x8c>
 8008472:	2200      	movs	r2, #0
 8008474:	2300      	movs	r3, #0
 8008476:	4620      	mov	r0, r4
 8008478:	4629      	mov	r1, r5
 800847a:	f7f8 fb2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800847e:	b918      	cbnz	r0, 8008488 <__cvt+0x8c>
 8008480:	f1c6 0601 	rsb	r6, r6, #1
 8008484:	f8ca 6000 	str.w	r6, [sl]
 8008488:	f8da 3000 	ldr.w	r3, [sl]
 800848c:	4499      	add	r9, r3
 800848e:	2200      	movs	r2, #0
 8008490:	2300      	movs	r3, #0
 8008492:	4620      	mov	r0, r4
 8008494:	4629      	mov	r1, r5
 8008496:	f7f8 fb1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800849a:	b108      	cbz	r0, 80084a0 <__cvt+0xa4>
 800849c:	f8cd 900c 	str.w	r9, [sp, #12]
 80084a0:	2230      	movs	r2, #48	; 0x30
 80084a2:	9b03      	ldr	r3, [sp, #12]
 80084a4:	454b      	cmp	r3, r9
 80084a6:	d307      	bcc.n	80084b8 <__cvt+0xbc>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084ac:	1bdb      	subs	r3, r3, r7
 80084ae:	4638      	mov	r0, r7
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	b004      	add	sp, #16
 80084b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b8:	1c59      	adds	r1, r3, #1
 80084ba:	9103      	str	r1, [sp, #12]
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	e7f0      	b.n	80084a2 <__cvt+0xa6>

080084c0 <__exponent>:
 80084c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084c2:	4603      	mov	r3, r0
 80084c4:	2900      	cmp	r1, #0
 80084c6:	bfb8      	it	lt
 80084c8:	4249      	neglt	r1, r1
 80084ca:	f803 2b02 	strb.w	r2, [r3], #2
 80084ce:	bfb4      	ite	lt
 80084d0:	222d      	movlt	r2, #45	; 0x2d
 80084d2:	222b      	movge	r2, #43	; 0x2b
 80084d4:	2909      	cmp	r1, #9
 80084d6:	7042      	strb	r2, [r0, #1]
 80084d8:	dd2a      	ble.n	8008530 <__exponent+0x70>
 80084da:	f10d 0407 	add.w	r4, sp, #7
 80084de:	46a4      	mov	ip, r4
 80084e0:	270a      	movs	r7, #10
 80084e2:	46a6      	mov	lr, r4
 80084e4:	460a      	mov	r2, r1
 80084e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80084ea:	fb07 1516 	mls	r5, r7, r6, r1
 80084ee:	3530      	adds	r5, #48	; 0x30
 80084f0:	2a63      	cmp	r2, #99	; 0x63
 80084f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80084f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084fa:	4631      	mov	r1, r6
 80084fc:	dcf1      	bgt.n	80084e2 <__exponent+0x22>
 80084fe:	3130      	adds	r1, #48	; 0x30
 8008500:	f1ae 0502 	sub.w	r5, lr, #2
 8008504:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008508:	1c44      	adds	r4, r0, #1
 800850a:	4629      	mov	r1, r5
 800850c:	4561      	cmp	r1, ip
 800850e:	d30a      	bcc.n	8008526 <__exponent+0x66>
 8008510:	f10d 0209 	add.w	r2, sp, #9
 8008514:	eba2 020e 	sub.w	r2, r2, lr
 8008518:	4565      	cmp	r5, ip
 800851a:	bf88      	it	hi
 800851c:	2200      	movhi	r2, #0
 800851e:	4413      	add	r3, r2
 8008520:	1a18      	subs	r0, r3, r0
 8008522:	b003      	add	sp, #12
 8008524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800852a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800852e:	e7ed      	b.n	800850c <__exponent+0x4c>
 8008530:	2330      	movs	r3, #48	; 0x30
 8008532:	3130      	adds	r1, #48	; 0x30
 8008534:	7083      	strb	r3, [r0, #2]
 8008536:	70c1      	strb	r1, [r0, #3]
 8008538:	1d03      	adds	r3, r0, #4
 800853a:	e7f1      	b.n	8008520 <__exponent+0x60>

0800853c <_printf_float>:
 800853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	ed2d 8b02 	vpush	{d8}
 8008544:	b08d      	sub	sp, #52	; 0x34
 8008546:	460c      	mov	r4, r1
 8008548:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800854c:	4616      	mov	r6, r2
 800854e:	461f      	mov	r7, r3
 8008550:	4605      	mov	r5, r0
 8008552:	f001 fa57 	bl	8009a04 <_localeconv_r>
 8008556:	f8d0 a000 	ldr.w	sl, [r0]
 800855a:	4650      	mov	r0, sl
 800855c:	f7f7 fe40 	bl	80001e0 <strlen>
 8008560:	2300      	movs	r3, #0
 8008562:	930a      	str	r3, [sp, #40]	; 0x28
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	9305      	str	r3, [sp, #20]
 8008568:	f8d8 3000 	ldr.w	r3, [r8]
 800856c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008570:	3307      	adds	r3, #7
 8008572:	f023 0307 	bic.w	r3, r3, #7
 8008576:	f103 0208 	add.w	r2, r3, #8
 800857a:	f8c8 2000 	str.w	r2, [r8]
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008586:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800858a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800858e:	9307      	str	r3, [sp, #28]
 8008590:	f8cd 8018 	str.w	r8, [sp, #24]
 8008594:	ee08 0a10 	vmov	s16, r0
 8008598:	4b9f      	ldr	r3, [pc, #636]	; (8008818 <_printf_float+0x2dc>)
 800859a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	f7f8 facb 	bl	8000b3c <__aeabi_dcmpun>
 80085a6:	bb88      	cbnz	r0, 800860c <_printf_float+0xd0>
 80085a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085ac:	4b9a      	ldr	r3, [pc, #616]	; (8008818 <_printf_float+0x2dc>)
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	f7f8 faa5 	bl	8000b00 <__aeabi_dcmple>
 80085b6:	bb48      	cbnz	r0, 800860c <_printf_float+0xd0>
 80085b8:	2200      	movs	r2, #0
 80085ba:	2300      	movs	r3, #0
 80085bc:	4640      	mov	r0, r8
 80085be:	4649      	mov	r1, r9
 80085c0:	f7f8 fa94 	bl	8000aec <__aeabi_dcmplt>
 80085c4:	b110      	cbz	r0, 80085cc <_printf_float+0x90>
 80085c6:	232d      	movs	r3, #45	; 0x2d
 80085c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085cc:	4b93      	ldr	r3, [pc, #588]	; (800881c <_printf_float+0x2e0>)
 80085ce:	4894      	ldr	r0, [pc, #592]	; (8008820 <_printf_float+0x2e4>)
 80085d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085d4:	bf94      	ite	ls
 80085d6:	4698      	movls	r8, r3
 80085d8:	4680      	movhi	r8, r0
 80085da:	2303      	movs	r3, #3
 80085dc:	6123      	str	r3, [r4, #16]
 80085de:	9b05      	ldr	r3, [sp, #20]
 80085e0:	f023 0204 	bic.w	r2, r3, #4
 80085e4:	6022      	str	r2, [r4, #0]
 80085e6:	f04f 0900 	mov.w	r9, #0
 80085ea:	9700      	str	r7, [sp, #0]
 80085ec:	4633      	mov	r3, r6
 80085ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80085f0:	4621      	mov	r1, r4
 80085f2:	4628      	mov	r0, r5
 80085f4:	f000 f9d8 	bl	80089a8 <_printf_common>
 80085f8:	3001      	adds	r0, #1
 80085fa:	f040 8090 	bne.w	800871e <_printf_float+0x1e2>
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008602:	b00d      	add	sp, #52	; 0x34
 8008604:	ecbd 8b02 	vpop	{d8}
 8008608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860c:	4642      	mov	r2, r8
 800860e:	464b      	mov	r3, r9
 8008610:	4640      	mov	r0, r8
 8008612:	4649      	mov	r1, r9
 8008614:	f7f8 fa92 	bl	8000b3c <__aeabi_dcmpun>
 8008618:	b140      	cbz	r0, 800862c <_printf_float+0xf0>
 800861a:	464b      	mov	r3, r9
 800861c:	2b00      	cmp	r3, #0
 800861e:	bfbc      	itt	lt
 8008620:	232d      	movlt	r3, #45	; 0x2d
 8008622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008626:	487f      	ldr	r0, [pc, #508]	; (8008824 <_printf_float+0x2e8>)
 8008628:	4b7f      	ldr	r3, [pc, #508]	; (8008828 <_printf_float+0x2ec>)
 800862a:	e7d1      	b.n	80085d0 <_printf_float+0x94>
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008632:	9206      	str	r2, [sp, #24]
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	d13f      	bne.n	80086b8 <_printf_float+0x17c>
 8008638:	2306      	movs	r3, #6
 800863a:	6063      	str	r3, [r4, #4]
 800863c:	9b05      	ldr	r3, [sp, #20]
 800863e:	6861      	ldr	r1, [r4, #4]
 8008640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008644:	2300      	movs	r3, #0
 8008646:	9303      	str	r3, [sp, #12]
 8008648:	ab0a      	add	r3, sp, #40	; 0x28
 800864a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800864e:	ab09      	add	r3, sp, #36	; 0x24
 8008650:	ec49 8b10 	vmov	d0, r8, r9
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800865c:	4628      	mov	r0, r5
 800865e:	f7ff fecd 	bl	80083fc <__cvt>
 8008662:	9b06      	ldr	r3, [sp, #24]
 8008664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008666:	2b47      	cmp	r3, #71	; 0x47
 8008668:	4680      	mov	r8, r0
 800866a:	d108      	bne.n	800867e <_printf_float+0x142>
 800866c:	1cc8      	adds	r0, r1, #3
 800866e:	db02      	blt.n	8008676 <_printf_float+0x13a>
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	4299      	cmp	r1, r3
 8008674:	dd41      	ble.n	80086fa <_printf_float+0x1be>
 8008676:	f1ab 0b02 	sub.w	fp, fp, #2
 800867a:	fa5f fb8b 	uxtb.w	fp, fp
 800867e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008682:	d820      	bhi.n	80086c6 <_printf_float+0x18a>
 8008684:	3901      	subs	r1, #1
 8008686:	465a      	mov	r2, fp
 8008688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800868c:	9109      	str	r1, [sp, #36]	; 0x24
 800868e:	f7ff ff17 	bl	80084c0 <__exponent>
 8008692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008694:	1813      	adds	r3, r2, r0
 8008696:	2a01      	cmp	r2, #1
 8008698:	4681      	mov	r9, r0
 800869a:	6123      	str	r3, [r4, #16]
 800869c:	dc02      	bgt.n	80086a4 <_printf_float+0x168>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	07d2      	lsls	r2, r2, #31
 80086a2:	d501      	bpl.n	80086a8 <_printf_float+0x16c>
 80086a4:	3301      	adds	r3, #1
 80086a6:	6123      	str	r3, [r4, #16]
 80086a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d09c      	beq.n	80085ea <_printf_float+0xae>
 80086b0:	232d      	movs	r3, #45	; 0x2d
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b6:	e798      	b.n	80085ea <_printf_float+0xae>
 80086b8:	9a06      	ldr	r2, [sp, #24]
 80086ba:	2a47      	cmp	r2, #71	; 0x47
 80086bc:	d1be      	bne.n	800863c <_printf_float+0x100>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1bc      	bne.n	800863c <_printf_float+0x100>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e7b9      	b.n	800863a <_printf_float+0xfe>
 80086c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086ca:	d118      	bne.n	80086fe <_printf_float+0x1c2>
 80086cc:	2900      	cmp	r1, #0
 80086ce:	6863      	ldr	r3, [r4, #4]
 80086d0:	dd0b      	ble.n	80086ea <_printf_float+0x1ae>
 80086d2:	6121      	str	r1, [r4, #16]
 80086d4:	b913      	cbnz	r3, 80086dc <_printf_float+0x1a0>
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	07d0      	lsls	r0, r2, #31
 80086da:	d502      	bpl.n	80086e2 <_printf_float+0x1a6>
 80086dc:	3301      	adds	r3, #1
 80086de:	440b      	add	r3, r1
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80086e4:	f04f 0900 	mov.w	r9, #0
 80086e8:	e7de      	b.n	80086a8 <_printf_float+0x16c>
 80086ea:	b913      	cbnz	r3, 80086f2 <_printf_float+0x1b6>
 80086ec:	6822      	ldr	r2, [r4, #0]
 80086ee:	07d2      	lsls	r2, r2, #31
 80086f0:	d501      	bpl.n	80086f6 <_printf_float+0x1ba>
 80086f2:	3302      	adds	r3, #2
 80086f4:	e7f4      	b.n	80086e0 <_printf_float+0x1a4>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e7f2      	b.n	80086e0 <_printf_float+0x1a4>
 80086fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	4299      	cmp	r1, r3
 8008702:	db05      	blt.n	8008710 <_printf_float+0x1d4>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	6121      	str	r1, [r4, #16]
 8008708:	07d8      	lsls	r0, r3, #31
 800870a:	d5ea      	bpl.n	80086e2 <_printf_float+0x1a6>
 800870c:	1c4b      	adds	r3, r1, #1
 800870e:	e7e7      	b.n	80086e0 <_printf_float+0x1a4>
 8008710:	2900      	cmp	r1, #0
 8008712:	bfd4      	ite	le
 8008714:	f1c1 0202 	rsble	r2, r1, #2
 8008718:	2201      	movgt	r2, #1
 800871a:	4413      	add	r3, r2
 800871c:	e7e0      	b.n	80086e0 <_printf_float+0x1a4>
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	055a      	lsls	r2, r3, #21
 8008722:	d407      	bmi.n	8008734 <_printf_float+0x1f8>
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	4642      	mov	r2, r8
 8008728:	4631      	mov	r1, r6
 800872a:	4628      	mov	r0, r5
 800872c:	47b8      	blx	r7
 800872e:	3001      	adds	r0, #1
 8008730:	d12c      	bne.n	800878c <_printf_float+0x250>
 8008732:	e764      	b.n	80085fe <_printf_float+0xc2>
 8008734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008738:	f240 80e0 	bls.w	80088fc <_printf_float+0x3c0>
 800873c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008740:	2200      	movs	r2, #0
 8008742:	2300      	movs	r3, #0
 8008744:	f7f8 f9c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008748:	2800      	cmp	r0, #0
 800874a:	d034      	beq.n	80087b6 <_printf_float+0x27a>
 800874c:	4a37      	ldr	r2, [pc, #220]	; (800882c <_printf_float+0x2f0>)
 800874e:	2301      	movs	r3, #1
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f af51 	beq.w	80085fe <_printf_float+0xc2>
 800875c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008760:	429a      	cmp	r2, r3
 8008762:	db02      	blt.n	800876a <_printf_float+0x22e>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	07d8      	lsls	r0, r3, #31
 8008768:	d510      	bpl.n	800878c <_printf_float+0x250>
 800876a:	ee18 3a10 	vmov	r3, s16
 800876e:	4652      	mov	r2, sl
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	f43f af41 	beq.w	80085fe <_printf_float+0xc2>
 800877c:	f04f 0800 	mov.w	r8, #0
 8008780:	f104 091a 	add.w	r9, r4, #26
 8008784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008786:	3b01      	subs	r3, #1
 8008788:	4543      	cmp	r3, r8
 800878a:	dc09      	bgt.n	80087a0 <_printf_float+0x264>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	079b      	lsls	r3, r3, #30
 8008790:	f100 8105 	bmi.w	800899e <_printf_float+0x462>
 8008794:	68e0      	ldr	r0, [r4, #12]
 8008796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008798:	4298      	cmp	r0, r3
 800879a:	bfb8      	it	lt
 800879c:	4618      	movlt	r0, r3
 800879e:	e730      	b.n	8008602 <_printf_float+0xc6>
 80087a0:	2301      	movs	r3, #1
 80087a2:	464a      	mov	r2, r9
 80087a4:	4631      	mov	r1, r6
 80087a6:	4628      	mov	r0, r5
 80087a8:	47b8      	blx	r7
 80087aa:	3001      	adds	r0, #1
 80087ac:	f43f af27 	beq.w	80085fe <_printf_float+0xc2>
 80087b0:	f108 0801 	add.w	r8, r8, #1
 80087b4:	e7e6      	b.n	8008784 <_printf_float+0x248>
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dc39      	bgt.n	8008830 <_printf_float+0x2f4>
 80087bc:	4a1b      	ldr	r2, [pc, #108]	; (800882c <_printf_float+0x2f0>)
 80087be:	2301      	movs	r3, #1
 80087c0:	4631      	mov	r1, r6
 80087c2:	4628      	mov	r0, r5
 80087c4:	47b8      	blx	r7
 80087c6:	3001      	adds	r0, #1
 80087c8:	f43f af19 	beq.w	80085fe <_printf_float+0xc2>
 80087cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087d0:	4313      	orrs	r3, r2
 80087d2:	d102      	bne.n	80087da <_printf_float+0x29e>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	07d9      	lsls	r1, r3, #31
 80087d8:	d5d8      	bpl.n	800878c <_printf_float+0x250>
 80087da:	ee18 3a10 	vmov	r3, s16
 80087de:	4652      	mov	r2, sl
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	f43f af09 	beq.w	80085fe <_printf_float+0xc2>
 80087ec:	f04f 0900 	mov.w	r9, #0
 80087f0:	f104 0a1a 	add.w	sl, r4, #26
 80087f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f6:	425b      	negs	r3, r3
 80087f8:	454b      	cmp	r3, r9
 80087fa:	dc01      	bgt.n	8008800 <_printf_float+0x2c4>
 80087fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087fe:	e792      	b.n	8008726 <_printf_float+0x1ea>
 8008800:	2301      	movs	r3, #1
 8008802:	4652      	mov	r2, sl
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	f43f aef7 	beq.w	80085fe <_printf_float+0xc2>
 8008810:	f109 0901 	add.w	r9, r9, #1
 8008814:	e7ee      	b.n	80087f4 <_printf_float+0x2b8>
 8008816:	bf00      	nop
 8008818:	7fefffff 	.word	0x7fefffff
 800881c:	0800b348 	.word	0x0800b348
 8008820:	0800b34c 	.word	0x0800b34c
 8008824:	0800b354 	.word	0x0800b354
 8008828:	0800b350 	.word	0x0800b350
 800882c:	0800b358 	.word	0x0800b358
 8008830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008834:	429a      	cmp	r2, r3
 8008836:	bfa8      	it	ge
 8008838:	461a      	movge	r2, r3
 800883a:	2a00      	cmp	r2, #0
 800883c:	4691      	mov	r9, r2
 800883e:	dc37      	bgt.n	80088b0 <_printf_float+0x374>
 8008840:	f04f 0b00 	mov.w	fp, #0
 8008844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008848:	f104 021a 	add.w	r2, r4, #26
 800884c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800884e:	9305      	str	r3, [sp, #20]
 8008850:	eba3 0309 	sub.w	r3, r3, r9
 8008854:	455b      	cmp	r3, fp
 8008856:	dc33      	bgt.n	80088c0 <_printf_float+0x384>
 8008858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800885c:	429a      	cmp	r2, r3
 800885e:	db3b      	blt.n	80088d8 <_printf_float+0x39c>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	07da      	lsls	r2, r3, #31
 8008864:	d438      	bmi.n	80088d8 <_printf_float+0x39c>
 8008866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008868:	9a05      	ldr	r2, [sp, #20]
 800886a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800886c:	1a9a      	subs	r2, r3, r2
 800886e:	eba3 0901 	sub.w	r9, r3, r1
 8008872:	4591      	cmp	r9, r2
 8008874:	bfa8      	it	ge
 8008876:	4691      	movge	r9, r2
 8008878:	f1b9 0f00 	cmp.w	r9, #0
 800887c:	dc35      	bgt.n	80088ea <_printf_float+0x3ae>
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008886:	f104 0a1a 	add.w	sl, r4, #26
 800888a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	eba3 0309 	sub.w	r3, r3, r9
 8008894:	4543      	cmp	r3, r8
 8008896:	f77f af79 	ble.w	800878c <_printf_float+0x250>
 800889a:	2301      	movs	r3, #1
 800889c:	4652      	mov	r2, sl
 800889e:	4631      	mov	r1, r6
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b8      	blx	r7
 80088a4:	3001      	adds	r0, #1
 80088a6:	f43f aeaa 	beq.w	80085fe <_printf_float+0xc2>
 80088aa:	f108 0801 	add.w	r8, r8, #1
 80088ae:	e7ec      	b.n	800888a <_printf_float+0x34e>
 80088b0:	4613      	mov	r3, r2
 80088b2:	4631      	mov	r1, r6
 80088b4:	4642      	mov	r2, r8
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	d1c0      	bne.n	8008840 <_printf_float+0x304>
 80088be:	e69e      	b.n	80085fe <_printf_float+0xc2>
 80088c0:	2301      	movs	r3, #1
 80088c2:	4631      	mov	r1, r6
 80088c4:	4628      	mov	r0, r5
 80088c6:	9205      	str	r2, [sp, #20]
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f ae97 	beq.w	80085fe <_printf_float+0xc2>
 80088d0:	9a05      	ldr	r2, [sp, #20]
 80088d2:	f10b 0b01 	add.w	fp, fp, #1
 80088d6:	e7b9      	b.n	800884c <_printf_float+0x310>
 80088d8:	ee18 3a10 	vmov	r3, s16
 80088dc:	4652      	mov	r2, sl
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	d1be      	bne.n	8008866 <_printf_float+0x32a>
 80088e8:	e689      	b.n	80085fe <_printf_float+0xc2>
 80088ea:	9a05      	ldr	r2, [sp, #20]
 80088ec:	464b      	mov	r3, r9
 80088ee:	4442      	add	r2, r8
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	d1c1      	bne.n	800887e <_printf_float+0x342>
 80088fa:	e680      	b.n	80085fe <_printf_float+0xc2>
 80088fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088fe:	2a01      	cmp	r2, #1
 8008900:	dc01      	bgt.n	8008906 <_printf_float+0x3ca>
 8008902:	07db      	lsls	r3, r3, #31
 8008904:	d538      	bpl.n	8008978 <_printf_float+0x43c>
 8008906:	2301      	movs	r3, #1
 8008908:	4642      	mov	r2, r8
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	f43f ae74 	beq.w	80085fe <_printf_float+0xc2>
 8008916:	ee18 3a10 	vmov	r3, s16
 800891a:	4652      	mov	r2, sl
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f ae6b 	beq.w	80085fe <_printf_float+0xc2>
 8008928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800892c:	2200      	movs	r2, #0
 800892e:	2300      	movs	r3, #0
 8008930:	f7f8 f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008934:	b9d8      	cbnz	r0, 800896e <_printf_float+0x432>
 8008936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008938:	f108 0201 	add.w	r2, r8, #1
 800893c:	3b01      	subs	r3, #1
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	d10e      	bne.n	8008966 <_printf_float+0x42a>
 8008948:	e659      	b.n	80085fe <_printf_float+0xc2>
 800894a:	2301      	movs	r3, #1
 800894c:	4652      	mov	r2, sl
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f ae52 	beq.w	80085fe <_printf_float+0xc2>
 800895a:	f108 0801 	add.w	r8, r8, #1
 800895e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008960:	3b01      	subs	r3, #1
 8008962:	4543      	cmp	r3, r8
 8008964:	dcf1      	bgt.n	800894a <_printf_float+0x40e>
 8008966:	464b      	mov	r3, r9
 8008968:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800896c:	e6dc      	b.n	8008728 <_printf_float+0x1ec>
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	f104 0a1a 	add.w	sl, r4, #26
 8008976:	e7f2      	b.n	800895e <_printf_float+0x422>
 8008978:	2301      	movs	r3, #1
 800897a:	4642      	mov	r2, r8
 800897c:	e7df      	b.n	800893e <_printf_float+0x402>
 800897e:	2301      	movs	r3, #1
 8008980:	464a      	mov	r2, r9
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f ae38 	beq.w	80085fe <_printf_float+0xc2>
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008996:	1a5b      	subs	r3, r3, r1
 8008998:	4543      	cmp	r3, r8
 800899a:	dcf0      	bgt.n	800897e <_printf_float+0x442>
 800899c:	e6fa      	b.n	8008794 <_printf_float+0x258>
 800899e:	f04f 0800 	mov.w	r8, #0
 80089a2:	f104 0919 	add.w	r9, r4, #25
 80089a6:	e7f4      	b.n	8008992 <_printf_float+0x456>

080089a8 <_printf_common>:
 80089a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	4616      	mov	r6, r2
 80089ae:	4699      	mov	r9, r3
 80089b0:	688a      	ldr	r2, [r1, #8]
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089b8:	4293      	cmp	r3, r2
 80089ba:	bfb8      	it	lt
 80089bc:	4613      	movlt	r3, r2
 80089be:	6033      	str	r3, [r6, #0]
 80089c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089c4:	4607      	mov	r7, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b10a      	cbz	r2, 80089ce <_printf_common+0x26>
 80089ca:	3301      	adds	r3, #1
 80089cc:	6033      	str	r3, [r6, #0]
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	0699      	lsls	r1, r3, #26
 80089d2:	bf42      	ittt	mi
 80089d4:	6833      	ldrmi	r3, [r6, #0]
 80089d6:	3302      	addmi	r3, #2
 80089d8:	6033      	strmi	r3, [r6, #0]
 80089da:	6825      	ldr	r5, [r4, #0]
 80089dc:	f015 0506 	ands.w	r5, r5, #6
 80089e0:	d106      	bne.n	80089f0 <_printf_common+0x48>
 80089e2:	f104 0a19 	add.w	sl, r4, #25
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	6832      	ldr	r2, [r6, #0]
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	dc26      	bgt.n	8008a3e <_printf_common+0x96>
 80089f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089f4:	1e13      	subs	r3, r2, #0
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	bf18      	it	ne
 80089fa:	2301      	movne	r3, #1
 80089fc:	0692      	lsls	r2, r2, #26
 80089fe:	d42b      	bmi.n	8008a58 <_printf_common+0xb0>
 8008a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a04:	4649      	mov	r1, r9
 8008a06:	4638      	mov	r0, r7
 8008a08:	47c0      	blx	r8
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	d01e      	beq.n	8008a4c <_printf_common+0xa4>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	68e5      	ldr	r5, [r4, #12]
 8008a12:	6832      	ldr	r2, [r6, #0]
 8008a14:	f003 0306 	and.w	r3, r3, #6
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	bf08      	it	eq
 8008a1c:	1aad      	subeq	r5, r5, r2
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	6922      	ldr	r2, [r4, #16]
 8008a22:	bf0c      	ite	eq
 8008a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a28:	2500      	movne	r5, #0
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	bfc4      	itt	gt
 8008a2e:	1a9b      	subgt	r3, r3, r2
 8008a30:	18ed      	addgt	r5, r5, r3
 8008a32:	2600      	movs	r6, #0
 8008a34:	341a      	adds	r4, #26
 8008a36:	42b5      	cmp	r5, r6
 8008a38:	d11a      	bne.n	8008a70 <_printf_common+0xc8>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e008      	b.n	8008a50 <_printf_common+0xa8>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4652      	mov	r2, sl
 8008a42:	4649      	mov	r1, r9
 8008a44:	4638      	mov	r0, r7
 8008a46:	47c0      	blx	r8
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d103      	bne.n	8008a54 <_printf_common+0xac>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a54:	3501      	adds	r5, #1
 8008a56:	e7c6      	b.n	80089e6 <_printf_common+0x3e>
 8008a58:	18e1      	adds	r1, r4, r3
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	2030      	movs	r0, #48	; 0x30
 8008a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a62:	4422      	add	r2, r4
 8008a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	e7c7      	b.n	8008a00 <_printf_common+0x58>
 8008a70:	2301      	movs	r3, #1
 8008a72:	4622      	mov	r2, r4
 8008a74:	4649      	mov	r1, r9
 8008a76:	4638      	mov	r0, r7
 8008a78:	47c0      	blx	r8
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d0e6      	beq.n	8008a4c <_printf_common+0xa4>
 8008a7e:	3601      	adds	r6, #1
 8008a80:	e7d9      	b.n	8008a36 <_printf_common+0x8e>
	...

08008a84 <_printf_i>:
 8008a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	7e0f      	ldrb	r7, [r1, #24]
 8008a8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a8c:	2f78      	cmp	r7, #120	; 0x78
 8008a8e:	4691      	mov	r9, r2
 8008a90:	4680      	mov	r8, r0
 8008a92:	460c      	mov	r4, r1
 8008a94:	469a      	mov	sl, r3
 8008a96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a9a:	d807      	bhi.n	8008aac <_printf_i+0x28>
 8008a9c:	2f62      	cmp	r7, #98	; 0x62
 8008a9e:	d80a      	bhi.n	8008ab6 <_printf_i+0x32>
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	f000 80d8 	beq.w	8008c56 <_printf_i+0x1d2>
 8008aa6:	2f58      	cmp	r7, #88	; 0x58
 8008aa8:	f000 80a3 	beq.w	8008bf2 <_printf_i+0x16e>
 8008aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ab4:	e03a      	b.n	8008b2c <_printf_i+0xa8>
 8008ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aba:	2b15      	cmp	r3, #21
 8008abc:	d8f6      	bhi.n	8008aac <_printf_i+0x28>
 8008abe:	a101      	add	r1, pc, #4	; (adr r1, 8008ac4 <_printf_i+0x40>)
 8008ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ac4:	08008b1d 	.word	0x08008b1d
 8008ac8:	08008b31 	.word	0x08008b31
 8008acc:	08008aad 	.word	0x08008aad
 8008ad0:	08008aad 	.word	0x08008aad
 8008ad4:	08008aad 	.word	0x08008aad
 8008ad8:	08008aad 	.word	0x08008aad
 8008adc:	08008b31 	.word	0x08008b31
 8008ae0:	08008aad 	.word	0x08008aad
 8008ae4:	08008aad 	.word	0x08008aad
 8008ae8:	08008aad 	.word	0x08008aad
 8008aec:	08008aad 	.word	0x08008aad
 8008af0:	08008c3d 	.word	0x08008c3d
 8008af4:	08008b61 	.word	0x08008b61
 8008af8:	08008c1f 	.word	0x08008c1f
 8008afc:	08008aad 	.word	0x08008aad
 8008b00:	08008aad 	.word	0x08008aad
 8008b04:	08008c5f 	.word	0x08008c5f
 8008b08:	08008aad 	.word	0x08008aad
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008aad 	.word	0x08008aad
 8008b14:	08008aad 	.word	0x08008aad
 8008b18:	08008c27 	.word	0x08008c27
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	1d1a      	adds	r2, r3, #4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	602a      	str	r2, [r5, #0]
 8008b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0a3      	b.n	8008c78 <_printf_i+0x1f4>
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	6829      	ldr	r1, [r5, #0]
 8008b34:	0606      	lsls	r6, r0, #24
 8008b36:	f101 0304 	add.w	r3, r1, #4
 8008b3a:	d50a      	bpl.n	8008b52 <_printf_i+0xce>
 8008b3c:	680e      	ldr	r6, [r1, #0]
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	2e00      	cmp	r6, #0
 8008b42:	da03      	bge.n	8008b4c <_printf_i+0xc8>
 8008b44:	232d      	movs	r3, #45	; 0x2d
 8008b46:	4276      	negs	r6, r6
 8008b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b4c:	485e      	ldr	r0, [pc, #376]	; (8008cc8 <_printf_i+0x244>)
 8008b4e:	230a      	movs	r3, #10
 8008b50:	e019      	b.n	8008b86 <_printf_i+0x102>
 8008b52:	680e      	ldr	r6, [r1, #0]
 8008b54:	602b      	str	r3, [r5, #0]
 8008b56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b5a:	bf18      	it	ne
 8008b5c:	b236      	sxthne	r6, r6
 8008b5e:	e7ef      	b.n	8008b40 <_printf_i+0xbc>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	6820      	ldr	r0, [r4, #0]
 8008b64:	1d19      	adds	r1, r3, #4
 8008b66:	6029      	str	r1, [r5, #0]
 8008b68:	0601      	lsls	r1, r0, #24
 8008b6a:	d501      	bpl.n	8008b70 <_printf_i+0xec>
 8008b6c:	681e      	ldr	r6, [r3, #0]
 8008b6e:	e002      	b.n	8008b76 <_printf_i+0xf2>
 8008b70:	0646      	lsls	r6, r0, #25
 8008b72:	d5fb      	bpl.n	8008b6c <_printf_i+0xe8>
 8008b74:	881e      	ldrh	r6, [r3, #0]
 8008b76:	4854      	ldr	r0, [pc, #336]	; (8008cc8 <_printf_i+0x244>)
 8008b78:	2f6f      	cmp	r7, #111	; 0x6f
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2308      	moveq	r3, #8
 8008b7e:	230a      	movne	r3, #10
 8008b80:	2100      	movs	r1, #0
 8008b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b86:	6865      	ldr	r5, [r4, #4]
 8008b88:	60a5      	str	r5, [r4, #8]
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	bfa2      	ittt	ge
 8008b8e:	6821      	ldrge	r1, [r4, #0]
 8008b90:	f021 0104 	bicge.w	r1, r1, #4
 8008b94:	6021      	strge	r1, [r4, #0]
 8008b96:	b90e      	cbnz	r6, 8008b9c <_printf_i+0x118>
 8008b98:	2d00      	cmp	r5, #0
 8008b9a:	d04d      	beq.n	8008c38 <_printf_i+0x1b4>
 8008b9c:	4615      	mov	r5, r2
 8008b9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ba2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ba6:	5dc7      	ldrb	r7, [r0, r7]
 8008ba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bac:	4637      	mov	r7, r6
 8008bae:	42bb      	cmp	r3, r7
 8008bb0:	460e      	mov	r6, r1
 8008bb2:	d9f4      	bls.n	8008b9e <_printf_i+0x11a>
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d10b      	bne.n	8008bd0 <_printf_i+0x14c>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	07de      	lsls	r6, r3, #31
 8008bbc:	d508      	bpl.n	8008bd0 <_printf_i+0x14c>
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	6861      	ldr	r1, [r4, #4]
 8008bc2:	4299      	cmp	r1, r3
 8008bc4:	bfde      	ittt	le
 8008bc6:	2330      	movle	r3, #48	; 0x30
 8008bc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bd0:	1b52      	subs	r2, r2, r5
 8008bd2:	6122      	str	r2, [r4, #16]
 8008bd4:	f8cd a000 	str.w	sl, [sp]
 8008bd8:	464b      	mov	r3, r9
 8008bda:	aa03      	add	r2, sp, #12
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4640      	mov	r0, r8
 8008be0:	f7ff fee2 	bl	80089a8 <_printf_common>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d14c      	bne.n	8008c82 <_printf_i+0x1fe>
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	b004      	add	sp, #16
 8008bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf2:	4835      	ldr	r0, [pc, #212]	; (8008cc8 <_printf_i+0x244>)
 8008bf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bf8:	6829      	ldr	r1, [r5, #0]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c00:	6029      	str	r1, [r5, #0]
 8008c02:	061d      	lsls	r5, r3, #24
 8008c04:	d514      	bpl.n	8008c30 <_printf_i+0x1ac>
 8008c06:	07df      	lsls	r7, r3, #31
 8008c08:	bf44      	itt	mi
 8008c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0e:	6023      	strmi	r3, [r4, #0]
 8008c10:	b91e      	cbnz	r6, 8008c1a <_printf_i+0x196>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	f023 0320 	bic.w	r3, r3, #32
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	2310      	movs	r3, #16
 8008c1c:	e7b0      	b.n	8008b80 <_printf_i+0xfc>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	f043 0320 	orr.w	r3, r3, #32
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	2378      	movs	r3, #120	; 0x78
 8008c28:	4828      	ldr	r0, [pc, #160]	; (8008ccc <_printf_i+0x248>)
 8008c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c2e:	e7e3      	b.n	8008bf8 <_printf_i+0x174>
 8008c30:	0659      	lsls	r1, r3, #25
 8008c32:	bf48      	it	mi
 8008c34:	b2b6      	uxthmi	r6, r6
 8008c36:	e7e6      	b.n	8008c06 <_printf_i+0x182>
 8008c38:	4615      	mov	r5, r2
 8008c3a:	e7bb      	b.n	8008bb4 <_printf_i+0x130>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	6826      	ldr	r6, [r4, #0]
 8008c40:	6961      	ldr	r1, [r4, #20]
 8008c42:	1d18      	adds	r0, r3, #4
 8008c44:	6028      	str	r0, [r5, #0]
 8008c46:	0635      	lsls	r5, r6, #24
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	d501      	bpl.n	8008c50 <_printf_i+0x1cc>
 8008c4c:	6019      	str	r1, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <_printf_i+0x1d2>
 8008c50:	0670      	lsls	r0, r6, #25
 8008c52:	d5fb      	bpl.n	8008c4c <_printf_i+0x1c8>
 8008c54:	8019      	strh	r1, [r3, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	4615      	mov	r5, r2
 8008c5c:	e7ba      	b.n	8008bd4 <_printf_i+0x150>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	602a      	str	r2, [r5, #0]
 8008c64:	681d      	ldr	r5, [r3, #0]
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7f7 fac0 	bl	80001f0 <memchr>
 8008c70:	b108      	cbz	r0, 8008c76 <_printf_i+0x1f2>
 8008c72:	1b40      	subs	r0, r0, r5
 8008c74:	6060      	str	r0, [r4, #4]
 8008c76:	6863      	ldr	r3, [r4, #4]
 8008c78:	6123      	str	r3, [r4, #16]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c80:	e7a8      	b.n	8008bd4 <_printf_i+0x150>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	462a      	mov	r2, r5
 8008c86:	4649      	mov	r1, r9
 8008c88:	4640      	mov	r0, r8
 8008c8a:	47d0      	blx	sl
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d0ab      	beq.n	8008be8 <_printf_i+0x164>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	079b      	lsls	r3, r3, #30
 8008c94:	d413      	bmi.n	8008cbe <_printf_i+0x23a>
 8008c96:	68e0      	ldr	r0, [r4, #12]
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	4298      	cmp	r0, r3
 8008c9c:	bfb8      	it	lt
 8008c9e:	4618      	movlt	r0, r3
 8008ca0:	e7a4      	b.n	8008bec <_printf_i+0x168>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	47d0      	blx	sl
 8008cac:	3001      	adds	r0, #1
 8008cae:	d09b      	beq.n	8008be8 <_printf_i+0x164>
 8008cb0:	3501      	adds	r5, #1
 8008cb2:	68e3      	ldr	r3, [r4, #12]
 8008cb4:	9903      	ldr	r1, [sp, #12]
 8008cb6:	1a5b      	subs	r3, r3, r1
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dcf2      	bgt.n	8008ca2 <_printf_i+0x21e>
 8008cbc:	e7eb      	b.n	8008c96 <_printf_i+0x212>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	f104 0619 	add.w	r6, r4, #25
 8008cc4:	e7f5      	b.n	8008cb2 <_printf_i+0x22e>
 8008cc6:	bf00      	nop
 8008cc8:	0800b35a 	.word	0x0800b35a
 8008ccc:	0800b36b 	.word	0x0800b36b

08008cd0 <siprintf>:
 8008cd0:	b40e      	push	{r1, r2, r3}
 8008cd2:	b500      	push	{lr}
 8008cd4:	b09c      	sub	sp, #112	; 0x70
 8008cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8008cd8:	9002      	str	r0, [sp, #8]
 8008cda:	9006      	str	r0, [sp, #24]
 8008cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ce0:	4809      	ldr	r0, [pc, #36]	; (8008d08 <siprintf+0x38>)
 8008ce2:	9107      	str	r1, [sp, #28]
 8008ce4:	9104      	str	r1, [sp, #16]
 8008ce6:	4909      	ldr	r1, [pc, #36]	; (8008d0c <siprintf+0x3c>)
 8008ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cec:	9105      	str	r1, [sp, #20]
 8008cee:	6800      	ldr	r0, [r0, #0]
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	a902      	add	r1, sp, #8
 8008cf4:	f001 fb68 	bl	800a3c8 <_svfiprintf_r>
 8008cf8:	9b02      	ldr	r3, [sp, #8]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	701a      	strb	r2, [r3, #0]
 8008cfe:	b01c      	add	sp, #112	; 0x70
 8008d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d04:	b003      	add	sp, #12
 8008d06:	4770      	bx	lr
 8008d08:	200003e4 	.word	0x200003e4
 8008d0c:	ffff0208 	.word	0xffff0208

08008d10 <quorem>:
 8008d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	6903      	ldr	r3, [r0, #16]
 8008d16:	690c      	ldr	r4, [r1, #16]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	f2c0 8081 	blt.w	8008e22 <quorem+0x112>
 8008d20:	3c01      	subs	r4, #1
 8008d22:	f101 0814 	add.w	r8, r1, #20
 8008d26:	f100 0514 	add.w	r5, r0, #20
 8008d2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d44:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d48:	d331      	bcc.n	8008dae <quorem+0x9e>
 8008d4a:	f04f 0e00 	mov.w	lr, #0
 8008d4e:	4640      	mov	r0, r8
 8008d50:	46ac      	mov	ip, r5
 8008d52:	46f2      	mov	sl, lr
 8008d54:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d58:	b293      	uxth	r3, r2
 8008d5a:	fb06 e303 	mla	r3, r6, r3, lr
 8008d5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	ebaa 0303 	sub.w	r3, sl, r3
 8008d68:	f8dc a000 	ldr.w	sl, [ip]
 8008d6c:	0c12      	lsrs	r2, r2, #16
 8008d6e:	fa13 f38a 	uxtah	r3, r3, sl
 8008d72:	fb06 e202 	mla	r2, r6, r2, lr
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	9b00      	ldr	r3, [sp, #0]
 8008d7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d7e:	b292      	uxth	r2, r2
 8008d80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d88:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d8c:	4581      	cmp	r9, r0
 8008d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d92:	f84c 3b04 	str.w	r3, [ip], #4
 8008d96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d9a:	d2db      	bcs.n	8008d54 <quorem+0x44>
 8008d9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008da0:	b92b      	cbnz	r3, 8008dae <quorem+0x9e>
 8008da2:	9b01      	ldr	r3, [sp, #4]
 8008da4:	3b04      	subs	r3, #4
 8008da6:	429d      	cmp	r5, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	d32e      	bcc.n	8008e0a <quorem+0xfa>
 8008dac:	613c      	str	r4, [r7, #16]
 8008dae:	4638      	mov	r0, r7
 8008db0:	f001 f8b6 	bl	8009f20 <__mcmp>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	db24      	blt.n	8008e02 <quorem+0xf2>
 8008db8:	3601      	adds	r6, #1
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f04f 0c00 	mov.w	ip, #0
 8008dc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008dc4:	f8d0 e000 	ldr.w	lr, [r0]
 8008dc8:	b293      	uxth	r3, r2
 8008dca:	ebac 0303 	sub.w	r3, ip, r3
 8008dce:	0c12      	lsrs	r2, r2, #16
 8008dd0:	fa13 f38e 	uxtah	r3, r3, lr
 8008dd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008de2:	45c1      	cmp	r9, r8
 8008de4:	f840 3b04 	str.w	r3, [r0], #4
 8008de8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008dec:	d2e8      	bcs.n	8008dc0 <quorem+0xb0>
 8008dee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008df2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008df6:	b922      	cbnz	r2, 8008e02 <quorem+0xf2>
 8008df8:	3b04      	subs	r3, #4
 8008dfa:	429d      	cmp	r5, r3
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	d30a      	bcc.n	8008e16 <quorem+0x106>
 8008e00:	613c      	str	r4, [r7, #16]
 8008e02:	4630      	mov	r0, r6
 8008e04:	b003      	add	sp, #12
 8008e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0a:	6812      	ldr	r2, [r2, #0]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	d1cc      	bne.n	8008dac <quorem+0x9c>
 8008e12:	3c01      	subs	r4, #1
 8008e14:	e7c7      	b.n	8008da6 <quorem+0x96>
 8008e16:	6812      	ldr	r2, [r2, #0]
 8008e18:	3b04      	subs	r3, #4
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	d1f0      	bne.n	8008e00 <quorem+0xf0>
 8008e1e:	3c01      	subs	r4, #1
 8008e20:	e7eb      	b.n	8008dfa <quorem+0xea>
 8008e22:	2000      	movs	r0, #0
 8008e24:	e7ee      	b.n	8008e04 <quorem+0xf4>
	...

08008e28 <_dtoa_r>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	ed2d 8b04 	vpush	{d8-d9}
 8008e30:	ec57 6b10 	vmov	r6, r7, d0
 8008e34:	b093      	sub	sp, #76	; 0x4c
 8008e36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e3c:	9106      	str	r1, [sp, #24]
 8008e3e:	ee10 aa10 	vmov	sl, s0
 8008e42:	4604      	mov	r4, r0
 8008e44:	9209      	str	r2, [sp, #36]	; 0x24
 8008e46:	930c      	str	r3, [sp, #48]	; 0x30
 8008e48:	46bb      	mov	fp, r7
 8008e4a:	b975      	cbnz	r5, 8008e6a <_dtoa_r+0x42>
 8008e4c:	2010      	movs	r0, #16
 8008e4e:	f000 fddd 	bl	8009a0c <malloc>
 8008e52:	4602      	mov	r2, r0
 8008e54:	6260      	str	r0, [r4, #36]	; 0x24
 8008e56:	b920      	cbnz	r0, 8008e62 <_dtoa_r+0x3a>
 8008e58:	4ba7      	ldr	r3, [pc, #668]	; (80090f8 <_dtoa_r+0x2d0>)
 8008e5a:	21ea      	movs	r1, #234	; 0xea
 8008e5c:	48a7      	ldr	r0, [pc, #668]	; (80090fc <_dtoa_r+0x2d4>)
 8008e5e:	f001 fbc3 	bl	800a5e8 <__assert_func>
 8008e62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e66:	6005      	str	r5, [r0, #0]
 8008e68:	60c5      	str	r5, [r0, #12]
 8008e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6c:	6819      	ldr	r1, [r3, #0]
 8008e6e:	b151      	cbz	r1, 8008e86 <_dtoa_r+0x5e>
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	604a      	str	r2, [r1, #4]
 8008e74:	2301      	movs	r3, #1
 8008e76:	4093      	lsls	r3, r2
 8008e78:	608b      	str	r3, [r1, #8]
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fe0e 	bl	8009a9c <_Bfree>
 8008e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	1e3b      	subs	r3, r7, #0
 8008e88:	bfaa      	itet	ge
 8008e8a:	2300      	movge	r3, #0
 8008e8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e90:	f8c8 3000 	strge.w	r3, [r8]
 8008e94:	4b9a      	ldr	r3, [pc, #616]	; (8009100 <_dtoa_r+0x2d8>)
 8008e96:	bfbc      	itt	lt
 8008e98:	2201      	movlt	r2, #1
 8008e9a:	f8c8 2000 	strlt.w	r2, [r8]
 8008e9e:	ea33 030b 	bics.w	r3, r3, fp
 8008ea2:	d11b      	bne.n	8008edc <_dtoa_r+0xb4>
 8008ea4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ea6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008eb0:	4333      	orrs	r3, r6
 8008eb2:	f000 8592 	beq.w	80099da <_dtoa_r+0xbb2>
 8008eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb8:	b963      	cbnz	r3, 8008ed4 <_dtoa_r+0xac>
 8008eba:	4b92      	ldr	r3, [pc, #584]	; (8009104 <_dtoa_r+0x2dc>)
 8008ebc:	e022      	b.n	8008f04 <_dtoa_r+0xdc>
 8008ebe:	4b92      	ldr	r3, [pc, #584]	; (8009108 <_dtoa_r+0x2e0>)
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	9801      	ldr	r0, [sp, #4]
 8008eca:	b013      	add	sp, #76	; 0x4c
 8008ecc:	ecbd 8b04 	vpop	{d8-d9}
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed4:	4b8b      	ldr	r3, [pc, #556]	; (8009104 <_dtoa_r+0x2dc>)
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	3303      	adds	r3, #3
 8008eda:	e7f3      	b.n	8008ec4 <_dtoa_r+0x9c>
 8008edc:	2200      	movs	r2, #0
 8008ede:	2300      	movs	r3, #0
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	4659      	mov	r1, fp
 8008ee4:	f7f7 fdf8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ee8:	ec4b ab19 	vmov	d9, sl, fp
 8008eec:	4680      	mov	r8, r0
 8008eee:	b158      	cbz	r0, 8008f08 <_dtoa_r+0xe0>
 8008ef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 856b 	beq.w	80099d4 <_dtoa_r+0xbac>
 8008efe:	4883      	ldr	r0, [pc, #524]	; (800910c <_dtoa_r+0x2e4>)
 8008f00:	6018      	str	r0, [r3, #0]
 8008f02:	1e43      	subs	r3, r0, #1
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	e7df      	b.n	8008ec8 <_dtoa_r+0xa0>
 8008f08:	ec4b ab10 	vmov	d0, sl, fp
 8008f0c:	aa10      	add	r2, sp, #64	; 0x40
 8008f0e:	a911      	add	r1, sp, #68	; 0x44
 8008f10:	4620      	mov	r0, r4
 8008f12:	f001 f8ab 	bl	800a06c <__d2b>
 8008f16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f1a:	ee08 0a10 	vmov	s16, r0
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	f000 8084 	beq.w	800902c <_dtoa_r+0x204>
 8008f24:	ee19 3a90 	vmov	r3, s19
 8008f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f30:	4656      	mov	r6, sl
 8008f32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f3e:	4b74      	ldr	r3, [pc, #464]	; (8009110 <_dtoa_r+0x2e8>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	f7f7 f9a7 	bl	8000298 <__aeabi_dsub>
 8008f4a:	a365      	add	r3, pc, #404	; (adr r3, 80090e0 <_dtoa_r+0x2b8>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	f7f7 fb5a 	bl	8000608 <__aeabi_dmul>
 8008f54:	a364      	add	r3, pc, #400	; (adr r3, 80090e8 <_dtoa_r+0x2c0>)
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	f7f7 f99f 	bl	800029c <__adddf3>
 8008f5e:	4606      	mov	r6, r0
 8008f60:	4628      	mov	r0, r5
 8008f62:	460f      	mov	r7, r1
 8008f64:	f7f7 fae6 	bl	8000534 <__aeabi_i2d>
 8008f68:	a361      	add	r3, pc, #388	; (adr r3, 80090f0 <_dtoa_r+0x2c8>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f7f7 fb4b 	bl	8000608 <__aeabi_dmul>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 f98f 	bl	800029c <__adddf3>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	460f      	mov	r7, r1
 8008f82:	f7f7 fdf1 	bl	8000b68 <__aeabi_d2iz>
 8008f86:	2200      	movs	r2, #0
 8008f88:	9000      	str	r0, [sp, #0]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	4639      	mov	r1, r7
 8008f90:	f7f7 fdac 	bl	8000aec <__aeabi_dcmplt>
 8008f94:	b150      	cbz	r0, 8008fac <_dtoa_r+0x184>
 8008f96:	9800      	ldr	r0, [sp, #0]
 8008f98:	f7f7 facc 	bl	8000534 <__aeabi_i2d>
 8008f9c:	4632      	mov	r2, r6
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	f7f7 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa4:	b910      	cbnz	r0, 8008fac <_dtoa_r+0x184>
 8008fa6:	9b00      	ldr	r3, [sp, #0]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	9b00      	ldr	r3, [sp, #0]
 8008fae:	2b16      	cmp	r3, #22
 8008fb0:	d85a      	bhi.n	8009068 <_dtoa_r+0x240>
 8008fb2:	9a00      	ldr	r2, [sp, #0]
 8008fb4:	4b57      	ldr	r3, [pc, #348]	; (8009114 <_dtoa_r+0x2ec>)
 8008fb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	ec51 0b19 	vmov	r0, r1, d9
 8008fc2:	f7f7 fd93 	bl	8000aec <__aeabi_dcmplt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d050      	beq.n	800906c <_dtoa_r+0x244>
 8008fca:	9b00      	ldr	r3, [sp, #0]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fd6:	1b5d      	subs	r5, r3, r5
 8008fd8:	1e6b      	subs	r3, r5, #1
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	bf45      	ittet	mi
 8008fde:	f1c5 0301 	rsbmi	r3, r5, #1
 8008fe2:	9304      	strmi	r3, [sp, #16]
 8008fe4:	2300      	movpl	r3, #0
 8008fe6:	2300      	movmi	r3, #0
 8008fe8:	bf4c      	ite	mi
 8008fea:	9305      	strmi	r3, [sp, #20]
 8008fec:	9304      	strpl	r3, [sp, #16]
 8008fee:	9b00      	ldr	r3, [sp, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	db3d      	blt.n	8009070 <_dtoa_r+0x248>
 8008ff4:	9b05      	ldr	r3, [sp, #20]
 8008ff6:	9a00      	ldr	r2, [sp, #0]
 8008ff8:	920a      	str	r2, [sp, #40]	; 0x28
 8008ffa:	4413      	add	r3, r2
 8008ffc:	9305      	str	r3, [sp, #20]
 8008ffe:	2300      	movs	r3, #0
 8009000:	9307      	str	r3, [sp, #28]
 8009002:	9b06      	ldr	r3, [sp, #24]
 8009004:	2b09      	cmp	r3, #9
 8009006:	f200 8089 	bhi.w	800911c <_dtoa_r+0x2f4>
 800900a:	2b05      	cmp	r3, #5
 800900c:	bfc4      	itt	gt
 800900e:	3b04      	subgt	r3, #4
 8009010:	9306      	strgt	r3, [sp, #24]
 8009012:	9b06      	ldr	r3, [sp, #24]
 8009014:	f1a3 0302 	sub.w	r3, r3, #2
 8009018:	bfcc      	ite	gt
 800901a:	2500      	movgt	r5, #0
 800901c:	2501      	movle	r5, #1
 800901e:	2b03      	cmp	r3, #3
 8009020:	f200 8087 	bhi.w	8009132 <_dtoa_r+0x30a>
 8009024:	e8df f003 	tbb	[pc, r3]
 8009028:	59383a2d 	.word	0x59383a2d
 800902c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009030:	441d      	add	r5, r3
 8009032:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009036:	2b20      	cmp	r3, #32
 8009038:	bfc1      	itttt	gt
 800903a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800903e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009042:	fa0b f303 	lslgt.w	r3, fp, r3
 8009046:	fa26 f000 	lsrgt.w	r0, r6, r0
 800904a:	bfda      	itte	le
 800904c:	f1c3 0320 	rsble	r3, r3, #32
 8009050:	fa06 f003 	lslle.w	r0, r6, r3
 8009054:	4318      	orrgt	r0, r3
 8009056:	f7f7 fa5d 	bl	8000514 <__aeabi_ui2d>
 800905a:	2301      	movs	r3, #1
 800905c:	4606      	mov	r6, r0
 800905e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009062:	3d01      	subs	r5, #1
 8009064:	930e      	str	r3, [sp, #56]	; 0x38
 8009066:	e76a      	b.n	8008f3e <_dtoa_r+0x116>
 8009068:	2301      	movs	r3, #1
 800906a:	e7b2      	b.n	8008fd2 <_dtoa_r+0x1aa>
 800906c:	900b      	str	r0, [sp, #44]	; 0x2c
 800906e:	e7b1      	b.n	8008fd4 <_dtoa_r+0x1ac>
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	9a00      	ldr	r2, [sp, #0]
 8009074:	1a9b      	subs	r3, r3, r2
 8009076:	9304      	str	r3, [sp, #16]
 8009078:	4253      	negs	r3, r2
 800907a:	9307      	str	r3, [sp, #28]
 800907c:	2300      	movs	r3, #0
 800907e:	930a      	str	r3, [sp, #40]	; 0x28
 8009080:	e7bf      	b.n	8009002 <_dtoa_r+0x1da>
 8009082:	2300      	movs	r3, #0
 8009084:	9308      	str	r3, [sp, #32]
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	dc55      	bgt.n	8009138 <_dtoa_r+0x310>
 800908c:	2301      	movs	r3, #1
 800908e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009092:	461a      	mov	r2, r3
 8009094:	9209      	str	r2, [sp, #36]	; 0x24
 8009096:	e00c      	b.n	80090b2 <_dtoa_r+0x28a>
 8009098:	2301      	movs	r3, #1
 800909a:	e7f3      	b.n	8009084 <_dtoa_r+0x25c>
 800909c:	2300      	movs	r3, #0
 800909e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a0:	9308      	str	r3, [sp, #32]
 80090a2:	9b00      	ldr	r3, [sp, #0]
 80090a4:	4413      	add	r3, r2
 80090a6:	9302      	str	r3, [sp, #8]
 80090a8:	3301      	adds	r3, #1
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	9303      	str	r3, [sp, #12]
 80090ae:	bfb8      	it	lt
 80090b0:	2301      	movlt	r3, #1
 80090b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090b4:	2200      	movs	r2, #0
 80090b6:	6042      	str	r2, [r0, #4]
 80090b8:	2204      	movs	r2, #4
 80090ba:	f102 0614 	add.w	r6, r2, #20
 80090be:	429e      	cmp	r6, r3
 80090c0:	6841      	ldr	r1, [r0, #4]
 80090c2:	d93d      	bls.n	8009140 <_dtoa_r+0x318>
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fca9 	bl	8009a1c <_Balloc>
 80090ca:	9001      	str	r0, [sp, #4]
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d13b      	bne.n	8009148 <_dtoa_r+0x320>
 80090d0:	4b11      	ldr	r3, [pc, #68]	; (8009118 <_dtoa_r+0x2f0>)
 80090d2:	4602      	mov	r2, r0
 80090d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090d8:	e6c0      	b.n	8008e5c <_dtoa_r+0x34>
 80090da:	2301      	movs	r3, #1
 80090dc:	e7df      	b.n	800909e <_dtoa_r+0x276>
 80090de:	bf00      	nop
 80090e0:	636f4361 	.word	0x636f4361
 80090e4:	3fd287a7 	.word	0x3fd287a7
 80090e8:	8b60c8b3 	.word	0x8b60c8b3
 80090ec:	3fc68a28 	.word	0x3fc68a28
 80090f0:	509f79fb 	.word	0x509f79fb
 80090f4:	3fd34413 	.word	0x3fd34413
 80090f8:	0800b389 	.word	0x0800b389
 80090fc:	0800b3a0 	.word	0x0800b3a0
 8009100:	7ff00000 	.word	0x7ff00000
 8009104:	0800b385 	.word	0x0800b385
 8009108:	0800b37c 	.word	0x0800b37c
 800910c:	0800b359 	.word	0x0800b359
 8009110:	3ff80000 	.word	0x3ff80000
 8009114:	0800b490 	.word	0x0800b490
 8009118:	0800b3fb 	.word	0x0800b3fb
 800911c:	2501      	movs	r5, #1
 800911e:	2300      	movs	r3, #0
 8009120:	9306      	str	r3, [sp, #24]
 8009122:	9508      	str	r5, [sp, #32]
 8009124:	f04f 33ff 	mov.w	r3, #4294967295
 8009128:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800912c:	2200      	movs	r2, #0
 800912e:	2312      	movs	r3, #18
 8009130:	e7b0      	b.n	8009094 <_dtoa_r+0x26c>
 8009132:	2301      	movs	r3, #1
 8009134:	9308      	str	r3, [sp, #32]
 8009136:	e7f5      	b.n	8009124 <_dtoa_r+0x2fc>
 8009138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800913e:	e7b8      	b.n	80090b2 <_dtoa_r+0x28a>
 8009140:	3101      	adds	r1, #1
 8009142:	6041      	str	r1, [r0, #4]
 8009144:	0052      	lsls	r2, r2, #1
 8009146:	e7b8      	b.n	80090ba <_dtoa_r+0x292>
 8009148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800914a:	9a01      	ldr	r2, [sp, #4]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	2b0e      	cmp	r3, #14
 8009152:	f200 809d 	bhi.w	8009290 <_dtoa_r+0x468>
 8009156:	2d00      	cmp	r5, #0
 8009158:	f000 809a 	beq.w	8009290 <_dtoa_r+0x468>
 800915c:	9b00      	ldr	r3, [sp, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	dd32      	ble.n	80091c8 <_dtoa_r+0x3a0>
 8009162:	4ab7      	ldr	r2, [pc, #732]	; (8009440 <_dtoa_r+0x618>)
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800916c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009170:	9b00      	ldr	r3, [sp, #0]
 8009172:	05d8      	lsls	r0, r3, #23
 8009174:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009178:	d516      	bpl.n	80091a8 <_dtoa_r+0x380>
 800917a:	4bb2      	ldr	r3, [pc, #712]	; (8009444 <_dtoa_r+0x61c>)
 800917c:	ec51 0b19 	vmov	r0, r1, d9
 8009180:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009184:	f7f7 fb6a 	bl	800085c <__aeabi_ddiv>
 8009188:	f007 070f 	and.w	r7, r7, #15
 800918c:	4682      	mov	sl, r0
 800918e:	468b      	mov	fp, r1
 8009190:	2503      	movs	r5, #3
 8009192:	4eac      	ldr	r6, [pc, #688]	; (8009444 <_dtoa_r+0x61c>)
 8009194:	b957      	cbnz	r7, 80091ac <_dtoa_r+0x384>
 8009196:	4642      	mov	r2, r8
 8009198:	464b      	mov	r3, r9
 800919a:	4650      	mov	r0, sl
 800919c:	4659      	mov	r1, fp
 800919e:	f7f7 fb5d 	bl	800085c <__aeabi_ddiv>
 80091a2:	4682      	mov	sl, r0
 80091a4:	468b      	mov	fp, r1
 80091a6:	e028      	b.n	80091fa <_dtoa_r+0x3d2>
 80091a8:	2502      	movs	r5, #2
 80091aa:	e7f2      	b.n	8009192 <_dtoa_r+0x36a>
 80091ac:	07f9      	lsls	r1, r7, #31
 80091ae:	d508      	bpl.n	80091c2 <_dtoa_r+0x39a>
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091b8:	f7f7 fa26 	bl	8000608 <__aeabi_dmul>
 80091bc:	3501      	adds	r5, #1
 80091be:	4680      	mov	r8, r0
 80091c0:	4689      	mov	r9, r1
 80091c2:	107f      	asrs	r7, r7, #1
 80091c4:	3608      	adds	r6, #8
 80091c6:	e7e5      	b.n	8009194 <_dtoa_r+0x36c>
 80091c8:	f000 809b 	beq.w	8009302 <_dtoa_r+0x4da>
 80091cc:	9b00      	ldr	r3, [sp, #0]
 80091ce:	4f9d      	ldr	r7, [pc, #628]	; (8009444 <_dtoa_r+0x61c>)
 80091d0:	425e      	negs	r6, r3
 80091d2:	4b9b      	ldr	r3, [pc, #620]	; (8009440 <_dtoa_r+0x618>)
 80091d4:	f006 020f 	and.w	r2, r6, #15
 80091d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	ec51 0b19 	vmov	r0, r1, d9
 80091e4:	f7f7 fa10 	bl	8000608 <__aeabi_dmul>
 80091e8:	1136      	asrs	r6, r6, #4
 80091ea:	4682      	mov	sl, r0
 80091ec:	468b      	mov	fp, r1
 80091ee:	2300      	movs	r3, #0
 80091f0:	2502      	movs	r5, #2
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	d17a      	bne.n	80092ec <_dtoa_r+0x4c4>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1d3      	bne.n	80091a2 <_dtoa_r+0x37a>
 80091fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8082 	beq.w	8009306 <_dtoa_r+0x4de>
 8009202:	4b91      	ldr	r3, [pc, #580]	; (8009448 <_dtoa_r+0x620>)
 8009204:	2200      	movs	r2, #0
 8009206:	4650      	mov	r0, sl
 8009208:	4659      	mov	r1, fp
 800920a:	f7f7 fc6f 	bl	8000aec <__aeabi_dcmplt>
 800920e:	2800      	cmp	r0, #0
 8009210:	d079      	beq.n	8009306 <_dtoa_r+0x4de>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d076      	beq.n	8009306 <_dtoa_r+0x4de>
 8009218:	9b02      	ldr	r3, [sp, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd36      	ble.n	800928c <_dtoa_r+0x464>
 800921e:	9b00      	ldr	r3, [sp, #0]
 8009220:	4650      	mov	r0, sl
 8009222:	4659      	mov	r1, fp
 8009224:	1e5f      	subs	r7, r3, #1
 8009226:	2200      	movs	r2, #0
 8009228:	4b88      	ldr	r3, [pc, #544]	; (800944c <_dtoa_r+0x624>)
 800922a:	f7f7 f9ed 	bl	8000608 <__aeabi_dmul>
 800922e:	9e02      	ldr	r6, [sp, #8]
 8009230:	4682      	mov	sl, r0
 8009232:	468b      	mov	fp, r1
 8009234:	3501      	adds	r5, #1
 8009236:	4628      	mov	r0, r5
 8009238:	f7f7 f97c 	bl	8000534 <__aeabi_i2d>
 800923c:	4652      	mov	r2, sl
 800923e:	465b      	mov	r3, fp
 8009240:	f7f7 f9e2 	bl	8000608 <__aeabi_dmul>
 8009244:	4b82      	ldr	r3, [pc, #520]	; (8009450 <_dtoa_r+0x628>)
 8009246:	2200      	movs	r2, #0
 8009248:	f7f7 f828 	bl	800029c <__adddf3>
 800924c:	46d0      	mov	r8, sl
 800924e:	46d9      	mov	r9, fp
 8009250:	4682      	mov	sl, r0
 8009252:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009256:	2e00      	cmp	r6, #0
 8009258:	d158      	bne.n	800930c <_dtoa_r+0x4e4>
 800925a:	4b7e      	ldr	r3, [pc, #504]	; (8009454 <_dtoa_r+0x62c>)
 800925c:	2200      	movs	r2, #0
 800925e:	4640      	mov	r0, r8
 8009260:	4649      	mov	r1, r9
 8009262:	f7f7 f819 	bl	8000298 <__aeabi_dsub>
 8009266:	4652      	mov	r2, sl
 8009268:	465b      	mov	r3, fp
 800926a:	4680      	mov	r8, r0
 800926c:	4689      	mov	r9, r1
 800926e:	f7f7 fc5b 	bl	8000b28 <__aeabi_dcmpgt>
 8009272:	2800      	cmp	r0, #0
 8009274:	f040 8295 	bne.w	80097a2 <_dtoa_r+0x97a>
 8009278:	4652      	mov	r2, sl
 800927a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800927e:	4640      	mov	r0, r8
 8009280:	4649      	mov	r1, r9
 8009282:	f7f7 fc33 	bl	8000aec <__aeabi_dcmplt>
 8009286:	2800      	cmp	r0, #0
 8009288:	f040 8289 	bne.w	800979e <_dtoa_r+0x976>
 800928c:	ec5b ab19 	vmov	sl, fp, d9
 8009290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009292:	2b00      	cmp	r3, #0
 8009294:	f2c0 8148 	blt.w	8009528 <_dtoa_r+0x700>
 8009298:	9a00      	ldr	r2, [sp, #0]
 800929a:	2a0e      	cmp	r2, #14
 800929c:	f300 8144 	bgt.w	8009528 <_dtoa_r+0x700>
 80092a0:	4b67      	ldr	r3, [pc, #412]	; (8009440 <_dtoa_r+0x618>)
 80092a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f280 80d5 	bge.w	800945c <_dtoa_r+0x634>
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f300 80d1 	bgt.w	800945c <_dtoa_r+0x634>
 80092ba:	f040 826f 	bne.w	800979c <_dtoa_r+0x974>
 80092be:	4b65      	ldr	r3, [pc, #404]	; (8009454 <_dtoa_r+0x62c>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	4640      	mov	r0, r8
 80092c4:	4649      	mov	r1, r9
 80092c6:	f7f7 f99f 	bl	8000608 <__aeabi_dmul>
 80092ca:	4652      	mov	r2, sl
 80092cc:	465b      	mov	r3, fp
 80092ce:	f7f7 fc21 	bl	8000b14 <__aeabi_dcmpge>
 80092d2:	9e03      	ldr	r6, [sp, #12]
 80092d4:	4637      	mov	r7, r6
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f040 8245 	bne.w	8009766 <_dtoa_r+0x93e>
 80092dc:	9d01      	ldr	r5, [sp, #4]
 80092de:	2331      	movs	r3, #49	; 0x31
 80092e0:	f805 3b01 	strb.w	r3, [r5], #1
 80092e4:	9b00      	ldr	r3, [sp, #0]
 80092e6:	3301      	adds	r3, #1
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	e240      	b.n	800976e <_dtoa_r+0x946>
 80092ec:	07f2      	lsls	r2, r6, #31
 80092ee:	d505      	bpl.n	80092fc <_dtoa_r+0x4d4>
 80092f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092f4:	f7f7 f988 	bl	8000608 <__aeabi_dmul>
 80092f8:	3501      	adds	r5, #1
 80092fa:	2301      	movs	r3, #1
 80092fc:	1076      	asrs	r6, r6, #1
 80092fe:	3708      	adds	r7, #8
 8009300:	e777      	b.n	80091f2 <_dtoa_r+0x3ca>
 8009302:	2502      	movs	r5, #2
 8009304:	e779      	b.n	80091fa <_dtoa_r+0x3d2>
 8009306:	9f00      	ldr	r7, [sp, #0]
 8009308:	9e03      	ldr	r6, [sp, #12]
 800930a:	e794      	b.n	8009236 <_dtoa_r+0x40e>
 800930c:	9901      	ldr	r1, [sp, #4]
 800930e:	4b4c      	ldr	r3, [pc, #304]	; (8009440 <_dtoa_r+0x618>)
 8009310:	4431      	add	r1, r6
 8009312:	910d      	str	r1, [sp, #52]	; 0x34
 8009314:	9908      	ldr	r1, [sp, #32]
 8009316:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800931a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800931e:	2900      	cmp	r1, #0
 8009320:	d043      	beq.n	80093aa <_dtoa_r+0x582>
 8009322:	494d      	ldr	r1, [pc, #308]	; (8009458 <_dtoa_r+0x630>)
 8009324:	2000      	movs	r0, #0
 8009326:	f7f7 fa99 	bl	800085c <__aeabi_ddiv>
 800932a:	4652      	mov	r2, sl
 800932c:	465b      	mov	r3, fp
 800932e:	f7f6 ffb3 	bl	8000298 <__aeabi_dsub>
 8009332:	9d01      	ldr	r5, [sp, #4]
 8009334:	4682      	mov	sl, r0
 8009336:	468b      	mov	fp, r1
 8009338:	4649      	mov	r1, r9
 800933a:	4640      	mov	r0, r8
 800933c:	f7f7 fc14 	bl	8000b68 <__aeabi_d2iz>
 8009340:	4606      	mov	r6, r0
 8009342:	f7f7 f8f7 	bl	8000534 <__aeabi_i2d>
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f6 ffa3 	bl	8000298 <__aeabi_dsub>
 8009352:	3630      	adds	r6, #48	; 0x30
 8009354:	f805 6b01 	strb.w	r6, [r5], #1
 8009358:	4652      	mov	r2, sl
 800935a:	465b      	mov	r3, fp
 800935c:	4680      	mov	r8, r0
 800935e:	4689      	mov	r9, r1
 8009360:	f7f7 fbc4 	bl	8000aec <__aeabi_dcmplt>
 8009364:	2800      	cmp	r0, #0
 8009366:	d163      	bne.n	8009430 <_dtoa_r+0x608>
 8009368:	4642      	mov	r2, r8
 800936a:	464b      	mov	r3, r9
 800936c:	4936      	ldr	r1, [pc, #216]	; (8009448 <_dtoa_r+0x620>)
 800936e:	2000      	movs	r0, #0
 8009370:	f7f6 ff92 	bl	8000298 <__aeabi_dsub>
 8009374:	4652      	mov	r2, sl
 8009376:	465b      	mov	r3, fp
 8009378:	f7f7 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800937c:	2800      	cmp	r0, #0
 800937e:	f040 80b5 	bne.w	80094ec <_dtoa_r+0x6c4>
 8009382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009384:	429d      	cmp	r5, r3
 8009386:	d081      	beq.n	800928c <_dtoa_r+0x464>
 8009388:	4b30      	ldr	r3, [pc, #192]	; (800944c <_dtoa_r+0x624>)
 800938a:	2200      	movs	r2, #0
 800938c:	4650      	mov	r0, sl
 800938e:	4659      	mov	r1, fp
 8009390:	f7f7 f93a 	bl	8000608 <__aeabi_dmul>
 8009394:	4b2d      	ldr	r3, [pc, #180]	; (800944c <_dtoa_r+0x624>)
 8009396:	4682      	mov	sl, r0
 8009398:	468b      	mov	fp, r1
 800939a:	4640      	mov	r0, r8
 800939c:	4649      	mov	r1, r9
 800939e:	2200      	movs	r2, #0
 80093a0:	f7f7 f932 	bl	8000608 <__aeabi_dmul>
 80093a4:	4680      	mov	r8, r0
 80093a6:	4689      	mov	r9, r1
 80093a8:	e7c6      	b.n	8009338 <_dtoa_r+0x510>
 80093aa:	4650      	mov	r0, sl
 80093ac:	4659      	mov	r1, fp
 80093ae:	f7f7 f92b 	bl	8000608 <__aeabi_dmul>
 80093b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093b4:	9d01      	ldr	r5, [sp, #4]
 80093b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b8:	4682      	mov	sl, r0
 80093ba:	468b      	mov	fp, r1
 80093bc:	4649      	mov	r1, r9
 80093be:	4640      	mov	r0, r8
 80093c0:	f7f7 fbd2 	bl	8000b68 <__aeabi_d2iz>
 80093c4:	4606      	mov	r6, r0
 80093c6:	f7f7 f8b5 	bl	8000534 <__aeabi_i2d>
 80093ca:	3630      	adds	r6, #48	; 0x30
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4640      	mov	r0, r8
 80093d2:	4649      	mov	r1, r9
 80093d4:	f7f6 ff60 	bl	8000298 <__aeabi_dsub>
 80093d8:	f805 6b01 	strb.w	r6, [r5], #1
 80093dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093de:	429d      	cmp	r5, r3
 80093e0:	4680      	mov	r8, r0
 80093e2:	4689      	mov	r9, r1
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	d124      	bne.n	8009434 <_dtoa_r+0x60c>
 80093ea:	4b1b      	ldr	r3, [pc, #108]	; (8009458 <_dtoa_r+0x630>)
 80093ec:	4650      	mov	r0, sl
 80093ee:	4659      	mov	r1, fp
 80093f0:	f7f6 ff54 	bl	800029c <__adddf3>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f7 fb94 	bl	8000b28 <__aeabi_dcmpgt>
 8009400:	2800      	cmp	r0, #0
 8009402:	d173      	bne.n	80094ec <_dtoa_r+0x6c4>
 8009404:	4652      	mov	r2, sl
 8009406:	465b      	mov	r3, fp
 8009408:	4913      	ldr	r1, [pc, #76]	; (8009458 <_dtoa_r+0x630>)
 800940a:	2000      	movs	r0, #0
 800940c:	f7f6 ff44 	bl	8000298 <__aeabi_dsub>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4640      	mov	r0, r8
 8009416:	4649      	mov	r1, r9
 8009418:	f7f7 fb68 	bl	8000aec <__aeabi_dcmplt>
 800941c:	2800      	cmp	r0, #0
 800941e:	f43f af35 	beq.w	800928c <_dtoa_r+0x464>
 8009422:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009424:	1e6b      	subs	r3, r5, #1
 8009426:	930f      	str	r3, [sp, #60]	; 0x3c
 8009428:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800942c:	2b30      	cmp	r3, #48	; 0x30
 800942e:	d0f8      	beq.n	8009422 <_dtoa_r+0x5fa>
 8009430:	9700      	str	r7, [sp, #0]
 8009432:	e049      	b.n	80094c8 <_dtoa_r+0x6a0>
 8009434:	4b05      	ldr	r3, [pc, #20]	; (800944c <_dtoa_r+0x624>)
 8009436:	f7f7 f8e7 	bl	8000608 <__aeabi_dmul>
 800943a:	4680      	mov	r8, r0
 800943c:	4689      	mov	r9, r1
 800943e:	e7bd      	b.n	80093bc <_dtoa_r+0x594>
 8009440:	0800b490 	.word	0x0800b490
 8009444:	0800b468 	.word	0x0800b468
 8009448:	3ff00000 	.word	0x3ff00000
 800944c:	40240000 	.word	0x40240000
 8009450:	401c0000 	.word	0x401c0000
 8009454:	40140000 	.word	0x40140000
 8009458:	3fe00000 	.word	0x3fe00000
 800945c:	9d01      	ldr	r5, [sp, #4]
 800945e:	4656      	mov	r6, sl
 8009460:	465f      	mov	r7, fp
 8009462:	4642      	mov	r2, r8
 8009464:	464b      	mov	r3, r9
 8009466:	4630      	mov	r0, r6
 8009468:	4639      	mov	r1, r7
 800946a:	f7f7 f9f7 	bl	800085c <__aeabi_ddiv>
 800946e:	f7f7 fb7b 	bl	8000b68 <__aeabi_d2iz>
 8009472:	4682      	mov	sl, r0
 8009474:	f7f7 f85e 	bl	8000534 <__aeabi_i2d>
 8009478:	4642      	mov	r2, r8
 800947a:	464b      	mov	r3, r9
 800947c:	f7f7 f8c4 	bl	8000608 <__aeabi_dmul>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800948c:	f7f6 ff04 	bl	8000298 <__aeabi_dsub>
 8009490:	f805 6b01 	strb.w	r6, [r5], #1
 8009494:	9e01      	ldr	r6, [sp, #4]
 8009496:	9f03      	ldr	r7, [sp, #12]
 8009498:	1bae      	subs	r6, r5, r6
 800949a:	42b7      	cmp	r7, r6
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	d135      	bne.n	800950e <_dtoa_r+0x6e6>
 80094a2:	f7f6 fefb 	bl	800029c <__adddf3>
 80094a6:	4642      	mov	r2, r8
 80094a8:	464b      	mov	r3, r9
 80094aa:	4606      	mov	r6, r0
 80094ac:	460f      	mov	r7, r1
 80094ae:	f7f7 fb3b 	bl	8000b28 <__aeabi_dcmpgt>
 80094b2:	b9d0      	cbnz	r0, 80094ea <_dtoa_r+0x6c2>
 80094b4:	4642      	mov	r2, r8
 80094b6:	464b      	mov	r3, r9
 80094b8:	4630      	mov	r0, r6
 80094ba:	4639      	mov	r1, r7
 80094bc:	f7f7 fb0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80094c0:	b110      	cbz	r0, 80094c8 <_dtoa_r+0x6a0>
 80094c2:	f01a 0f01 	tst.w	sl, #1
 80094c6:	d110      	bne.n	80094ea <_dtoa_r+0x6c2>
 80094c8:	4620      	mov	r0, r4
 80094ca:	ee18 1a10 	vmov	r1, s16
 80094ce:	f000 fae5 	bl	8009a9c <_Bfree>
 80094d2:	2300      	movs	r3, #0
 80094d4:	9800      	ldr	r0, [sp, #0]
 80094d6:	702b      	strb	r3, [r5, #0]
 80094d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094da:	3001      	adds	r0, #1
 80094dc:	6018      	str	r0, [r3, #0]
 80094de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f43f acf1 	beq.w	8008ec8 <_dtoa_r+0xa0>
 80094e6:	601d      	str	r5, [r3, #0]
 80094e8:	e4ee      	b.n	8008ec8 <_dtoa_r+0xa0>
 80094ea:	9f00      	ldr	r7, [sp, #0]
 80094ec:	462b      	mov	r3, r5
 80094ee:	461d      	mov	r5, r3
 80094f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094f4:	2a39      	cmp	r2, #57	; 0x39
 80094f6:	d106      	bne.n	8009506 <_dtoa_r+0x6de>
 80094f8:	9a01      	ldr	r2, [sp, #4]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d1f7      	bne.n	80094ee <_dtoa_r+0x6c6>
 80094fe:	9901      	ldr	r1, [sp, #4]
 8009500:	2230      	movs	r2, #48	; 0x30
 8009502:	3701      	adds	r7, #1
 8009504:	700a      	strb	r2, [r1, #0]
 8009506:	781a      	ldrb	r2, [r3, #0]
 8009508:	3201      	adds	r2, #1
 800950a:	701a      	strb	r2, [r3, #0]
 800950c:	e790      	b.n	8009430 <_dtoa_r+0x608>
 800950e:	4ba6      	ldr	r3, [pc, #664]	; (80097a8 <_dtoa_r+0x980>)
 8009510:	2200      	movs	r2, #0
 8009512:	f7f7 f879 	bl	8000608 <__aeabi_dmul>
 8009516:	2200      	movs	r2, #0
 8009518:	2300      	movs	r3, #0
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	f7f7 fadb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009522:	2800      	cmp	r0, #0
 8009524:	d09d      	beq.n	8009462 <_dtoa_r+0x63a>
 8009526:	e7cf      	b.n	80094c8 <_dtoa_r+0x6a0>
 8009528:	9a08      	ldr	r2, [sp, #32]
 800952a:	2a00      	cmp	r2, #0
 800952c:	f000 80d7 	beq.w	80096de <_dtoa_r+0x8b6>
 8009530:	9a06      	ldr	r2, [sp, #24]
 8009532:	2a01      	cmp	r2, #1
 8009534:	f300 80ba 	bgt.w	80096ac <_dtoa_r+0x884>
 8009538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800953a:	2a00      	cmp	r2, #0
 800953c:	f000 80b2 	beq.w	80096a4 <_dtoa_r+0x87c>
 8009540:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009544:	9e07      	ldr	r6, [sp, #28]
 8009546:	9d04      	ldr	r5, [sp, #16]
 8009548:	9a04      	ldr	r2, [sp, #16]
 800954a:	441a      	add	r2, r3
 800954c:	9204      	str	r2, [sp, #16]
 800954e:	9a05      	ldr	r2, [sp, #20]
 8009550:	2101      	movs	r1, #1
 8009552:	441a      	add	r2, r3
 8009554:	4620      	mov	r0, r4
 8009556:	9205      	str	r2, [sp, #20]
 8009558:	f000 fb58 	bl	8009c0c <__i2b>
 800955c:	4607      	mov	r7, r0
 800955e:	2d00      	cmp	r5, #0
 8009560:	dd0c      	ble.n	800957c <_dtoa_r+0x754>
 8009562:	9b05      	ldr	r3, [sp, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	dd09      	ble.n	800957c <_dtoa_r+0x754>
 8009568:	42ab      	cmp	r3, r5
 800956a:	9a04      	ldr	r2, [sp, #16]
 800956c:	bfa8      	it	ge
 800956e:	462b      	movge	r3, r5
 8009570:	1ad2      	subs	r2, r2, r3
 8009572:	9204      	str	r2, [sp, #16]
 8009574:	9a05      	ldr	r2, [sp, #20]
 8009576:	1aed      	subs	r5, r5, r3
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	9305      	str	r3, [sp, #20]
 800957c:	9b07      	ldr	r3, [sp, #28]
 800957e:	b31b      	cbz	r3, 80095c8 <_dtoa_r+0x7a0>
 8009580:	9b08      	ldr	r3, [sp, #32]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 80af 	beq.w	80096e6 <_dtoa_r+0x8be>
 8009588:	2e00      	cmp	r6, #0
 800958a:	dd13      	ble.n	80095b4 <_dtoa_r+0x78c>
 800958c:	4639      	mov	r1, r7
 800958e:	4632      	mov	r2, r6
 8009590:	4620      	mov	r0, r4
 8009592:	f000 fbfb 	bl	8009d8c <__pow5mult>
 8009596:	ee18 2a10 	vmov	r2, s16
 800959a:	4601      	mov	r1, r0
 800959c:	4607      	mov	r7, r0
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fb4a 	bl	8009c38 <__multiply>
 80095a4:	ee18 1a10 	vmov	r1, s16
 80095a8:	4680      	mov	r8, r0
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 fa76 	bl	8009a9c <_Bfree>
 80095b0:	ee08 8a10 	vmov	s16, r8
 80095b4:	9b07      	ldr	r3, [sp, #28]
 80095b6:	1b9a      	subs	r2, r3, r6
 80095b8:	d006      	beq.n	80095c8 <_dtoa_r+0x7a0>
 80095ba:	ee18 1a10 	vmov	r1, s16
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fbe4 	bl	8009d8c <__pow5mult>
 80095c4:	ee08 0a10 	vmov	s16, r0
 80095c8:	2101      	movs	r1, #1
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fb1e 	bl	8009c0c <__i2b>
 80095d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	4606      	mov	r6, r0
 80095d6:	f340 8088 	ble.w	80096ea <_dtoa_r+0x8c2>
 80095da:	461a      	mov	r2, r3
 80095dc:	4601      	mov	r1, r0
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 fbd4 	bl	8009d8c <__pow5mult>
 80095e4:	9b06      	ldr	r3, [sp, #24]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	4606      	mov	r6, r0
 80095ea:	f340 8081 	ble.w	80096f0 <_dtoa_r+0x8c8>
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	6933      	ldr	r3, [r6, #16]
 80095f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095f8:	6918      	ldr	r0, [r3, #16]
 80095fa:	f000 fab7 	bl	8009b6c <__hi0bits>
 80095fe:	f1c0 0020 	rsb	r0, r0, #32
 8009602:	9b05      	ldr	r3, [sp, #20]
 8009604:	4418      	add	r0, r3
 8009606:	f010 001f 	ands.w	r0, r0, #31
 800960a:	f000 8092 	beq.w	8009732 <_dtoa_r+0x90a>
 800960e:	f1c0 0320 	rsb	r3, r0, #32
 8009612:	2b04      	cmp	r3, #4
 8009614:	f340 808a 	ble.w	800972c <_dtoa_r+0x904>
 8009618:	f1c0 001c 	rsb	r0, r0, #28
 800961c:	9b04      	ldr	r3, [sp, #16]
 800961e:	4403      	add	r3, r0
 8009620:	9304      	str	r3, [sp, #16]
 8009622:	9b05      	ldr	r3, [sp, #20]
 8009624:	4403      	add	r3, r0
 8009626:	4405      	add	r5, r0
 8009628:	9305      	str	r3, [sp, #20]
 800962a:	9b04      	ldr	r3, [sp, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	dd07      	ble.n	8009640 <_dtoa_r+0x818>
 8009630:	ee18 1a10 	vmov	r1, s16
 8009634:	461a      	mov	r2, r3
 8009636:	4620      	mov	r0, r4
 8009638:	f000 fc02 	bl	8009e40 <__lshift>
 800963c:	ee08 0a10 	vmov	s16, r0
 8009640:	9b05      	ldr	r3, [sp, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	dd05      	ble.n	8009652 <_dtoa_r+0x82a>
 8009646:	4631      	mov	r1, r6
 8009648:	461a      	mov	r2, r3
 800964a:	4620      	mov	r0, r4
 800964c:	f000 fbf8 	bl	8009e40 <__lshift>
 8009650:	4606      	mov	r6, r0
 8009652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d06e      	beq.n	8009736 <_dtoa_r+0x90e>
 8009658:	ee18 0a10 	vmov	r0, s16
 800965c:	4631      	mov	r1, r6
 800965e:	f000 fc5f 	bl	8009f20 <__mcmp>
 8009662:	2800      	cmp	r0, #0
 8009664:	da67      	bge.n	8009736 <_dtoa_r+0x90e>
 8009666:	9b00      	ldr	r3, [sp, #0]
 8009668:	3b01      	subs	r3, #1
 800966a:	ee18 1a10 	vmov	r1, s16
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	220a      	movs	r2, #10
 8009672:	2300      	movs	r3, #0
 8009674:	4620      	mov	r0, r4
 8009676:	f000 fa33 	bl	8009ae0 <__multadd>
 800967a:	9b08      	ldr	r3, [sp, #32]
 800967c:	ee08 0a10 	vmov	s16, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 81b1 	beq.w	80099e8 <_dtoa_r+0xbc0>
 8009686:	2300      	movs	r3, #0
 8009688:	4639      	mov	r1, r7
 800968a:	220a      	movs	r2, #10
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fa27 	bl	8009ae0 <__multadd>
 8009692:	9b02      	ldr	r3, [sp, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	4607      	mov	r7, r0
 8009698:	f300 808e 	bgt.w	80097b8 <_dtoa_r+0x990>
 800969c:	9b06      	ldr	r3, [sp, #24]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	dc51      	bgt.n	8009746 <_dtoa_r+0x91e>
 80096a2:	e089      	b.n	80097b8 <_dtoa_r+0x990>
 80096a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096aa:	e74b      	b.n	8009544 <_dtoa_r+0x71c>
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	1e5e      	subs	r6, r3, #1
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	42b3      	cmp	r3, r6
 80096b4:	bfbf      	itttt	lt
 80096b6:	9b07      	ldrlt	r3, [sp, #28]
 80096b8:	9607      	strlt	r6, [sp, #28]
 80096ba:	1af2      	sublt	r2, r6, r3
 80096bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096be:	bfb6      	itet	lt
 80096c0:	189b      	addlt	r3, r3, r2
 80096c2:	1b9e      	subge	r6, r3, r6
 80096c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	bfb8      	it	lt
 80096ca:	2600      	movlt	r6, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bfb7      	itett	lt
 80096d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096d8:	1a9d      	sublt	r5, r3, r2
 80096da:	2300      	movlt	r3, #0
 80096dc:	e734      	b.n	8009548 <_dtoa_r+0x720>
 80096de:	9e07      	ldr	r6, [sp, #28]
 80096e0:	9d04      	ldr	r5, [sp, #16]
 80096e2:	9f08      	ldr	r7, [sp, #32]
 80096e4:	e73b      	b.n	800955e <_dtoa_r+0x736>
 80096e6:	9a07      	ldr	r2, [sp, #28]
 80096e8:	e767      	b.n	80095ba <_dtoa_r+0x792>
 80096ea:	9b06      	ldr	r3, [sp, #24]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	dc18      	bgt.n	8009722 <_dtoa_r+0x8fa>
 80096f0:	f1ba 0f00 	cmp.w	sl, #0
 80096f4:	d115      	bne.n	8009722 <_dtoa_r+0x8fa>
 80096f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096fa:	b993      	cbnz	r3, 8009722 <_dtoa_r+0x8fa>
 80096fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009700:	0d1b      	lsrs	r3, r3, #20
 8009702:	051b      	lsls	r3, r3, #20
 8009704:	b183      	cbz	r3, 8009728 <_dtoa_r+0x900>
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	3301      	adds	r3, #1
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	9b05      	ldr	r3, [sp, #20]
 800970e:	3301      	adds	r3, #1
 8009710:	9305      	str	r3, [sp, #20]
 8009712:	f04f 0801 	mov.w	r8, #1
 8009716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009718:	2b00      	cmp	r3, #0
 800971a:	f47f af6a 	bne.w	80095f2 <_dtoa_r+0x7ca>
 800971e:	2001      	movs	r0, #1
 8009720:	e76f      	b.n	8009602 <_dtoa_r+0x7da>
 8009722:	f04f 0800 	mov.w	r8, #0
 8009726:	e7f6      	b.n	8009716 <_dtoa_r+0x8ee>
 8009728:	4698      	mov	r8, r3
 800972a:	e7f4      	b.n	8009716 <_dtoa_r+0x8ee>
 800972c:	f43f af7d 	beq.w	800962a <_dtoa_r+0x802>
 8009730:	4618      	mov	r0, r3
 8009732:	301c      	adds	r0, #28
 8009734:	e772      	b.n	800961c <_dtoa_r+0x7f4>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	dc37      	bgt.n	80097ac <_dtoa_r+0x984>
 800973c:	9b06      	ldr	r3, [sp, #24]
 800973e:	2b02      	cmp	r3, #2
 8009740:	dd34      	ble.n	80097ac <_dtoa_r+0x984>
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	9302      	str	r3, [sp, #8]
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	b96b      	cbnz	r3, 8009766 <_dtoa_r+0x93e>
 800974a:	4631      	mov	r1, r6
 800974c:	2205      	movs	r2, #5
 800974e:	4620      	mov	r0, r4
 8009750:	f000 f9c6 	bl	8009ae0 <__multadd>
 8009754:	4601      	mov	r1, r0
 8009756:	4606      	mov	r6, r0
 8009758:	ee18 0a10 	vmov	r0, s16
 800975c:	f000 fbe0 	bl	8009f20 <__mcmp>
 8009760:	2800      	cmp	r0, #0
 8009762:	f73f adbb 	bgt.w	80092dc <_dtoa_r+0x4b4>
 8009766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009768:	9d01      	ldr	r5, [sp, #4]
 800976a:	43db      	mvns	r3, r3
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	4631      	mov	r1, r6
 8009774:	4620      	mov	r0, r4
 8009776:	f000 f991 	bl	8009a9c <_Bfree>
 800977a:	2f00      	cmp	r7, #0
 800977c:	f43f aea4 	beq.w	80094c8 <_dtoa_r+0x6a0>
 8009780:	f1b8 0f00 	cmp.w	r8, #0
 8009784:	d005      	beq.n	8009792 <_dtoa_r+0x96a>
 8009786:	45b8      	cmp	r8, r7
 8009788:	d003      	beq.n	8009792 <_dtoa_r+0x96a>
 800978a:	4641      	mov	r1, r8
 800978c:	4620      	mov	r0, r4
 800978e:	f000 f985 	bl	8009a9c <_Bfree>
 8009792:	4639      	mov	r1, r7
 8009794:	4620      	mov	r0, r4
 8009796:	f000 f981 	bl	8009a9c <_Bfree>
 800979a:	e695      	b.n	80094c8 <_dtoa_r+0x6a0>
 800979c:	2600      	movs	r6, #0
 800979e:	4637      	mov	r7, r6
 80097a0:	e7e1      	b.n	8009766 <_dtoa_r+0x93e>
 80097a2:	9700      	str	r7, [sp, #0]
 80097a4:	4637      	mov	r7, r6
 80097a6:	e599      	b.n	80092dc <_dtoa_r+0x4b4>
 80097a8:	40240000 	.word	0x40240000
 80097ac:	9b08      	ldr	r3, [sp, #32]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80ca 	beq.w	8009948 <_dtoa_r+0xb20>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	9302      	str	r3, [sp, #8]
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	dd05      	ble.n	80097c8 <_dtoa_r+0x9a0>
 80097bc:	4639      	mov	r1, r7
 80097be:	462a      	mov	r2, r5
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 fb3d 	bl	8009e40 <__lshift>
 80097c6:	4607      	mov	r7, r0
 80097c8:	f1b8 0f00 	cmp.w	r8, #0
 80097cc:	d05b      	beq.n	8009886 <_dtoa_r+0xa5e>
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	4620      	mov	r0, r4
 80097d2:	f000 f923 	bl	8009a1c <_Balloc>
 80097d6:	4605      	mov	r5, r0
 80097d8:	b928      	cbnz	r0, 80097e6 <_dtoa_r+0x9be>
 80097da:	4b87      	ldr	r3, [pc, #540]	; (80099f8 <_dtoa_r+0xbd0>)
 80097dc:	4602      	mov	r2, r0
 80097de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097e2:	f7ff bb3b 	b.w	8008e5c <_dtoa_r+0x34>
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	3202      	adds	r2, #2
 80097ea:	0092      	lsls	r2, r2, #2
 80097ec:	f107 010c 	add.w	r1, r7, #12
 80097f0:	300c      	adds	r0, #12
 80097f2:	f7fe fded 	bl	80083d0 <memcpy>
 80097f6:	2201      	movs	r2, #1
 80097f8:	4629      	mov	r1, r5
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 fb20 	bl	8009e40 <__lshift>
 8009800:	9b01      	ldr	r3, [sp, #4]
 8009802:	f103 0901 	add.w	r9, r3, #1
 8009806:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800980a:	4413      	add	r3, r2
 800980c:	9305      	str	r3, [sp, #20]
 800980e:	f00a 0301 	and.w	r3, sl, #1
 8009812:	46b8      	mov	r8, r7
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	4607      	mov	r7, r0
 8009818:	4631      	mov	r1, r6
 800981a:	ee18 0a10 	vmov	r0, s16
 800981e:	f7ff fa77 	bl	8008d10 <quorem>
 8009822:	4641      	mov	r1, r8
 8009824:	9002      	str	r0, [sp, #8]
 8009826:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800982a:	ee18 0a10 	vmov	r0, s16
 800982e:	f000 fb77 	bl	8009f20 <__mcmp>
 8009832:	463a      	mov	r2, r7
 8009834:	9003      	str	r0, [sp, #12]
 8009836:	4631      	mov	r1, r6
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fb8d 	bl	8009f58 <__mdiff>
 800983e:	68c2      	ldr	r2, [r0, #12]
 8009840:	f109 3bff 	add.w	fp, r9, #4294967295
 8009844:	4605      	mov	r5, r0
 8009846:	bb02      	cbnz	r2, 800988a <_dtoa_r+0xa62>
 8009848:	4601      	mov	r1, r0
 800984a:	ee18 0a10 	vmov	r0, s16
 800984e:	f000 fb67 	bl	8009f20 <__mcmp>
 8009852:	4602      	mov	r2, r0
 8009854:	4629      	mov	r1, r5
 8009856:	4620      	mov	r0, r4
 8009858:	9207      	str	r2, [sp, #28]
 800985a:	f000 f91f 	bl	8009a9c <_Bfree>
 800985e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009862:	ea43 0102 	orr.w	r1, r3, r2
 8009866:	9b04      	ldr	r3, [sp, #16]
 8009868:	430b      	orrs	r3, r1
 800986a:	464d      	mov	r5, r9
 800986c:	d10f      	bne.n	800988e <_dtoa_r+0xa66>
 800986e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009872:	d02a      	beq.n	80098ca <_dtoa_r+0xaa2>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	dd02      	ble.n	8009880 <_dtoa_r+0xa58>
 800987a:	9b02      	ldr	r3, [sp, #8]
 800987c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009880:	f88b a000 	strb.w	sl, [fp]
 8009884:	e775      	b.n	8009772 <_dtoa_r+0x94a>
 8009886:	4638      	mov	r0, r7
 8009888:	e7ba      	b.n	8009800 <_dtoa_r+0x9d8>
 800988a:	2201      	movs	r2, #1
 800988c:	e7e2      	b.n	8009854 <_dtoa_r+0xa2c>
 800988e:	9b03      	ldr	r3, [sp, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	db04      	blt.n	800989e <_dtoa_r+0xa76>
 8009894:	9906      	ldr	r1, [sp, #24]
 8009896:	430b      	orrs	r3, r1
 8009898:	9904      	ldr	r1, [sp, #16]
 800989a:	430b      	orrs	r3, r1
 800989c:	d122      	bne.n	80098e4 <_dtoa_r+0xabc>
 800989e:	2a00      	cmp	r2, #0
 80098a0:	ddee      	ble.n	8009880 <_dtoa_r+0xa58>
 80098a2:	ee18 1a10 	vmov	r1, s16
 80098a6:	2201      	movs	r2, #1
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fac9 	bl	8009e40 <__lshift>
 80098ae:	4631      	mov	r1, r6
 80098b0:	ee08 0a10 	vmov	s16, r0
 80098b4:	f000 fb34 	bl	8009f20 <__mcmp>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	dc03      	bgt.n	80098c4 <_dtoa_r+0xa9c>
 80098bc:	d1e0      	bne.n	8009880 <_dtoa_r+0xa58>
 80098be:	f01a 0f01 	tst.w	sl, #1
 80098c2:	d0dd      	beq.n	8009880 <_dtoa_r+0xa58>
 80098c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098c8:	d1d7      	bne.n	800987a <_dtoa_r+0xa52>
 80098ca:	2339      	movs	r3, #57	; 0x39
 80098cc:	f88b 3000 	strb.w	r3, [fp]
 80098d0:	462b      	mov	r3, r5
 80098d2:	461d      	mov	r5, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098da:	2a39      	cmp	r2, #57	; 0x39
 80098dc:	d071      	beq.n	80099c2 <_dtoa_r+0xb9a>
 80098de:	3201      	adds	r2, #1
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	e746      	b.n	8009772 <_dtoa_r+0x94a>
 80098e4:	2a00      	cmp	r2, #0
 80098e6:	dd07      	ble.n	80098f8 <_dtoa_r+0xad0>
 80098e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098ec:	d0ed      	beq.n	80098ca <_dtoa_r+0xaa2>
 80098ee:	f10a 0301 	add.w	r3, sl, #1
 80098f2:	f88b 3000 	strb.w	r3, [fp]
 80098f6:	e73c      	b.n	8009772 <_dtoa_r+0x94a>
 80098f8:	9b05      	ldr	r3, [sp, #20]
 80098fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098fe:	4599      	cmp	r9, r3
 8009900:	d047      	beq.n	8009992 <_dtoa_r+0xb6a>
 8009902:	ee18 1a10 	vmov	r1, s16
 8009906:	2300      	movs	r3, #0
 8009908:	220a      	movs	r2, #10
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f8e8 	bl	8009ae0 <__multadd>
 8009910:	45b8      	cmp	r8, r7
 8009912:	ee08 0a10 	vmov	s16, r0
 8009916:	f04f 0300 	mov.w	r3, #0
 800991a:	f04f 020a 	mov.w	r2, #10
 800991e:	4641      	mov	r1, r8
 8009920:	4620      	mov	r0, r4
 8009922:	d106      	bne.n	8009932 <_dtoa_r+0xb0a>
 8009924:	f000 f8dc 	bl	8009ae0 <__multadd>
 8009928:	4680      	mov	r8, r0
 800992a:	4607      	mov	r7, r0
 800992c:	f109 0901 	add.w	r9, r9, #1
 8009930:	e772      	b.n	8009818 <_dtoa_r+0x9f0>
 8009932:	f000 f8d5 	bl	8009ae0 <__multadd>
 8009936:	4639      	mov	r1, r7
 8009938:	4680      	mov	r8, r0
 800993a:	2300      	movs	r3, #0
 800993c:	220a      	movs	r2, #10
 800993e:	4620      	mov	r0, r4
 8009940:	f000 f8ce 	bl	8009ae0 <__multadd>
 8009944:	4607      	mov	r7, r0
 8009946:	e7f1      	b.n	800992c <_dtoa_r+0xb04>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	9302      	str	r3, [sp, #8]
 800994c:	9d01      	ldr	r5, [sp, #4]
 800994e:	ee18 0a10 	vmov	r0, s16
 8009952:	4631      	mov	r1, r6
 8009954:	f7ff f9dc 	bl	8008d10 <quorem>
 8009958:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	f805 ab01 	strb.w	sl, [r5], #1
 8009962:	1aea      	subs	r2, r5, r3
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	4293      	cmp	r3, r2
 8009968:	dd09      	ble.n	800997e <_dtoa_r+0xb56>
 800996a:	ee18 1a10 	vmov	r1, s16
 800996e:	2300      	movs	r3, #0
 8009970:	220a      	movs	r2, #10
 8009972:	4620      	mov	r0, r4
 8009974:	f000 f8b4 	bl	8009ae0 <__multadd>
 8009978:	ee08 0a10 	vmov	s16, r0
 800997c:	e7e7      	b.n	800994e <_dtoa_r+0xb26>
 800997e:	9b02      	ldr	r3, [sp, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	bfc8      	it	gt
 8009984:	461d      	movgt	r5, r3
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	bfd8      	it	le
 800998a:	2501      	movle	r5, #1
 800998c:	441d      	add	r5, r3
 800998e:	f04f 0800 	mov.w	r8, #0
 8009992:	ee18 1a10 	vmov	r1, s16
 8009996:	2201      	movs	r2, #1
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fa51 	bl	8009e40 <__lshift>
 800999e:	4631      	mov	r1, r6
 80099a0:	ee08 0a10 	vmov	s16, r0
 80099a4:	f000 fabc 	bl	8009f20 <__mcmp>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	dc91      	bgt.n	80098d0 <_dtoa_r+0xaa8>
 80099ac:	d102      	bne.n	80099b4 <_dtoa_r+0xb8c>
 80099ae:	f01a 0f01 	tst.w	sl, #1
 80099b2:	d18d      	bne.n	80098d0 <_dtoa_r+0xaa8>
 80099b4:	462b      	mov	r3, r5
 80099b6:	461d      	mov	r5, r3
 80099b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099bc:	2a30      	cmp	r2, #48	; 0x30
 80099be:	d0fa      	beq.n	80099b6 <_dtoa_r+0xb8e>
 80099c0:	e6d7      	b.n	8009772 <_dtoa_r+0x94a>
 80099c2:	9a01      	ldr	r2, [sp, #4]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d184      	bne.n	80098d2 <_dtoa_r+0xaaa>
 80099c8:	9b00      	ldr	r3, [sp, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	2331      	movs	r3, #49	; 0x31
 80099d0:	7013      	strb	r3, [r2, #0]
 80099d2:	e6ce      	b.n	8009772 <_dtoa_r+0x94a>
 80099d4:	4b09      	ldr	r3, [pc, #36]	; (80099fc <_dtoa_r+0xbd4>)
 80099d6:	f7ff ba95 	b.w	8008f04 <_dtoa_r+0xdc>
 80099da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f47f aa6e 	bne.w	8008ebe <_dtoa_r+0x96>
 80099e2:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <_dtoa_r+0xbd8>)
 80099e4:	f7ff ba8e 	b.w	8008f04 <_dtoa_r+0xdc>
 80099e8:	9b02      	ldr	r3, [sp, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	dcae      	bgt.n	800994c <_dtoa_r+0xb24>
 80099ee:	9b06      	ldr	r3, [sp, #24]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	f73f aea8 	bgt.w	8009746 <_dtoa_r+0x91e>
 80099f6:	e7a9      	b.n	800994c <_dtoa_r+0xb24>
 80099f8:	0800b3fb 	.word	0x0800b3fb
 80099fc:	0800b358 	.word	0x0800b358
 8009a00:	0800b37c 	.word	0x0800b37c

08009a04 <_localeconv_r>:
 8009a04:	4800      	ldr	r0, [pc, #0]	; (8009a08 <_localeconv_r+0x4>)
 8009a06:	4770      	bx	lr
 8009a08:	20000538 	.word	0x20000538

08009a0c <malloc>:
 8009a0c:	4b02      	ldr	r3, [pc, #8]	; (8009a18 <malloc+0xc>)
 8009a0e:	4601      	mov	r1, r0
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	f000 bc09 	b.w	800a228 <_malloc_r>
 8009a16:	bf00      	nop
 8009a18:	200003e4 	.word	0x200003e4

08009a1c <_Balloc>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a20:	4604      	mov	r4, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	b976      	cbnz	r6, 8009a44 <_Balloc+0x28>
 8009a26:	2010      	movs	r0, #16
 8009a28:	f7ff fff0 	bl	8009a0c <malloc>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8009a30:	b920      	cbnz	r0, 8009a3c <_Balloc+0x20>
 8009a32:	4b18      	ldr	r3, [pc, #96]	; (8009a94 <_Balloc+0x78>)
 8009a34:	4818      	ldr	r0, [pc, #96]	; (8009a98 <_Balloc+0x7c>)
 8009a36:	2166      	movs	r1, #102	; 0x66
 8009a38:	f000 fdd6 	bl	800a5e8 <__assert_func>
 8009a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a40:	6006      	str	r6, [r0, #0]
 8009a42:	60c6      	str	r6, [r0, #12]
 8009a44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a46:	68f3      	ldr	r3, [r6, #12]
 8009a48:	b183      	cbz	r3, 8009a6c <_Balloc+0x50>
 8009a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a52:	b9b8      	cbnz	r0, 8009a84 <_Balloc+0x68>
 8009a54:	2101      	movs	r1, #1
 8009a56:	fa01 f605 	lsl.w	r6, r1, r5
 8009a5a:	1d72      	adds	r2, r6, #5
 8009a5c:	0092      	lsls	r2, r2, #2
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 fb60 	bl	800a124 <_calloc_r>
 8009a64:	b160      	cbz	r0, 8009a80 <_Balloc+0x64>
 8009a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a6a:	e00e      	b.n	8009a8a <_Balloc+0x6e>
 8009a6c:	2221      	movs	r2, #33	; 0x21
 8009a6e:	2104      	movs	r1, #4
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fb57 	bl	800a124 <_calloc_r>
 8009a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a78:	60f0      	str	r0, [r6, #12]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e4      	bne.n	8009a4a <_Balloc+0x2e>
 8009a80:	2000      	movs	r0, #0
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	6802      	ldr	r2, [r0, #0]
 8009a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a90:	e7f7      	b.n	8009a82 <_Balloc+0x66>
 8009a92:	bf00      	nop
 8009a94:	0800b389 	.word	0x0800b389
 8009a98:	0800b40c 	.word	0x0800b40c

08009a9c <_Bfree>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	b976      	cbnz	r6, 8009ac4 <_Bfree+0x28>
 8009aa6:	2010      	movs	r0, #16
 8009aa8:	f7ff ffb0 	bl	8009a0c <malloc>
 8009aac:	4602      	mov	r2, r0
 8009aae:	6268      	str	r0, [r5, #36]	; 0x24
 8009ab0:	b920      	cbnz	r0, 8009abc <_Bfree+0x20>
 8009ab2:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <_Bfree+0x3c>)
 8009ab4:	4809      	ldr	r0, [pc, #36]	; (8009adc <_Bfree+0x40>)
 8009ab6:	218a      	movs	r1, #138	; 0x8a
 8009ab8:	f000 fd96 	bl	800a5e8 <__assert_func>
 8009abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ac0:	6006      	str	r6, [r0, #0]
 8009ac2:	60c6      	str	r6, [r0, #12]
 8009ac4:	b13c      	cbz	r4, 8009ad6 <_Bfree+0x3a>
 8009ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ac8:	6862      	ldr	r2, [r4, #4]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ad0:	6021      	str	r1, [r4, #0]
 8009ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}
 8009ad8:	0800b389 	.word	0x0800b389
 8009adc:	0800b40c 	.word	0x0800b40c

08009ae0 <__multadd>:
 8009ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae4:	690d      	ldr	r5, [r1, #16]
 8009ae6:	4607      	mov	r7, r0
 8009ae8:	460c      	mov	r4, r1
 8009aea:	461e      	mov	r6, r3
 8009aec:	f101 0c14 	add.w	ip, r1, #20
 8009af0:	2000      	movs	r0, #0
 8009af2:	f8dc 3000 	ldr.w	r3, [ip]
 8009af6:	b299      	uxth	r1, r3
 8009af8:	fb02 6101 	mla	r1, r2, r1, r6
 8009afc:	0c1e      	lsrs	r6, r3, #16
 8009afe:	0c0b      	lsrs	r3, r1, #16
 8009b00:	fb02 3306 	mla	r3, r2, r6, r3
 8009b04:	b289      	uxth	r1, r1
 8009b06:	3001      	adds	r0, #1
 8009b08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b0c:	4285      	cmp	r5, r0
 8009b0e:	f84c 1b04 	str.w	r1, [ip], #4
 8009b12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b16:	dcec      	bgt.n	8009af2 <__multadd+0x12>
 8009b18:	b30e      	cbz	r6, 8009b5e <__multadd+0x7e>
 8009b1a:	68a3      	ldr	r3, [r4, #8]
 8009b1c:	42ab      	cmp	r3, r5
 8009b1e:	dc19      	bgt.n	8009b54 <__multadd+0x74>
 8009b20:	6861      	ldr	r1, [r4, #4]
 8009b22:	4638      	mov	r0, r7
 8009b24:	3101      	adds	r1, #1
 8009b26:	f7ff ff79 	bl	8009a1c <_Balloc>
 8009b2a:	4680      	mov	r8, r0
 8009b2c:	b928      	cbnz	r0, 8009b3a <__multadd+0x5a>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <__multadd+0x84>)
 8009b32:	480d      	ldr	r0, [pc, #52]	; (8009b68 <__multadd+0x88>)
 8009b34:	21b5      	movs	r1, #181	; 0xb5
 8009b36:	f000 fd57 	bl	800a5e8 <__assert_func>
 8009b3a:	6922      	ldr	r2, [r4, #16]
 8009b3c:	3202      	adds	r2, #2
 8009b3e:	f104 010c 	add.w	r1, r4, #12
 8009b42:	0092      	lsls	r2, r2, #2
 8009b44:	300c      	adds	r0, #12
 8009b46:	f7fe fc43 	bl	80083d0 <memcpy>
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f7ff ffa5 	bl	8009a9c <_Bfree>
 8009b52:	4644      	mov	r4, r8
 8009b54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b58:	3501      	adds	r5, #1
 8009b5a:	615e      	str	r6, [r3, #20]
 8009b5c:	6125      	str	r5, [r4, #16]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b64:	0800b3fb 	.word	0x0800b3fb
 8009b68:	0800b40c 	.word	0x0800b40c

08009b6c <__hi0bits>:
 8009b6c:	0c03      	lsrs	r3, r0, #16
 8009b6e:	041b      	lsls	r3, r3, #16
 8009b70:	b9d3      	cbnz	r3, 8009ba8 <__hi0bits+0x3c>
 8009b72:	0400      	lsls	r0, r0, #16
 8009b74:	2310      	movs	r3, #16
 8009b76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b7a:	bf04      	itt	eq
 8009b7c:	0200      	lsleq	r0, r0, #8
 8009b7e:	3308      	addeq	r3, #8
 8009b80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b84:	bf04      	itt	eq
 8009b86:	0100      	lsleq	r0, r0, #4
 8009b88:	3304      	addeq	r3, #4
 8009b8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b8e:	bf04      	itt	eq
 8009b90:	0080      	lsleq	r0, r0, #2
 8009b92:	3302      	addeq	r3, #2
 8009b94:	2800      	cmp	r0, #0
 8009b96:	db05      	blt.n	8009ba4 <__hi0bits+0x38>
 8009b98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b9c:	f103 0301 	add.w	r3, r3, #1
 8009ba0:	bf08      	it	eq
 8009ba2:	2320      	moveq	r3, #32
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	4770      	bx	lr
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e7e4      	b.n	8009b76 <__hi0bits+0xa>

08009bac <__lo0bits>:
 8009bac:	6803      	ldr	r3, [r0, #0]
 8009bae:	f013 0207 	ands.w	r2, r3, #7
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	d00b      	beq.n	8009bce <__lo0bits+0x22>
 8009bb6:	07da      	lsls	r2, r3, #31
 8009bb8:	d423      	bmi.n	8009c02 <__lo0bits+0x56>
 8009bba:	0798      	lsls	r0, r3, #30
 8009bbc:	bf49      	itett	mi
 8009bbe:	085b      	lsrmi	r3, r3, #1
 8009bc0:	089b      	lsrpl	r3, r3, #2
 8009bc2:	2001      	movmi	r0, #1
 8009bc4:	600b      	strmi	r3, [r1, #0]
 8009bc6:	bf5c      	itt	pl
 8009bc8:	600b      	strpl	r3, [r1, #0]
 8009bca:	2002      	movpl	r0, #2
 8009bcc:	4770      	bx	lr
 8009bce:	b298      	uxth	r0, r3
 8009bd0:	b9a8      	cbnz	r0, 8009bfe <__lo0bits+0x52>
 8009bd2:	0c1b      	lsrs	r3, r3, #16
 8009bd4:	2010      	movs	r0, #16
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	b90a      	cbnz	r2, 8009bde <__lo0bits+0x32>
 8009bda:	3008      	adds	r0, #8
 8009bdc:	0a1b      	lsrs	r3, r3, #8
 8009bde:	071a      	lsls	r2, r3, #28
 8009be0:	bf04      	itt	eq
 8009be2:	091b      	lsreq	r3, r3, #4
 8009be4:	3004      	addeq	r0, #4
 8009be6:	079a      	lsls	r2, r3, #30
 8009be8:	bf04      	itt	eq
 8009bea:	089b      	lsreq	r3, r3, #2
 8009bec:	3002      	addeq	r0, #2
 8009bee:	07da      	lsls	r2, r3, #31
 8009bf0:	d403      	bmi.n	8009bfa <__lo0bits+0x4e>
 8009bf2:	085b      	lsrs	r3, r3, #1
 8009bf4:	f100 0001 	add.w	r0, r0, #1
 8009bf8:	d005      	beq.n	8009c06 <__lo0bits+0x5a>
 8009bfa:	600b      	str	r3, [r1, #0]
 8009bfc:	4770      	bx	lr
 8009bfe:	4610      	mov	r0, r2
 8009c00:	e7e9      	b.n	8009bd6 <__lo0bits+0x2a>
 8009c02:	2000      	movs	r0, #0
 8009c04:	4770      	bx	lr
 8009c06:	2020      	movs	r0, #32
 8009c08:	4770      	bx	lr
	...

08009c0c <__i2b>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	460c      	mov	r4, r1
 8009c10:	2101      	movs	r1, #1
 8009c12:	f7ff ff03 	bl	8009a1c <_Balloc>
 8009c16:	4602      	mov	r2, r0
 8009c18:	b928      	cbnz	r0, 8009c26 <__i2b+0x1a>
 8009c1a:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <__i2b+0x24>)
 8009c1c:	4805      	ldr	r0, [pc, #20]	; (8009c34 <__i2b+0x28>)
 8009c1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c22:	f000 fce1 	bl	800a5e8 <__assert_func>
 8009c26:	2301      	movs	r3, #1
 8009c28:	6144      	str	r4, [r0, #20]
 8009c2a:	6103      	str	r3, [r0, #16]
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800b3fb 	.word	0x0800b3fb
 8009c34:	0800b40c 	.word	0x0800b40c

08009c38 <__multiply>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	4691      	mov	r9, r2
 8009c3e:	690a      	ldr	r2, [r1, #16]
 8009c40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	bfb8      	it	lt
 8009c48:	460b      	movlt	r3, r1
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	bfbc      	itt	lt
 8009c4e:	464c      	movlt	r4, r9
 8009c50:	4699      	movlt	r9, r3
 8009c52:	6927      	ldr	r7, [r4, #16]
 8009c54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c58:	68a3      	ldr	r3, [r4, #8]
 8009c5a:	6861      	ldr	r1, [r4, #4]
 8009c5c:	eb07 060a 	add.w	r6, r7, sl
 8009c60:	42b3      	cmp	r3, r6
 8009c62:	b085      	sub	sp, #20
 8009c64:	bfb8      	it	lt
 8009c66:	3101      	addlt	r1, #1
 8009c68:	f7ff fed8 	bl	8009a1c <_Balloc>
 8009c6c:	b930      	cbnz	r0, 8009c7c <__multiply+0x44>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	4b44      	ldr	r3, [pc, #272]	; (8009d84 <__multiply+0x14c>)
 8009c72:	4845      	ldr	r0, [pc, #276]	; (8009d88 <__multiply+0x150>)
 8009c74:	f240 115d 	movw	r1, #349	; 0x15d
 8009c78:	f000 fcb6 	bl	800a5e8 <__assert_func>
 8009c7c:	f100 0514 	add.w	r5, r0, #20
 8009c80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c84:	462b      	mov	r3, r5
 8009c86:	2200      	movs	r2, #0
 8009c88:	4543      	cmp	r3, r8
 8009c8a:	d321      	bcc.n	8009cd0 <__multiply+0x98>
 8009c8c:	f104 0314 	add.w	r3, r4, #20
 8009c90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c94:	f109 0314 	add.w	r3, r9, #20
 8009c98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c9c:	9202      	str	r2, [sp, #8]
 8009c9e:	1b3a      	subs	r2, r7, r4
 8009ca0:	3a15      	subs	r2, #21
 8009ca2:	f022 0203 	bic.w	r2, r2, #3
 8009ca6:	3204      	adds	r2, #4
 8009ca8:	f104 0115 	add.w	r1, r4, #21
 8009cac:	428f      	cmp	r7, r1
 8009cae:	bf38      	it	cc
 8009cb0:	2204      	movcc	r2, #4
 8009cb2:	9201      	str	r2, [sp, #4]
 8009cb4:	9a02      	ldr	r2, [sp, #8]
 8009cb6:	9303      	str	r3, [sp, #12]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d80c      	bhi.n	8009cd6 <__multiply+0x9e>
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	dd03      	ble.n	8009cc8 <__multiply+0x90>
 8009cc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d05a      	beq.n	8009d7e <__multiply+0x146>
 8009cc8:	6106      	str	r6, [r0, #16]
 8009cca:	b005      	add	sp, #20
 8009ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd0:	f843 2b04 	str.w	r2, [r3], #4
 8009cd4:	e7d8      	b.n	8009c88 <__multiply+0x50>
 8009cd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009cda:	f1ba 0f00 	cmp.w	sl, #0
 8009cde:	d024      	beq.n	8009d2a <__multiply+0xf2>
 8009ce0:	f104 0e14 	add.w	lr, r4, #20
 8009ce4:	46a9      	mov	r9, r5
 8009ce6:	f04f 0c00 	mov.w	ip, #0
 8009cea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cee:	f8d9 1000 	ldr.w	r1, [r9]
 8009cf2:	fa1f fb82 	uxth.w	fp, r2
 8009cf6:	b289      	uxth	r1, r1
 8009cf8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d00:	f8d9 2000 	ldr.w	r2, [r9]
 8009d04:	4461      	add	r1, ip
 8009d06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d12:	b289      	uxth	r1, r1
 8009d14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d18:	4577      	cmp	r7, lr
 8009d1a:	f849 1b04 	str.w	r1, [r9], #4
 8009d1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d22:	d8e2      	bhi.n	8009cea <__multiply+0xb2>
 8009d24:	9a01      	ldr	r2, [sp, #4]
 8009d26:	f845 c002 	str.w	ip, [r5, r2]
 8009d2a:	9a03      	ldr	r2, [sp, #12]
 8009d2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d30:	3304      	adds	r3, #4
 8009d32:	f1b9 0f00 	cmp.w	r9, #0
 8009d36:	d020      	beq.n	8009d7a <__multiply+0x142>
 8009d38:	6829      	ldr	r1, [r5, #0]
 8009d3a:	f104 0c14 	add.w	ip, r4, #20
 8009d3e:	46ae      	mov	lr, r5
 8009d40:	f04f 0a00 	mov.w	sl, #0
 8009d44:	f8bc b000 	ldrh.w	fp, [ip]
 8009d48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d4c:	fb09 220b 	mla	r2, r9, fp, r2
 8009d50:	4492      	add	sl, r2
 8009d52:	b289      	uxth	r1, r1
 8009d54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d58:	f84e 1b04 	str.w	r1, [lr], #4
 8009d5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d60:	f8be 1000 	ldrh.w	r1, [lr]
 8009d64:	0c12      	lsrs	r2, r2, #16
 8009d66:	fb09 1102 	mla	r1, r9, r2, r1
 8009d6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d6e:	4567      	cmp	r7, ip
 8009d70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d74:	d8e6      	bhi.n	8009d44 <__multiply+0x10c>
 8009d76:	9a01      	ldr	r2, [sp, #4]
 8009d78:	50a9      	str	r1, [r5, r2]
 8009d7a:	3504      	adds	r5, #4
 8009d7c:	e79a      	b.n	8009cb4 <__multiply+0x7c>
 8009d7e:	3e01      	subs	r6, #1
 8009d80:	e79c      	b.n	8009cbc <__multiply+0x84>
 8009d82:	bf00      	nop
 8009d84:	0800b3fb 	.word	0x0800b3fb
 8009d88:	0800b40c 	.word	0x0800b40c

08009d8c <__pow5mult>:
 8009d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d90:	4615      	mov	r5, r2
 8009d92:	f012 0203 	ands.w	r2, r2, #3
 8009d96:	4606      	mov	r6, r0
 8009d98:	460f      	mov	r7, r1
 8009d9a:	d007      	beq.n	8009dac <__pow5mult+0x20>
 8009d9c:	4c25      	ldr	r4, [pc, #148]	; (8009e34 <__pow5mult+0xa8>)
 8009d9e:	3a01      	subs	r2, #1
 8009da0:	2300      	movs	r3, #0
 8009da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009da6:	f7ff fe9b 	bl	8009ae0 <__multadd>
 8009daa:	4607      	mov	r7, r0
 8009dac:	10ad      	asrs	r5, r5, #2
 8009dae:	d03d      	beq.n	8009e2c <__pow5mult+0xa0>
 8009db0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009db2:	b97c      	cbnz	r4, 8009dd4 <__pow5mult+0x48>
 8009db4:	2010      	movs	r0, #16
 8009db6:	f7ff fe29 	bl	8009a0c <malloc>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	6270      	str	r0, [r6, #36]	; 0x24
 8009dbe:	b928      	cbnz	r0, 8009dcc <__pow5mult+0x40>
 8009dc0:	4b1d      	ldr	r3, [pc, #116]	; (8009e38 <__pow5mult+0xac>)
 8009dc2:	481e      	ldr	r0, [pc, #120]	; (8009e3c <__pow5mult+0xb0>)
 8009dc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009dc8:	f000 fc0e 	bl	800a5e8 <__assert_func>
 8009dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dd0:	6004      	str	r4, [r0, #0]
 8009dd2:	60c4      	str	r4, [r0, #12]
 8009dd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009dd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ddc:	b94c      	cbnz	r4, 8009df2 <__pow5mult+0x66>
 8009dde:	f240 2171 	movw	r1, #625	; 0x271
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ff12 	bl	8009c0c <__i2b>
 8009de8:	2300      	movs	r3, #0
 8009dea:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dee:	4604      	mov	r4, r0
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	f04f 0900 	mov.w	r9, #0
 8009df6:	07eb      	lsls	r3, r5, #31
 8009df8:	d50a      	bpl.n	8009e10 <__pow5mult+0x84>
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f7ff ff1a 	bl	8009c38 <__multiply>
 8009e04:	4639      	mov	r1, r7
 8009e06:	4680      	mov	r8, r0
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff fe47 	bl	8009a9c <_Bfree>
 8009e0e:	4647      	mov	r7, r8
 8009e10:	106d      	asrs	r5, r5, #1
 8009e12:	d00b      	beq.n	8009e2c <__pow5mult+0xa0>
 8009e14:	6820      	ldr	r0, [r4, #0]
 8009e16:	b938      	cbnz	r0, 8009e28 <__pow5mult+0x9c>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff ff0b 	bl	8009c38 <__multiply>
 8009e22:	6020      	str	r0, [r4, #0]
 8009e24:	f8c0 9000 	str.w	r9, [r0]
 8009e28:	4604      	mov	r4, r0
 8009e2a:	e7e4      	b.n	8009df6 <__pow5mult+0x6a>
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e32:	bf00      	nop
 8009e34:	0800b558 	.word	0x0800b558
 8009e38:	0800b389 	.word	0x0800b389
 8009e3c:	0800b40c 	.word	0x0800b40c

08009e40 <__lshift>:
 8009e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e44:	460c      	mov	r4, r1
 8009e46:	6849      	ldr	r1, [r1, #4]
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	4607      	mov	r7, r0
 8009e52:	4691      	mov	r9, r2
 8009e54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e58:	f108 0601 	add.w	r6, r8, #1
 8009e5c:	42b3      	cmp	r3, r6
 8009e5e:	db0b      	blt.n	8009e78 <__lshift+0x38>
 8009e60:	4638      	mov	r0, r7
 8009e62:	f7ff fddb 	bl	8009a1c <_Balloc>
 8009e66:	4605      	mov	r5, r0
 8009e68:	b948      	cbnz	r0, 8009e7e <__lshift+0x3e>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <__lshift+0xd8>)
 8009e6e:	482b      	ldr	r0, [pc, #172]	; (8009f1c <__lshift+0xdc>)
 8009e70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e74:	f000 fbb8 	bl	800a5e8 <__assert_func>
 8009e78:	3101      	adds	r1, #1
 8009e7a:	005b      	lsls	r3, r3, #1
 8009e7c:	e7ee      	b.n	8009e5c <__lshift+0x1c>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f100 0114 	add.w	r1, r0, #20
 8009e84:	f100 0210 	add.w	r2, r0, #16
 8009e88:	4618      	mov	r0, r3
 8009e8a:	4553      	cmp	r3, sl
 8009e8c:	db37      	blt.n	8009efe <__lshift+0xbe>
 8009e8e:	6920      	ldr	r0, [r4, #16]
 8009e90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e94:	f104 0314 	add.w	r3, r4, #20
 8009e98:	f019 091f 	ands.w	r9, r9, #31
 8009e9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ea0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ea4:	d02f      	beq.n	8009f06 <__lshift+0xc6>
 8009ea6:	f1c9 0e20 	rsb	lr, r9, #32
 8009eaa:	468a      	mov	sl, r1
 8009eac:	f04f 0c00 	mov.w	ip, #0
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	fa02 f209 	lsl.w	r2, r2, r9
 8009eb6:	ea42 020c 	orr.w	r2, r2, ip
 8009eba:	f84a 2b04 	str.w	r2, [sl], #4
 8009ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec2:	4298      	cmp	r0, r3
 8009ec4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ec8:	d8f2      	bhi.n	8009eb0 <__lshift+0x70>
 8009eca:	1b03      	subs	r3, r0, r4
 8009ecc:	3b15      	subs	r3, #21
 8009ece:	f023 0303 	bic.w	r3, r3, #3
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	f104 0215 	add.w	r2, r4, #21
 8009ed8:	4290      	cmp	r0, r2
 8009eda:	bf38      	it	cc
 8009edc:	2304      	movcc	r3, #4
 8009ede:	f841 c003 	str.w	ip, [r1, r3]
 8009ee2:	f1bc 0f00 	cmp.w	ip, #0
 8009ee6:	d001      	beq.n	8009eec <__lshift+0xac>
 8009ee8:	f108 0602 	add.w	r6, r8, #2
 8009eec:	3e01      	subs	r6, #1
 8009eee:	4638      	mov	r0, r7
 8009ef0:	612e      	str	r6, [r5, #16]
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	f7ff fdd2 	bl	8009a9c <_Bfree>
 8009ef8:	4628      	mov	r0, r5
 8009efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f02:	3301      	adds	r3, #1
 8009f04:	e7c1      	b.n	8009e8a <__lshift+0x4a>
 8009f06:	3904      	subs	r1, #4
 8009f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f10:	4298      	cmp	r0, r3
 8009f12:	d8f9      	bhi.n	8009f08 <__lshift+0xc8>
 8009f14:	e7ea      	b.n	8009eec <__lshift+0xac>
 8009f16:	bf00      	nop
 8009f18:	0800b3fb 	.word	0x0800b3fb
 8009f1c:	0800b40c 	.word	0x0800b40c

08009f20 <__mcmp>:
 8009f20:	b530      	push	{r4, r5, lr}
 8009f22:	6902      	ldr	r2, [r0, #16]
 8009f24:	690c      	ldr	r4, [r1, #16]
 8009f26:	1b12      	subs	r2, r2, r4
 8009f28:	d10e      	bne.n	8009f48 <__mcmp+0x28>
 8009f2a:	f100 0314 	add.w	r3, r0, #20
 8009f2e:	3114      	adds	r1, #20
 8009f30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f40:	42a5      	cmp	r5, r4
 8009f42:	d003      	beq.n	8009f4c <__mcmp+0x2c>
 8009f44:	d305      	bcc.n	8009f52 <__mcmp+0x32>
 8009f46:	2201      	movs	r2, #1
 8009f48:	4610      	mov	r0, r2
 8009f4a:	bd30      	pop	{r4, r5, pc}
 8009f4c:	4283      	cmp	r3, r0
 8009f4e:	d3f3      	bcc.n	8009f38 <__mcmp+0x18>
 8009f50:	e7fa      	b.n	8009f48 <__mcmp+0x28>
 8009f52:	f04f 32ff 	mov.w	r2, #4294967295
 8009f56:	e7f7      	b.n	8009f48 <__mcmp+0x28>

08009f58 <__mdiff>:
 8009f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	4606      	mov	r6, r0
 8009f60:	4611      	mov	r1, r2
 8009f62:	4620      	mov	r0, r4
 8009f64:	4690      	mov	r8, r2
 8009f66:	f7ff ffdb 	bl	8009f20 <__mcmp>
 8009f6a:	1e05      	subs	r5, r0, #0
 8009f6c:	d110      	bne.n	8009f90 <__mdiff+0x38>
 8009f6e:	4629      	mov	r1, r5
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7ff fd53 	bl	8009a1c <_Balloc>
 8009f76:	b930      	cbnz	r0, 8009f86 <__mdiff+0x2e>
 8009f78:	4b3a      	ldr	r3, [pc, #232]	; (800a064 <__mdiff+0x10c>)
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	f240 2132 	movw	r1, #562	; 0x232
 8009f80:	4839      	ldr	r0, [pc, #228]	; (800a068 <__mdiff+0x110>)
 8009f82:	f000 fb31 	bl	800a5e8 <__assert_func>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f90:	bfa4      	itt	ge
 8009f92:	4643      	movge	r3, r8
 8009f94:	46a0      	movge	r8, r4
 8009f96:	4630      	mov	r0, r6
 8009f98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f9c:	bfa6      	itte	ge
 8009f9e:	461c      	movge	r4, r3
 8009fa0:	2500      	movge	r5, #0
 8009fa2:	2501      	movlt	r5, #1
 8009fa4:	f7ff fd3a 	bl	8009a1c <_Balloc>
 8009fa8:	b920      	cbnz	r0, 8009fb4 <__mdiff+0x5c>
 8009faa:	4b2e      	ldr	r3, [pc, #184]	; (800a064 <__mdiff+0x10c>)
 8009fac:	4602      	mov	r2, r0
 8009fae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009fb2:	e7e5      	b.n	8009f80 <__mdiff+0x28>
 8009fb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fb8:	6926      	ldr	r6, [r4, #16]
 8009fba:	60c5      	str	r5, [r0, #12]
 8009fbc:	f104 0914 	add.w	r9, r4, #20
 8009fc0:	f108 0514 	add.w	r5, r8, #20
 8009fc4:	f100 0e14 	add.w	lr, r0, #20
 8009fc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fd0:	f108 0210 	add.w	r2, r8, #16
 8009fd4:	46f2      	mov	sl, lr
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fe0:	fa1f f883 	uxth.w	r8, r3
 8009fe4:	fa11 f18b 	uxtah	r1, r1, fp
 8009fe8:	0c1b      	lsrs	r3, r3, #16
 8009fea:	eba1 0808 	sub.w	r8, r1, r8
 8009fee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ff2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ff6:	fa1f f888 	uxth.w	r8, r8
 8009ffa:	1419      	asrs	r1, r3, #16
 8009ffc:	454e      	cmp	r6, r9
 8009ffe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a002:	f84a 3b04 	str.w	r3, [sl], #4
 800a006:	d8e7      	bhi.n	8009fd8 <__mdiff+0x80>
 800a008:	1b33      	subs	r3, r6, r4
 800a00a:	3b15      	subs	r3, #21
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	3304      	adds	r3, #4
 800a012:	3415      	adds	r4, #21
 800a014:	42a6      	cmp	r6, r4
 800a016:	bf38      	it	cc
 800a018:	2304      	movcc	r3, #4
 800a01a:	441d      	add	r5, r3
 800a01c:	4473      	add	r3, lr
 800a01e:	469e      	mov	lr, r3
 800a020:	462e      	mov	r6, r5
 800a022:	4566      	cmp	r6, ip
 800a024:	d30e      	bcc.n	800a044 <__mdiff+0xec>
 800a026:	f10c 0203 	add.w	r2, ip, #3
 800a02a:	1b52      	subs	r2, r2, r5
 800a02c:	f022 0203 	bic.w	r2, r2, #3
 800a030:	3d03      	subs	r5, #3
 800a032:	45ac      	cmp	ip, r5
 800a034:	bf38      	it	cc
 800a036:	2200      	movcc	r2, #0
 800a038:	441a      	add	r2, r3
 800a03a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a03e:	b17b      	cbz	r3, 800a060 <__mdiff+0x108>
 800a040:	6107      	str	r7, [r0, #16]
 800a042:	e7a3      	b.n	8009f8c <__mdiff+0x34>
 800a044:	f856 8b04 	ldr.w	r8, [r6], #4
 800a048:	fa11 f288 	uxtah	r2, r1, r8
 800a04c:	1414      	asrs	r4, r2, #16
 800a04e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a052:	b292      	uxth	r2, r2
 800a054:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a058:	f84e 2b04 	str.w	r2, [lr], #4
 800a05c:	1421      	asrs	r1, r4, #16
 800a05e:	e7e0      	b.n	800a022 <__mdiff+0xca>
 800a060:	3f01      	subs	r7, #1
 800a062:	e7ea      	b.n	800a03a <__mdiff+0xe2>
 800a064:	0800b3fb 	.word	0x0800b3fb
 800a068:	0800b40c 	.word	0x0800b40c

0800a06c <__d2b>:
 800a06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a070:	4689      	mov	r9, r1
 800a072:	2101      	movs	r1, #1
 800a074:	ec57 6b10 	vmov	r6, r7, d0
 800a078:	4690      	mov	r8, r2
 800a07a:	f7ff fccf 	bl	8009a1c <_Balloc>
 800a07e:	4604      	mov	r4, r0
 800a080:	b930      	cbnz	r0, 800a090 <__d2b+0x24>
 800a082:	4602      	mov	r2, r0
 800a084:	4b25      	ldr	r3, [pc, #148]	; (800a11c <__d2b+0xb0>)
 800a086:	4826      	ldr	r0, [pc, #152]	; (800a120 <__d2b+0xb4>)
 800a088:	f240 310a 	movw	r1, #778	; 0x30a
 800a08c:	f000 faac 	bl	800a5e8 <__assert_func>
 800a090:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a094:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a098:	bb35      	cbnz	r5, 800a0e8 <__d2b+0x7c>
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	d028      	beq.n	800a0f2 <__d2b+0x86>
 800a0a0:	4668      	mov	r0, sp
 800a0a2:	9600      	str	r6, [sp, #0]
 800a0a4:	f7ff fd82 	bl	8009bac <__lo0bits>
 800a0a8:	9900      	ldr	r1, [sp, #0]
 800a0aa:	b300      	cbz	r0, 800a0ee <__d2b+0x82>
 800a0ac:	9a01      	ldr	r2, [sp, #4]
 800a0ae:	f1c0 0320 	rsb	r3, r0, #32
 800a0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b6:	430b      	orrs	r3, r1
 800a0b8:	40c2      	lsrs	r2, r0
 800a0ba:	6163      	str	r3, [r4, #20]
 800a0bc:	9201      	str	r2, [sp, #4]
 800a0be:	9b01      	ldr	r3, [sp, #4]
 800a0c0:	61a3      	str	r3, [r4, #24]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bf14      	ite	ne
 800a0c6:	2202      	movne	r2, #2
 800a0c8:	2201      	moveq	r2, #1
 800a0ca:	6122      	str	r2, [r4, #16]
 800a0cc:	b1d5      	cbz	r5, 800a104 <__d2b+0x98>
 800a0ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0d2:	4405      	add	r5, r0
 800a0d4:	f8c9 5000 	str.w	r5, [r9]
 800a0d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0dc:	f8c8 0000 	str.w	r0, [r8]
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	b003      	add	sp, #12
 800a0e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0ec:	e7d5      	b.n	800a09a <__d2b+0x2e>
 800a0ee:	6161      	str	r1, [r4, #20]
 800a0f0:	e7e5      	b.n	800a0be <__d2b+0x52>
 800a0f2:	a801      	add	r0, sp, #4
 800a0f4:	f7ff fd5a 	bl	8009bac <__lo0bits>
 800a0f8:	9b01      	ldr	r3, [sp, #4]
 800a0fa:	6163      	str	r3, [r4, #20]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	6122      	str	r2, [r4, #16]
 800a100:	3020      	adds	r0, #32
 800a102:	e7e3      	b.n	800a0cc <__d2b+0x60>
 800a104:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a108:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a10c:	f8c9 0000 	str.w	r0, [r9]
 800a110:	6918      	ldr	r0, [r3, #16]
 800a112:	f7ff fd2b 	bl	8009b6c <__hi0bits>
 800a116:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a11a:	e7df      	b.n	800a0dc <__d2b+0x70>
 800a11c:	0800b3fb 	.word	0x0800b3fb
 800a120:	0800b40c 	.word	0x0800b40c

0800a124 <_calloc_r>:
 800a124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a126:	fba1 2402 	umull	r2, r4, r1, r2
 800a12a:	b94c      	cbnz	r4, 800a140 <_calloc_r+0x1c>
 800a12c:	4611      	mov	r1, r2
 800a12e:	9201      	str	r2, [sp, #4]
 800a130:	f000 f87a 	bl	800a228 <_malloc_r>
 800a134:	9a01      	ldr	r2, [sp, #4]
 800a136:	4605      	mov	r5, r0
 800a138:	b930      	cbnz	r0, 800a148 <_calloc_r+0x24>
 800a13a:	4628      	mov	r0, r5
 800a13c:	b003      	add	sp, #12
 800a13e:	bd30      	pop	{r4, r5, pc}
 800a140:	220c      	movs	r2, #12
 800a142:	6002      	str	r2, [r0, #0]
 800a144:	2500      	movs	r5, #0
 800a146:	e7f8      	b.n	800a13a <_calloc_r+0x16>
 800a148:	4621      	mov	r1, r4
 800a14a:	f7fe f94f 	bl	80083ec <memset>
 800a14e:	e7f4      	b.n	800a13a <_calloc_r+0x16>

0800a150 <_free_r>:
 800a150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a152:	2900      	cmp	r1, #0
 800a154:	d044      	beq.n	800a1e0 <_free_r+0x90>
 800a156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15a:	9001      	str	r0, [sp, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f1a1 0404 	sub.w	r4, r1, #4
 800a162:	bfb8      	it	lt
 800a164:	18e4      	addlt	r4, r4, r3
 800a166:	f000 fa9b 	bl	800a6a0 <__malloc_lock>
 800a16a:	4a1e      	ldr	r2, [pc, #120]	; (800a1e4 <_free_r+0x94>)
 800a16c:	9801      	ldr	r0, [sp, #4]
 800a16e:	6813      	ldr	r3, [r2, #0]
 800a170:	b933      	cbnz	r3, 800a180 <_free_r+0x30>
 800a172:	6063      	str	r3, [r4, #4]
 800a174:	6014      	str	r4, [r2, #0]
 800a176:	b003      	add	sp, #12
 800a178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a17c:	f000 ba96 	b.w	800a6ac <__malloc_unlock>
 800a180:	42a3      	cmp	r3, r4
 800a182:	d908      	bls.n	800a196 <_free_r+0x46>
 800a184:	6825      	ldr	r5, [r4, #0]
 800a186:	1961      	adds	r1, r4, r5
 800a188:	428b      	cmp	r3, r1
 800a18a:	bf01      	itttt	eq
 800a18c:	6819      	ldreq	r1, [r3, #0]
 800a18e:	685b      	ldreq	r3, [r3, #4]
 800a190:	1949      	addeq	r1, r1, r5
 800a192:	6021      	streq	r1, [r4, #0]
 800a194:	e7ed      	b.n	800a172 <_free_r+0x22>
 800a196:	461a      	mov	r2, r3
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	b10b      	cbz	r3, 800a1a0 <_free_r+0x50>
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	d9fa      	bls.n	800a196 <_free_r+0x46>
 800a1a0:	6811      	ldr	r1, [r2, #0]
 800a1a2:	1855      	adds	r5, r2, r1
 800a1a4:	42a5      	cmp	r5, r4
 800a1a6:	d10b      	bne.n	800a1c0 <_free_r+0x70>
 800a1a8:	6824      	ldr	r4, [r4, #0]
 800a1aa:	4421      	add	r1, r4
 800a1ac:	1854      	adds	r4, r2, r1
 800a1ae:	42a3      	cmp	r3, r4
 800a1b0:	6011      	str	r1, [r2, #0]
 800a1b2:	d1e0      	bne.n	800a176 <_free_r+0x26>
 800a1b4:	681c      	ldr	r4, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	6053      	str	r3, [r2, #4]
 800a1ba:	4421      	add	r1, r4
 800a1bc:	6011      	str	r1, [r2, #0]
 800a1be:	e7da      	b.n	800a176 <_free_r+0x26>
 800a1c0:	d902      	bls.n	800a1c8 <_free_r+0x78>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	6003      	str	r3, [r0, #0]
 800a1c6:	e7d6      	b.n	800a176 <_free_r+0x26>
 800a1c8:	6825      	ldr	r5, [r4, #0]
 800a1ca:	1961      	adds	r1, r4, r5
 800a1cc:	428b      	cmp	r3, r1
 800a1ce:	bf04      	itt	eq
 800a1d0:	6819      	ldreq	r1, [r3, #0]
 800a1d2:	685b      	ldreq	r3, [r3, #4]
 800a1d4:	6063      	str	r3, [r4, #4]
 800a1d6:	bf04      	itt	eq
 800a1d8:	1949      	addeq	r1, r1, r5
 800a1da:	6021      	streq	r1, [r4, #0]
 800a1dc:	6054      	str	r4, [r2, #4]
 800a1de:	e7ca      	b.n	800a176 <_free_r+0x26>
 800a1e0:	b003      	add	sp, #12
 800a1e2:	bd30      	pop	{r4, r5, pc}
 800a1e4:	200080d4 	.word	0x200080d4

0800a1e8 <sbrk_aligned>:
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	4e0e      	ldr	r6, [pc, #56]	; (800a224 <sbrk_aligned+0x3c>)
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	6831      	ldr	r1, [r6, #0]
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	b911      	cbnz	r1, 800a1fa <sbrk_aligned+0x12>
 800a1f4:	f000 f9e8 	bl	800a5c8 <_sbrk_r>
 800a1f8:	6030      	str	r0, [r6, #0]
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f000 f9e3 	bl	800a5c8 <_sbrk_r>
 800a202:	1c43      	adds	r3, r0, #1
 800a204:	d00a      	beq.n	800a21c <sbrk_aligned+0x34>
 800a206:	1cc4      	adds	r4, r0, #3
 800a208:	f024 0403 	bic.w	r4, r4, #3
 800a20c:	42a0      	cmp	r0, r4
 800a20e:	d007      	beq.n	800a220 <sbrk_aligned+0x38>
 800a210:	1a21      	subs	r1, r4, r0
 800a212:	4628      	mov	r0, r5
 800a214:	f000 f9d8 	bl	800a5c8 <_sbrk_r>
 800a218:	3001      	adds	r0, #1
 800a21a:	d101      	bne.n	800a220 <sbrk_aligned+0x38>
 800a21c:	f04f 34ff 	mov.w	r4, #4294967295
 800a220:	4620      	mov	r0, r4
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	200080d8 	.word	0x200080d8

0800a228 <_malloc_r>:
 800a228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22c:	1ccd      	adds	r5, r1, #3
 800a22e:	f025 0503 	bic.w	r5, r5, #3
 800a232:	3508      	adds	r5, #8
 800a234:	2d0c      	cmp	r5, #12
 800a236:	bf38      	it	cc
 800a238:	250c      	movcc	r5, #12
 800a23a:	2d00      	cmp	r5, #0
 800a23c:	4607      	mov	r7, r0
 800a23e:	db01      	blt.n	800a244 <_malloc_r+0x1c>
 800a240:	42a9      	cmp	r1, r5
 800a242:	d905      	bls.n	800a250 <_malloc_r+0x28>
 800a244:	230c      	movs	r3, #12
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	2600      	movs	r6, #0
 800a24a:	4630      	mov	r0, r6
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	4e2e      	ldr	r6, [pc, #184]	; (800a30c <_malloc_r+0xe4>)
 800a252:	f000 fa25 	bl	800a6a0 <__malloc_lock>
 800a256:	6833      	ldr	r3, [r6, #0]
 800a258:	461c      	mov	r4, r3
 800a25a:	bb34      	cbnz	r4, 800a2aa <_malloc_r+0x82>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4638      	mov	r0, r7
 800a260:	f7ff ffc2 	bl	800a1e8 <sbrk_aligned>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	4604      	mov	r4, r0
 800a268:	d14d      	bne.n	800a306 <_malloc_r+0xde>
 800a26a:	6834      	ldr	r4, [r6, #0]
 800a26c:	4626      	mov	r6, r4
 800a26e:	2e00      	cmp	r6, #0
 800a270:	d140      	bne.n	800a2f4 <_malloc_r+0xcc>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	4631      	mov	r1, r6
 800a276:	4638      	mov	r0, r7
 800a278:	eb04 0803 	add.w	r8, r4, r3
 800a27c:	f000 f9a4 	bl	800a5c8 <_sbrk_r>
 800a280:	4580      	cmp	r8, r0
 800a282:	d13a      	bne.n	800a2fa <_malloc_r+0xd2>
 800a284:	6821      	ldr	r1, [r4, #0]
 800a286:	3503      	adds	r5, #3
 800a288:	1a6d      	subs	r5, r5, r1
 800a28a:	f025 0503 	bic.w	r5, r5, #3
 800a28e:	3508      	adds	r5, #8
 800a290:	2d0c      	cmp	r5, #12
 800a292:	bf38      	it	cc
 800a294:	250c      	movcc	r5, #12
 800a296:	4629      	mov	r1, r5
 800a298:	4638      	mov	r0, r7
 800a29a:	f7ff ffa5 	bl	800a1e8 <sbrk_aligned>
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d02b      	beq.n	800a2fa <_malloc_r+0xd2>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	442b      	add	r3, r5
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	e00e      	b.n	800a2c8 <_malloc_r+0xa0>
 800a2aa:	6822      	ldr	r2, [r4, #0]
 800a2ac:	1b52      	subs	r2, r2, r5
 800a2ae:	d41e      	bmi.n	800a2ee <_malloc_r+0xc6>
 800a2b0:	2a0b      	cmp	r2, #11
 800a2b2:	d916      	bls.n	800a2e2 <_malloc_r+0xba>
 800a2b4:	1961      	adds	r1, r4, r5
 800a2b6:	42a3      	cmp	r3, r4
 800a2b8:	6025      	str	r5, [r4, #0]
 800a2ba:	bf18      	it	ne
 800a2bc:	6059      	strne	r1, [r3, #4]
 800a2be:	6863      	ldr	r3, [r4, #4]
 800a2c0:	bf08      	it	eq
 800a2c2:	6031      	streq	r1, [r6, #0]
 800a2c4:	5162      	str	r2, [r4, r5]
 800a2c6:	604b      	str	r3, [r1, #4]
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f104 060b 	add.w	r6, r4, #11
 800a2ce:	f000 f9ed 	bl	800a6ac <__malloc_unlock>
 800a2d2:	f026 0607 	bic.w	r6, r6, #7
 800a2d6:	1d23      	adds	r3, r4, #4
 800a2d8:	1af2      	subs	r2, r6, r3
 800a2da:	d0b6      	beq.n	800a24a <_malloc_r+0x22>
 800a2dc:	1b9b      	subs	r3, r3, r6
 800a2de:	50a3      	str	r3, [r4, r2]
 800a2e0:	e7b3      	b.n	800a24a <_malloc_r+0x22>
 800a2e2:	6862      	ldr	r2, [r4, #4]
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	bf0c      	ite	eq
 800a2e8:	6032      	streq	r2, [r6, #0]
 800a2ea:	605a      	strne	r2, [r3, #4]
 800a2ec:	e7ec      	b.n	800a2c8 <_malloc_r+0xa0>
 800a2ee:	4623      	mov	r3, r4
 800a2f0:	6864      	ldr	r4, [r4, #4]
 800a2f2:	e7b2      	b.n	800a25a <_malloc_r+0x32>
 800a2f4:	4634      	mov	r4, r6
 800a2f6:	6876      	ldr	r6, [r6, #4]
 800a2f8:	e7b9      	b.n	800a26e <_malloc_r+0x46>
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	603b      	str	r3, [r7, #0]
 800a2fe:	4638      	mov	r0, r7
 800a300:	f000 f9d4 	bl	800a6ac <__malloc_unlock>
 800a304:	e7a1      	b.n	800a24a <_malloc_r+0x22>
 800a306:	6025      	str	r5, [r4, #0]
 800a308:	e7de      	b.n	800a2c8 <_malloc_r+0xa0>
 800a30a:	bf00      	nop
 800a30c:	200080d4 	.word	0x200080d4

0800a310 <__ssputs_r>:
 800a310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a314:	688e      	ldr	r6, [r1, #8]
 800a316:	429e      	cmp	r6, r3
 800a318:	4682      	mov	sl, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	4690      	mov	r8, r2
 800a31e:	461f      	mov	r7, r3
 800a320:	d838      	bhi.n	800a394 <__ssputs_r+0x84>
 800a322:	898a      	ldrh	r2, [r1, #12]
 800a324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a328:	d032      	beq.n	800a390 <__ssputs_r+0x80>
 800a32a:	6825      	ldr	r5, [r4, #0]
 800a32c:	6909      	ldr	r1, [r1, #16]
 800a32e:	eba5 0901 	sub.w	r9, r5, r1
 800a332:	6965      	ldr	r5, [r4, #20]
 800a334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a33c:	3301      	adds	r3, #1
 800a33e:	444b      	add	r3, r9
 800a340:	106d      	asrs	r5, r5, #1
 800a342:	429d      	cmp	r5, r3
 800a344:	bf38      	it	cc
 800a346:	461d      	movcc	r5, r3
 800a348:	0553      	lsls	r3, r2, #21
 800a34a:	d531      	bpl.n	800a3b0 <__ssputs_r+0xa0>
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7ff ff6b 	bl	800a228 <_malloc_r>
 800a352:	4606      	mov	r6, r0
 800a354:	b950      	cbnz	r0, 800a36c <__ssputs_r+0x5c>
 800a356:	230c      	movs	r3, #12
 800a358:	f8ca 3000 	str.w	r3, [sl]
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a362:	81a3      	strh	r3, [r4, #12]
 800a364:	f04f 30ff 	mov.w	r0, #4294967295
 800a368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36c:	6921      	ldr	r1, [r4, #16]
 800a36e:	464a      	mov	r2, r9
 800a370:	f7fe f82e 	bl	80083d0 <memcpy>
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a37a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a37e:	81a3      	strh	r3, [r4, #12]
 800a380:	6126      	str	r6, [r4, #16]
 800a382:	6165      	str	r5, [r4, #20]
 800a384:	444e      	add	r6, r9
 800a386:	eba5 0509 	sub.w	r5, r5, r9
 800a38a:	6026      	str	r6, [r4, #0]
 800a38c:	60a5      	str	r5, [r4, #8]
 800a38e:	463e      	mov	r6, r7
 800a390:	42be      	cmp	r6, r7
 800a392:	d900      	bls.n	800a396 <__ssputs_r+0x86>
 800a394:	463e      	mov	r6, r7
 800a396:	6820      	ldr	r0, [r4, #0]
 800a398:	4632      	mov	r2, r6
 800a39a:	4641      	mov	r1, r8
 800a39c:	f000 f966 	bl	800a66c <memmove>
 800a3a0:	68a3      	ldr	r3, [r4, #8]
 800a3a2:	1b9b      	subs	r3, r3, r6
 800a3a4:	60a3      	str	r3, [r4, #8]
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	4433      	add	r3, r6
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	e7db      	b.n	800a368 <__ssputs_r+0x58>
 800a3b0:	462a      	mov	r2, r5
 800a3b2:	f000 f981 	bl	800a6b8 <_realloc_r>
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d1e1      	bne.n	800a380 <__ssputs_r+0x70>
 800a3bc:	6921      	ldr	r1, [r4, #16]
 800a3be:	4650      	mov	r0, sl
 800a3c0:	f7ff fec6 	bl	800a150 <_free_r>
 800a3c4:	e7c7      	b.n	800a356 <__ssputs_r+0x46>
	...

0800a3c8 <_svfiprintf_r>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	4698      	mov	r8, r3
 800a3ce:	898b      	ldrh	r3, [r1, #12]
 800a3d0:	061b      	lsls	r3, r3, #24
 800a3d2:	b09d      	sub	sp, #116	; 0x74
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	4614      	mov	r4, r2
 800a3da:	d50e      	bpl.n	800a3fa <_svfiprintf_r+0x32>
 800a3dc:	690b      	ldr	r3, [r1, #16]
 800a3de:	b963      	cbnz	r3, 800a3fa <_svfiprintf_r+0x32>
 800a3e0:	2140      	movs	r1, #64	; 0x40
 800a3e2:	f7ff ff21 	bl	800a228 <_malloc_r>
 800a3e6:	6028      	str	r0, [r5, #0]
 800a3e8:	6128      	str	r0, [r5, #16]
 800a3ea:	b920      	cbnz	r0, 800a3f6 <_svfiprintf_r+0x2e>
 800a3ec:	230c      	movs	r3, #12
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	e0d1      	b.n	800a59a <_svfiprintf_r+0x1d2>
 800a3f6:	2340      	movs	r3, #64	; 0x40
 800a3f8:	616b      	str	r3, [r5, #20]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fe:	2320      	movs	r3, #32
 800a400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a404:	f8cd 800c 	str.w	r8, [sp, #12]
 800a408:	2330      	movs	r3, #48	; 0x30
 800a40a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5b4 <_svfiprintf_r+0x1ec>
 800a40e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a412:	f04f 0901 	mov.w	r9, #1
 800a416:	4623      	mov	r3, r4
 800a418:	469a      	mov	sl, r3
 800a41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41e:	b10a      	cbz	r2, 800a424 <_svfiprintf_r+0x5c>
 800a420:	2a25      	cmp	r2, #37	; 0x25
 800a422:	d1f9      	bne.n	800a418 <_svfiprintf_r+0x50>
 800a424:	ebba 0b04 	subs.w	fp, sl, r4
 800a428:	d00b      	beq.n	800a442 <_svfiprintf_r+0x7a>
 800a42a:	465b      	mov	r3, fp
 800a42c:	4622      	mov	r2, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff ff6d 	bl	800a310 <__ssputs_r>
 800a436:	3001      	adds	r0, #1
 800a438:	f000 80aa 	beq.w	800a590 <_svfiprintf_r+0x1c8>
 800a43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43e:	445a      	add	r2, fp
 800a440:	9209      	str	r2, [sp, #36]	; 0x24
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 80a2 	beq.w	800a590 <_svfiprintf_r+0x1c8>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295
 800a452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a456:	f10a 0a01 	add.w	sl, sl, #1
 800a45a:	9304      	str	r3, [sp, #16]
 800a45c:	9307      	str	r3, [sp, #28]
 800a45e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a462:	931a      	str	r3, [sp, #104]	; 0x68
 800a464:	4654      	mov	r4, sl
 800a466:	2205      	movs	r2, #5
 800a468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46c:	4851      	ldr	r0, [pc, #324]	; (800a5b4 <_svfiprintf_r+0x1ec>)
 800a46e:	f7f5 febf 	bl	80001f0 <memchr>
 800a472:	9a04      	ldr	r2, [sp, #16]
 800a474:	b9d8      	cbnz	r0, 800a4ae <_svfiprintf_r+0xe6>
 800a476:	06d0      	lsls	r0, r2, #27
 800a478:	bf44      	itt	mi
 800a47a:	2320      	movmi	r3, #32
 800a47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a480:	0711      	lsls	r1, r2, #28
 800a482:	bf44      	itt	mi
 800a484:	232b      	movmi	r3, #43	; 0x2b
 800a486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a48a:	f89a 3000 	ldrb.w	r3, [sl]
 800a48e:	2b2a      	cmp	r3, #42	; 0x2a
 800a490:	d015      	beq.n	800a4be <_svfiprintf_r+0xf6>
 800a492:	9a07      	ldr	r2, [sp, #28]
 800a494:	4654      	mov	r4, sl
 800a496:	2000      	movs	r0, #0
 800a498:	f04f 0c0a 	mov.w	ip, #10
 800a49c:	4621      	mov	r1, r4
 800a49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a2:	3b30      	subs	r3, #48	; 0x30
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d94e      	bls.n	800a546 <_svfiprintf_r+0x17e>
 800a4a8:	b1b0      	cbz	r0, 800a4d8 <_svfiprintf_r+0x110>
 800a4aa:	9207      	str	r2, [sp, #28]
 800a4ac:	e014      	b.n	800a4d8 <_svfiprintf_r+0x110>
 800a4ae:	eba0 0308 	sub.w	r3, r0, r8
 800a4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	46a2      	mov	sl, r4
 800a4bc:	e7d2      	b.n	800a464 <_svfiprintf_r+0x9c>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	9103      	str	r1, [sp, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfbb      	ittet	lt
 800a4ca:	425b      	neglt	r3, r3
 800a4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a4d0:	9307      	strge	r3, [sp, #28]
 800a4d2:	9307      	strlt	r3, [sp, #28]
 800a4d4:	bfb8      	it	lt
 800a4d6:	9204      	strlt	r2, [sp, #16]
 800a4d8:	7823      	ldrb	r3, [r4, #0]
 800a4da:	2b2e      	cmp	r3, #46	; 0x2e
 800a4dc:	d10c      	bne.n	800a4f8 <_svfiprintf_r+0x130>
 800a4de:	7863      	ldrb	r3, [r4, #1]
 800a4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e2:	d135      	bne.n	800a550 <_svfiprintf_r+0x188>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	9203      	str	r2, [sp, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bfb8      	it	lt
 800a4f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4f4:	3402      	adds	r4, #2
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5c4 <_svfiprintf_r+0x1fc>
 800a4fc:	7821      	ldrb	r1, [r4, #0]
 800a4fe:	2203      	movs	r2, #3
 800a500:	4650      	mov	r0, sl
 800a502:	f7f5 fe75 	bl	80001f0 <memchr>
 800a506:	b140      	cbz	r0, 800a51a <_svfiprintf_r+0x152>
 800a508:	2340      	movs	r3, #64	; 0x40
 800a50a:	eba0 000a 	sub.w	r0, r0, sl
 800a50e:	fa03 f000 	lsl.w	r0, r3, r0
 800a512:	9b04      	ldr	r3, [sp, #16]
 800a514:	4303      	orrs	r3, r0
 800a516:	3401      	adds	r4, #1
 800a518:	9304      	str	r3, [sp, #16]
 800a51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51e:	4826      	ldr	r0, [pc, #152]	; (800a5b8 <_svfiprintf_r+0x1f0>)
 800a520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a524:	2206      	movs	r2, #6
 800a526:	f7f5 fe63 	bl	80001f0 <memchr>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d038      	beq.n	800a5a0 <_svfiprintf_r+0x1d8>
 800a52e:	4b23      	ldr	r3, [pc, #140]	; (800a5bc <_svfiprintf_r+0x1f4>)
 800a530:	bb1b      	cbnz	r3, 800a57a <_svfiprintf_r+0x1b2>
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	3307      	adds	r3, #7
 800a536:	f023 0307 	bic.w	r3, r3, #7
 800a53a:	3308      	adds	r3, #8
 800a53c:	9303      	str	r3, [sp, #12]
 800a53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a540:	4433      	add	r3, r6
 800a542:	9309      	str	r3, [sp, #36]	; 0x24
 800a544:	e767      	b.n	800a416 <_svfiprintf_r+0x4e>
 800a546:	fb0c 3202 	mla	r2, ip, r2, r3
 800a54a:	460c      	mov	r4, r1
 800a54c:	2001      	movs	r0, #1
 800a54e:	e7a5      	b.n	800a49c <_svfiprintf_r+0xd4>
 800a550:	2300      	movs	r3, #0
 800a552:	3401      	adds	r4, #1
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	4619      	mov	r1, r3
 800a558:	f04f 0c0a 	mov.w	ip, #10
 800a55c:	4620      	mov	r0, r4
 800a55e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a562:	3a30      	subs	r2, #48	; 0x30
 800a564:	2a09      	cmp	r2, #9
 800a566:	d903      	bls.n	800a570 <_svfiprintf_r+0x1a8>
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0c5      	beq.n	800a4f8 <_svfiprintf_r+0x130>
 800a56c:	9105      	str	r1, [sp, #20]
 800a56e:	e7c3      	b.n	800a4f8 <_svfiprintf_r+0x130>
 800a570:	fb0c 2101 	mla	r1, ip, r1, r2
 800a574:	4604      	mov	r4, r0
 800a576:	2301      	movs	r3, #1
 800a578:	e7f0      	b.n	800a55c <_svfiprintf_r+0x194>
 800a57a:	ab03      	add	r3, sp, #12
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	462a      	mov	r2, r5
 800a580:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <_svfiprintf_r+0x1f8>)
 800a582:	a904      	add	r1, sp, #16
 800a584:	4638      	mov	r0, r7
 800a586:	f7fd ffd9 	bl	800853c <_printf_float>
 800a58a:	1c42      	adds	r2, r0, #1
 800a58c:	4606      	mov	r6, r0
 800a58e:	d1d6      	bne.n	800a53e <_svfiprintf_r+0x176>
 800a590:	89ab      	ldrh	r3, [r5, #12]
 800a592:	065b      	lsls	r3, r3, #25
 800a594:	f53f af2c 	bmi.w	800a3f0 <_svfiprintf_r+0x28>
 800a598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a59a:	b01d      	add	sp, #116	; 0x74
 800a59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a0:	ab03      	add	r3, sp, #12
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	462a      	mov	r2, r5
 800a5a6:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <_svfiprintf_r+0x1f8>)
 800a5a8:	a904      	add	r1, sp, #16
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	f7fe fa6a 	bl	8008a84 <_printf_i>
 800a5b0:	e7eb      	b.n	800a58a <_svfiprintf_r+0x1c2>
 800a5b2:	bf00      	nop
 800a5b4:	0800b564 	.word	0x0800b564
 800a5b8:	0800b56e 	.word	0x0800b56e
 800a5bc:	0800853d 	.word	0x0800853d
 800a5c0:	0800a311 	.word	0x0800a311
 800a5c4:	0800b56a 	.word	0x0800b56a

0800a5c8 <_sbrk_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d06      	ldr	r5, [pc, #24]	; (800a5e4 <_sbrk_r+0x1c>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f8 ff2c 	bl	8003430 <_sbrk>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_sbrk_r+0x1a>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_sbrk_r+0x1a>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	200080dc 	.word	0x200080dc

0800a5e8 <__assert_func>:
 800a5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ea:	4614      	mov	r4, r2
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	4b09      	ldr	r3, [pc, #36]	; (800a614 <__assert_func+0x2c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	68d8      	ldr	r0, [r3, #12]
 800a5f6:	b14c      	cbz	r4, 800a60c <__assert_func+0x24>
 800a5f8:	4b07      	ldr	r3, [pc, #28]	; (800a618 <__assert_func+0x30>)
 800a5fa:	9100      	str	r1, [sp, #0]
 800a5fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a600:	4906      	ldr	r1, [pc, #24]	; (800a61c <__assert_func+0x34>)
 800a602:	462b      	mov	r3, r5
 800a604:	f000 f80e 	bl	800a624 <fiprintf>
 800a608:	f000 faac 	bl	800ab64 <abort>
 800a60c:	4b04      	ldr	r3, [pc, #16]	; (800a620 <__assert_func+0x38>)
 800a60e:	461c      	mov	r4, r3
 800a610:	e7f3      	b.n	800a5fa <__assert_func+0x12>
 800a612:	bf00      	nop
 800a614:	200003e4 	.word	0x200003e4
 800a618:	0800b575 	.word	0x0800b575
 800a61c:	0800b582 	.word	0x0800b582
 800a620:	0800b5b0 	.word	0x0800b5b0

0800a624 <fiprintf>:
 800a624:	b40e      	push	{r1, r2, r3}
 800a626:	b503      	push	{r0, r1, lr}
 800a628:	4601      	mov	r1, r0
 800a62a:	ab03      	add	r3, sp, #12
 800a62c:	4805      	ldr	r0, [pc, #20]	; (800a644 <fiprintf+0x20>)
 800a62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a632:	6800      	ldr	r0, [r0, #0]
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	f000 f897 	bl	800a768 <_vfiprintf_r>
 800a63a:	b002      	add	sp, #8
 800a63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a640:	b003      	add	sp, #12
 800a642:	4770      	bx	lr
 800a644:	200003e4 	.word	0x200003e4

0800a648 <__ascii_mbtowc>:
 800a648:	b082      	sub	sp, #8
 800a64a:	b901      	cbnz	r1, 800a64e <__ascii_mbtowc+0x6>
 800a64c:	a901      	add	r1, sp, #4
 800a64e:	b142      	cbz	r2, 800a662 <__ascii_mbtowc+0x1a>
 800a650:	b14b      	cbz	r3, 800a666 <__ascii_mbtowc+0x1e>
 800a652:	7813      	ldrb	r3, [r2, #0]
 800a654:	600b      	str	r3, [r1, #0]
 800a656:	7812      	ldrb	r2, [r2, #0]
 800a658:	1e10      	subs	r0, r2, #0
 800a65a:	bf18      	it	ne
 800a65c:	2001      	movne	r0, #1
 800a65e:	b002      	add	sp, #8
 800a660:	4770      	bx	lr
 800a662:	4610      	mov	r0, r2
 800a664:	e7fb      	b.n	800a65e <__ascii_mbtowc+0x16>
 800a666:	f06f 0001 	mvn.w	r0, #1
 800a66a:	e7f8      	b.n	800a65e <__ascii_mbtowc+0x16>

0800a66c <memmove>:
 800a66c:	4288      	cmp	r0, r1
 800a66e:	b510      	push	{r4, lr}
 800a670:	eb01 0402 	add.w	r4, r1, r2
 800a674:	d902      	bls.n	800a67c <memmove+0x10>
 800a676:	4284      	cmp	r4, r0
 800a678:	4623      	mov	r3, r4
 800a67a:	d807      	bhi.n	800a68c <memmove+0x20>
 800a67c:	1e43      	subs	r3, r0, #1
 800a67e:	42a1      	cmp	r1, r4
 800a680:	d008      	beq.n	800a694 <memmove+0x28>
 800a682:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a68a:	e7f8      	b.n	800a67e <memmove+0x12>
 800a68c:	4402      	add	r2, r0
 800a68e:	4601      	mov	r1, r0
 800a690:	428a      	cmp	r2, r1
 800a692:	d100      	bne.n	800a696 <memmove+0x2a>
 800a694:	bd10      	pop	{r4, pc}
 800a696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a69a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a69e:	e7f7      	b.n	800a690 <memmove+0x24>

0800a6a0 <__malloc_lock>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	; (800a6a8 <__malloc_lock+0x8>)
 800a6a2:	f000 bc1f 	b.w	800aee4 <__retarget_lock_acquire_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	200080e0 	.word	0x200080e0

0800a6ac <__malloc_unlock>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	; (800a6b4 <__malloc_unlock+0x8>)
 800a6ae:	f000 bc1a 	b.w	800aee6 <__retarget_lock_release_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	200080e0 	.word	0x200080e0

0800a6b8 <_realloc_r>:
 800a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6bc:	4680      	mov	r8, r0
 800a6be:	4614      	mov	r4, r2
 800a6c0:	460e      	mov	r6, r1
 800a6c2:	b921      	cbnz	r1, 800a6ce <_realloc_r+0x16>
 800a6c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	f7ff bdad 	b.w	800a228 <_malloc_r>
 800a6ce:	b92a      	cbnz	r2, 800a6dc <_realloc_r+0x24>
 800a6d0:	f7ff fd3e 	bl	800a150 <_free_r>
 800a6d4:	4625      	mov	r5, r4
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6dc:	f000 fc6a 	bl	800afb4 <_malloc_usable_size_r>
 800a6e0:	4284      	cmp	r4, r0
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	d802      	bhi.n	800a6ec <_realloc_r+0x34>
 800a6e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6ea:	d812      	bhi.n	800a712 <_realloc_r+0x5a>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	f7ff fd9a 	bl	800a228 <_malloc_r>
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d0ed      	beq.n	800a6d6 <_realloc_r+0x1e>
 800a6fa:	42bc      	cmp	r4, r7
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4631      	mov	r1, r6
 800a700:	bf28      	it	cs
 800a702:	463a      	movcs	r2, r7
 800a704:	f7fd fe64 	bl	80083d0 <memcpy>
 800a708:	4631      	mov	r1, r6
 800a70a:	4640      	mov	r0, r8
 800a70c:	f7ff fd20 	bl	800a150 <_free_r>
 800a710:	e7e1      	b.n	800a6d6 <_realloc_r+0x1e>
 800a712:	4635      	mov	r5, r6
 800a714:	e7df      	b.n	800a6d6 <_realloc_r+0x1e>

0800a716 <__sfputc_r>:
 800a716:	6893      	ldr	r3, [r2, #8]
 800a718:	3b01      	subs	r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	b410      	push	{r4}
 800a71e:	6093      	str	r3, [r2, #8]
 800a720:	da08      	bge.n	800a734 <__sfputc_r+0x1e>
 800a722:	6994      	ldr	r4, [r2, #24]
 800a724:	42a3      	cmp	r3, r4
 800a726:	db01      	blt.n	800a72c <__sfputc_r+0x16>
 800a728:	290a      	cmp	r1, #10
 800a72a:	d103      	bne.n	800a734 <__sfputc_r+0x1e>
 800a72c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a730:	f000 b94a 	b.w	800a9c8 <__swbuf_r>
 800a734:	6813      	ldr	r3, [r2, #0]
 800a736:	1c58      	adds	r0, r3, #1
 800a738:	6010      	str	r0, [r2, #0]
 800a73a:	7019      	strb	r1, [r3, #0]
 800a73c:	4608      	mov	r0, r1
 800a73e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <__sfputs_r>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	4614      	mov	r4, r2
 800a74c:	18d5      	adds	r5, r2, r3
 800a74e:	42ac      	cmp	r4, r5
 800a750:	d101      	bne.n	800a756 <__sfputs_r+0x12>
 800a752:	2000      	movs	r0, #0
 800a754:	e007      	b.n	800a766 <__sfputs_r+0x22>
 800a756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75a:	463a      	mov	r2, r7
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7ff ffda 	bl	800a716 <__sfputc_r>
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	d1f3      	bne.n	800a74e <__sfputs_r+0xa>
 800a766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a768 <_vfiprintf_r>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	460d      	mov	r5, r1
 800a76e:	b09d      	sub	sp, #116	; 0x74
 800a770:	4614      	mov	r4, r2
 800a772:	4698      	mov	r8, r3
 800a774:	4606      	mov	r6, r0
 800a776:	b118      	cbz	r0, 800a780 <_vfiprintf_r+0x18>
 800a778:	6983      	ldr	r3, [r0, #24]
 800a77a:	b90b      	cbnz	r3, 800a780 <_vfiprintf_r+0x18>
 800a77c:	f000 fb14 	bl	800ada8 <__sinit>
 800a780:	4b89      	ldr	r3, [pc, #548]	; (800a9a8 <_vfiprintf_r+0x240>)
 800a782:	429d      	cmp	r5, r3
 800a784:	d11b      	bne.n	800a7be <_vfiprintf_r+0x56>
 800a786:	6875      	ldr	r5, [r6, #4]
 800a788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a78a:	07d9      	lsls	r1, r3, #31
 800a78c:	d405      	bmi.n	800a79a <_vfiprintf_r+0x32>
 800a78e:	89ab      	ldrh	r3, [r5, #12]
 800a790:	059a      	lsls	r2, r3, #22
 800a792:	d402      	bmi.n	800a79a <_vfiprintf_r+0x32>
 800a794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a796:	f000 fba5 	bl	800aee4 <__retarget_lock_acquire_recursive>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	071b      	lsls	r3, r3, #28
 800a79e:	d501      	bpl.n	800a7a4 <_vfiprintf_r+0x3c>
 800a7a0:	692b      	ldr	r3, [r5, #16]
 800a7a2:	b9eb      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x78>
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f000 f96e 	bl	800aa88 <__swsetup_r>
 800a7ac:	b1c0      	cbz	r0, 800a7e0 <_vfiprintf_r+0x78>
 800a7ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7b0:	07dc      	lsls	r4, r3, #31
 800a7b2:	d50e      	bpl.n	800a7d2 <_vfiprintf_r+0x6a>
 800a7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b8:	b01d      	add	sp, #116	; 0x74
 800a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7be:	4b7b      	ldr	r3, [pc, #492]	; (800a9ac <_vfiprintf_r+0x244>)
 800a7c0:	429d      	cmp	r5, r3
 800a7c2:	d101      	bne.n	800a7c8 <_vfiprintf_r+0x60>
 800a7c4:	68b5      	ldr	r5, [r6, #8]
 800a7c6:	e7df      	b.n	800a788 <_vfiprintf_r+0x20>
 800a7c8:	4b79      	ldr	r3, [pc, #484]	; (800a9b0 <_vfiprintf_r+0x248>)
 800a7ca:	429d      	cmp	r5, r3
 800a7cc:	bf08      	it	eq
 800a7ce:	68f5      	ldreq	r5, [r6, #12]
 800a7d0:	e7da      	b.n	800a788 <_vfiprintf_r+0x20>
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	0598      	lsls	r0, r3, #22
 800a7d6:	d4ed      	bmi.n	800a7b4 <_vfiprintf_r+0x4c>
 800a7d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7da:	f000 fb84 	bl	800aee6 <__retarget_lock_release_recursive>
 800a7de:	e7e9      	b.n	800a7b4 <_vfiprintf_r+0x4c>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e4:	2320      	movs	r3, #32
 800a7e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ee:	2330      	movs	r3, #48	; 0x30
 800a7f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9b4 <_vfiprintf_r+0x24c>
 800a7f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7f8:	f04f 0901 	mov.w	r9, #1
 800a7fc:	4623      	mov	r3, r4
 800a7fe:	469a      	mov	sl, r3
 800a800:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a804:	b10a      	cbz	r2, 800a80a <_vfiprintf_r+0xa2>
 800a806:	2a25      	cmp	r2, #37	; 0x25
 800a808:	d1f9      	bne.n	800a7fe <_vfiprintf_r+0x96>
 800a80a:	ebba 0b04 	subs.w	fp, sl, r4
 800a80e:	d00b      	beq.n	800a828 <_vfiprintf_r+0xc0>
 800a810:	465b      	mov	r3, fp
 800a812:	4622      	mov	r2, r4
 800a814:	4629      	mov	r1, r5
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff ff94 	bl	800a744 <__sfputs_r>
 800a81c:	3001      	adds	r0, #1
 800a81e:	f000 80aa 	beq.w	800a976 <_vfiprintf_r+0x20e>
 800a822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a824:	445a      	add	r2, fp
 800a826:	9209      	str	r2, [sp, #36]	; 0x24
 800a828:	f89a 3000 	ldrb.w	r3, [sl]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 80a2 	beq.w	800a976 <_vfiprintf_r+0x20e>
 800a832:	2300      	movs	r3, #0
 800a834:	f04f 32ff 	mov.w	r2, #4294967295
 800a838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a83c:	f10a 0a01 	add.w	sl, sl, #1
 800a840:	9304      	str	r3, [sp, #16]
 800a842:	9307      	str	r3, [sp, #28]
 800a844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a848:	931a      	str	r3, [sp, #104]	; 0x68
 800a84a:	4654      	mov	r4, sl
 800a84c:	2205      	movs	r2, #5
 800a84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a852:	4858      	ldr	r0, [pc, #352]	; (800a9b4 <_vfiprintf_r+0x24c>)
 800a854:	f7f5 fccc 	bl	80001f0 <memchr>
 800a858:	9a04      	ldr	r2, [sp, #16]
 800a85a:	b9d8      	cbnz	r0, 800a894 <_vfiprintf_r+0x12c>
 800a85c:	06d1      	lsls	r1, r2, #27
 800a85e:	bf44      	itt	mi
 800a860:	2320      	movmi	r3, #32
 800a862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a866:	0713      	lsls	r3, r2, #28
 800a868:	bf44      	itt	mi
 800a86a:	232b      	movmi	r3, #43	; 0x2b
 800a86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a870:	f89a 3000 	ldrb.w	r3, [sl]
 800a874:	2b2a      	cmp	r3, #42	; 0x2a
 800a876:	d015      	beq.n	800a8a4 <_vfiprintf_r+0x13c>
 800a878:	9a07      	ldr	r2, [sp, #28]
 800a87a:	4654      	mov	r4, sl
 800a87c:	2000      	movs	r0, #0
 800a87e:	f04f 0c0a 	mov.w	ip, #10
 800a882:	4621      	mov	r1, r4
 800a884:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a888:	3b30      	subs	r3, #48	; 0x30
 800a88a:	2b09      	cmp	r3, #9
 800a88c:	d94e      	bls.n	800a92c <_vfiprintf_r+0x1c4>
 800a88e:	b1b0      	cbz	r0, 800a8be <_vfiprintf_r+0x156>
 800a890:	9207      	str	r2, [sp, #28]
 800a892:	e014      	b.n	800a8be <_vfiprintf_r+0x156>
 800a894:	eba0 0308 	sub.w	r3, r0, r8
 800a898:	fa09 f303 	lsl.w	r3, r9, r3
 800a89c:	4313      	orrs	r3, r2
 800a89e:	9304      	str	r3, [sp, #16]
 800a8a0:	46a2      	mov	sl, r4
 800a8a2:	e7d2      	b.n	800a84a <_vfiprintf_r+0xe2>
 800a8a4:	9b03      	ldr	r3, [sp, #12]
 800a8a6:	1d19      	adds	r1, r3, #4
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	9103      	str	r1, [sp, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	bfbb      	ittet	lt
 800a8b0:	425b      	neglt	r3, r3
 800a8b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a8b6:	9307      	strge	r3, [sp, #28]
 800a8b8:	9307      	strlt	r3, [sp, #28]
 800a8ba:	bfb8      	it	lt
 800a8bc:	9204      	strlt	r2, [sp, #16]
 800a8be:	7823      	ldrb	r3, [r4, #0]
 800a8c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a8c2:	d10c      	bne.n	800a8de <_vfiprintf_r+0x176>
 800a8c4:	7863      	ldrb	r3, [r4, #1]
 800a8c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c8:	d135      	bne.n	800a936 <_vfiprintf_r+0x1ce>
 800a8ca:	9b03      	ldr	r3, [sp, #12]
 800a8cc:	1d1a      	adds	r2, r3, #4
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	9203      	str	r2, [sp, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bfb8      	it	lt
 800a8d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8da:	3402      	adds	r4, #2
 800a8dc:	9305      	str	r3, [sp, #20]
 800a8de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9c4 <_vfiprintf_r+0x25c>
 800a8e2:	7821      	ldrb	r1, [r4, #0]
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	4650      	mov	r0, sl
 800a8e8:	f7f5 fc82 	bl	80001f0 <memchr>
 800a8ec:	b140      	cbz	r0, 800a900 <_vfiprintf_r+0x198>
 800a8ee:	2340      	movs	r3, #64	; 0x40
 800a8f0:	eba0 000a 	sub.w	r0, r0, sl
 800a8f4:	fa03 f000 	lsl.w	r0, r3, r0
 800a8f8:	9b04      	ldr	r3, [sp, #16]
 800a8fa:	4303      	orrs	r3, r0
 800a8fc:	3401      	adds	r4, #1
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a904:	482c      	ldr	r0, [pc, #176]	; (800a9b8 <_vfiprintf_r+0x250>)
 800a906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a90a:	2206      	movs	r2, #6
 800a90c:	f7f5 fc70 	bl	80001f0 <memchr>
 800a910:	2800      	cmp	r0, #0
 800a912:	d03f      	beq.n	800a994 <_vfiprintf_r+0x22c>
 800a914:	4b29      	ldr	r3, [pc, #164]	; (800a9bc <_vfiprintf_r+0x254>)
 800a916:	bb1b      	cbnz	r3, 800a960 <_vfiprintf_r+0x1f8>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	3307      	adds	r3, #7
 800a91c:	f023 0307 	bic.w	r3, r3, #7
 800a920:	3308      	adds	r3, #8
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a926:	443b      	add	r3, r7
 800a928:	9309      	str	r3, [sp, #36]	; 0x24
 800a92a:	e767      	b.n	800a7fc <_vfiprintf_r+0x94>
 800a92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a930:	460c      	mov	r4, r1
 800a932:	2001      	movs	r0, #1
 800a934:	e7a5      	b.n	800a882 <_vfiprintf_r+0x11a>
 800a936:	2300      	movs	r3, #0
 800a938:	3401      	adds	r4, #1
 800a93a:	9305      	str	r3, [sp, #20]
 800a93c:	4619      	mov	r1, r3
 800a93e:	f04f 0c0a 	mov.w	ip, #10
 800a942:	4620      	mov	r0, r4
 800a944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a948:	3a30      	subs	r2, #48	; 0x30
 800a94a:	2a09      	cmp	r2, #9
 800a94c:	d903      	bls.n	800a956 <_vfiprintf_r+0x1ee>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0c5      	beq.n	800a8de <_vfiprintf_r+0x176>
 800a952:	9105      	str	r1, [sp, #20]
 800a954:	e7c3      	b.n	800a8de <_vfiprintf_r+0x176>
 800a956:	fb0c 2101 	mla	r1, ip, r1, r2
 800a95a:	4604      	mov	r4, r0
 800a95c:	2301      	movs	r3, #1
 800a95e:	e7f0      	b.n	800a942 <_vfiprintf_r+0x1da>
 800a960:	ab03      	add	r3, sp, #12
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	462a      	mov	r2, r5
 800a966:	4b16      	ldr	r3, [pc, #88]	; (800a9c0 <_vfiprintf_r+0x258>)
 800a968:	a904      	add	r1, sp, #16
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7fd fde6 	bl	800853c <_printf_float>
 800a970:	4607      	mov	r7, r0
 800a972:	1c78      	adds	r0, r7, #1
 800a974:	d1d6      	bne.n	800a924 <_vfiprintf_r+0x1bc>
 800a976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a978:	07d9      	lsls	r1, r3, #31
 800a97a:	d405      	bmi.n	800a988 <_vfiprintf_r+0x220>
 800a97c:	89ab      	ldrh	r3, [r5, #12]
 800a97e:	059a      	lsls	r2, r3, #22
 800a980:	d402      	bmi.n	800a988 <_vfiprintf_r+0x220>
 800a982:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a984:	f000 faaf 	bl	800aee6 <__retarget_lock_release_recursive>
 800a988:	89ab      	ldrh	r3, [r5, #12]
 800a98a:	065b      	lsls	r3, r3, #25
 800a98c:	f53f af12 	bmi.w	800a7b4 <_vfiprintf_r+0x4c>
 800a990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a992:	e711      	b.n	800a7b8 <_vfiprintf_r+0x50>
 800a994:	ab03      	add	r3, sp, #12
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	462a      	mov	r2, r5
 800a99a:	4b09      	ldr	r3, [pc, #36]	; (800a9c0 <_vfiprintf_r+0x258>)
 800a99c:	a904      	add	r1, sp, #16
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7fe f870 	bl	8008a84 <_printf_i>
 800a9a4:	e7e4      	b.n	800a970 <_vfiprintf_r+0x208>
 800a9a6:	bf00      	nop
 800a9a8:	0800b6dc 	.word	0x0800b6dc
 800a9ac:	0800b6fc 	.word	0x0800b6fc
 800a9b0:	0800b6bc 	.word	0x0800b6bc
 800a9b4:	0800b564 	.word	0x0800b564
 800a9b8:	0800b56e 	.word	0x0800b56e
 800a9bc:	0800853d 	.word	0x0800853d
 800a9c0:	0800a745 	.word	0x0800a745
 800a9c4:	0800b56a 	.word	0x0800b56a

0800a9c8 <__swbuf_r>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	460e      	mov	r6, r1
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	b118      	cbz	r0, 800a9da <__swbuf_r+0x12>
 800a9d2:	6983      	ldr	r3, [r0, #24]
 800a9d4:	b90b      	cbnz	r3, 800a9da <__swbuf_r+0x12>
 800a9d6:	f000 f9e7 	bl	800ada8 <__sinit>
 800a9da:	4b21      	ldr	r3, [pc, #132]	; (800aa60 <__swbuf_r+0x98>)
 800a9dc:	429c      	cmp	r4, r3
 800a9de:	d12b      	bne.n	800aa38 <__swbuf_r+0x70>
 800a9e0:	686c      	ldr	r4, [r5, #4]
 800a9e2:	69a3      	ldr	r3, [r4, #24]
 800a9e4:	60a3      	str	r3, [r4, #8]
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	071a      	lsls	r2, r3, #28
 800a9ea:	d52f      	bpl.n	800aa4c <__swbuf_r+0x84>
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	b36b      	cbz	r3, 800aa4c <__swbuf_r+0x84>
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	6820      	ldr	r0, [r4, #0]
 800a9f4:	1ac0      	subs	r0, r0, r3
 800a9f6:	6963      	ldr	r3, [r4, #20]
 800a9f8:	b2f6      	uxtb	r6, r6
 800a9fa:	4283      	cmp	r3, r0
 800a9fc:	4637      	mov	r7, r6
 800a9fe:	dc04      	bgt.n	800aa0a <__swbuf_r+0x42>
 800aa00:	4621      	mov	r1, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f93c 	bl	800ac80 <_fflush_r>
 800aa08:	bb30      	cbnz	r0, 800aa58 <__swbuf_r+0x90>
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	60a3      	str	r3, [r4, #8]
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	701e      	strb	r6, [r3, #0]
 800aa18:	6963      	ldr	r3, [r4, #20]
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	4283      	cmp	r3, r0
 800aa1e:	d004      	beq.n	800aa2a <__swbuf_r+0x62>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	07db      	lsls	r3, r3, #31
 800aa24:	d506      	bpl.n	800aa34 <__swbuf_r+0x6c>
 800aa26:	2e0a      	cmp	r6, #10
 800aa28:	d104      	bne.n	800aa34 <__swbuf_r+0x6c>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f000 f927 	bl	800ac80 <_fflush_r>
 800aa32:	b988      	cbnz	r0, 800aa58 <__swbuf_r+0x90>
 800aa34:	4638      	mov	r0, r7
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa38:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <__swbuf_r+0x9c>)
 800aa3a:	429c      	cmp	r4, r3
 800aa3c:	d101      	bne.n	800aa42 <__swbuf_r+0x7a>
 800aa3e:	68ac      	ldr	r4, [r5, #8]
 800aa40:	e7cf      	b.n	800a9e2 <__swbuf_r+0x1a>
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <__swbuf_r+0xa0>)
 800aa44:	429c      	cmp	r4, r3
 800aa46:	bf08      	it	eq
 800aa48:	68ec      	ldreq	r4, [r5, #12]
 800aa4a:	e7ca      	b.n	800a9e2 <__swbuf_r+0x1a>
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f81a 	bl	800aa88 <__swsetup_r>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d0cb      	beq.n	800a9f0 <__swbuf_r+0x28>
 800aa58:	f04f 37ff 	mov.w	r7, #4294967295
 800aa5c:	e7ea      	b.n	800aa34 <__swbuf_r+0x6c>
 800aa5e:	bf00      	nop
 800aa60:	0800b6dc 	.word	0x0800b6dc
 800aa64:	0800b6fc 	.word	0x0800b6fc
 800aa68:	0800b6bc 	.word	0x0800b6bc

0800aa6c <__ascii_wctomb>:
 800aa6c:	b149      	cbz	r1, 800aa82 <__ascii_wctomb+0x16>
 800aa6e:	2aff      	cmp	r2, #255	; 0xff
 800aa70:	bf85      	ittet	hi
 800aa72:	238a      	movhi	r3, #138	; 0x8a
 800aa74:	6003      	strhi	r3, [r0, #0]
 800aa76:	700a      	strbls	r2, [r1, #0]
 800aa78:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa7c:	bf98      	it	ls
 800aa7e:	2001      	movls	r0, #1
 800aa80:	4770      	bx	lr
 800aa82:	4608      	mov	r0, r1
 800aa84:	4770      	bx	lr
	...

0800aa88 <__swsetup_r>:
 800aa88:	4b32      	ldr	r3, [pc, #200]	; (800ab54 <__swsetup_r+0xcc>)
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	681d      	ldr	r5, [r3, #0]
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	b125      	cbz	r5, 800aa9e <__swsetup_r+0x16>
 800aa94:	69ab      	ldr	r3, [r5, #24]
 800aa96:	b913      	cbnz	r3, 800aa9e <__swsetup_r+0x16>
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f000 f985 	bl	800ada8 <__sinit>
 800aa9e:	4b2e      	ldr	r3, [pc, #184]	; (800ab58 <__swsetup_r+0xd0>)
 800aaa0:	429c      	cmp	r4, r3
 800aaa2:	d10f      	bne.n	800aac4 <__swsetup_r+0x3c>
 800aaa4:	686c      	ldr	r4, [r5, #4]
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaac:	0719      	lsls	r1, r3, #28
 800aaae:	d42c      	bmi.n	800ab0a <__swsetup_r+0x82>
 800aab0:	06dd      	lsls	r5, r3, #27
 800aab2:	d411      	bmi.n	800aad8 <__swsetup_r+0x50>
 800aab4:	2309      	movs	r3, #9
 800aab6:	6033      	str	r3, [r6, #0]
 800aab8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	e03e      	b.n	800ab42 <__swsetup_r+0xba>
 800aac4:	4b25      	ldr	r3, [pc, #148]	; (800ab5c <__swsetup_r+0xd4>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	d101      	bne.n	800aace <__swsetup_r+0x46>
 800aaca:	68ac      	ldr	r4, [r5, #8]
 800aacc:	e7eb      	b.n	800aaa6 <__swsetup_r+0x1e>
 800aace:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <__swsetup_r+0xd8>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	bf08      	it	eq
 800aad4:	68ec      	ldreq	r4, [r5, #12]
 800aad6:	e7e6      	b.n	800aaa6 <__swsetup_r+0x1e>
 800aad8:	0758      	lsls	r0, r3, #29
 800aada:	d512      	bpl.n	800ab02 <__swsetup_r+0x7a>
 800aadc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aade:	b141      	cbz	r1, 800aaf2 <__swsetup_r+0x6a>
 800aae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aae4:	4299      	cmp	r1, r3
 800aae6:	d002      	beq.n	800aaee <__swsetup_r+0x66>
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff fb31 	bl	800a150 <_free_r>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	6363      	str	r3, [r4, #52]	; 0x34
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	2300      	movs	r3, #0
 800aafc:	6063      	str	r3, [r4, #4]
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f043 0308 	orr.w	r3, r3, #8
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	b94b      	cbnz	r3, 800ab22 <__swsetup_r+0x9a>
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab18:	d003      	beq.n	800ab22 <__swsetup_r+0x9a>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f000 fa09 	bl	800af34 <__smakebuf_r>
 800ab22:	89a0      	ldrh	r0, [r4, #12]
 800ab24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab28:	f010 0301 	ands.w	r3, r0, #1
 800ab2c:	d00a      	beq.n	800ab44 <__swsetup_r+0xbc>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	6963      	ldr	r3, [r4, #20]
 800ab34:	425b      	negs	r3, r3
 800ab36:	61a3      	str	r3, [r4, #24]
 800ab38:	6923      	ldr	r3, [r4, #16]
 800ab3a:	b943      	cbnz	r3, 800ab4e <__swsetup_r+0xc6>
 800ab3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab40:	d1ba      	bne.n	800aab8 <__swsetup_r+0x30>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	0781      	lsls	r1, r0, #30
 800ab46:	bf58      	it	pl
 800ab48:	6963      	ldrpl	r3, [r4, #20]
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	e7f4      	b.n	800ab38 <__swsetup_r+0xb0>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e7f7      	b.n	800ab42 <__swsetup_r+0xba>
 800ab52:	bf00      	nop
 800ab54:	200003e4 	.word	0x200003e4
 800ab58:	0800b6dc 	.word	0x0800b6dc
 800ab5c:	0800b6fc 	.word	0x0800b6fc
 800ab60:	0800b6bc 	.word	0x0800b6bc

0800ab64 <abort>:
 800ab64:	b508      	push	{r3, lr}
 800ab66:	2006      	movs	r0, #6
 800ab68:	f000 fa54 	bl	800b014 <raise>
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	f7f8 fbe7 	bl	8003340 <_exit>
	...

0800ab74 <__sflush_r>:
 800ab74:	898a      	ldrh	r2, [r1, #12]
 800ab76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	0710      	lsls	r0, r2, #28
 800ab7e:	460c      	mov	r4, r1
 800ab80:	d458      	bmi.n	800ac34 <__sflush_r+0xc0>
 800ab82:	684b      	ldr	r3, [r1, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dc05      	bgt.n	800ab94 <__sflush_r+0x20>
 800ab88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dc02      	bgt.n	800ab94 <__sflush_r+0x20>
 800ab8e:	2000      	movs	r0, #0
 800ab90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab96:	2e00      	cmp	r6, #0
 800ab98:	d0f9      	beq.n	800ab8e <__sflush_r+0x1a>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aba0:	682f      	ldr	r7, [r5, #0]
 800aba2:	602b      	str	r3, [r5, #0]
 800aba4:	d032      	beq.n	800ac0c <__sflush_r+0x98>
 800aba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	075a      	lsls	r2, r3, #29
 800abac:	d505      	bpl.n	800abba <__sflush_r+0x46>
 800abae:	6863      	ldr	r3, [r4, #4]
 800abb0:	1ac0      	subs	r0, r0, r3
 800abb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abb4:	b10b      	cbz	r3, 800abba <__sflush_r+0x46>
 800abb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abb8:	1ac0      	subs	r0, r0, r3
 800abba:	2300      	movs	r3, #0
 800abbc:	4602      	mov	r2, r0
 800abbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abc0:	6a21      	ldr	r1, [r4, #32]
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b0      	blx	r6
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	d106      	bne.n	800abda <__sflush_r+0x66>
 800abcc:	6829      	ldr	r1, [r5, #0]
 800abce:	291d      	cmp	r1, #29
 800abd0:	d82c      	bhi.n	800ac2c <__sflush_r+0xb8>
 800abd2:	4a2a      	ldr	r2, [pc, #168]	; (800ac7c <__sflush_r+0x108>)
 800abd4:	40ca      	lsrs	r2, r1
 800abd6:	07d6      	lsls	r6, r2, #31
 800abd8:	d528      	bpl.n	800ac2c <__sflush_r+0xb8>
 800abda:	2200      	movs	r2, #0
 800abdc:	6062      	str	r2, [r4, #4]
 800abde:	04d9      	lsls	r1, r3, #19
 800abe0:	6922      	ldr	r2, [r4, #16]
 800abe2:	6022      	str	r2, [r4, #0]
 800abe4:	d504      	bpl.n	800abf0 <__sflush_r+0x7c>
 800abe6:	1c42      	adds	r2, r0, #1
 800abe8:	d101      	bne.n	800abee <__sflush_r+0x7a>
 800abea:	682b      	ldr	r3, [r5, #0]
 800abec:	b903      	cbnz	r3, 800abf0 <__sflush_r+0x7c>
 800abee:	6560      	str	r0, [r4, #84]	; 0x54
 800abf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abf2:	602f      	str	r7, [r5, #0]
 800abf4:	2900      	cmp	r1, #0
 800abf6:	d0ca      	beq.n	800ab8e <__sflush_r+0x1a>
 800abf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abfc:	4299      	cmp	r1, r3
 800abfe:	d002      	beq.n	800ac06 <__sflush_r+0x92>
 800ac00:	4628      	mov	r0, r5
 800ac02:	f7ff faa5 	bl	800a150 <_free_r>
 800ac06:	2000      	movs	r0, #0
 800ac08:	6360      	str	r0, [r4, #52]	; 0x34
 800ac0a:	e7c1      	b.n	800ab90 <__sflush_r+0x1c>
 800ac0c:	6a21      	ldr	r1, [r4, #32]
 800ac0e:	2301      	movs	r3, #1
 800ac10:	4628      	mov	r0, r5
 800ac12:	47b0      	blx	r6
 800ac14:	1c41      	adds	r1, r0, #1
 800ac16:	d1c7      	bne.n	800aba8 <__sflush_r+0x34>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0c4      	beq.n	800aba8 <__sflush_r+0x34>
 800ac1e:	2b1d      	cmp	r3, #29
 800ac20:	d001      	beq.n	800ac26 <__sflush_r+0xb2>
 800ac22:	2b16      	cmp	r3, #22
 800ac24:	d101      	bne.n	800ac2a <__sflush_r+0xb6>
 800ac26:	602f      	str	r7, [r5, #0]
 800ac28:	e7b1      	b.n	800ab8e <__sflush_r+0x1a>
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	e7ad      	b.n	800ab90 <__sflush_r+0x1c>
 800ac34:	690f      	ldr	r7, [r1, #16]
 800ac36:	2f00      	cmp	r7, #0
 800ac38:	d0a9      	beq.n	800ab8e <__sflush_r+0x1a>
 800ac3a:	0793      	lsls	r3, r2, #30
 800ac3c:	680e      	ldr	r6, [r1, #0]
 800ac3e:	bf08      	it	eq
 800ac40:	694b      	ldreq	r3, [r1, #20]
 800ac42:	600f      	str	r7, [r1, #0]
 800ac44:	bf18      	it	ne
 800ac46:	2300      	movne	r3, #0
 800ac48:	eba6 0807 	sub.w	r8, r6, r7
 800ac4c:	608b      	str	r3, [r1, #8]
 800ac4e:	f1b8 0f00 	cmp.w	r8, #0
 800ac52:	dd9c      	ble.n	800ab8e <__sflush_r+0x1a>
 800ac54:	6a21      	ldr	r1, [r4, #32]
 800ac56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac58:	4643      	mov	r3, r8
 800ac5a:	463a      	mov	r2, r7
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	47b0      	blx	r6
 800ac60:	2800      	cmp	r0, #0
 800ac62:	dc06      	bgt.n	800ac72 <__sflush_r+0xfe>
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	e78e      	b.n	800ab90 <__sflush_r+0x1c>
 800ac72:	4407      	add	r7, r0
 800ac74:	eba8 0800 	sub.w	r8, r8, r0
 800ac78:	e7e9      	b.n	800ac4e <__sflush_r+0xda>
 800ac7a:	bf00      	nop
 800ac7c:	20400001 	.word	0x20400001

0800ac80 <_fflush_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	690b      	ldr	r3, [r1, #16]
 800ac84:	4605      	mov	r5, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	b913      	cbnz	r3, 800ac90 <_fflush_r+0x10>
 800ac8a:	2500      	movs	r5, #0
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	bd38      	pop	{r3, r4, r5, pc}
 800ac90:	b118      	cbz	r0, 800ac9a <_fflush_r+0x1a>
 800ac92:	6983      	ldr	r3, [r0, #24]
 800ac94:	b90b      	cbnz	r3, 800ac9a <_fflush_r+0x1a>
 800ac96:	f000 f887 	bl	800ada8 <__sinit>
 800ac9a:	4b14      	ldr	r3, [pc, #80]	; (800acec <_fflush_r+0x6c>)
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	d11b      	bne.n	800acd8 <_fflush_r+0x58>
 800aca0:	686c      	ldr	r4, [r5, #4]
 800aca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0ef      	beq.n	800ac8a <_fflush_r+0xa>
 800acaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acac:	07d0      	lsls	r0, r2, #31
 800acae:	d404      	bmi.n	800acba <_fflush_r+0x3a>
 800acb0:	0599      	lsls	r1, r3, #22
 800acb2:	d402      	bmi.n	800acba <_fflush_r+0x3a>
 800acb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acb6:	f000 f915 	bl	800aee4 <__retarget_lock_acquire_recursive>
 800acba:	4628      	mov	r0, r5
 800acbc:	4621      	mov	r1, r4
 800acbe:	f7ff ff59 	bl	800ab74 <__sflush_r>
 800acc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acc4:	07da      	lsls	r2, r3, #31
 800acc6:	4605      	mov	r5, r0
 800acc8:	d4e0      	bmi.n	800ac8c <_fflush_r+0xc>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	059b      	lsls	r3, r3, #22
 800acce:	d4dd      	bmi.n	800ac8c <_fflush_r+0xc>
 800acd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acd2:	f000 f908 	bl	800aee6 <__retarget_lock_release_recursive>
 800acd6:	e7d9      	b.n	800ac8c <_fflush_r+0xc>
 800acd8:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <_fflush_r+0x70>)
 800acda:	429c      	cmp	r4, r3
 800acdc:	d101      	bne.n	800ace2 <_fflush_r+0x62>
 800acde:	68ac      	ldr	r4, [r5, #8]
 800ace0:	e7df      	b.n	800aca2 <_fflush_r+0x22>
 800ace2:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <_fflush_r+0x74>)
 800ace4:	429c      	cmp	r4, r3
 800ace6:	bf08      	it	eq
 800ace8:	68ec      	ldreq	r4, [r5, #12]
 800acea:	e7da      	b.n	800aca2 <_fflush_r+0x22>
 800acec:	0800b6dc 	.word	0x0800b6dc
 800acf0:	0800b6fc 	.word	0x0800b6fc
 800acf4:	0800b6bc 	.word	0x0800b6bc

0800acf8 <std>:
 800acf8:	2300      	movs	r3, #0
 800acfa:	b510      	push	{r4, lr}
 800acfc:	4604      	mov	r4, r0
 800acfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ad02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad06:	6083      	str	r3, [r0, #8]
 800ad08:	8181      	strh	r1, [r0, #12]
 800ad0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad0c:	81c2      	strh	r2, [r0, #14]
 800ad0e:	6183      	str	r3, [r0, #24]
 800ad10:	4619      	mov	r1, r3
 800ad12:	2208      	movs	r2, #8
 800ad14:	305c      	adds	r0, #92	; 0x5c
 800ad16:	f7fd fb69 	bl	80083ec <memset>
 800ad1a:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <std+0x38>)
 800ad1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad1e:	4b05      	ldr	r3, [pc, #20]	; (800ad34 <std+0x3c>)
 800ad20:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad22:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <std+0x40>)
 800ad24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad26:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <std+0x44>)
 800ad28:	6224      	str	r4, [r4, #32]
 800ad2a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad2c:	bd10      	pop	{r4, pc}
 800ad2e:	bf00      	nop
 800ad30:	0800b04d 	.word	0x0800b04d
 800ad34:	0800b06f 	.word	0x0800b06f
 800ad38:	0800b0a7 	.word	0x0800b0a7
 800ad3c:	0800b0cb 	.word	0x0800b0cb

0800ad40 <_cleanup_r>:
 800ad40:	4901      	ldr	r1, [pc, #4]	; (800ad48 <_cleanup_r+0x8>)
 800ad42:	f000 b8af 	b.w	800aea4 <_fwalk_reent>
 800ad46:	bf00      	nop
 800ad48:	0800ac81 	.word	0x0800ac81

0800ad4c <__sfmoreglue>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	2268      	movs	r2, #104	; 0x68
 800ad50:	1e4d      	subs	r5, r1, #1
 800ad52:	4355      	muls	r5, r2
 800ad54:	460e      	mov	r6, r1
 800ad56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad5a:	f7ff fa65 	bl	800a228 <_malloc_r>
 800ad5e:	4604      	mov	r4, r0
 800ad60:	b140      	cbz	r0, 800ad74 <__sfmoreglue+0x28>
 800ad62:	2100      	movs	r1, #0
 800ad64:	e9c0 1600 	strd	r1, r6, [r0]
 800ad68:	300c      	adds	r0, #12
 800ad6a:	60a0      	str	r0, [r4, #8]
 800ad6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad70:	f7fd fb3c 	bl	80083ec <memset>
 800ad74:	4620      	mov	r0, r4
 800ad76:	bd70      	pop	{r4, r5, r6, pc}

0800ad78 <__sfp_lock_acquire>:
 800ad78:	4801      	ldr	r0, [pc, #4]	; (800ad80 <__sfp_lock_acquire+0x8>)
 800ad7a:	f000 b8b3 	b.w	800aee4 <__retarget_lock_acquire_recursive>
 800ad7e:	bf00      	nop
 800ad80:	200080e1 	.word	0x200080e1

0800ad84 <__sfp_lock_release>:
 800ad84:	4801      	ldr	r0, [pc, #4]	; (800ad8c <__sfp_lock_release+0x8>)
 800ad86:	f000 b8ae 	b.w	800aee6 <__retarget_lock_release_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	200080e1 	.word	0x200080e1

0800ad90 <__sinit_lock_acquire>:
 800ad90:	4801      	ldr	r0, [pc, #4]	; (800ad98 <__sinit_lock_acquire+0x8>)
 800ad92:	f000 b8a7 	b.w	800aee4 <__retarget_lock_acquire_recursive>
 800ad96:	bf00      	nop
 800ad98:	200080e2 	.word	0x200080e2

0800ad9c <__sinit_lock_release>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	; (800ada4 <__sinit_lock_release+0x8>)
 800ad9e:	f000 b8a2 	b.w	800aee6 <__retarget_lock_release_recursive>
 800ada2:	bf00      	nop
 800ada4:	200080e2 	.word	0x200080e2

0800ada8 <__sinit>:
 800ada8:	b510      	push	{r4, lr}
 800adaa:	4604      	mov	r4, r0
 800adac:	f7ff fff0 	bl	800ad90 <__sinit_lock_acquire>
 800adb0:	69a3      	ldr	r3, [r4, #24]
 800adb2:	b11b      	cbz	r3, 800adbc <__sinit+0x14>
 800adb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adb8:	f7ff bff0 	b.w	800ad9c <__sinit_lock_release>
 800adbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800adc0:	6523      	str	r3, [r4, #80]	; 0x50
 800adc2:	4b13      	ldr	r3, [pc, #76]	; (800ae10 <__sinit+0x68>)
 800adc4:	4a13      	ldr	r2, [pc, #76]	; (800ae14 <__sinit+0x6c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800adca:	42a3      	cmp	r3, r4
 800adcc:	bf04      	itt	eq
 800adce:	2301      	moveq	r3, #1
 800add0:	61a3      	streq	r3, [r4, #24]
 800add2:	4620      	mov	r0, r4
 800add4:	f000 f820 	bl	800ae18 <__sfp>
 800add8:	6060      	str	r0, [r4, #4]
 800adda:	4620      	mov	r0, r4
 800addc:	f000 f81c 	bl	800ae18 <__sfp>
 800ade0:	60a0      	str	r0, [r4, #8]
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 f818 	bl	800ae18 <__sfp>
 800ade8:	2200      	movs	r2, #0
 800adea:	60e0      	str	r0, [r4, #12]
 800adec:	2104      	movs	r1, #4
 800adee:	6860      	ldr	r0, [r4, #4]
 800adf0:	f7ff ff82 	bl	800acf8 <std>
 800adf4:	68a0      	ldr	r0, [r4, #8]
 800adf6:	2201      	movs	r2, #1
 800adf8:	2109      	movs	r1, #9
 800adfa:	f7ff ff7d 	bl	800acf8 <std>
 800adfe:	68e0      	ldr	r0, [r4, #12]
 800ae00:	2202      	movs	r2, #2
 800ae02:	2112      	movs	r1, #18
 800ae04:	f7ff ff78 	bl	800acf8 <std>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	61a3      	str	r3, [r4, #24]
 800ae0c:	e7d2      	b.n	800adb4 <__sinit+0xc>
 800ae0e:	bf00      	nop
 800ae10:	0800b344 	.word	0x0800b344
 800ae14:	0800ad41 	.word	0x0800ad41

0800ae18 <__sfp>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	4607      	mov	r7, r0
 800ae1c:	f7ff ffac 	bl	800ad78 <__sfp_lock_acquire>
 800ae20:	4b1e      	ldr	r3, [pc, #120]	; (800ae9c <__sfp+0x84>)
 800ae22:	681e      	ldr	r6, [r3, #0]
 800ae24:	69b3      	ldr	r3, [r6, #24]
 800ae26:	b913      	cbnz	r3, 800ae2e <__sfp+0x16>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f7ff ffbd 	bl	800ada8 <__sinit>
 800ae2e:	3648      	adds	r6, #72	; 0x48
 800ae30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	d503      	bpl.n	800ae40 <__sfp+0x28>
 800ae38:	6833      	ldr	r3, [r6, #0]
 800ae3a:	b30b      	cbz	r3, 800ae80 <__sfp+0x68>
 800ae3c:	6836      	ldr	r6, [r6, #0]
 800ae3e:	e7f7      	b.n	800ae30 <__sfp+0x18>
 800ae40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae44:	b9d5      	cbnz	r5, 800ae7c <__sfp+0x64>
 800ae46:	4b16      	ldr	r3, [pc, #88]	; (800aea0 <__sfp+0x88>)
 800ae48:	60e3      	str	r3, [r4, #12]
 800ae4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae4e:	6665      	str	r5, [r4, #100]	; 0x64
 800ae50:	f000 f847 	bl	800aee2 <__retarget_lock_init_recursive>
 800ae54:	f7ff ff96 	bl	800ad84 <__sfp_lock_release>
 800ae58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae60:	6025      	str	r5, [r4, #0]
 800ae62:	61a5      	str	r5, [r4, #24]
 800ae64:	2208      	movs	r2, #8
 800ae66:	4629      	mov	r1, r5
 800ae68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae6c:	f7fd fabe 	bl	80083ec <memset>
 800ae70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae78:	4620      	mov	r0, r4
 800ae7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae7c:	3468      	adds	r4, #104	; 0x68
 800ae7e:	e7d9      	b.n	800ae34 <__sfp+0x1c>
 800ae80:	2104      	movs	r1, #4
 800ae82:	4638      	mov	r0, r7
 800ae84:	f7ff ff62 	bl	800ad4c <__sfmoreglue>
 800ae88:	4604      	mov	r4, r0
 800ae8a:	6030      	str	r0, [r6, #0]
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d1d5      	bne.n	800ae3c <__sfp+0x24>
 800ae90:	f7ff ff78 	bl	800ad84 <__sfp_lock_release>
 800ae94:	230c      	movs	r3, #12
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	e7ee      	b.n	800ae78 <__sfp+0x60>
 800ae9a:	bf00      	nop
 800ae9c:	0800b344 	.word	0x0800b344
 800aea0:	ffff0001 	.word	0xffff0001

0800aea4 <_fwalk_reent>:
 800aea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea8:	4606      	mov	r6, r0
 800aeaa:	4688      	mov	r8, r1
 800aeac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aeb0:	2700      	movs	r7, #0
 800aeb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aeb6:	f1b9 0901 	subs.w	r9, r9, #1
 800aeba:	d505      	bpl.n	800aec8 <_fwalk_reent+0x24>
 800aebc:	6824      	ldr	r4, [r4, #0]
 800aebe:	2c00      	cmp	r4, #0
 800aec0:	d1f7      	bne.n	800aeb2 <_fwalk_reent+0xe>
 800aec2:	4638      	mov	r0, r7
 800aec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aec8:	89ab      	ldrh	r3, [r5, #12]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d907      	bls.n	800aede <_fwalk_reent+0x3a>
 800aece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aed2:	3301      	adds	r3, #1
 800aed4:	d003      	beq.n	800aede <_fwalk_reent+0x3a>
 800aed6:	4629      	mov	r1, r5
 800aed8:	4630      	mov	r0, r6
 800aeda:	47c0      	blx	r8
 800aedc:	4307      	orrs	r7, r0
 800aede:	3568      	adds	r5, #104	; 0x68
 800aee0:	e7e9      	b.n	800aeb6 <_fwalk_reent+0x12>

0800aee2 <__retarget_lock_init_recursive>:
 800aee2:	4770      	bx	lr

0800aee4 <__retarget_lock_acquire_recursive>:
 800aee4:	4770      	bx	lr

0800aee6 <__retarget_lock_release_recursive>:
 800aee6:	4770      	bx	lr

0800aee8 <__swhatbuf_r>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	460e      	mov	r6, r1
 800aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef0:	2900      	cmp	r1, #0
 800aef2:	b096      	sub	sp, #88	; 0x58
 800aef4:	4614      	mov	r4, r2
 800aef6:	461d      	mov	r5, r3
 800aef8:	da08      	bge.n	800af0c <__swhatbuf_r+0x24>
 800aefa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	602a      	str	r2, [r5, #0]
 800af02:	061a      	lsls	r2, r3, #24
 800af04:	d410      	bmi.n	800af28 <__swhatbuf_r+0x40>
 800af06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af0a:	e00e      	b.n	800af2a <__swhatbuf_r+0x42>
 800af0c:	466a      	mov	r2, sp
 800af0e:	f000 f903 	bl	800b118 <_fstat_r>
 800af12:	2800      	cmp	r0, #0
 800af14:	dbf1      	blt.n	800aefa <__swhatbuf_r+0x12>
 800af16:	9a01      	ldr	r2, [sp, #4]
 800af18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af20:	425a      	negs	r2, r3
 800af22:	415a      	adcs	r2, r3
 800af24:	602a      	str	r2, [r5, #0]
 800af26:	e7ee      	b.n	800af06 <__swhatbuf_r+0x1e>
 800af28:	2340      	movs	r3, #64	; 0x40
 800af2a:	2000      	movs	r0, #0
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	b016      	add	sp, #88	; 0x58
 800af30:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af34 <__smakebuf_r>:
 800af34:	898b      	ldrh	r3, [r1, #12]
 800af36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af38:	079d      	lsls	r5, r3, #30
 800af3a:	4606      	mov	r6, r0
 800af3c:	460c      	mov	r4, r1
 800af3e:	d507      	bpl.n	800af50 <__smakebuf_r+0x1c>
 800af40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	6123      	str	r3, [r4, #16]
 800af48:	2301      	movs	r3, #1
 800af4a:	6163      	str	r3, [r4, #20]
 800af4c:	b002      	add	sp, #8
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	ab01      	add	r3, sp, #4
 800af52:	466a      	mov	r2, sp
 800af54:	f7ff ffc8 	bl	800aee8 <__swhatbuf_r>
 800af58:	9900      	ldr	r1, [sp, #0]
 800af5a:	4605      	mov	r5, r0
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7ff f963 	bl	800a228 <_malloc_r>
 800af62:	b948      	cbnz	r0, 800af78 <__smakebuf_r+0x44>
 800af64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af68:	059a      	lsls	r2, r3, #22
 800af6a:	d4ef      	bmi.n	800af4c <__smakebuf_r+0x18>
 800af6c:	f023 0303 	bic.w	r3, r3, #3
 800af70:	f043 0302 	orr.w	r3, r3, #2
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	e7e3      	b.n	800af40 <__smakebuf_r+0xc>
 800af78:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <__smakebuf_r+0x7c>)
 800af7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	6020      	str	r0, [r4, #0]
 800af80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af84:	81a3      	strh	r3, [r4, #12]
 800af86:	9b00      	ldr	r3, [sp, #0]
 800af88:	6163      	str	r3, [r4, #20]
 800af8a:	9b01      	ldr	r3, [sp, #4]
 800af8c:	6120      	str	r0, [r4, #16]
 800af8e:	b15b      	cbz	r3, 800afa8 <__smakebuf_r+0x74>
 800af90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af94:	4630      	mov	r0, r6
 800af96:	f000 f8d1 	bl	800b13c <_isatty_r>
 800af9a:	b128      	cbz	r0, 800afa8 <__smakebuf_r+0x74>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f023 0303 	bic.w	r3, r3, #3
 800afa2:	f043 0301 	orr.w	r3, r3, #1
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	89a0      	ldrh	r0, [r4, #12]
 800afaa:	4305      	orrs	r5, r0
 800afac:	81a5      	strh	r5, [r4, #12]
 800afae:	e7cd      	b.n	800af4c <__smakebuf_r+0x18>
 800afb0:	0800ad41 	.word	0x0800ad41

0800afb4 <_malloc_usable_size_r>:
 800afb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb8:	1f18      	subs	r0, r3, #4
 800afba:	2b00      	cmp	r3, #0
 800afbc:	bfbc      	itt	lt
 800afbe:	580b      	ldrlt	r3, [r1, r0]
 800afc0:	18c0      	addlt	r0, r0, r3
 800afc2:	4770      	bx	lr

0800afc4 <_raise_r>:
 800afc4:	291f      	cmp	r1, #31
 800afc6:	b538      	push	{r3, r4, r5, lr}
 800afc8:	4604      	mov	r4, r0
 800afca:	460d      	mov	r5, r1
 800afcc:	d904      	bls.n	800afd8 <_raise_r+0x14>
 800afce:	2316      	movs	r3, #22
 800afd0:	6003      	str	r3, [r0, #0]
 800afd2:	f04f 30ff 	mov.w	r0, #4294967295
 800afd6:	bd38      	pop	{r3, r4, r5, pc}
 800afd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afda:	b112      	cbz	r2, 800afe2 <_raise_r+0x1e>
 800afdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afe0:	b94b      	cbnz	r3, 800aff6 <_raise_r+0x32>
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 f830 	bl	800b048 <_getpid_r>
 800afe8:	462a      	mov	r2, r5
 800afea:	4601      	mov	r1, r0
 800afec:	4620      	mov	r0, r4
 800afee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aff2:	f000 b817 	b.w	800b024 <_kill_r>
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d00a      	beq.n	800b010 <_raise_r+0x4c>
 800affa:	1c59      	adds	r1, r3, #1
 800affc:	d103      	bne.n	800b006 <_raise_r+0x42>
 800affe:	2316      	movs	r3, #22
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	2001      	movs	r0, #1
 800b004:	e7e7      	b.n	800afd6 <_raise_r+0x12>
 800b006:	2400      	movs	r4, #0
 800b008:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b00c:	4628      	mov	r0, r5
 800b00e:	4798      	blx	r3
 800b010:	2000      	movs	r0, #0
 800b012:	e7e0      	b.n	800afd6 <_raise_r+0x12>

0800b014 <raise>:
 800b014:	4b02      	ldr	r3, [pc, #8]	; (800b020 <raise+0xc>)
 800b016:	4601      	mov	r1, r0
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	f7ff bfd3 	b.w	800afc4 <_raise_r>
 800b01e:	bf00      	nop
 800b020:	200003e4 	.word	0x200003e4

0800b024 <_kill_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4d07      	ldr	r5, [pc, #28]	; (800b044 <_kill_r+0x20>)
 800b028:	2300      	movs	r3, #0
 800b02a:	4604      	mov	r4, r0
 800b02c:	4608      	mov	r0, r1
 800b02e:	4611      	mov	r1, r2
 800b030:	602b      	str	r3, [r5, #0]
 800b032:	f7f8 f975 	bl	8003320 <_kill>
 800b036:	1c43      	adds	r3, r0, #1
 800b038:	d102      	bne.n	800b040 <_kill_r+0x1c>
 800b03a:	682b      	ldr	r3, [r5, #0]
 800b03c:	b103      	cbz	r3, 800b040 <_kill_r+0x1c>
 800b03e:	6023      	str	r3, [r4, #0]
 800b040:	bd38      	pop	{r3, r4, r5, pc}
 800b042:	bf00      	nop
 800b044:	200080dc 	.word	0x200080dc

0800b048 <_getpid_r>:
 800b048:	f7f8 b962 	b.w	8003310 <_getpid>

0800b04c <__sread>:
 800b04c:	b510      	push	{r4, lr}
 800b04e:	460c      	mov	r4, r1
 800b050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b054:	f000 f894 	bl	800b180 <_read_r>
 800b058:	2800      	cmp	r0, #0
 800b05a:	bfab      	itete	ge
 800b05c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b05e:	89a3      	ldrhlt	r3, [r4, #12]
 800b060:	181b      	addge	r3, r3, r0
 800b062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b066:	bfac      	ite	ge
 800b068:	6563      	strge	r3, [r4, #84]	; 0x54
 800b06a:	81a3      	strhlt	r3, [r4, #12]
 800b06c:	bd10      	pop	{r4, pc}

0800b06e <__swrite>:
 800b06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b072:	461f      	mov	r7, r3
 800b074:	898b      	ldrh	r3, [r1, #12]
 800b076:	05db      	lsls	r3, r3, #23
 800b078:	4605      	mov	r5, r0
 800b07a:	460c      	mov	r4, r1
 800b07c:	4616      	mov	r6, r2
 800b07e:	d505      	bpl.n	800b08c <__swrite+0x1e>
 800b080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b084:	2302      	movs	r3, #2
 800b086:	2200      	movs	r2, #0
 800b088:	f000 f868 	bl	800b15c <_lseek_r>
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b096:	81a3      	strh	r3, [r4, #12]
 800b098:	4632      	mov	r2, r6
 800b09a:	463b      	mov	r3, r7
 800b09c:	4628      	mov	r0, r5
 800b09e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a2:	f000 b817 	b.w	800b0d4 <_write_r>

0800b0a6 <__sseek>:
 800b0a6:	b510      	push	{r4, lr}
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ae:	f000 f855 	bl	800b15c <_lseek_r>
 800b0b2:	1c43      	adds	r3, r0, #1
 800b0b4:	89a3      	ldrh	r3, [r4, #12]
 800b0b6:	bf15      	itete	ne
 800b0b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0c2:	81a3      	strheq	r3, [r4, #12]
 800b0c4:	bf18      	it	ne
 800b0c6:	81a3      	strhne	r3, [r4, #12]
 800b0c8:	bd10      	pop	{r4, pc}

0800b0ca <__sclose>:
 800b0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ce:	f000 b813 	b.w	800b0f8 <_close_r>
	...

0800b0d4 <_write_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	4d07      	ldr	r5, [pc, #28]	; (800b0f4 <_write_r+0x20>)
 800b0d8:	4604      	mov	r4, r0
 800b0da:	4608      	mov	r0, r1
 800b0dc:	4611      	mov	r1, r2
 800b0de:	2200      	movs	r2, #0
 800b0e0:	602a      	str	r2, [r5, #0]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f7f8 f953 	bl	800338e <_write>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d102      	bne.n	800b0f2 <_write_r+0x1e>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	b103      	cbz	r3, 800b0f2 <_write_r+0x1e>
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	200080dc 	.word	0x200080dc

0800b0f8 <_close_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4d06      	ldr	r5, [pc, #24]	; (800b114 <_close_r+0x1c>)
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4604      	mov	r4, r0
 800b100:	4608      	mov	r0, r1
 800b102:	602b      	str	r3, [r5, #0]
 800b104:	f7f8 f95f 	bl	80033c6 <_close>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d102      	bne.n	800b112 <_close_r+0x1a>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	b103      	cbz	r3, 800b112 <_close_r+0x1a>
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	200080dc 	.word	0x200080dc

0800b118 <_fstat_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4d07      	ldr	r5, [pc, #28]	; (800b138 <_fstat_r+0x20>)
 800b11c:	2300      	movs	r3, #0
 800b11e:	4604      	mov	r4, r0
 800b120:	4608      	mov	r0, r1
 800b122:	4611      	mov	r1, r2
 800b124:	602b      	str	r3, [r5, #0]
 800b126:	f7f8 f95a 	bl	80033de <_fstat>
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	d102      	bne.n	800b134 <_fstat_r+0x1c>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	b103      	cbz	r3, 800b134 <_fstat_r+0x1c>
 800b132:	6023      	str	r3, [r4, #0]
 800b134:	bd38      	pop	{r3, r4, r5, pc}
 800b136:	bf00      	nop
 800b138:	200080dc 	.word	0x200080dc

0800b13c <_isatty_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d06      	ldr	r5, [pc, #24]	; (800b158 <_isatty_r+0x1c>)
 800b140:	2300      	movs	r3, #0
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	f7f8 f959 	bl	80033fe <_isatty>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d102      	bne.n	800b156 <_isatty_r+0x1a>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	b103      	cbz	r3, 800b156 <_isatty_r+0x1a>
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	200080dc 	.word	0x200080dc

0800b15c <_lseek_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d07      	ldr	r5, [pc, #28]	; (800b17c <_lseek_r+0x20>)
 800b160:	4604      	mov	r4, r0
 800b162:	4608      	mov	r0, r1
 800b164:	4611      	mov	r1, r2
 800b166:	2200      	movs	r2, #0
 800b168:	602a      	str	r2, [r5, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f7f8 f952 	bl	8003414 <_lseek>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_lseek_r+0x1e>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b103      	cbz	r3, 800b17a <_lseek_r+0x1e>
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	200080dc 	.word	0x200080dc

0800b180 <_read_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d07      	ldr	r5, [pc, #28]	; (800b1a0 <_read_r+0x20>)
 800b184:	4604      	mov	r4, r0
 800b186:	4608      	mov	r0, r1
 800b188:	4611      	mov	r1, r2
 800b18a:	2200      	movs	r2, #0
 800b18c:	602a      	str	r2, [r5, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	f7f8 f8e0 	bl	8003354 <_read>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_read_r+0x1e>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_read_r+0x1e>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	200080dc 	.word	0x200080dc

0800b1a4 <_init>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	bf00      	nop
 800b1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1aa:	bc08      	pop	{r3}
 800b1ac:	469e      	mov	lr, r3
 800b1ae:	4770      	bx	lr

0800b1b0 <_fini>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr
